
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000276  00800200  00002c5e  00002cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e0  00800476  00800476  00002f68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027d9  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001060  00000000  00000000  000059a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd7  00000000  00000000  00006a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  000086dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b87  00000000  00000000  00008ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000123e  00000000  00000000  0000986f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000aaad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_5>
      18:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_25>
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_51>
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 09       	sbc	r22, r4
      e6:	b1 09       	sbc	r27, r1
      e8:	74 09       	sbc	r23, r4
      ea:	80 09       	sbc	r24, r0
      ec:	83 09       	sbc	r24, r3
      ee:	86 09       	sbc	r24, r6
      f0:	90 09       	sbc	r25, r0
      f2:	9a 09       	sbc	r25, r10
      f4:	a0 09       	sbc	r26, r0
      f6:	a3 09       	sbc	r26, r3

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	14 e0       	ldi	r17, 0x04	; 4
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ee e5       	ldi	r30, 0x5E	; 94
     110:	fc e2       	ldi	r31, 0x2C	; 44
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a6 37       	cpi	r26, 0x76	; 118
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	28 e0       	ldi	r18, 0x08	; 8
     124:	a6 e7       	ldi	r26, 0x76	; 118
     126:	b4 e0       	ldi	r27, 0x04	; 4
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a6 35       	cpi	r26, 0x56	; 86
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <main>
     136:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <uart_putchar>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     13c:	e0 ed       	ldi	r30, 0xD0	; 208
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	90 81       	ld	r25, Z
     142:	95 ff       	sbrs	r25, 5
     144:	fd cf       	rjmp	.-6      	; 0x140 <uart_putchar+0x4>
     146:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     14a:	08 95       	ret

0000014c <lcd_port_config>:
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	87 6f       	ori	r24, 0xF7	; 247
     150:	87 b9       	out	0x07, r24	; 7
     152:	88 b1       	in	r24, 0x08	; 8
     154:	80 78       	andi	r24, 0x80	; 128
     156:	88 b9       	out	0x08, r24	; 8
     158:	08 95       	ret

0000015a <lcd_set_4bit>:
     15a:	86 e6       	ldi	r24, 0x66	; 102
     15c:	9e e0       	ldi	r25, 0x0E	; 14
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x4>
     162:	00 00       	nop
     164:	40 98       	cbi	0x08, 0	; 8
     166:	41 98       	cbi	0x08, 1	; 8
     168:	80 e3       	ldi	r24, 0x30	; 48
     16a:	88 b9       	out	0x08, r24	; 8
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	ef ef       	ldi	r30, 0xFF	; 255
     170:	f7 e4       	ldi	r31, 0x47	; 71
     172:	31 97       	sbiw	r30, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <lcd_set_4bit+0x18>
     176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_set_4bit+0x1e>
     178:	00 00       	nop
     17a:	42 98       	cbi	0x08, 2	; 8
     17c:	e6 e6       	ldi	r30, 0x66	; 102
     17e:	fe e0       	ldi	r31, 0x0E	; 14
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x26>
     184:	00 00       	nop
     186:	40 98       	cbi	0x08, 0	; 8
     188:	41 98       	cbi	0x08, 1	; 8
     18a:	88 b9       	out	0x08, r24	; 8
     18c:	42 9a       	sbi	0x08, 2	; 8
     18e:	ef ef       	ldi	r30, 0xFF	; 255
     190:	f7 e4       	ldi	r31, 0x47	; 71
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x38>
     196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_set_4bit+0x3e>
     198:	00 00       	nop
     19a:	42 98       	cbi	0x08, 2	; 8
     19c:	e6 e6       	ldi	r30, 0x66	; 102
     19e:	fe e0       	ldi	r31, 0x0E	; 14
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_set_4bit+0x46>
     1a4:	00 00       	nop
     1a6:	40 98       	cbi	0x08, 0	; 8
     1a8:	41 98       	cbi	0x08, 1	; 8
     1aa:	88 b9       	out	0x08, r24	; 8
     1ac:	42 9a       	sbi	0x08, 2	; 8
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	97 e4       	ldi	r25, 0x47	; 71
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x58>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_set_4bit+0x5e>
     1b8:	00 00       	nop
     1ba:	42 98       	cbi	0x08, 2	; 8
     1bc:	e6 e6       	ldi	r30, 0x66	; 102
     1be:	fe e0       	ldi	r31, 0x0E	; 14
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_set_4bit+0x66>
     1c4:	00 00       	nop
     1c6:	40 98       	cbi	0x08, 0	; 8
     1c8:	41 98       	cbi	0x08, 1	; 8
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	88 b9       	out	0x08, r24	; 8
     1ce:	42 9a       	sbi	0x08, 2	; 8
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	97 e4       	ldi	r25, 0x47	; 71
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_set_4bit+0x7a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_set_4bit+0x80>
     1da:	00 00       	nop
     1dc:	42 98       	cbi	0x08, 2	; 8
     1de:	08 95       	ret

000001e0 <lcd_wr_command>:
     1e0:	98 b1       	in	r25, 0x08	; 8
     1e2:	9f 70       	andi	r25, 0x0F	; 15
     1e4:	98 b9       	out	0x08, r25	; 8
     1e6:	98 b1       	in	r25, 0x08	; 8
     1e8:	28 2f       	mov	r18, r24
     1ea:	20 7f       	andi	r18, 0xF0	; 240
     1ec:	92 2b       	or	r25, r18
     1ee:	98 b9       	out	0x08, r25	; 8
     1f0:	40 98       	cbi	0x08, 0	; 8
     1f2:	41 98       	cbi	0x08, 1	; 8
     1f4:	42 9a       	sbi	0x08, 2	; 8
     1f6:	ef ef       	ldi	r30, 0xFF	; 255
     1f8:	f7 e4       	ldi	r31, 0x47	; 71
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_wr_command+0x1a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_wr_command+0x20>
     200:	00 00       	nop
     202:	42 98       	cbi	0x08, 2	; 8
     204:	98 b1       	in	r25, 0x08	; 8
     206:	9f 70       	andi	r25, 0x0F	; 15
     208:	98 b9       	out	0x08, r25	; 8
     20a:	98 b1       	in	r25, 0x08	; 8
     20c:	82 95       	swap	r24
     20e:	80 7f       	andi	r24, 0xF0	; 240
     210:	89 2b       	or	r24, r25
     212:	88 b9       	out	0x08, r24	; 8
     214:	40 98       	cbi	0x08, 0	; 8
     216:	41 98       	cbi	0x08, 1	; 8
     218:	42 9a       	sbi	0x08, 2	; 8
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	97 e4       	ldi	r25, 0x47	; 71
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <lcd_wr_command+0x3e>
     222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_wr_command+0x44>
     224:	00 00       	nop
     226:	42 98       	cbi	0x08, 2	; 8
     228:	08 95       	ret

0000022a <lcd_wr_char>:
     22a:	98 b1       	in	r25, 0x08	; 8
     22c:	9f 70       	andi	r25, 0x0F	; 15
     22e:	98 b9       	out	0x08, r25	; 8
     230:	98 b1       	in	r25, 0x08	; 8
     232:	28 2f       	mov	r18, r24
     234:	20 7f       	andi	r18, 0xF0	; 240
     236:	92 2b       	or	r25, r18
     238:	98 b9       	out	0x08, r25	; 8
     23a:	40 9a       	sbi	0x08, 0	; 8
     23c:	41 98       	cbi	0x08, 1	; 8
     23e:	42 9a       	sbi	0x08, 2	; 8
     240:	ef ef       	ldi	r30, 0xFF	; 255
     242:	f7 e4       	ldi	r31, 0x47	; 71
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_wr_char+0x1a>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_wr_char+0x20>
     24a:	00 00       	nop
     24c:	42 98       	cbi	0x08, 2	; 8
     24e:	98 b1       	in	r25, 0x08	; 8
     250:	9f 70       	andi	r25, 0x0F	; 15
     252:	98 b9       	out	0x08, r25	; 8
     254:	98 b1       	in	r25, 0x08	; 8
     256:	82 95       	swap	r24
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	89 2b       	or	r24, r25
     25c:	88 b9       	out	0x08, r24	; 8
     25e:	40 9a       	sbi	0x08, 0	; 8
     260:	41 98       	cbi	0x08, 1	; 8
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	97 e4       	ldi	r25, 0x47	; 71
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_wr_char+0x3e>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_wr_char+0x44>
     26e:	00 00       	nop
     270:	42 98       	cbi	0x08, 2	; 8
     272:	08 95       	ret

00000274 <lcd_home>:
     274:	80 e8       	ldi	r24, 0x80	; 128
     276:	b4 cf       	rjmp	.-152    	; 0x1e0 <lcd_wr_command>
     278:	08 95       	ret

0000027a <lcd_string>:
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	29 f0       	breq	.+10     	; 0x290 <lcd_string+0x16>
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	d0 df       	rcall	.-96     	; 0x22a <lcd_wr_char>
     28a:	89 91       	ld	r24, Y+
     28c:	81 11       	cpse	r24, r1
     28e:	fc cf       	rjmp	.-8      	; 0x288 <lcd_string+0xe>
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <lcd_init>:
     296:	86 e6       	ldi	r24, 0x66	; 102
     298:	9e e0       	ldi	r25, 0x0E	; 14
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x4>
     29e:	00 00       	nop
     2a0:	88 e2       	ldi	r24, 0x28	; 40
     2a2:	9e df       	rcall	.-196    	; 0x1e0 <lcd_wr_command>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	9c df       	rcall	.-200    	; 0x1e0 <lcd_wr_command>
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	9a df       	rcall	.-204    	; 0x1e0 <lcd_wr_command>
     2ac:	8e e0       	ldi	r24, 0x0E	; 14
     2ae:	98 df       	rcall	.-208    	; 0x1e0 <lcd_wr_command>
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	96 cf       	rjmp	.-212    	; 0x1e0 <lcd_wr_command>
     2b4:	08 95       	ret

000002b6 <lcd_cursor>:
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	69 f0       	breq	.+26     	; 0x2d4 <lcd_cursor+0x1e>
     2ba:	18 f4       	brcc	.+6      	; 0x2c2 <lcd_cursor+0xc>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_cursor+0x16>
     2c0:	08 95       	ret
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	59 f0       	breq	.+22     	; 0x2dc <lcd_cursor+0x26>
     2c6:	84 30       	cpi	r24, 0x04	; 4
     2c8:	69 f0       	breq	.+26     	; 0x2e4 <lcd_cursor+0x2e>
     2ca:	08 95       	ret
     2cc:	8f e7       	ldi	r24, 0x7F	; 127
     2ce:	86 0f       	add	r24, r22
     2d0:	87 cf       	rjmp	.-242    	; 0x1e0 <lcd_wr_command>
     2d2:	08 95       	ret
     2d4:	8f eb       	ldi	r24, 0xBF	; 191
     2d6:	86 0f       	add	r24, r22
     2d8:	83 cf       	rjmp	.-250    	; 0x1e0 <lcd_wr_command>
     2da:	08 95       	ret
     2dc:	83 e9       	ldi	r24, 0x93	; 147
     2de:	86 0f       	add	r24, r22
     2e0:	7f cf       	rjmp	.-258    	; 0x1e0 <lcd_wr_command>
     2e2:	08 95       	ret
     2e4:	83 ed       	ldi	r24, 0xD3	; 211
     2e6:	86 0f       	add	r24, r22
     2e8:	7b cf       	rjmp	.-266    	; 0x1e0 <lcd_wr_command>
     2ea:	08 95       	ret

000002ec <lcd_print>:
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	8a 01       	movw	r16, r20
     2f6:	e9 01       	movw	r28, r18
     2f8:	88 23       	and	r24, r24
     2fa:	11 f0       	breq	.+4      	; 0x300 <lcd_print+0x14>
     2fc:	61 11       	cpse	r22, r1
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <lcd_print+0x18>
     300:	b9 df       	rcall	.-142    	; 0x274 <lcd_home>
     302:	01 c0       	rjmp	.+2      	; 0x306 <lcd_print+0x1a>
     304:	d8 df       	rcall	.-80     	; 0x2b6 <lcd_cursor>
     306:	c5 30       	cpi	r28, 0x05	; 5
     308:	d1 05       	cpc	r29, r1
     30a:	c1 f4       	brne	.+48     	; 0x33c <lcd_print+0x50>
     30c:	98 01       	movw	r18, r16
     30e:	32 95       	swap	r19
     310:	22 95       	swap	r18
     312:	2f 70       	andi	r18, 0x0F	; 15
     314:	23 27       	eor	r18, r19
     316:	3f 70       	andi	r19, 0x0F	; 15
     318:	23 27       	eor	r18, r19
     31a:	a7 e4       	ldi	r26, 0x47	; 71
     31c:	b3 e0       	ldi	r27, 0x03	; 3
     31e:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     322:	96 95       	lsr	r25
     324:	87 95       	ror	r24
     326:	96 95       	lsr	r25
     328:	87 95       	ror	r24
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	c0 96       	adiw	r24, 0x30	; 48
     330:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <million+0x1>
     334:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <million>
     338:	78 df       	rcall	.-272    	; 0x22a <lcd_wr_char>
     33a:	04 c0       	rjmp	.+8      	; 0x344 <lcd_print+0x58>
     33c:	c4 30       	cpi	r28, 0x04	; 4
     33e:	d1 05       	cpc	r29, r1
     340:	09 f0       	breq	.+2      	; 0x344 <lcd_print+0x58>
     342:	be c0       	rjmp	.+380    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     344:	98 01       	movw	r18, r16
     346:	36 95       	lsr	r19
     348:	27 95       	ror	r18
     34a:	36 95       	lsr	r19
     34c:	27 95       	ror	r18
     34e:	36 95       	lsr	r19
     350:	27 95       	ror	r18
     352:	a5 ec       	ldi	r26, 0xC5	; 197
     354:	b0 e2       	ldi	r27, 0x20	; 32
     356:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     35a:	ac 01       	movw	r20, r24
     35c:	52 95       	swap	r21
     35e:	42 95       	swap	r20
     360:	4f 70       	andi	r20, 0x0F	; 15
     362:	45 27       	eor	r20, r21
     364:	5f 70       	andi	r21, 0x0F	; 15
     366:	45 27       	eor	r20, r21
     368:	50 93 c4 06 	sts	0x06C4, r21	; 0x8006c4 <temp+0x1>
     36c:	40 93 c3 06 	sts	0x06C3, r20	; 0x8006c3 <temp>
     370:	9a 01       	movw	r18, r20
     372:	ad ec       	ldi	r26, 0xCD	; 205
     374:	bc ec       	ldi	r27, 0xCC	; 204
     376:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	96 95       	lsr	r25
     380:	87 95       	ror	r24
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	9c 01       	movw	r18, r24
     388:	22 0f       	add	r18, r18
     38a:	33 1f       	adc	r19, r19
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	9a 01       	movw	r18, r20
     39e:	28 1b       	sub	r18, r24
     3a0:	39 0b       	sbc	r19, r25
     3a2:	c9 01       	movw	r24, r18
     3a4:	c0 96       	adiw	r24, 0x30	; 48
     3a6:	90 93 4d 08 	sts	0x084D, r25	; 0x80084d <thousand+0x1>
     3aa:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <thousand>
     3ae:	3d df       	rcall	.-390    	; 0x22a <lcd_wr_char>
     3b0:	98 01       	movw	r18, r16
     3b2:	36 95       	lsr	r19
     3b4:	27 95       	ror	r18
     3b6:	36 95       	lsr	r19
     3b8:	27 95       	ror	r18
     3ba:	ab e7       	ldi	r26, 0x7B	; 123
     3bc:	b4 e1       	ldi	r27, 0x14	; 20
     3be:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     3c2:	ac 01       	movw	r20, r24
     3c4:	56 95       	lsr	r21
     3c6:	47 95       	ror	r20
     3c8:	50 93 c4 06 	sts	0x06C4, r21	; 0x8006c4 <temp+0x1>
     3cc:	40 93 c3 06 	sts	0x06C3, r20	; 0x8006c3 <temp>
     3d0:	9a 01       	movw	r18, r20
     3d2:	ad ec       	ldi	r26, 0xCD	; 205
     3d4:	bc ec       	ldi	r27, 0xCC	; 204
     3d6:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	9c 01       	movw	r18, r24
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
     3fc:	9a 01       	movw	r18, r20
     3fe:	28 1b       	sub	r18, r24
     400:	39 0b       	sbc	r19, r25
     402:	c9 01       	movw	r24, r18
     404:	c0 96       	adiw	r24, 0x30	; 48
     406:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <hundred+0x1>
     40a:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <hundred>
     40e:	0d df       	rcall	.-486    	; 0x22a <lcd_wr_char>
     410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	c2 30       	cpi	r28, 0x02	; 2
     414:	d1 05       	cpc	r29, r1
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	58 c0       	rjmp	.+176    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     41a:	98 01       	movw	r18, r16
     41c:	ad ec       	ldi	r26, 0xCD	; 205
     41e:	bc ec       	ldi	r27, 0xCC	; 204
     420:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     424:	ac 01       	movw	r20, r24
     426:	56 95       	lsr	r21
     428:	47 95       	ror	r20
     42a:	56 95       	lsr	r21
     42c:	47 95       	ror	r20
     42e:	56 95       	lsr	r21
     430:	47 95       	ror	r20
     432:	50 93 c4 06 	sts	0x06C4, r21	; 0x8006c4 <temp+0x1>
     436:	40 93 c3 06 	sts	0x06C3, r20	; 0x8006c3 <temp>
     43a:	9a 01       	movw	r18, r20
     43c:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     440:	96 95       	lsr	r25
     442:	87 95       	ror	r24
     444:	96 95       	lsr	r25
     446:	87 95       	ror	r24
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	9c 01       	movw	r18, r24
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	82 0f       	add	r24, r18
     460:	93 1f       	adc	r25, r19
     462:	9a 01       	movw	r18, r20
     464:	28 1b       	sub	r18, r24
     466:	39 0b       	sbc	r19, r25
     468:	c9 01       	movw	r24, r18
     46a:	c0 96       	adiw	r24, 0x30	; 48
     46c:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <tens+0x1>
     470:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <tens>
     474:	da de       	rcall	.-588    	; 0x22a <lcd_wr_char>
     476:	98 01       	movw	r18, r16
     478:	ad ec       	ldi	r26, 0xCD	; 205
     47a:	bc ec       	ldi	r27, 0xCC	; 204
     47c:	0e 94 41 13 	call	0x2682	; 0x2682 <__umulhisi3>
     480:	96 95       	lsr	r25
     482:	87 95       	ror	r24
     484:	96 95       	lsr	r25
     486:	87 95       	ror	r24
     488:	96 95       	lsr	r25
     48a:	87 95       	ror	r24
     48c:	9c 01       	movw	r18, r24
     48e:	22 0f       	add	r18, r18
     490:	33 1f       	adc	r19, r19
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	82 0f       	add	r24, r18
     4a0:	93 1f       	adc	r25, r19
     4a2:	98 01       	movw	r18, r16
     4a4:	28 1b       	sub	r18, r24
     4a6:	39 0b       	sbc	r19, r25
     4a8:	c9 01       	movw	r24, r18
     4aa:	c0 96       	adiw	r24, 0x30	; 48
     4ac:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <unit+0x1>
     4b0:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <unit>
     4b4:	ba de       	rcall	.-652    	; 0x22a <lcd_wr_char>
     4b6:	26 97       	sbiw	r28, 0x06	; 6
     4b8:	64 f0       	brlt	.+24     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ba:	85 e4       	ldi	r24, 0x45	; 69
     4bc:	b6 de       	rcall	.-660    	; 0x22a <lcd_wr_char>
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4c0:	c3 30       	cpi	r28, 0x03	; 3
     4c2:	d1 05       	cpc	r29, r1
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	a5 cf       	rjmp	.-182    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     4c8:	73 cf       	rjmp	.-282    	; 0x3b0 <lcd_print+0xc4>
     4ca:	c1 30       	cpi	r28, 0x01	; 1
     4cc:	d1 05       	cpc	r29, r1
     4ce:	99 f7       	brne	.-26     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4d0:	d2 cf       	rjmp	.-92     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <lcd_clear>:
     4dc:	80 e8       	ldi	r24, 0x80	; 128
     4de:	80 de       	rcall	.-768    	; 0x1e0 <lcd_wr_command>
     4e0:	88 ea       	ldi	r24, 0xA8	; 168
     4e2:	93 e0       	ldi	r25, 0x03	; 3
     4e4:	ca de       	rcall	.-620    	; 0x27a <lcd_string>
     4e6:	80 ec       	ldi	r24, 0xC0	; 192
     4e8:	7b de       	rcall	.-778    	; 0x1e0 <lcd_wr_command>
     4ea:	88 ea       	ldi	r24, 0xA8	; 168
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	c5 de       	rcall	.-630    	; 0x27a <lcd_string>
     4f0:	c1 ce       	rjmp	.-638    	; 0x274 <lcd_home>
     4f2:	08 95       	ret

000004f4 <declare_constants>:
     4f4:	2f 92       	push	r2
     4f6:	3f 92       	push	r3
     4f8:	4f 92       	push	r4
     4fa:	5f 92       	push	r5
     4fc:	6f 92       	push	r6
     4fe:	7f 92       	push	r7
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	e8 ec       	ldi	r30, 0xC8	; 200
     51a:	f6 e0       	ldi	r31, 0x06	; 6
     51c:	0f 2e       	mov	r0, r31
     51e:	fb e4       	ldi	r31, 0x4B	; 75
     520:	af 2e       	mov	r10, r31
     522:	b1 2c       	mov	r11, r1
     524:	f0 2d       	mov	r31, r0
     526:	b1 82       	std	Z+1, r11	; 0x01
     528:	a0 82       	st	Z, r10
     52a:	0f 2e       	mov	r0, r31
     52c:	fd e1       	ldi	r31, 0x1D	; 29
     52e:	4f 2e       	mov	r4, r31
     530:	55 24       	eor	r5, r5
     532:	53 94       	inc	r5
     534:	f0 2d       	mov	r31, r0
     536:	53 82       	std	Z+3, r5	; 0x03
     538:	42 82       	std	Z+2, r4	; 0x02
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	95 83       	std	Z+5, r25	; 0x05
     540:	84 83       	std	Z+4, r24	; 0x04
     542:	97 83       	std	Z+7, r25	; 0x07
     544:	86 83       	std	Z+6, r24	; 0x06
     546:	cc 24       	eor	r12, r12
     548:	ca 94       	dec	r12
     54a:	d1 2c       	mov	r13, r1
     54c:	d1 86       	std	Z+9, r13	; 0x09
     54e:	c0 86       	std	Z+8, r12	; 0x08
     550:	ac e3       	ldi	r26, 0x3C	; 60
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	b3 87       	std	Z+11, r27	; 0x0b
     556:	a2 87       	std	Z+10, r26	; 0x0a
     558:	95 87       	std	Z+13, r25	; 0x0d
     55a:	84 87       	std	Z+12, r24	; 0x0c
     55c:	97 87       	std	Z+15, r25	; 0x0f
     55e:	86 87       	std	Z+14, r24	; 0x0e
     560:	20 ef       	ldi	r18, 0xF0	; 240
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	31 8b       	std	Z+17, r19	; 0x11
     566:	20 8b       	std	Z+16, r18	; 0x10
     568:	0f 2e       	mov	r0, r31
     56a:	fd e2       	ldi	r31, 0x2D	; 45
     56c:	2f 2e       	mov	r2, r31
     56e:	31 2c       	mov	r3, r1
     570:	f0 2d       	mov	r31, r0
     572:	33 8a       	std	Z+19, r3	; 0x13
     574:	22 8a       	std	Z+18, r2	; 0x12
     576:	15 8a       	std	Z+21, r1	; 0x15
     578:	14 8a       	std	Z+20, r1	; 0x14
     57a:	6c e2       	ldi	r22, 0x2C	; 44
     57c:	71 e0       	ldi	r23, 0x01	; 1
     57e:	77 8b       	std	Z+23, r23	; 0x17
     580:	66 8b       	std	Z+22, r22	; 0x16
     582:	0f 2e       	mov	r0, r31
     584:	f1 ee       	ldi	r31, 0xE1	; 225
     586:	8f 2e       	mov	r8, r31
     588:	91 2c       	mov	r9, r1
     58a:	f0 2d       	mov	r31, r0
     58c:	91 8e       	std	Z+25, r9	; 0x19
     58e:	80 8e       	std	Z+24, r8	; 0x18
     590:	0e e1       	ldi	r16, 0x1E	; 30
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	13 8f       	std	Z+27, r17	; 0x1b
     596:	02 8f       	std	Z+26, r16	; 0x1a
     598:	95 8f       	std	Z+29, r25	; 0x1d
     59a:	84 8f       	std	Z+28, r24	; 0x1c
     59c:	97 8f       	std	Z+31, r25	; 0x1f
     59e:	86 8f       	std	Z+30, r24	; 0x1e
     5a0:	42 ed       	ldi	r20, 0xD2	; 210
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	51 a3       	std	Z+33, r21	; 0x21
     5a6:	40 a3       	std	Z+32, r20	; 0x20
     5a8:	cf e0       	ldi	r28, 0x0F	; 15
     5aa:	d0 e0       	ldi	r29, 0x00	; 0
     5ac:	d3 a3       	std	Z+35, r29	; 0x23
     5ae:	c2 a3       	std	Z+34, r28	; 0x22
     5b0:	95 a3       	std	Z+37, r25	; 0x25
     5b2:	84 a3       	std	Z+36, r24	; 0x24
     5b4:	97 a3       	std	Z+39, r25	; 0x27
     5b6:	86 a3       	std	Z+38, r24	; 0x26
     5b8:	03 ec       	ldi	r16, 0xC3	; 195
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	11 a7       	std	Z+41, r17	; 0x29
     5be:	00 a7       	std	Z+40, r16	; 0x28
     5c0:	13 a6       	std	Z+43, r1	; 0x2b
     5c2:	12 a6       	std	Z+42, r1	; 0x2a
     5c4:	95 a7       	std	Z+45, r25	; 0x2d
     5c6:	84 a7       	std	Z+44, r24	; 0x2c
     5c8:	97 a7       	std	Z+47, r25	; 0x2f
     5ca:	86 a7       	std	Z+46, r24	; 0x2e
     5cc:	44 eb       	ldi	r20, 0xB4	; 180
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	51 ab       	std	Z+49, r21	; 0x31
     5d2:	40 ab       	std	Z+48, r20	; 0x30
     5d4:	09 e5       	ldi	r16, 0x59	; 89
     5d6:	11 e0       	ldi	r17, 0x01	; 1
     5d8:	13 ab       	std	Z+51, r17	; 0x33
     5da:	02 ab       	std	Z+50, r16	; 0x32
     5dc:	35 ab       	std	Z+53, r19	; 0x35
     5de:	24 ab       	std	Z+52, r18	; 0x34
     5e0:	77 ab       	std	Z+55, r23	; 0x37
     5e2:	66 ab       	std	Z+54, r22	; 0x36
     5e4:	05 ea       	ldi	r16, 0xA5	; 165
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	11 af       	std	Z+57, r17	; 0x39
     5ea:	00 af       	std	Z+56, r16	; 0x38
     5ec:	0a e4       	ldi	r16, 0x4A	; 74
     5ee:	11 e0       	ldi	r17, 0x01	; 1
     5f0:	13 af       	std	Z+59, r17	; 0x3b
     5f2:	02 af       	std	Z+58, r16	; 0x3a
     5f4:	95 af       	std	Z+61, r25	; 0x3d
     5f6:	84 af       	std	Z+60, r24	; 0x3c
     5f8:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <angle+0x3f>
     5fc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <angle+0x3e>
     600:	e6 e9       	ldi	r30, 0x96	; 150
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	f0 93 09 07 	sts	0x0709, r31	; 0x800709 <angle+0x41>
     608:	e0 93 08 07 	sts	0x0708, r30	; 0x800708 <angle+0x40>
     60c:	0b e3       	ldi	r16, 0x3B	; 59
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	10 93 0b 07 	sts	0x070B, r17	; 0x80070b <angle+0x43>
     614:	00 93 0a 07 	sts	0x070A, r16	; 0x80070a <angle+0x42>
     618:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <angle+0x45>
     61c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <angle+0x44>
     620:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <angle+0x47>
     624:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <angle+0x46>
     628:	0f 2e       	mov	r0, r31
     62a:	f7 e8       	ldi	r31, 0x87	; 135
     62c:	6f 2e       	mov	r6, r31
     62e:	71 2c       	mov	r7, r1
     630:	f0 2d       	mov	r31, r0
     632:	70 92 11 07 	sts	0x0711, r7	; 0x800711 <angle+0x49>
     636:	60 92 10 07 	sts	0x0710, r6	; 0x800710 <angle+0x48>
     63a:	70 93 13 07 	sts	0x0713, r23	; 0x800713 <angle+0x4b>
     63e:	60 93 12 07 	sts	0x0712, r22	; 0x800712 <angle+0x4a>
     642:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <angle+0x4d>
     646:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <angle+0x4c>
     64a:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <angle+0x4f>
     64e:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <angle+0x4e>
     652:	e8 e7       	ldi	r30, 0x78	; 120
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	f0 93 19 07 	sts	0x0719, r31	; 0x800719 <angle+0x51>
     65a:	e0 93 18 07 	sts	0x0718, r30	; 0x800718 <angle+0x50>
     65e:	50 92 1b 07 	sts	0x071B, r5	; 0x80071b <angle+0x53>
     662:	40 92 1a 07 	sts	0x071A, r4	; 0x80071a <angle+0x52>
     666:	50 93 1d 07 	sts	0x071D, r21	; 0x80071d <angle+0x55>
     66a:	40 93 1c 07 	sts	0x071C, r20	; 0x80071c <angle+0x54>
     66e:	30 93 1f 07 	sts	0x071F, r19	; 0x80071f <angle+0x57>
     672:	20 93 1e 07 	sts	0x071E, r18	; 0x80071e <angle+0x56>
     676:	0f 2e       	mov	r0, r31
     678:	f9 e6       	ldi	r31, 0x69	; 105
     67a:	ef 2e       	mov	r14, r31
     67c:	f1 2c       	mov	r15, r1
     67e:	f0 2d       	mov	r31, r0
     680:	f0 92 21 07 	sts	0x0721, r15	; 0x800721 <angle+0x59>
     684:	e0 92 20 07 	sts	0x0720, r14	; 0x800720 <angle+0x58>
     688:	0e e0       	ldi	r16, 0x0E	; 14
     68a:	11 e0       	ldi	r17, 0x01	; 1
     68c:	10 93 23 07 	sts	0x0723, r17	; 0x800723 <angle+0x5b>
     690:	00 93 22 07 	sts	0x0722, r16	; 0x800722 <angle+0x5a>
     694:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <angle+0x5d>
     698:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <angle+0x5c>
     69c:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <angle+0x5f>
     6a0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <angle+0x5e>
     6a4:	0a e5       	ldi	r16, 0x5A	; 90
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	10 93 29 07 	sts	0x0729, r17	; 0x800729 <angle+0x61>
     6ac:	00 93 28 07 	sts	0x0728, r16	; 0x800728 <angle+0x60>
     6b0:	d0 92 2b 07 	sts	0x072B, r13	; 0x80072b <angle+0x63>
     6b4:	c0 92 2a 07 	sts	0x072A, r12	; 0x80072a <angle+0x62>
     6b8:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <angle+0x65>
     6bc:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <angle+0x64>
     6c0:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <angle+0x67>
     6c4:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <angle+0x66>
     6c8:	b0 92 31 07 	sts	0x0731, r11	; 0x800731 <angle+0x69>
     6cc:	a0 92 30 07 	sts	0x0730, r10	; 0x800730 <angle+0x68>
     6d0:	30 93 33 07 	sts	0x0733, r19	; 0x800733 <angle+0x6b>
     6d4:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <angle+0x6a>
     6d8:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <angle+0x6d>
     6dc:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <angle+0x6c>
     6e0:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <angle+0x6f>
     6e4:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <angle+0x6e>
     6e8:	b0 93 39 07 	sts	0x0739, r27	; 0x800739 <angle+0x71>
     6ec:	a0 93 38 07 	sts	0x0738, r26	; 0x800738 <angle+0x70>
     6f0:	90 92 3b 07 	sts	0x073B, r9	; 0x80073b <angle+0x73>
     6f4:	80 92 3a 07 	sts	0x073A, r8	; 0x80073a <angle+0x72>
     6f8:	f0 93 3d 07 	sts	0x073D, r31	; 0x80073d <angle+0x75>
     6fc:	e0 93 3c 07 	sts	0x073C, r30	; 0x80073c <angle+0x74>
     700:	50 93 3f 07 	sts	0x073F, r21	; 0x80073f <angle+0x77>
     704:	40 93 3e 07 	sts	0x073E, r20	; 0x80073e <angle+0x76>
     708:	30 92 41 07 	sts	0x0741, r3	; 0x800741 <angle+0x79>
     70c:	20 92 40 07 	sts	0x0740, r2	; 0x800740 <angle+0x78>
     710:	0f 2e       	mov	r0, r31
     712:	f2 ed       	ldi	r31, 0xD2	; 210
     714:	cf 2e       	mov	r12, r31
     716:	d1 2c       	mov	r13, r1
     718:	f0 2d       	mov	r31, r0
     71a:	d0 92 43 07 	sts	0x0743, r13	; 0x800743 <angle+0x7b>
     71e:	c0 92 42 07 	sts	0x0742, r12	; 0x800742 <angle+0x7a>
     722:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <angle+0x7d>
     726:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <angle+0x7c>
     72a:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <angle+0x7f>
     72e:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <angle+0x7e>
     732:	0f 2e       	mov	r0, r31
     734:	fe e1       	ldi	r31, 0x1E	; 30
     736:	cf 2e       	mov	r12, r31
     738:	d1 2c       	mov	r13, r1
     73a:	f0 2d       	mov	r31, r0
     73c:	d0 92 49 07 	sts	0x0749, r13	; 0x800749 <angle+0x81>
     740:	c0 92 48 07 	sts	0x0748, r12	; 0x800748 <angle+0x80>
     744:	0f 2e       	mov	r0, r31
     746:	f3 ec       	ldi	r31, 0xC3	; 195
     748:	cf 2e       	mov	r12, r31
     74a:	d1 2c       	mov	r13, r1
     74c:	f0 2d       	mov	r31, r0
     74e:	d0 92 4b 07 	sts	0x074B, r13	; 0x80074b <angle+0x83>
     752:	c0 92 4a 07 	sts	0x074A, r12	; 0x80074a <angle+0x82>
     756:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <angle+0x85>
     75a:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <angle+0x84>
     75e:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <angle+0x87>
     762:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <angle+0x86>
     766:	d0 93 51 07 	sts	0x0751, r29	; 0x800751 <angle+0x89>
     76a:	c0 93 50 07 	sts	0x0750, r28	; 0x800750 <angle+0x88>
     76e:	50 93 53 07 	sts	0x0753, r21	; 0x800753 <angle+0x8b>
     772:	40 93 52 07 	sts	0x0752, r20	; 0x800752 <angle+0x8a>
     776:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <angle+0x8d>
     77a:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <angle+0x8c>
     77e:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <angle+0x8f>
     782:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <angle+0x8e>
     786:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <angle+0x91>
     78a:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <angle+0x90>
     78e:	0f 2e       	mov	r0, r31
     790:	f5 ea       	ldi	r31, 0xA5	; 165
     792:	cf 2e       	mov	r12, r31
     794:	d1 2c       	mov	r13, r1
     796:	f0 2d       	mov	r31, r0
     798:	d0 92 5b 07 	sts	0x075B, r13	; 0x80075b <angle+0x93>
     79c:	c0 92 5a 07 	sts	0x075A, r12	; 0x80075a <angle+0x92>
     7a0:	b0 93 5d 07 	sts	0x075D, r27	; 0x80075d <angle+0x95>
     7a4:	a0 93 5c 07 	sts	0x075C, r26	; 0x80075c <angle+0x94>
     7a8:	f0 93 5f 07 	sts	0x075F, r31	; 0x80075f <angle+0x97>
     7ac:	e0 93 5e 07 	sts	0x075E, r30	; 0x80075e <angle+0x96>
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f9 e5       	ldi	r31, 0x59	; 89
     7b4:	cf 2e       	mov	r12, r31
     7b6:	dd 24       	eor	r13, r13
     7b8:	d3 94       	inc	r13
     7ba:	f0 2d       	mov	r31, r0
     7bc:	d0 92 61 07 	sts	0x0761, r13	; 0x800761 <angle+0x99>
     7c0:	c0 92 60 07 	sts	0x0760, r12	; 0x800760 <angle+0x98>
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f6 e9       	ldi	r31, 0x96	; 150
     7c8:	cf 2e       	mov	r12, r31
     7ca:	d1 2c       	mov	r13, r1
     7cc:	f0 2d       	mov	r31, r0
     7ce:	d0 92 63 07 	sts	0x0763, r13	; 0x800763 <angle+0x9b>
     7d2:	c0 92 62 07 	sts	0x0762, r12	; 0x800762 <angle+0x9a>
     7d6:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <angle+0x9d>
     7da:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <angle+0x9c>
     7de:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <angle+0x9f>
     7e2:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <angle+0x9e>
     7e6:	0f 2e       	mov	r0, r31
     7e8:	fa e4       	ldi	r31, 0x4A	; 74
     7ea:	cf 2e       	mov	r12, r31
     7ec:	dd 24       	eor	r13, r13
     7ee:	d3 94       	inc	r13
     7f0:	f0 2d       	mov	r31, r0
     7f2:	d0 92 69 07 	sts	0x0769, r13	; 0x800769 <angle+0xa1>
     7f6:	c0 92 68 07 	sts	0x0768, r12	; 0x800768 <angle+0xa0>
     7fa:	70 92 6b 07 	sts	0x076B, r7	; 0x80076b <angle+0xa3>
     7fe:	60 92 6a 07 	sts	0x076A, r6	; 0x80076a <angle+0xa2>
     802:	90 93 6d 07 	sts	0x076D, r25	; 0x80076d <angle+0xa5>
     806:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <angle+0xa4>
     80a:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <angle+0xa7>
     80e:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <angle+0xa6>
     812:	0f 2e       	mov	r0, r31
     814:	fb e3       	ldi	r31, 0x3B	; 59
     816:	cf 2e       	mov	r12, r31
     818:	dd 24       	eor	r13, r13
     81a:	d3 94       	inc	r13
     81c:	f0 2d       	mov	r31, r0
     81e:	d0 92 71 07 	sts	0x0771, r13	; 0x800771 <angle+0xa9>
     822:	c0 92 70 07 	sts	0x0770, r12	; 0x800770 <angle+0xa8>
     826:	f0 93 73 07 	sts	0x0773, r31	; 0x800773 <angle+0xab>
     82a:	e0 93 72 07 	sts	0x0772, r30	; 0x800772 <angle+0xaa>
     82e:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <angle+0xad>
     832:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <angle+0xac>
     836:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <angle+0xaf>
     83a:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <angle+0xae>
     83e:	70 93 79 07 	sts	0x0779, r23	; 0x800779 <angle+0xb1>
     842:	60 93 78 07 	sts	0x0778, r22	; 0x800778 <angle+0xb0>
     846:	f0 92 7b 07 	sts	0x077B, r15	; 0x80077b <angle+0xb3>
     84a:	e0 92 7a 07 	sts	0x077A, r14	; 0x80077a <angle+0xb2>
     84e:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <angle+0xb5>
     852:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <angle+0xb4>
     856:	b0 93 7f 07 	sts	0x077F, r27	; 0x80077f <angle+0xb7>
     85a:	a0 93 7e 07 	sts	0x077E, r26	; 0x80077e <angle+0xb6>
     85e:	10 93 81 07 	sts	0x0781, r17	; 0x800781 <angle+0xb9>
     862:	00 93 80 07 	sts	0x0780, r16	; 0x800780 <angle+0xb8>
     866:	50 92 83 07 	sts	0x0783, r5	; 0x800783 <angle+0xbb>
     86a:	40 92 82 07 	sts	0x0782, r4	; 0x800782 <angle+0xba>
     86e:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <angle+0xbd>
     872:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <angle+0xbc>
     876:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <angle+0xbf>
     87a:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <angle+0xbe>
     87e:	50 93 89 07 	sts	0x0789, r21	; 0x800789 <angle+0xc1>
     882:	40 93 88 07 	sts	0x0788, r20	; 0x800788 <angle+0xc0>
     886:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <angle+0xc3>
     88a:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <angle+0xc2>
     88e:	30 93 8d 07 	sts	0x078D, r19	; 0x80078d <angle+0xc5>
     892:	20 93 8c 07 	sts	0x078C, r18	; 0x80078c <angle+0xc4>
     896:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <angle+0xc7>
     89a:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <angle+0xc6>
     89e:	50 93 91 07 	sts	0x0791, r21	; 0x800791 <angle+0xc9>
     8a2:	40 93 90 07 	sts	0x0790, r20	; 0x800790 <angle+0xc8>
     8a6:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <angle+0xcb>
     8aa:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <angle+0xca>
     8ae:	b0 93 95 07 	sts	0x0795, r27	; 0x800795 <angle+0xcd>
     8b2:	a0 93 94 07 	sts	0x0794, r26	; 0x800794 <angle+0xcc>
     8b6:	70 93 97 07 	sts	0x0797, r23	; 0x800797 <angle+0xcf>
     8ba:	60 93 96 07 	sts	0x0796, r22	; 0x800796 <angle+0xce>
     8be:	50 93 99 07 	sts	0x0799, r21	; 0x800799 <angle+0xd1>
     8c2:	40 93 98 07 	sts	0x0798, r20	; 0x800798 <angle+0xd0>
     8c6:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <angle+0xd3>
     8ca:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <angle+0xd2>
     8ce:	f0 93 9d 07 	sts	0x079D, r31	; 0x80079d <angle+0xd5>
     8d2:	e0 93 9c 07 	sts	0x079C, r30	; 0x80079c <angle+0xd4>
     8d6:	30 93 9f 07 	sts	0x079F, r19	; 0x80079f <angle+0xd7>
     8da:	20 93 9e 07 	sts	0x079E, r18	; 0x80079e <angle+0xd6>
     8de:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <angle+0xd9>
     8e2:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <angle+0xd8>
     8e6:	50 93 a3 07 	sts	0x07A3, r21	; 0x8007a3 <angle+0xdb>
     8ea:	40 93 a2 07 	sts	0x07A2, r20	; 0x8007a2 <angle+0xda>
     8ee:	70 93 a5 07 	sts	0x07A5, r23	; 0x8007a5 <angle+0xdd>
     8f2:	60 93 a4 07 	sts	0x07A4, r22	; 0x8007a4 <angle+0xdc>
     8f6:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <angle+0xdf>
     8fa:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <angle+0xde>
     8fe:	b0 93 a9 07 	sts	0x07A9, r27	; 0x8007a9 <angle+0xe1>
     902:	a0 93 a8 07 	sts	0x07A8, r26	; 0x8007a8 <angle+0xe0>
     906:	f0 93 ab 07 	sts	0x07AB, r31	; 0x8007ab <angle+0xe3>
     90a:	e0 93 aa 07 	sts	0x07AA, r30	; 0x8007aa <angle+0xe2>
     90e:	30 93 ad 07 	sts	0x07AD, r19	; 0x8007ad <angle+0xe5>
     912:	20 93 ac 07 	sts	0x07AC, r18	; 0x8007ac <angle+0xe4>
     916:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <angle+0xe7>
     91a:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <angle+0xe6>
     91e:	b0 93 b1 07 	sts	0x07B1, r27	; 0x8007b1 <angle+0xe9>
     922:	a0 93 b0 07 	sts	0x07B0, r26	; 0x8007b0 <angle+0xe8>
     926:	30 93 b3 07 	sts	0x07B3, r19	; 0x8007b3 <angle+0xeb>
     92a:	20 93 b2 07 	sts	0x07B2, r18	; 0x8007b2 <angle+0xea>
     92e:	70 93 b5 07 	sts	0x07B5, r23	; 0x8007b5 <angle+0xed>
     932:	60 93 b4 07 	sts	0x07B4, r22	; 0x8007b4 <angle+0xec>
     936:	50 93 b7 07 	sts	0x07B7, r21	; 0x8007b7 <angle+0xef>
     93a:	40 93 b6 07 	sts	0x07B6, r20	; 0x8007b6 <angle+0xee>
     93e:	b0 93 b9 07 	sts	0x07B9, r27	; 0x8007b9 <angle+0xf1>
     942:	a0 93 b8 07 	sts	0x07B8, r26	; 0x8007b8 <angle+0xf0>
     946:	30 93 bb 07 	sts	0x07BB, r19	; 0x8007bb <angle+0xf3>
     94a:	20 93 ba 07 	sts	0x07BA, r18	; 0x8007ba <angle+0xf2>
     94e:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <angle+0xf5>
     952:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <angle+0xf4>
     956:	f0 93 bf 07 	sts	0x07BF, r31	; 0x8007bf <angle+0xf7>
     95a:	e0 93 be 07 	sts	0x07BE, r30	; 0x8007be <angle+0xf6>
     95e:	30 93 c1 07 	sts	0x07C1, r19	; 0x8007c1 <angle+0xf9>
     962:	20 93 c0 07 	sts	0x07C0, r18	; 0x8007c0 <angle+0xf8>
     966:	b0 93 c3 07 	sts	0x07C3, r27	; 0x8007c3 <angle+0xfb>
     96a:	a0 93 c2 07 	sts	0x07C2, r26	; 0x8007c2 <angle+0xfa>
     96e:	50 93 c5 07 	sts	0x07C5, r21	; 0x8007c5 <angle+0xfd>
     972:	40 93 c4 07 	sts	0x07C4, r20	; 0x8007c4 <angle+0xfc>
     976:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <angle+0xff>
     97a:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <angle+0xfe>
     97e:	70 93 c9 07 	sts	0x07C9, r23	; 0x8007c9 <angle+0x101>
     982:	60 93 c8 07 	sts	0x07C8, r22	; 0x8007c8 <angle+0x100>
     986:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <angle+0x103>
     98a:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <angle+0x102>
     98e:	f0 93 cd 07 	sts	0x07CD, r31	; 0x8007cd <angle+0x105>
     992:	e0 93 cc 07 	sts	0x07CC, r30	; 0x8007cc <angle+0x104>
     996:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <angle+0x107>
     99a:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <angle+0x106>
     99e:	70 93 d1 07 	sts	0x07D1, r23	; 0x8007d1 <angle+0x109>
     9a2:	60 93 d0 07 	sts	0x07D0, r22	; 0x8007d0 <angle+0x108>
     9a6:	f0 93 d3 07 	sts	0x07D3, r31	; 0x8007d3 <angle+0x10b>
     9aa:	e0 93 d2 07 	sts	0x07D2, r30	; 0x8007d2 <angle+0x10a>
     9ae:	50 93 d5 07 	sts	0x07D5, r21	; 0x8007d5 <angle+0x10d>
     9b2:	40 93 d4 07 	sts	0x07D4, r20	; 0x8007d4 <angle+0x10c>
     9b6:	b0 93 d7 07 	sts	0x07D7, r27	; 0x8007d7 <angle+0x10f>
     9ba:	a0 93 d6 07 	sts	0x07D6, r26	; 0x8007d6 <angle+0x10e>
     9be:	70 93 d9 07 	sts	0x07D9, r23	; 0x8007d9 <angle+0x111>
     9c2:	60 93 d8 07 	sts	0x07D8, r22	; 0x8007d8 <angle+0x110>
     9c6:	f0 93 db 07 	sts	0x07DB, r31	; 0x8007db <angle+0x113>
     9ca:	e0 93 da 07 	sts	0x07DA, r30	; 0x8007da <angle+0x112>
     9ce:	30 93 dd 07 	sts	0x07DD, r19	; 0x8007dd <angle+0x115>
     9d2:	20 93 dc 07 	sts	0x07DC, r18	; 0x8007dc <angle+0x114>
     9d6:	10 92 df 07 	sts	0x07DF, r1	; 0x8007df <angle+0x117>
     9da:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <angle+0x116>
     9de:	f0 93 e1 07 	sts	0x07E1, r31	; 0x8007e1 <angle+0x119>
     9e2:	e0 93 e0 07 	sts	0x07E0, r30	; 0x8007e0 <angle+0x118>
     9e6:	b0 93 e3 07 	sts	0x07E3, r27	; 0x8007e3 <angle+0x11b>
     9ea:	a0 93 e2 07 	sts	0x07E2, r26	; 0x8007e2 <angle+0x11a>
     9ee:	70 93 e5 07 	sts	0x07E5, r23	; 0x8007e5 <angle+0x11d>
     9f2:	60 93 e4 07 	sts	0x07E4, r22	; 0x8007e4 <angle+0x11c>
     9f6:	90 93 e7 07 	sts	0x07E7, r25	; 0x8007e7 <angle+0x11f>
     9fa:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <angle+0x11e>
     9fe:	b0 93 e9 07 	sts	0x07E9, r27	; 0x8007e9 <angle+0x121>
     a02:	a0 93 e8 07 	sts	0x07E8, r26	; 0x8007e8 <angle+0x120>
     a06:	30 93 eb 07 	sts	0x07EB, r19	; 0x8007eb <angle+0x123>
     a0a:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <angle+0x122>
     a0e:	90 93 ed 07 	sts	0x07ED, r25	; 0x8007ed <angle+0x125>
     a12:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <angle+0x124>
     a16:	90 93 ef 07 	sts	0x07EF, r25	; 0x8007ef <angle+0x127>
     a1a:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <angle+0x126>
     a1e:	f0 93 f1 07 	sts	0x07F1, r31	; 0x8007f1 <angle+0x129>
     a22:	e0 93 f0 07 	sts	0x07F0, r30	; 0x8007f0 <angle+0x128>
     a26:	70 93 f3 07 	sts	0x07F3, r23	; 0x8007f3 <angle+0x12b>
     a2a:	60 93 f2 07 	sts	0x07F2, r22	; 0x8007f2 <angle+0x12a>
     a2e:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <angle+0x12d>
     a32:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <angle+0x12c>
     a36:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <angle+0x12f>
     a3a:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <angle+0x12e>
     a3e:	70 93 f9 07 	sts	0x07F9, r23	; 0x8007f9 <angle+0x131>
     a42:	60 93 f8 07 	sts	0x07F8, r22	; 0x8007f8 <angle+0x130>
     a46:	f0 93 fb 07 	sts	0x07FB, r31	; 0x8007fb <angle+0x133>
     a4a:	e0 93 fa 07 	sts	0x07FA, r30	; 0x8007fa <angle+0x132>
     a4e:	90 93 fd 07 	sts	0x07FD, r25	; 0x8007fd <angle+0x135>
     a52:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <angle+0x134>
     a56:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <angle+0x137>
     a5a:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <angle+0x136>
     a5e:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <angle+0x139>
     a62:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <angle+0x138>
     a66:	50 93 03 08 	sts	0x0803, r21	; 0x800803 <angle+0x13b>
     a6a:	40 93 02 08 	sts	0x0802, r20	; 0x800802 <angle+0x13a>
     a6e:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <angle+0x13d>
     a72:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <angle+0x13c>
     a76:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <angle+0x13f>
     a7a:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <angle+0x13e>
     a7e:	50 93 09 08 	sts	0x0809, r21	; 0x800809 <angle+0x141>
     a82:	40 93 08 08 	sts	0x0808, r20	; 0x800808 <angle+0x140>
     a86:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <angle+0x143>
     a8a:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <angle+0x142>
     a8e:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <angle+0x145>
     a92:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <angle+0x144>
     a96:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <angle+0x147>
     a9a:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <angle+0x146>
     a9e:	30 93 11 08 	sts	0x0811, r19	; 0x800811 <angle+0x149>
     aa2:	20 93 10 08 	sts	0x0810, r18	; 0x800810 <angle+0x148>
     aa6:	b0 93 13 08 	sts	0x0813, r27	; 0x800813 <angle+0x14b>
     aaa:	a0 93 12 08 	sts	0x0812, r26	; 0x800812 <angle+0x14a>
     aae:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <angle+0x14d>
     ab2:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <angle+0x14c>
     ab6:	90 93 17 08 	sts	0x0817, r25	; 0x800817 <angle+0x14f>
     aba:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <angle+0x14e>
     abe:	50 93 19 08 	sts	0x0819, r21	; 0x800819 <angle+0x151>
     ac2:	40 93 18 08 	sts	0x0818, r20	; 0x800818 <angle+0x150>
     ac6:	b0 93 1b 08 	sts	0x081B, r27	; 0x80081b <angle+0x153>
     aca:	a0 93 1a 08 	sts	0x081A, r26	; 0x80081a <angle+0x152>
     ace:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <angle+0x155>
     ad2:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <angle+0x154>
     ad6:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <angle+0x157>
     ada:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <angle+0x156>
     ade:	f0 93 21 08 	sts	0x0821, r31	; 0x800821 <angle+0x159>
     ae2:	e0 93 20 08 	sts	0x0820, r30	; 0x800820 <angle+0x158>
     ae6:	30 93 23 08 	sts	0x0823, r19	; 0x800823 <angle+0x15b>
     aea:	20 93 22 08 	sts	0x0822, r18	; 0x800822 <angle+0x15a>
     aee:	90 93 25 08 	sts	0x0825, r25	; 0x800825 <angle+0x15d>
     af2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <angle+0x15c>
     af6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <angle+0x15f>
     afa:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <angle+0x15e>
     afe:	b0 93 29 08 	sts	0x0829, r27	; 0x800829 <angle+0x161>
     b02:	a0 93 28 08 	sts	0x0828, r26	; 0x800828 <angle+0x160>
     b06:	70 93 2b 08 	sts	0x082B, r23	; 0x80082b <angle+0x163>
     b0a:	60 93 2a 08 	sts	0x082A, r22	; 0x80082a <angle+0x162>
     b0e:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <angle+0x165>
     b12:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <angle+0x164>
     b16:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <angle+0x167>
     b1a:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <angle+0x166>
     b1e:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <angle+0x169>
     b22:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <angle+0x168>
     b26:	f0 93 33 08 	sts	0x0833, r31	; 0x800833 <angle+0x16b>
     b2a:	e0 93 32 08 	sts	0x0832, r30	; 0x800832 <angle+0x16a>
     b2e:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <angle+0x16d>
     b32:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <angle+0x16c>
     b36:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <angle+0x16f>
     b3a:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <angle+0x16e>
     b3e:	70 93 39 08 	sts	0x0839, r23	; 0x800839 <angle+0x171>
     b42:	60 93 38 08 	sts	0x0838, r22	; 0x800838 <angle+0x170>
     b46:	50 93 3b 08 	sts	0x083B, r21	; 0x80083b <angle+0x173>
     b4a:	40 93 3a 08 	sts	0x083A, r20	; 0x80083a <angle+0x172>
     b4e:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <angle+0x175>
     b52:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <angle+0x174>
     b56:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <angle+0x177>
     b5a:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <angle+0x176>
     b5e:	30 93 41 08 	sts	0x0841, r19	; 0x800841 <angle+0x179>
     b62:	20 93 40 08 	sts	0x0840, r18	; 0x800840 <angle+0x178>
     b66:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <angle+0x17b>
     b6a:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <angle+0x17a>
     b6e:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <angle+0x17d>
     b72:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <angle+0x17c>
     b76:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <angle+0x17f>
     b7a:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <angle+0x17e>
     b7e:	e3 e4       	ldi	r30, 0x43	; 67
     b80:	f5 e0       	ldi	r31, 0x05	; 5
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	80 83       	st	Z, r24
     b8a:	28 e1       	ldi	r18, 0x18	; 24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	33 83       	std	Z+3, r19	; 0x03
     b90:	22 83       	std	Z+2, r18	; 0x02
     b92:	15 82       	std	Z+5, r1	; 0x05
     b94:	14 82       	std	Z+4, r1	; 0x04
     b96:	17 82       	std	Z+7, r1	; 0x07
     b98:	16 82       	std	Z+6, r1	; 0x06
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	31 87       	std	Z+9, r19	; 0x09
     ba0:	20 87       	std	Z+8, r18	; 0x08
     ba2:	23 e0       	ldi	r18, 0x03	; 3
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	33 87       	std	Z+11, r19	; 0x0b
     ba8:	22 87       	std	Z+10, r18	; 0x0a
     baa:	15 86       	std	Z+13, r1	; 0x0d
     bac:	14 86       	std	Z+12, r1	; 0x0c
     bae:	17 86       	std	Z+15, r1	; 0x0f
     bb0:	16 86       	std	Z+14, r1	; 0x0e
     bb2:	91 8b       	std	Z+17, r25	; 0x11
     bb4:	80 8b       	std	Z+16, r24	; 0x10
     bb6:	84 e0       	ldi	r24, 0x04	; 4
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	93 8b       	std	Z+19, r25	; 0x13
     bbc:	82 8b       	std	Z+18, r24	; 0x12
     bbe:	49 e1       	ldi	r20, 0x19	; 25
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	55 8b       	std	Z+21, r21	; 0x15
     bc4:	44 8b       	std	Z+20, r20	; 0x14
     bc6:	44 e2       	ldi	r20, 0x24	; 36
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	57 8b       	std	Z+23, r21	; 0x17
     bcc:	46 8b       	std	Z+22, r20	; 0x16
     bce:	31 8f       	std	Z+25, r19	; 0x19
     bd0:	20 8f       	std	Z+24, r18	; 0x18
     bd2:	25 e0       	ldi	r18, 0x05	; 5
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	33 8f       	std	Z+27, r19	; 0x1b
     bd8:	22 8f       	std	Z+26, r18	; 0x1a
     bda:	15 8e       	std	Z+29, r1	; 0x1d
     bdc:	14 8e       	std	Z+28, r1	; 0x1c
     bde:	17 8e       	std	Z+31, r1	; 0x1f
     be0:	16 8e       	std	Z+30, r1	; 0x1e
     be2:	91 a3       	std	Z+33, r25	; 0x21
     be4:	80 a3       	std	Z+32, r24	; 0x20
     be6:	86 e0       	ldi	r24, 0x06	; 6
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	93 a3       	std	Z+35, r25	; 0x23
     bec:	82 a3       	std	Z+34, r24	; 0x22
     bee:	15 a2       	std	Z+37, r1	; 0x25
     bf0:	14 a2       	std	Z+36, r1	; 0x24
     bf2:	17 a2       	std	Z+39, r1	; 0x27
     bf4:	16 a2       	std	Z+38, r1	; 0x26
     bf6:	31 a7       	std	Z+41, r19	; 0x29
     bf8:	20 a7       	std	Z+40, r18	; 0x28
     bfa:	27 e0       	ldi	r18, 0x07	; 7
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	33 a7       	std	Z+43, r19	; 0x2b
     c00:	22 a7       	std	Z+42, r18	; 0x2a
     c02:	15 a6       	std	Z+45, r1	; 0x2d
     c04:	14 a6       	std	Z+44, r1	; 0x2c
     c06:	17 a6       	std	Z+47, r1	; 0x2f
     c08:	16 a6       	std	Z+46, r1	; 0x2e
     c0a:	91 ab       	std	Z+49, r25	; 0x31
     c0c:	80 ab       	std	Z+48, r24	; 0x30
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	93 ab       	std	Z+51, r25	; 0x33
     c14:	82 ab       	std	Z+50, r24	; 0x32
     c16:	45 e2       	ldi	r20, 0x25	; 37
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	55 ab       	std	Z+53, r21	; 0x35
     c1c:	44 ab       	std	Z+52, r20	; 0x34
     c1e:	46 e2       	ldi	r20, 0x26	; 38
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	57 ab       	std	Z+55, r21	; 0x37
     c24:	46 ab       	std	Z+54, r20	; 0x36
     c26:	31 af       	std	Z+57, r19	; 0x39
     c28:	20 af       	std	Z+56, r18	; 0x38
     c2a:	29 e0       	ldi	r18, 0x09	; 9
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	33 af       	std	Z+59, r19	; 0x3b
     c30:	22 af       	std	Z+58, r18	; 0x3a
     c32:	15 ae       	std	Z+61, r1	; 0x3d
     c34:	14 ae       	std	Z+60, r1	; 0x3c
     c36:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <node+0x3f>
     c3a:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <node+0x3e>
     c3e:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <node+0x41>
     c42:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <node+0x40>
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <node+0x43>
     c4e:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <node+0x42>
     c52:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <node+0x45>
     c56:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <node+0x44>
     c5a:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <node+0x47>
     c5e:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <node+0x46>
     c62:	30 93 8c 05 	sts	0x058C, r19	; 0x80058c <node+0x49>
     c66:	20 93 8b 05 	sts	0x058B, r18	; 0x80058b <node+0x48>
     c6a:	2b e0       	ldi	r18, 0x0B	; 11
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	30 93 8e 05 	sts	0x058E, r19	; 0x80058e <node+0x4b>
     c72:	20 93 8d 05 	sts	0x058D, r18	; 0x80058d <node+0x4a>
     c76:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <node+0x4d>
     c7a:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <node+0x4c>
     c7e:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <node+0x4f>
     c82:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <node+0x4e>
     c86:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <node+0x51>
     c8a:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <node+0x50>
     c8e:	8c e0       	ldi	r24, 0x0C	; 12
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <node+0x53>
     c96:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <node+0x52>
     c9a:	4c e1       	ldi	r20, 0x1C	; 28
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	50 93 98 05 	sts	0x0598, r21	; 0x800598 <node+0x55>
     ca2:	40 93 97 05 	sts	0x0597, r20	; 0x800597 <node+0x54>
     ca6:	4d e1       	ldi	r20, 0x1D	; 29
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	50 93 9a 05 	sts	0x059A, r21	; 0x80059a <node+0x57>
     cae:	40 93 99 05 	sts	0x0599, r20	; 0x800599 <node+0x56>
     cb2:	30 93 9c 05 	sts	0x059C, r19	; 0x80059c <node+0x59>
     cb6:	20 93 9b 05 	sts	0x059B, r18	; 0x80059b <node+0x58>
     cba:	2d e0       	ldi	r18, 0x0D	; 13
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	30 93 9e 05 	sts	0x059E, r19	; 0x80059e <node+0x5b>
     cc2:	20 93 9d 05 	sts	0x059D, r18	; 0x80059d <node+0x5a>
     cc6:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <node+0x5d>
     cca:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <node+0x5c>
     cce:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <node+0x5f>
     cd2:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <node+0x5e>
     cd6:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <node+0x61>
     cda:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <node+0x60>
     cde:	8e e0       	ldi	r24, 0x0E	; 14
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <node+0x63>
     ce6:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <node+0x62>
     cea:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <node+0x65>
     cee:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <node+0x64>
     cf2:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <node+0x67>
     cf6:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <node+0x66>
     cfa:	30 93 ac 05 	sts	0x05AC, r19	; 0x8005ac <node+0x69>
     cfe:	20 93 ab 05 	sts	0x05AB, r18	; 0x8005ab <node+0x68>
     d02:	d0 93 ae 05 	sts	0x05AE, r29	; 0x8005ae <node+0x6b>
     d06:	c0 93 ad 05 	sts	0x05AD, r28	; 0x8005ad <node+0x6a>
     d0a:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <node+0x6d>
     d0e:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <node+0x6c>
     d12:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <node+0x6f>
     d16:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <node+0x6e>
     d1a:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <node+0x71>
     d1e:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <node+0x70>
     d22:	20 e1       	ldi	r18, 0x10	; 16
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	30 93 b6 05 	sts	0x05B6, r19	; 0x8005b6 <node+0x73>
     d2a:	20 93 b5 05 	sts	0x05B5, r18	; 0x8005b5 <node+0x72>
     d2e:	87 e2       	ldi	r24, 0x27	; 39
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <node+0x75>
     d36:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <node+0x74>
     d3a:	88 e2       	ldi	r24, 0x28	; 40
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <node+0x77>
     d42:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <node+0x76>
     d46:	d0 93 bc 05 	sts	0x05BC, r29	; 0x8005bc <node+0x79>
     d4a:	c0 93 bb 05 	sts	0x05BB, r28	; 0x8005bb <node+0x78>
     d4e:	81 e1       	ldi	r24, 0x11	; 17
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 be 05 	sts	0x05BE, r25	; 0x8005be <node+0x7b>
     d56:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <node+0x7a>
     d5a:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <node+0x7d>
     d5e:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <node+0x7c>
     d62:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <node+0x7f>
     d66:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <node+0x7e>
     d6a:	30 93 c4 05 	sts	0x05C4, r19	; 0x8005c4 <node+0x81>
     d6e:	20 93 c3 05 	sts	0x05C3, r18	; 0x8005c3 <node+0x80>
     d72:	22 e1       	ldi	r18, 0x12	; 18
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	30 93 c6 05 	sts	0x05C6, r19	; 0x8005c6 <node+0x83>
     d7a:	20 93 c5 05 	sts	0x05C5, r18	; 0x8005c5 <node+0x82>
     d7e:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <node+0x85>
     d82:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <node+0x84>
     d86:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <node+0x87>
     d8a:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <node+0x86>
     d8e:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <node+0x89>
     d92:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <node+0x88>
     d96:	83 e1       	ldi	r24, 0x13	; 19
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <node+0x8b>
     d9e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <node+0x8a>
     da2:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <node+0x8d>
     da6:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <node+0x8c>
     daa:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <node+0x8f>
     dae:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <node+0x8e>
     db2:	30 93 d4 05 	sts	0x05D4, r19	; 0x8005d4 <node+0x91>
     db6:	20 93 d3 05 	sts	0x05D3, r18	; 0x8005d3 <node+0x90>
     dba:	24 e1       	ldi	r18, 0x14	; 20
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	30 93 d6 05 	sts	0x05D6, r19	; 0x8005d6 <node+0x93>
     dc2:	20 93 d5 05 	sts	0x05D5, r18	; 0x8005d5 <node+0x92>
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	50 93 d8 05 	sts	0x05D8, r21	; 0x8005d8 <node+0x95>
     dce:	40 93 d7 05 	sts	0x05D7, r20	; 0x8005d7 <node+0x94>
     dd2:	41 e2       	ldi	r20, 0x21	; 33
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	50 93 da 05 	sts	0x05DA, r21	; 0x8005da <node+0x97>
     dda:	40 93 d9 05 	sts	0x05D9, r20	; 0x8005d9 <node+0x96>
     dde:	90 93 dc 05 	sts	0x05DC, r25	; 0x8005dc <node+0x99>
     de2:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <node+0x98>
     de6:	85 e1       	ldi	r24, 0x15	; 21
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 de 05 	sts	0x05DE, r25	; 0x8005de <node+0x9b>
     dee:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <node+0x9a>
     df2:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <node+0x9d>
     df6:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <node+0x9c>
     dfa:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <node+0x9f>
     dfe:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <node+0x9e>
     e02:	30 93 e4 05 	sts	0x05E4, r19	; 0x8005e4 <node+0xa1>
     e06:	20 93 e3 05 	sts	0x05E3, r18	; 0x8005e3 <node+0xa0>
     e0a:	26 e1       	ldi	r18, 0x16	; 22
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <node+0xa3>
     e12:	20 93 e5 05 	sts	0x05E5, r18	; 0x8005e5 <node+0xa2>
     e16:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <node+0xa5>
     e1a:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <node+0xa4>
     e1e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <node+0xa7>
     e22:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <node+0xa6>
     e26:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <node+0xa9>
     e2a:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <node+0xa8>
     e2e:	87 e1       	ldi	r24, 0x17	; 23
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <node+0xab>
     e36:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <node+0xaa>
     e3a:	10 92 f0 05 	sts	0x05F0, r1	; 0x8005f0 <node+0xad>
     e3e:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <node+0xac>
     e42:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <node+0xaf>
     e46:	10 92 f1 05 	sts	0x05F1, r1	; 0x8005f1 <node+0xae>
     e4a:	86 e1       	ldi	r24, 0x16	; 22
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <node+0xb1>
     e52:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <node+0xb0>
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 f6 05 	sts	0x05F6, r25	; 0x8005f6 <node+0xb3>
     e5e:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <node+0xb2>
     e62:	c9 e2       	ldi	r28, 0x29	; 41
     e64:	d0 e0       	ldi	r29, 0x00	; 0
     e66:	d0 93 f8 05 	sts	0x05F8, r29	; 0x8005f8 <node+0xb5>
     e6a:	c0 93 f7 05 	sts	0x05F7, r28	; 0x8005f7 <node+0xb4>
     e6e:	0f 2e       	mov	r0, r31
     e70:	fa e2       	ldi	r31, 0x2A	; 42
     e72:	af 2e       	mov	r10, r31
     e74:	b1 2c       	mov	r11, r1
     e76:	f0 2d       	mov	r31, r0
     e78:	b0 92 fa 05 	sts	0x05FA, r11	; 0x8005fa <node+0xb7>
     e7c:	a0 92 f9 05 	sts	0x05F9, r10	; 0x8005f9 <node+0xb6>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	90 93 fc 05 	sts	0x05FC, r25	; 0x8005fc <node+0xb9>
     e88:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <node+0xb8>
     e8c:	e7 e1       	ldi	r30, 0x17	; 23
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	f0 93 fe 05 	sts	0x05FE, r31	; 0x8005fe <node+0xbb>
     e94:	e0 93 fd 05 	sts	0x05FD, r30	; 0x8005fd <node+0xba>
     e98:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <node+0xbd>
     e9c:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <node+0xbc>
     ea0:	10 92 02 06 	sts	0x0602, r1	; 0x800602 <node+0xbf>
     ea4:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <node+0xbe>
     ea8:	0f 2e       	mov	r0, r31
     eaa:	f3 e0       	ldi	r31, 0x03	; 3
     eac:	8f 2e       	mov	r8, r31
     eae:	91 2c       	mov	r9, r1
     eb0:	f0 2d       	mov	r31, r0
     eb2:	90 92 04 06 	sts	0x0604, r9	; 0x800604 <node+0xc1>
     eb6:	80 92 03 06 	sts	0x0603, r8	; 0x800603 <node+0xc0>
     eba:	6a e1       	ldi	r22, 0x1A	; 26
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	70 93 06 06 	sts	0x0606, r23	; 0x800606 <node+0xc3>
     ec2:	60 93 05 06 	sts	0x0605, r22	; 0x800605 <node+0xc2>
     ec6:	a4 e2       	ldi	r26, 0x24	; 36
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	b0 93 08 06 	sts	0x0608, r27	; 0x800608 <node+0xc5>
     ece:	a0 93 07 06 	sts	0x0607, r26	; 0x800607 <node+0xc4>
     ed2:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <node+0xc7>
     ed6:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <node+0xc6>
     eda:	0f 2e       	mov	r0, r31
     edc:	f9 e1       	ldi	r31, 0x19	; 25
     ede:	6f 2e       	mov	r6, r31
     ee0:	71 2c       	mov	r7, r1
     ee2:	f0 2d       	mov	r31, r0
     ee4:	70 92 0c 06 	sts	0x060C, r7	; 0x80060c <node+0xc9>
     ee8:	60 92 0b 06 	sts	0x060B, r6	; 0x80060b <node+0xc8>
     eec:	4b e1       	ldi	r20, 0x1B	; 27
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	50 93 0e 06 	sts	0x060E, r21	; 0x80060e <node+0xcb>
     ef4:	40 93 0d 06 	sts	0x060D, r20	; 0x80060d <node+0xca>
     ef8:	85 e2       	ldi	r24, 0x25	; 37
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <node+0xcd>
     f00:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <node+0xcc>
     f04:	0f 2e       	mov	r0, r31
     f06:	fc e2       	ldi	r31, 0x2C	; 44
     f08:	4f 2e       	mov	r4, r31
     f0a:	51 2c       	mov	r5, r1
     f0c:	f0 2d       	mov	r31, r0
     f0e:	50 92 12 06 	sts	0x0612, r5	; 0x800612 <node+0xcf>
     f12:	40 92 11 06 	sts	0x0611, r4	; 0x800611 <node+0xce>
     f16:	70 93 14 06 	sts	0x0614, r23	; 0x800614 <node+0xd1>
     f1a:	60 93 13 06 	sts	0x0613, r22	; 0x800613 <node+0xd0>
     f1e:	2c e1       	ldi	r18, 0x1C	; 28
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	30 93 16 06 	sts	0x0616, r19	; 0x800616 <node+0xd3>
     f26:	20 93 15 06 	sts	0x0615, r18	; 0x800615 <node+0xd2>
     f2a:	86 e2       	ldi	r24, 0x26	; 38
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 93 18 06 	sts	0x0618, r25	; 0x800618 <node+0xd5>
     f32:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <node+0xd4>
     f36:	0d e2       	ldi	r16, 0x2D	; 45
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	10 93 1a 06 	sts	0x061A, r17	; 0x80061a <node+0xd7>
     f3e:	00 93 19 06 	sts	0x0619, r16	; 0x800619 <node+0xd6>
     f42:	0b e0       	ldi	r16, 0x0B	; 11
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	10 93 1c 06 	sts	0x061C, r17	; 0x80061c <node+0xd9>
     f4a:	00 93 1b 06 	sts	0x061B, r16	; 0x80061b <node+0xd8>
     f4e:	50 93 1e 06 	sts	0x061E, r21	; 0x80061e <node+0xdb>
     f52:	40 93 1d 06 	sts	0x061D, r20	; 0x80061d <node+0xda>
     f56:	8d e1       	ldi	r24, 0x1D	; 29
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	90 93 20 06 	sts	0x0620, r25	; 0x800620 <node+0xdd>
     f5e:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <node+0xdc>
     f62:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <node+0xdf>
     f66:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <node+0xde>
     f6a:	10 93 24 06 	sts	0x0624, r17	; 0x800624 <node+0xe1>
     f6e:	00 93 23 06 	sts	0x0623, r16	; 0x800623 <node+0xe0>
     f72:	30 93 26 06 	sts	0x0626, r19	; 0x800626 <node+0xe3>
     f76:	20 93 25 06 	sts	0x0625, r18	; 0x800625 <node+0xe2>
     f7a:	2e e1       	ldi	r18, 0x1E	; 30
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	30 93 28 06 	sts	0x0628, r19	; 0x800628 <node+0xe5>
     f82:	20 93 27 06 	sts	0x0627, r18	; 0x800627 <node+0xe4>
     f86:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <node+0xe7>
     f8a:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <node+0xe6>
     f8e:	90 93 2c 06 	sts	0x062C, r25	; 0x80062c <node+0xe9>
     f92:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <node+0xe8>
     f96:	8f e1       	ldi	r24, 0x1F	; 31
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <node+0xeb>
     f9e:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <node+0xea>
     fa2:	07 e2       	ldi	r16, 0x27	; 39
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	10 93 30 06 	sts	0x0630, r17	; 0x800630 <node+0xed>
     faa:	00 93 2f 06 	sts	0x062F, r16	; 0x80062f <node+0xec>
     fae:	0f 2e       	mov	r0, r31
     fb0:	fe e2       	ldi	r31, 0x2E	; 46
     fb2:	2f 2e       	mov	r2, r31
     fb4:	31 2c       	mov	r3, r1
     fb6:	f0 2d       	mov	r31, r0
     fb8:	30 92 32 06 	sts	0x0632, r3	; 0x800632 <node+0xef>
     fbc:	20 92 31 06 	sts	0x0631, r2	; 0x800631 <node+0xee>
     fc0:	30 93 34 06 	sts	0x0634, r19	; 0x800634 <node+0xf1>
     fc4:	20 93 33 06 	sts	0x0633, r18	; 0x800633 <node+0xf0>
     fc8:	68 94       	set
     fca:	ee 24       	eor	r14, r14
     fcc:	e5 f8       	bld	r14, 5
     fce:	f1 2c       	mov	r15, r1
     fd0:	f0 92 36 06 	sts	0x0636, r15	; 0x800636 <node+0xf3>
     fd4:	e0 92 35 06 	sts	0x0635, r14	; 0x800635 <node+0xf2>
     fd8:	08 e2       	ldi	r16, 0x28	; 40
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	10 93 38 06 	sts	0x0638, r17	; 0x800638 <node+0xf5>
     fe0:	00 93 37 06 	sts	0x0637, r16	; 0x800637 <node+0xf4>
     fe4:	0f 2e       	mov	r0, r31
     fe6:	ff e2       	ldi	r31, 0x2F	; 47
     fe8:	cf 2e       	mov	r12, r31
     fea:	d1 2c       	mov	r13, r1
     fec:	f0 2d       	mov	r31, r0
     fee:	d0 92 3a 06 	sts	0x063A, r13	; 0x80063a <node+0xf7>
     ff2:	c0 92 39 06 	sts	0x0639, r12	; 0x800639 <node+0xf6>
     ff6:	0f 2e       	mov	r0, r31
     ff8:	f3 e1       	ldi	r31, 0x13	; 19
     ffa:	cf 2e       	mov	r12, r31
     ffc:	d1 2c       	mov	r13, r1
     ffe:	f0 2d       	mov	r31, r0
    1000:	d0 92 3c 06 	sts	0x063C, r13	; 0x80063c <node+0xf9>
    1004:	c0 92 3b 06 	sts	0x063B, r12	; 0x80063b <node+0xf8>
    1008:	90 93 3e 06 	sts	0x063E, r25	; 0x80063e <node+0xfb>
    100c:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <node+0xfa>
    1010:	01 e2       	ldi	r16, 0x21	; 33
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	10 93 40 06 	sts	0x0640, r17	; 0x800640 <node+0xfd>
    1018:	00 93 3f 06 	sts	0x063F, r16	; 0x80063f <node+0xfc>
    101c:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <node+0xff>
    1020:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <node+0xfe>
    1024:	d0 92 44 06 	sts	0x0644, r13	; 0x800644 <node+0x101>
    1028:	c0 92 43 06 	sts	0x0643, r12	; 0x800643 <node+0x100>
    102c:	f0 92 46 06 	sts	0x0646, r15	; 0x800646 <node+0x103>
    1030:	e0 92 45 06 	sts	0x0645, r14	; 0x800645 <node+0x102>
    1034:	0f 2e       	mov	r0, r31
    1036:	f2 e2       	ldi	r31, 0x22	; 34
    1038:	ef 2e       	mov	r14, r31
    103a:	f1 2c       	mov	r15, r1
    103c:	f0 2d       	mov	r31, r0
    103e:	f0 92 48 06 	sts	0x0648, r15	; 0x800648 <node+0x105>
    1042:	e0 92 47 06 	sts	0x0647, r14	; 0x800647 <node+0x104>
    1046:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <node+0x107>
    104a:	10 92 49 06 	sts	0x0649, r1	; 0x800649 <node+0x106>
    104e:	10 93 4c 06 	sts	0x064C, r17	; 0x80064c <node+0x109>
    1052:	00 93 4b 06 	sts	0x064B, r16	; 0x80064b <node+0x108>
    1056:	03 e2       	ldi	r16, 0x23	; 35
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	10 93 4e 06 	sts	0x064E, r17	; 0x80064e <node+0x10b>
    105e:	00 93 4d 06 	sts	0x064D, r16	; 0x80064d <node+0x10a>
    1062:	d0 93 50 06 	sts	0x0650, r29	; 0x800650 <node+0x10d>
    1066:	c0 93 4f 06 	sts	0x064F, r28	; 0x80064f <node+0x10c>
    106a:	c0 e3       	ldi	r28, 0x30	; 48
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	d0 93 52 06 	sts	0x0652, r29	; 0x800652 <node+0x10f>
    1072:	c0 93 51 06 	sts	0x0651, r28	; 0x800651 <node+0x10e>
    1076:	f0 92 54 06 	sts	0x0654, r15	; 0x800654 <node+0x111>
    107a:	e0 92 53 06 	sts	0x0653, r14	; 0x800653 <node+0x110>
    107e:	b0 93 56 06 	sts	0x0656, r27	; 0x800656 <node+0x113>
    1082:	a0 93 55 06 	sts	0x0655, r26	; 0x800655 <node+0x112>
    1086:	b0 92 58 06 	sts	0x0658, r11	; 0x800658 <node+0x115>
    108a:	a0 92 57 06 	sts	0x0657, r10	; 0x800657 <node+0x114>
    108e:	ab e2       	ldi	r26, 0x2B	; 43
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	b0 93 5a 06 	sts	0x065A, r27	; 0x80065a <node+0x117>
    1096:	a0 93 59 06 	sts	0x0659, r26	; 0x800659 <node+0x116>
    109a:	90 92 5c 06 	sts	0x065C, r9	; 0x80065c <node+0x119>
    109e:	80 92 5b 06 	sts	0x065B, r8	; 0x80065b <node+0x118>
    10a2:	70 92 5e 06 	sts	0x065E, r7	; 0x80065e <node+0x11b>
    10a6:	60 92 5d 06 	sts	0x065D, r6	; 0x80065d <node+0x11a>
    10aa:	10 93 60 06 	sts	0x0660, r17	; 0x800660 <node+0x11d>
    10ae:	00 93 5f 06 	sts	0x065F, r16	; 0x80065f <node+0x11c>
    10b2:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <node+0x11f>
    10b6:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <node+0x11e>
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f7 e0       	ldi	r31, 0x07	; 7
    10be:	cf 2e       	mov	r12, r31
    10c0:	d1 2c       	mov	r13, r1
    10c2:	f0 2d       	mov	r31, r0
    10c4:	d0 92 64 06 	sts	0x0664, r13	; 0x800664 <node+0x121>
    10c8:	c0 92 63 06 	sts	0x0663, r12	; 0x800663 <node+0x120>
    10cc:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <node+0x123>
    10d0:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <node+0x122>
    10d4:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <node+0x125>
    10d8:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <node+0x124>
    10dc:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <node+0x127>
    10e0:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <node+0x126>
    10e4:	d0 92 6c 06 	sts	0x066C, r13	; 0x80066c <node+0x129>
    10e8:	c0 92 6b 06 	sts	0x066B, r12	; 0x80066b <node+0x128>
    10ec:	50 93 6e 06 	sts	0x066E, r21	; 0x80066e <node+0x12b>
    10f0:	40 93 6d 06 	sts	0x066D, r20	; 0x80066d <node+0x12a>
    10f4:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <node+0x12d>
    10f8:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <node+0x12c>
    10fc:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <node+0x12f>
    1100:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <node+0x12e>
    1104:	0f 2e       	mov	r0, r31
    1106:	ff e0       	ldi	r31, 0x0F	; 15
    1108:	cf 2e       	mov	r12, r31
    110a:	d1 2c       	mov	r13, r1
    110c:	f0 2d       	mov	r31, r0
    110e:	d0 92 74 06 	sts	0x0674, r13	; 0x800674 <node+0x131>
    1112:	c0 92 73 06 	sts	0x0673, r12	; 0x800673 <node+0x130>
    1116:	30 93 76 06 	sts	0x0676, r19	; 0x800676 <node+0x133>
    111a:	20 93 75 06 	sts	0x0675, r18	; 0x800675 <node+0x132>
    111e:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <node+0x135>
    1122:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <node+0x134>
    1126:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <node+0x137>
    112a:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <node+0x136>
    112e:	d0 92 7c 06 	sts	0x067C, r13	; 0x80067c <node+0x139>
    1132:	c0 92 7b 06 	sts	0x067B, r12	; 0x80067b <node+0x138>
    1136:	90 93 7e 06 	sts	0x067E, r25	; 0x80067e <node+0x13b>
    113a:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <node+0x13a>
    113e:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <node+0x13d>
    1142:	10 92 7f 06 	sts	0x067F, r1	; 0x80067f <node+0x13c>
    1146:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <node+0x13f>
    114a:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <node+0x13e>
    114e:	f0 93 84 06 	sts	0x0684, r31	; 0x800684 <node+0x141>
    1152:	e0 93 83 06 	sts	0x0683, r30	; 0x800683 <node+0x140>
    1156:	f0 92 86 06 	sts	0x0686, r15	; 0x800686 <node+0x143>
    115a:	e0 92 85 06 	sts	0x0685, r14	; 0x800685 <node+0x142>
    115e:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <node+0x145>
    1162:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <node+0x144>
    1166:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <node+0x147>
    116a:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <node+0x146>
    116e:	f0 93 8c 06 	sts	0x068C, r31	; 0x80068c <node+0x149>
    1172:	e0 93 8b 06 	sts	0x068B, r30	; 0x80068b <node+0x148>
    1176:	10 93 8e 06 	sts	0x068E, r17	; 0x80068e <node+0x14b>
    117a:	00 93 8d 06 	sts	0x068D, r16	; 0x80068d <node+0x14a>
    117e:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <node+0x14d>
    1182:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <node+0x14c>
    1186:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <node+0x14f>
    118a:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <node+0x14e>
    118e:	10 93 94 06 	sts	0x0694, r17	; 0x800694 <node+0x151>
    1192:	00 93 93 06 	sts	0x0693, r16	; 0x800693 <node+0x150>
    1196:	50 92 96 06 	sts	0x0696, r5	; 0x800696 <node+0x153>
    119a:	40 92 95 06 	sts	0x0695, r4	; 0x800695 <node+0x152>
    119e:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <node+0x155>
    11a2:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <node+0x154>
    11a6:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <node+0x157>
    11aa:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <node+0x156>
    11ae:	70 93 9c 06 	sts	0x069C, r23	; 0x80069c <node+0x159>
    11b2:	60 93 9b 06 	sts	0x069B, r22	; 0x80069b <node+0x158>
    11b6:	b0 93 9e 06 	sts	0x069E, r27	; 0x80069e <node+0x15b>
    11ba:	a0 93 9d 06 	sts	0x069D, r26	; 0x80069d <node+0x15a>
    11be:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <node+0x15d>
    11c2:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <node+0x15c>
    11c6:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <node+0x15f>
    11ca:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <node+0x15e>
    11ce:	50 93 a4 06 	sts	0x06A4, r21	; 0x8006a4 <node+0x161>
    11d2:	40 93 a3 06 	sts	0x06A3, r20	; 0x8006a3 <node+0x160>
    11d6:	30 92 a6 06 	sts	0x06A6, r3	; 0x8006a6 <node+0x163>
    11da:	20 92 a5 06 	sts	0x06A5, r2	; 0x8006a5 <node+0x162>
    11de:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <node+0x165>
    11e2:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <node+0x164>
    11e6:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <node+0x167>
    11ea:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <node+0x166>
    11ee:	30 93 ac 06 	sts	0x06AC, r19	; 0x8006ac <node+0x169>
    11f2:	20 93 ab 06 	sts	0x06AB, r18	; 0x8006ab <node+0x168>
    11f6:	0d e2       	ldi	r16, 0x2D	; 45
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	10 93 ae 06 	sts	0x06AE, r17	; 0x8006ae <node+0x16b>
    11fe:	00 93 ad 06 	sts	0x06AD, r16	; 0x8006ad <node+0x16a>
    1202:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <node+0x16d>
    1206:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <node+0x16c>
    120a:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <node+0x16f>
    120e:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <node+0x16e>
    1212:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <node+0x171>
    1216:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <node+0x170>
    121a:	d0 93 b6 06 	sts	0x06B6, r29	; 0x8006b6 <node+0x173>
    121e:	c0 93 b5 06 	sts	0x06B5, r28	; 0x8006b5 <node+0x172>
    1222:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <node+0x175>
    1226:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <node+0x174>
    122a:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <node+0x177>
    122e:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <node+0x176>
    1232:	f0 92 bc 06 	sts	0x06BC, r15	; 0x8006bc <node+0x179>
    1236:	e0 92 bb 06 	sts	0x06BB, r14	; 0x8006bb <node+0x178>
    123a:	2f e2       	ldi	r18, 0x2F	; 47
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	30 93 be 06 	sts	0x06BE, r19	; 0x8006be <node+0x17b>
    1242:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <node+0x17a>
    1246:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <node+0x17d>
    124a:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <node+0x17c>
    124e:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <node+0x17f>
    1252:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <node+0x17e>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	9f 90       	pop	r9
    126c:	8f 90       	pop	r8
    126e:	7f 90       	pop	r7
    1270:	6f 90       	pop	r6
    1272:	5f 90       	pop	r5
    1274:	4f 90       	pop	r4
    1276:	3f 90       	pop	r3
    1278:	2f 90       	pop	r2
    127a:	08 95       	ret

0000127c <__vector_25>:
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    129e:	88 23       	and	r24, r24
    12a0:	0c f0       	brlt	.+2      	; 0x12a4 <__vector_25+0x28>
    12a2:	58 c0       	rjmp	.+176    	; 0x1354 <__vector_25+0xd8>
    12a4:	98 2f       	mov	r25, r24
    12a6:	9f 77       	andi	r25, 0x7F	; 127
    12a8:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <lastCommand>
    12ac:	4e 2f       	mov	r20, r30
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	fa 01       	movw	r30, r20
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	ea 30       	cpi	r30, 0x0A	; 10
    12b6:	f1 05       	cpc	r31, r1
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__vector_25+0x40>
    12ba:	53 c0       	rjmp	.+166    	; 0x1362 <__vector_25+0xe6>
    12bc:	88 27       	eor	r24, r24
    12be:	ee 58       	subi	r30, 0x8E	; 142
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__tablejump2__>
    12c8:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <noteCount>
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	e3 53       	subi	r30, 0x33	; 51
    12d0:	fb 4f       	sbci	r31, 0xFB	; 251
    12d2:	90 83       	st	Z, r25
    12d4:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <noteCount>
    12de:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    12e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    12e6:	3d c0       	rjmp	.+122    	; 0x1362 <__vector_25+0xe6>
    12e8:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <taskCount>
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	e9 54       	subi	r30, 0x49	; 73
    12f0:	fb 4f       	sbci	r31, 0xFB	; 251
    12f2:	90 83       	st	Z, r25
    12f4:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <taskCount>
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <taskCount>
    12fe:	31 c0       	rjmp	.+98     	; 0x1362 <__vector_25+0xe6>
    1300:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <otherBotLocation>
    1304:	2e c0       	rjmp	.+92     	; 0x1362 <__vector_25+0xe6>
    1306:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <otherBotMovingTo>
    130a:	2b c0       	rjmp	.+86     	; 0x1362 <__vector_25+0xe6>
    130c:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <noteToStrike>
    1310:	89 13       	cpse	r24, r25
    1312:	27 c0       	rjmp	.+78     	; 0x1362 <__vector_25+0xe6>
    1314:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <noteToStrike>
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <noteToStrike>
    131e:	21 c0       	rjmp	.+66     	; 0x1362 <__vector_25+0xe6>
    1320:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <noteToProcess>
    1324:	89 13       	cpse	r24, r25
    1326:	1d c0       	rjmp	.+58     	; 0x1362 <__vector_25+0xe6>
    1328:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <noteToProcess>
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <noteToProcess>
    1332:	17 c0       	rjmp	.+46     	; 0x1362 <__vector_25+0xe6>
    1334:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <taskCost>
    1338:	89 0f       	add	r24, r25
    133a:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <taskCost>
    133e:	11 c0       	rjmp	.+34     	; 0x1362 <__vector_25+0xe6>
    1340:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <otherBotLastTaskIndex>
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <__vector_25+0xe6>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <botEnd+0x1>
    134e:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <botEnd>
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__vector_25+0xe6>
    1354:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <lastCommand>
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	19 f4       	brne	.+6      	; 0x1362 <__vector_25+0xe6>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <notesReceived>
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	0f 90       	pop	r0
    1374:	0b be       	out	0x3b, r0	; 59
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_51>:
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	0b b6       	in	r0, 0x3b	; 59
    138c:	0f 92       	push	r0
    138e:	8f 93       	push	r24
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	81 f0       	breq	.+32     	; 0x13bc <__vector_51+0x3c>
    139c:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <noteCount>
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	e3 53       	subi	r30, 0x33	; 51
    13a4:	fb 4f       	sbci	r31, 0xFB	; 251
    13a6:	80 83       	st	Z, r24
    13a8:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <noteCount>
    13b2:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    13b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <__vector_51+0x46>
    13bc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <notesReceived>
    13c6:	ff 91       	pop	r31
    13c8:	ef 91       	pop	r30
    13ca:	8f 91       	pop	r24
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <buzzer_pin_config>:
    13da:	3b 9a       	sbi	0x07, 3	; 7
    13dc:	43 98       	cbi	0x08, 3	; 8
    13de:	08 95       	ret

000013e0 <buzzer_on>:
    13e0:	86 b1       	in	r24, 0x06	; 6
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	88 b9       	out	0x08, r24	; 8
    13e6:	08 95       	ret

000013e8 <buzzer_off>:
    13e8:	86 b1       	in	r24, 0x06	; 6
    13ea:	87 7f       	andi	r24, 0xF7	; 247
    13ec:	88 b9       	out	0x08, r24	; 8
    13ee:	08 95       	ret

000013f0 <adc_pin_config>:
    13f0:	10 ba       	out	0x10, r1	; 16
    13f2:	11 ba       	out	0x11, r1	; 17
    13f4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    13f8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    13fc:	08 95       	ret

000013fe <motion_pin_config>:
    13fe:	81 b1       	in	r24, 0x01	; 1
    1400:	8f 60       	ori	r24, 0x0F	; 15
    1402:	81 b9       	out	0x01, r24	; 1
    1404:	82 b1       	in	r24, 0x02	; 2
    1406:	80 7f       	andi	r24, 0xF0	; 240
    1408:	82 b9       	out	0x02, r24	; 2
    140a:	ea e0       	ldi	r30, 0x0A	; 10
    140c:	f1 e0       	ldi	r31, 0x01	; 1
    140e:	80 81       	ld	r24, Z
    1410:	88 61       	ori	r24, 0x18	; 24
    1412:	80 83       	st	Z, r24
    1414:	eb e0       	ldi	r30, 0x0B	; 11
    1416:	f1 e0       	ldi	r31, 0x01	; 1
    1418:	80 81       	ld	r24, Z
    141a:	88 61       	ori	r24, 0x18	; 24
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret

00001420 <left_encoder_pin_config>:
    1420:	6c 98       	cbi	0x0d, 4	; 13
    1422:	74 9a       	sbi	0x0e, 4	; 14
    1424:	08 95       	ret

00001426 <right_encoder_pin_config>:
    1426:	6d 98       	cbi	0x0d, 5	; 13
    1428:	75 9a       	sbi	0x0e, 5	; 14
    142a:	08 95       	ret

0000142c <port_init>:
    142c:	e8 df       	rcall	.-48     	; 0x13fe <motion_pin_config>
    142e:	f8 df       	rcall	.-16     	; 0x1420 <left_encoder_pin_config>
    1430:	fa df       	rcall	.-12     	; 0x1426 <right_encoder_pin_config>
    1432:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_port_config>
    1436:	dc df       	rcall	.-72     	; 0x13f0 <adc_pin_config>
    1438:	d0 cf       	rjmp	.-96     	; 0x13da <buzzer_pin_config>
    143a:	08 95       	ret

0000143c <timer5_init>:
    143c:	e1 e2       	ldi	r30, 0x21	; 33
    143e:	f1 e0       	ldi	r31, 0x01	; 1
    1440:	10 82       	st	Z, r1
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    144e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1452:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1456:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    145a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    145e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1462:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    1466:	89 ea       	ldi	r24, 0xA9	; 169
    1468:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    146c:	8b e0       	ldi	r24, 0x0B	; 11
    146e:	80 83       	st	Z, r24
    1470:	08 95       	ret

00001472 <adc_init>:
    1472:	ea e7       	ldi	r30, 0x7A	; 122
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1
    1478:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1482:	80 e8       	ldi	r24, 0x80	; 128
    1484:	80 bf       	out	0x30, r24	; 48
    1486:	86 e8       	ldi	r24, 0x86	; 134
    1488:	80 83       	st	Z, r24
    148a:	08 95       	ret

0000148c <ADC_Conversion>:
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	18 f0       	brcs	.+6      	; 0x1496 <ADC_Conversion+0xa>
    1490:	98 e0       	ldi	r25, 0x08	; 8
    1492:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1496:	87 70       	andi	r24, 0x07	; 7
    1498:	80 62       	ori	r24, 0x20	; 32
    149a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    149e:	ea e7       	ldi	r30, 0x7A	; 122
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 64       	ori	r24, 0x40	; 64
    14a6:	80 83       	st	Z, r24
    14a8:	80 81       	ld	r24, Z
    14aa:	84 ff       	sbrs	r24, 4
    14ac:	fd cf       	rjmp	.-6      	; 0x14a8 <ADC_Conversion+0x1c>
    14ae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    14b2:	ea e7       	ldi	r30, 0x7A	; 122
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	90 81       	ld	r25, Z
    14b8:	90 61       	ori	r25, 0x10	; 16
    14ba:	90 83       	st	Z, r25
    14bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    14c0:	08 95       	ret

000014c2 <print_sensor>:
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	c8 2f       	mov	r28, r24
    14c8:	d6 2f       	mov	r29, r22
    14ca:	84 2f       	mov	r24, r20
    14cc:	df df       	rcall	.-66     	; 0x148c <ADC_Conversion>
    14ce:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <ADC_Value>
    14d2:	48 2f       	mov	r20, r24
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	23 e0       	ldi	r18, 0x03	; 3
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	6d 2f       	mov	r22, r29
    14dc:	8c 2f       	mov	r24, r28
    14de:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <left_position_encoder_interrupt_init>:
    14e8:	f8 94       	cli
    14ea:	ea e6       	ldi	r30, 0x6A	; 106
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	80 83       	st	Z, r24
    14f4:	ec 9a       	sbi	0x1d, 4	; 29
    14f6:	78 94       	sei
    14f8:	08 95       	ret

000014fa <right_position_encoder_interrupt_init>:
    14fa:	f8 94       	cli
    14fc:	ea e6       	ldi	r30, 0x6A	; 106
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	88 60       	ori	r24, 0x08	; 8
    1504:	80 83       	st	Z, r24
    1506:	ed 9a       	sbi	0x1d, 5	; 29
    1508:	78 94       	sei
    150a:	08 95       	ret

0000150c <__vector_6>:
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <ShaftCountRight>
    1522:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <ShaftCountRight+0x1>
    1526:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <ShaftCountRight+0x2>
    152a:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <ShaftCountRight+0x3>
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	a1 1d       	adc	r26, r1
    1532:	b1 1d       	adc	r27, r1
    1534:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <ShaftCountRight>
    1538:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <ShaftCountRight+0x1>
    153c:	a0 93 7c 04 	sts	0x047C, r26	; 0x80047c <ShaftCountRight+0x2>
    1540:	b0 93 7d 04 	sts	0x047D, r27	; 0x80047d <ShaftCountRight+0x3>
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_5>:
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <ShaftCountLeft>
    156c:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <ShaftCountLeft+0x1>
    1570:	a0 91 80 04 	lds	r26, 0x0480	; 0x800480 <ShaftCountLeft+0x2>
    1574:	b0 91 81 04 	lds	r27, 0x0481	; 0x800481 <ShaftCountLeft+0x3>
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	a1 1d       	adc	r26, r1
    157c:	b1 1d       	adc	r27, r1
    157e:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <ShaftCountLeft>
    1582:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <ShaftCountLeft+0x1>
    1586:	a0 93 80 04 	sts	0x0480, r26	; 0x800480 <ShaftCountLeft+0x2>
    158a:	b0 93 81 04 	sts	0x0481, r27	; 0x800481 <ShaftCountLeft+0x3>
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <motion_set>:
    15a0:	92 b1       	in	r25, 0x02	; 2
    15a2:	90 7f       	andi	r25, 0xF0	; 240
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	98 2b       	or	r25, r24
    15a8:	92 b9       	out	0x02, r25	; 2
    15aa:	08 95       	ret

000015ac <forward>:
    15ac:	86 e0       	ldi	r24, 0x06	; 6
    15ae:	f8 cf       	rjmp	.-16     	; 0x15a0 <motion_set>
    15b0:	08 95       	ret

000015b2 <left>:
    15b2:	85 e0       	ldi	r24, 0x05	; 5
    15b4:	f5 cf       	rjmp	.-22     	; 0x15a0 <motion_set>
    15b6:	08 95       	ret

000015b8 <right>:
    15b8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <thresh>
    15bc:	f1 cf       	rjmp	.-30     	; 0x15a0 <motion_set>
    15be:	08 95       	ret

000015c0 <stop>:
}

void stop (void)
{
	motion_set(0x00);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	ee cf       	rjmp	.-36     	; 0x15a0 <motion_set>
    15c4:	08 95       	ret

000015c6 <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    15d2:	bc 01       	movw	r22, r24
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	96 d7       	rcall	.+3884   	; 0x2506 <__floatunsisf>
    15da:	28 e4       	ldi	r18, 0x48	; 72
    15dc:	31 ee       	ldi	r19, 0xE1	; 225
    15de:	42 e8       	ldi	r20, 0x82	; 130
    15e0:	50 e4       	ldi	r21, 0x40	; 64
    15e2:	fd d6       	rcall	.+3578   	; 0x23de <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    15e4:	64 d7       	rcall	.+3784   	; 0x24ae <__fixunssfsi>
    15e6:	ab 01       	movw	r20, r22
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
	ShaftCountRight = 0;
    15ec:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <ShaftCountRight>
    15f0:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <ShaftCountRight+0x1>
    15f4:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <ShaftCountRight+0x2>
    15f8:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
    15fc:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <ShaftCountLeft>
    1600:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <ShaftCountLeft+0x1>
    1604:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <ShaftCountLeft+0x2>
    1608:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <ShaftCountLeft+0x3>

	while (1)
	{
		//lcd_print(1,5,ShaftCountRight,3);
		//lcd_print(2,10,ShaftCountRight,2);
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	e0 e0       	ldi	r30, 0x00	; 0
    1610:	c0 90 7a 04 	lds	r12, 0x047A	; 0x80047a <ShaftCountRight>
    1614:	d0 90 7b 04 	lds	r13, 0x047B	; 0x80047b <ShaftCountRight+0x1>
    1618:	e0 90 7c 04 	lds	r14, 0x047C	; 0x80047c <ShaftCountRight+0x2>
    161c:	f0 90 7d 04 	lds	r15, 0x047D	; 0x80047d <ShaftCountRight+0x3>
    1620:	00 91 7e 04 	lds	r16, 0x047E	; 0x80047e <ShaftCountLeft>
    1624:	10 91 7f 04 	lds	r17, 0x047F	; 0x80047f <ShaftCountLeft+0x1>
    1628:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <ShaftCountLeft+0x2>
    162c:	30 91 81 04 	lds	r19, 0x0481	; 0x800481 <ShaftCountLeft+0x3>
    1630:	89 2f       	mov	r24, r25
    1632:	04 17       	cp	r16, r20
    1634:	15 07       	cpc	r17, r21
    1636:	26 07       	cpc	r18, r22
    1638:	37 07       	cpc	r19, r23
    163a:	08 f4       	brcc	.+2      	; 0x163e <angle_rotate+0x78>
    163c:	8e 2f       	mov	r24, r30
    163e:	81 11       	cpse	r24, r1
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <angle_rotate+0x8e>
    1642:	89 2f       	mov	r24, r25
    1644:	c4 16       	cp	r12, r20
    1646:	d5 06       	cpc	r13, r21
    1648:	e6 06       	cpc	r14, r22
    164a:	f7 06       	cpc	r15, r23
    164c:	08 f4       	brcc	.+2      	; 0x1650 <angle_rotate+0x8a>
    164e:	8e 2f       	mov	r24, r30
    1650:	88 23       	and	r24, r24
    1652:	f1 f2       	breq	.-68     	; 0x1610 <angle_rotate+0x4a>
		break;
	}
	//stop(); //Stop robot
}
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	08 95       	ret

00001662 <left_degrees>:



void left_degrees(unsigned int Degrees)
{
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    1668:	a4 df       	rcall	.-184    	; 0x15b2 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    166a:	9f ef       	ldi	r25, 0xFF	; 255
    166c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1670:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	velocity(255,255);
	angle_rotate(Degrees);
    1674:	ce 01       	movw	r24, r28
    1676:	a7 df       	rcall	.-178    	; 0x15c6 <angle_rotate>
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    1684:	99 df       	rcall	.-206    	; 0x15b8 <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    168c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	velocity(255,255);
	angle_rotate(Degrees);
    1690:	ce 01       	movw	r24, r28
    1692:	99 df       	rcall	.-206    	; 0x15c6 <angle_rotate>
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    16a0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    16a4:	08 95       	ret

000016a6 <init_devices>:
}

void init_devices()
{
	cli(); //Clears the global interrupt
    16a6:	f8 94       	cli
	port_init();  //Initializes all the ports
    16a8:	c1 de       	rcall	.-638    	; 0x142c <port_init>
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    16aa:	e1 ec       	ldi	r30, 0xC1	; 193
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    16b0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    16b4:	26 e0       	ldi	r18, 0x06	; 6
    16b6:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    16ba:	9f e5       	ldi	r25, 0x5F	; 95
    16bc:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    16c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    16c4:	88 e9       	ldi	r24, 0x98	; 152
    16c6:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    16c8:	e1 ed       	ldi	r30, 0xD1	; 209
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    16ce:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    16d2:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    16d6:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    16da:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    16de:	80 83       	st	Z, r24
{
	cli(); //Clears the global interrupt
	port_init();  //Initializes all the ports
	uart0_init();	//init Zigbee comm
	uart2_init();	//init PC - USB comm
	left_position_encoder_interrupt_init();
    16e0:	03 df       	rcall	.-506    	; 0x14e8 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    16e2:	0b df       	rcall	.-490    	; 0x14fa <right_position_encoder_interrupt_init>
	adc_init();
    16e4:	c6 de       	rcall	.-628    	; 0x1472 <adc_init>
	timer5_init();
    16e6:	aa de       	rcall	.-684    	; 0x143c <timer5_init>
	lcd_set_4bit();
    16e8:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_set_4bit>
	lcd_init();
    16ec:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_init>
	LED_bargraph_config();
    16f0:	d4 df       	rcall	.-88     	; 0x169a <LED_bargraph_config>
	sei();   // Enables the global interrupt
    16f2:	78 94       	sei
    16f4:	08 95       	ret

000016f6 <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    16f6:	bc 01       	movw	r22, r24
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	04 d7       	rcall	.+3592   	; 0x2506 <__floatunsisf>
    16fe:	25 ee       	ldi	r18, 0xE5	; 229
    1700:	30 ed       	ldi	r19, 0xD0	; 208
    1702:	4a ea       	ldi	r20, 0xAA	; 170
    1704:	50 e4       	ldi	r21, 0x40	; 64
    1706:	6b d6       	rcall	.+3286   	; 0x23de <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1708:	d2 d6       	rcall	.+3492   	; 0x24ae <__fixunssfsi>
    170a:	ab 01       	movw	r20, r22
    170c:	bc 01       	movw	r22, r24
	ShaftCountRight = 0;
    170e:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <ShaftCountRight>
    1712:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <ShaftCountRight+0x1>
    1716:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <ShaftCountRight+0x2>
    171a:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <ShaftCountRight+0x3>
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    171e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <ShaftCountRight>
    1722:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <ShaftCountRight+0x1>
    1726:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <ShaftCountRight+0x2>
    172a:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <ShaftCountRight+0x3>
    172e:	48 17       	cp	r20, r24
    1730:	59 07       	cpc	r21, r25
    1732:	6a 07       	cpc	r22, r26
    1734:	7b 07       	cpc	r23, r27
    1736:	98 f7       	brcc	.-26     	; 0x171e <linear_distance_mm+0x28>
		{
			break;
		}
	}
	stop(); //Stop robot
    1738:	43 cf       	rjmp	.-378    	; 0x15c0 <stop>
    173a:	08 95       	ret

0000173c <forward_mm>:
}


void forward_mm(unsigned int DistanceInMM)
{
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
	forward();
    1742:	34 df       	rcall	.-408    	; 0x15ac <forward>
	velocity(speed,speed);
    1744:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1748:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    174c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(speed,speed);
	linear_distance_mm(DistanceInMM);
    1750:	ce 01       	movw	r24, r28
    1752:	d1 df       	rcall	.-94     	; 0x16f6 <linear_distance_mm>
}
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    175a:	4f 92       	push	r4
    175c:	5f 92       	push	r5
    175e:	6f 92       	push	r6
    1760:	7f 92       	push	r7
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	c0 5c       	subi	r28, 0xC0	; 192
    1780:	d1 09       	sbc	r29, r1
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
    178c:	de 01       	movw	r26, r28
    178e:	af 59       	subi	r26, 0x9F	; 159
    1790:	bf 4f       	sbci	r27, 0xFF	; 255
    1792:	20 e6       	ldi	r18, 0x60	; 96
    1794:	fd 01       	movw	r30, r26
    1796:	11 92       	st	Z+, r1
    1798:	2a 95       	dec	r18
    179a:	e9 f7       	brne	.-6      	; 0x1796 <costplan+0x3c>
    179c:	e3 ee       	ldi	r30, 0xE3	; 227
    179e:	f4 e0       	ldi	r31, 0x04	; 4
    17a0:	8e 01       	movw	r16, r28
    17a2:	0f 5f       	subi	r16, 0xFF	; 255
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	78 01       	movw	r14, r16
    17a8:	6d 01       	movw	r12, r26
    17aa:	03 e4       	ldi	r16, 0x43	; 67
    17ac:	15 e0       	ldi	r17, 0x05	; 5
    17ae:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    17b0:	63 e6       	ldi	r22, 0x63	; 99
    17b2:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    17b4:	4f ef       	ldi	r20, 0xFF	; 255
    17b6:	5f ef       	ldi	r21, 0xFF	; 255
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    17b8:	61 93       	st	Z+, r22
    17ba:	71 93       	st	Z+, r23
		list[j]=-1;
    17bc:	d9 01       	movw	r26, r18
    17be:	4d 93       	st	X+, r20
    17c0:	5d 93       	st	X+, r21
    17c2:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    17c4:	d6 01       	movw	r26, r12
    17c6:	1d 92       	st	X+, r1
    17c8:	1d 92       	st	X+, r1
    17ca:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    17cc:	e0 17       	cp	r30, r16
    17ce:	f1 07       	cpc	r31, r17
    17d0:	99 f7       	brne	.-26     	; 0x17b8 <costplan+0x5e>
    17d2:	fc 01       	movw	r30, r24
    17d4:	ac 01       	movw	r20, r24
    17d6:	44 5f       	subi	r20, 0xF4	; 244
    17d8:	5f 4f       	sbci	r21, 0xFF	; 255
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{
			cost[note_loc[j]-1]=0;
			k=k+1;
			list[k]=note_loc[j];   // It is the list of nodes to explore
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    17e2:	20 81       	ld	r18, Z
    17e4:	31 81       	ldd	r19, Z+1	; 0x01
    17e6:	21 15       	cp	r18, r1
    17e8:	31 05       	cpc	r19, r1
    17ea:	09 f1       	breq	.+66     	; 0x182e <costplan+0xd4>
		{
			cost[note_loc[j]-1]=0;
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	d9 01       	movw	r26, r18
    17f2:	af 51       	subi	r26, 0x1F	; 31
    17f4:	bb 4f       	sbci	r27, 0xFB	; 251
    17f6:	1d 92       	st	X+, r1
    17f8:	1c 92       	st	X, r1
			k=k+1;
    17fa:	01 96       	adiw	r24, 0x01	; 1
			list[k]=note_loc[j];   // It is the list of nodes to explore
    17fc:	20 81       	ld	r18, Z
    17fe:	31 81       	ldd	r19, Z+1	; 0x01
    1800:	dc 01       	movw	r26, r24
    1802:	aa 0f       	add	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	01 e0       	ldi	r16, 0x01	; 1
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	0c 0f       	add	r16, r28
    180c:	1d 1f       	adc	r17, r29
    180e:	a0 0f       	add	r26, r16
    1810:	b1 1f       	adc	r27, r17
    1812:	2d 93       	st	X+, r18
    1814:	3c 93       	st	X, r19
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    1816:	d9 01       	movw	r26, r18
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	aa 0f       	add	r26, r26
    181c:	bb 1f       	adc	r27, r27
    181e:	21 e6       	ldi	r18, 0x61	; 97
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	2c 0f       	add	r18, r28
    1824:	3d 1f       	adc	r19, r29
    1826:	a2 0f       	add	r26, r18
    1828:	b3 1f       	adc	r27, r19
    182a:	6d 93       	st	X+, r22
    182c:	7c 93       	st	X, r23
    182e:	32 96       	adiw	r30, 0x02	; 2
	{
		cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    1830:	e4 17       	cp	r30, r20
    1832:	f5 07       	cpc	r31, r21
    1834:	b1 f6       	brne	.-84     	; 0x17e2 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1836:	ae 2c       	mov	r10, r14
    1838:	9f 2c       	mov	r9, r15
    183a:	81 2c       	mov	r8, r1
    183c:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}
		k=k-1;
    183e:	68 94       	set
    1840:	bb 24       	eor	r11, r11
    1842:	b2 f8       	bld	r11, 2
    1844:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
				cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    1846:	cc 24       	eor	r12, r12
    1848:	c3 94       	inc	r12
    184a:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    184c:	a9 81       	ldd	r26, Y+1	; 0x01
    184e:	ba 81       	ldd	r27, Y+2	; 0x02
    1850:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1852:	99 23       	and	r25, r25
    1854:	6c f0       	brlt	.+26     	; 0x1870 <costplan+0x116>
    1856:	ea 2d       	mov	r30, r10
    1858:	f9 2d       	mov	r31, r9
    185a:	28 2d       	mov	r18, r8
    185c:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	42 81       	ldd	r20, Z+2	; 0x02
    1864:	53 81       	ldd	r21, Z+3	; 0x03
    1866:	41 93       	st	Z+, r20
    1868:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    186a:	82 17       	cp	r24, r18
    186c:	93 07       	cpc	r25, r19
    186e:	bc f7       	brge	.-18     	; 0x185e <costplan+0x104>
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	fd 01       	movw	r30, r26
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	ee 0f       	add	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	ed 5b       	subi	r30, 0xBD	; 189
    1882:	fa 4f       	sbci	r31, 0xFA	; 250
    1884:	2b 2d       	mov	r18, r11
    1886:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1888:	aa 0f       	add	r26, r26
    188a:	bb 1f       	adc	r27, r27
    188c:	ad 01       	movw	r20, r26
    188e:	4d 51       	subi	r20, 0x1D	; 29
    1890:	5b 4f       	sbci	r21, 0xFB	; 251
    1892:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    1894:	61 91       	ld	r22, Z+
    1896:	71 91       	ld	r23, Z+
    1898:	61 15       	cp	r22, r1
    189a:	71 05       	cpc	r23, r1
    189c:	d1 f1       	breq	.+116    	; 0x1912 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    189e:	d2 01       	movw	r26, r4
    18a0:	0d 91       	ld	r16, X+
    18a2:	1c 91       	ld	r17, X
    18a4:	0f 5f       	subi	r16, 0xFF	; 255
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	ab 01       	movw	r20, r22
    18aa:	41 50       	subi	r20, 0x01	; 1
    18ac:	51 09       	sbc	r21, r1
    18ae:	7a 01       	movw	r14, r20
    18b0:	ee 0c       	add	r14, r14
    18b2:	ff 1c       	adc	r15, r15
    18b4:	d7 01       	movw	r26, r14
    18b6:	ad 51       	subi	r26, 0x1D	; 29
    18b8:	bb 4f       	sbci	r27, 0xFB	; 251
    18ba:	ed 90       	ld	r14, X+
    18bc:	fc 90       	ld	r15, X
    18be:	e0 16       	cp	r14, r16
    18c0:	f1 06       	cpc	r15, r17
    18c2:	44 f0       	brlt	.+16     	; 0x18d4 <costplan+0x17a>
				cost[node[s][i]-1]=(cost[s]+1);
    18c4:	7a 01       	movw	r14, r20
    18c6:	ee 0c       	add	r14, r14
    18c8:	ff 1c       	adc	r15, r15
    18ca:	d7 01       	movw	r26, r14
    18cc:	ad 51       	subi	r26, 0x1D	; 29
    18ce:	bb 4f       	sbci	r27, 0xFB	; 251
    18d0:	0d 93       	st	X+, r16
    18d2:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    18d4:	8a 01       	movw	r16, r20
    18d6:	00 0f       	add	r16, r16
    18d8:	11 1f       	adc	r17, r17
    18da:	a1 e6       	ldi	r26, 0x61	; 97
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ac 0f       	add	r26, r28
    18e0:	bd 1f       	adc	r27, r29
    18e2:	0a 0f       	add	r16, r26
    18e4:	1b 1f       	adc	r17, r27
    18e6:	d8 01       	movw	r26, r16
    18e8:	0d 91       	ld	r16, X+
    18ea:	1c 91       	ld	r17, X
    18ec:	11 97       	sbiw	r26, 0x01	; 1
    18ee:	01 30       	cpi	r16, 0x01	; 1
    18f0:	11 05       	cpc	r17, r1
    18f2:	79 f0       	breq	.+30     	; 0x1912 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    18f4:	cd 92       	st	X+, r12
    18f6:	dc 92       	st	X, r13
					k=k+1;
    18f8:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    18fa:	ac 01       	movw	r20, r24
    18fc:	44 0f       	add	r20, r20
    18fe:	55 1f       	adc	r21, r21
    1900:	01 e0       	ldi	r16, 0x01	; 1
    1902:	10 e0       	ldi	r17, 0x00	; 0
    1904:	0c 0f       	add	r16, r28
    1906:	1d 1f       	adc	r17, r29
    1908:	40 0f       	add	r20, r16
    190a:	51 1f       	adc	r21, r17
    190c:	da 01       	movw	r26, r20
    190e:	6d 93       	st	X+, r22
    1910:	7c 93       	st	X, r23
    1912:	21 50       	subi	r18, 0x01	; 1
    1914:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
		{
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    1916:	09 f0       	breq	.+2      	; 0x191a <costplan+0x1c0>
    1918:	bd cf       	rjmp	.-134    	; 0x1894 <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 || k!=-1);
    191a:	29 81       	ldd	r18, Y+1	; 0x01
    191c:	3a 81       	ldd	r19, Y+2	; 0x02
    191e:	2f 3f       	cpi	r18, 0xFF	; 255
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	09 f0       	breq	.+2      	; 0x1926 <costplan+0x1cc>
    1924:	93 cf       	rjmp	.-218    	; 0x184c <costplan+0xf2>
    1926:	8f 3f       	cpi	r24, 0xFF	; 255
    1928:	ef ef       	ldi	r30, 0xFF	; 255
    192a:	9e 07       	cpc	r25, r30
    192c:	09 f0       	breq	.+2      	; 0x1930 <costplan+0x1d6>
    192e:	8e cf       	rjmp	.-228    	; 0x184c <costplan+0xf2>
}
    1930:	c0 54       	subi	r28, 0x40	; 64
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	7f 90       	pop	r7
    1958:	6f 90       	pop	r6
    195a:	5f 90       	pop	r5
    195c:	4f 90       	pop	r4
    195e:	08 95       	ret

00001960 <rotate>:

void rotate(int turnang)
{
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
	if(turnang<0)
    196a:	99 23       	and	r25, r25
    196c:	44 f4       	brge	.+16     	; 0x197e <rotate+0x1e>
	{
		turnang=-turnang;
		right_degrees(turnang-20);
    196e:	2c ee       	ldi	r18, 0xEC	; 236
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	a9 01       	movw	r20, r18
    1974:	48 1b       	sub	r20, r24
    1976:	59 0b       	sbc	r21, r25
    1978:	ca 01       	movw	r24, r20
    197a:	81 de       	rcall	.-766    	; 0x167e <right_degrees>
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <rotate+0x22>
	}
	else
	{
		left_degrees(turnang-20);
    197e:	44 97       	sbiw	r24, 0x14	; 20
    1980:	70 de       	rcall	.-800    	; 0x1662 <left_degrees>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1982:	0f 2e       	mov	r0, r31
    1984:	f8 e2       	ldi	r31, 0x28	; 40
    1986:	ef 2e       	mov	r14, r31
    1988:	ff 24       	eor	r15, r15
    198a:	f3 94       	inc	r15
    198c:	f0 2d       	mov	r31, r0
    198e:	c6 e9       	ldi	r28, 0x96	; 150
	OCR5BL = (unsigned char)right_motor;
    1990:	0a e2       	ldi	r16, 0x2A	; 42
    1992:	11 e0       	ldi	r17, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1994:	f7 01       	movw	r30, r14
    1996:	c0 83       	st	Z, r28
	OCR5BL = (unsigned char)right_motor;
    1998:	f8 01       	movw	r30, r16
    199a:	c0 83       	st	Z, r28
		left_degrees(turnang-20);
	}
	while(1)
	{
		velocity(150,150);
		Center_white_line = ADC_Conversion(2);
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	76 dd       	rcall	.-1300   	; 0x148c <ADC_Conversion>
    19a0:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <Center_white_line>
		print_sensor(1,5,2);
    19a4:	42 e0       	ldi	r20, 0x02	; 2
    19a6:	65 e0       	ldi	r22, 0x05	; 5
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	8b dd       	rcall	.-1258   	; 0x14c2 <print_sensor>
		if(Center_white_line>thresh)
    19ac:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <Center_white_line>
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <thresh>
    19b6:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <thresh+0x1>
    19ba:	28 17       	cp	r18, r24
    19bc:	39 07       	cpc	r19, r25
    19be:	54 f7       	brge	.-44     	; 0x1994 <rotate+0x34>
			break;
	}
	//velocity(0,0);
	stop();
    19c0:	ff dd       	rcall	.-1026   	; 0x15c0 <stop>
}
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	08 95       	ret

000019ce <move>:

int move(int n)
{
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	ec 01       	movw	r28, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    19dc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    19e0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

int move(int n)
{
	velocity(0,0);
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    19e4:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    19e8:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    19ec:	31 97       	sbiw	r30, 0x01	; 1
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e8 0f       	add	r30, r24
    19f8:	f9 1f       	adc	r31, r25
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	e8 53       	subi	r30, 0x38	; 56
    1a00:	f9 4f       	sbci	r31, 0xF9	; 249
    1a02:	00 81       	ld	r16, Z
    1a04:	11 81       	ldd	r17, Z+1	; 0x01
    1a06:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <botang>
    1a0a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <botang+0x1>
    1a0e:	08 1b       	sub	r16, r24
    1a10:	19 0b       	sbc	r17, r25
	if(fabs(turnang)>45)
    1a12:	b8 01       	movw	r22, r16
    1a14:	01 2e       	mov	r0, r17
    1a16:	00 0c       	add	r0, r0
    1a18:	88 0b       	sbc	r24, r24
    1a1a:	99 0b       	sbc	r25, r25
    1a1c:	76 d5       	rcall	.+2796   	; 0x250a <__floatsisf>
    1a1e:	9f 77       	andi	r25, 0x7F	; 127
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	44 e3       	ldi	r20, 0x34	; 52
    1a26:	52 e4       	ldi	r21, 0x42	; 66
    1a28:	fc d5       	rcall	.+3064   	; 0x2622 <__gesf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <move+0x6a>
	{
		forward_mm(70);
    1a2e:	86 e4       	ldi	r24, 0x46	; 70
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	84 de       	rcall	.-760    	; 0x173c <forward_mm>
		rotate(turnang);
    1a34:	c8 01       	movw	r24, r16
    1a36:	94 df       	rcall	.-216    	; 0x1960 <rotate>
	}
	botang=angle[botloc-1][n];
    1a38:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <botloc>
    1a3c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <botloc+0x1>
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	c8 0f       	add	r28, r24
    1a4c:	d9 1f       	adc	r29, r25
    1a4e:	cc 0f       	add	r28, r28
    1a50:	dd 1f       	adc	r29, r29
    1a52:	c8 53       	subi	r28, 0x38	; 56
    1a54:	d9 4f       	sbci	r29, 0xF9	; 249
    1a56:	88 81       	ld	r24, Y
    1a58:	99 81       	ldd	r25, Y+1	; 0x01
    1a5a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <botang+0x1>
    1a5e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <botang>
	forward();
    1a62:	a4 dd       	rcall	.-1208   	; 0x15ac <forward>
	int flag=0;
	ShaftCountRight=0;
    1a64:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <ShaftCountRight>
    1a68:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <ShaftCountRight+0x1>
    1a6c:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <ShaftCountRight+0x2>
    1a70:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <ShaftCountRight+0x3>
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(speed,0);
    1a74:	0f 2e       	mov	r0, r31
    1a76:	fe e0       	ldi	r31, 0x0E	; 14
    1a78:	ef 2e       	mov	r14, r31
    1a7a:	f2 e0       	ldi	r31, 0x02	; 2
    1a7c:	ff 2e       	mov	r15, r31
    1a7e:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1a80:	08 e2       	ldi	r16, 0x28	; 40
    1a82:	11 e0       	ldi	r17, 0x01	; 1
	OCR5BL = (unsigned char)right_motor;
    1a84:	ca e2       	ldi	r28, 0x2A	; 42
    1a86:	d1 e0       	ldi	r29, 0x01	; 1
	int flag=0;
	ShaftCountRight=0;
	while(1)
	{
		flag=0;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	00 dd       	rcall	.-1536   	; 0x148c <ADC_Conversion>
    1a8c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	fc dc       	rcall	.-1544   	; 0x148c <ADC_Conversion>
    1a94:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	f8 dc       	rcall	.-1552   	; 0x148c <ADC_Conversion>
    1a9c:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	f4 dc       	rcall	.-1560   	; 0x148c <ADC_Conversion>
    1aa4:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <__data_end>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1aa8:	40 91 79 04 	lds	r20, 0x0479	; 0x800479 <Left_white_line>
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	23 e0       	ldi	r18, 0x03	; 3
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1aba:	40 91 78 04 	lds	r20, 0x0478	; 0x800478 <Center_white_line>
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	23 e0       	ldi	r18, 0x03	; 3
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	65 e0       	ldi	r22, 0x05	; 5
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1acc:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <Right_white_line>
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	23 e0       	ldi	r18, 0x03	; 3
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	69 e0       	ldi	r22, 0x09	; 9
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,12,(int)Front_IR_Sensor,3);	//Front ir sensor Value
    1ade:	40 91 76 04 	lds	r20, 0x0476	; 0x800476 <__data_end>
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	23 e0       	ldi	r18, 0x03	; 3
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	6c e0       	ldi	r22, 0x0C	; 12
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			if(botang<0)
			botang+=360;
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
    1af0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <thresh>
    1af4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <thresh+0x1>
    1af8:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <Center_white_line>
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	82 17       	cp	r24, r18
    1b00:	93 07       	cpc	r25, r19
    1b02:	6c f4       	brge	.+26     	; 0x1b1e <move+0x150>
    1b04:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <Left_white_line>
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	82 17       	cp	r24, r18
    1b0c:	93 07       	cpc	r25, r19
    1b0e:	94 f1       	brlt	.+100    	; 0x1b74 <move+0x1a6>
    1b10:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <Right_white_line>
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	82 17       	cp	r24, r18
    1b18:	93 07       	cpc	r25, r19
    1b1a:	cc f1       	brlt	.+114    	; 0x1b8e <move+0x1c0>
    1b1c:	45 c0       	rjmp	.+138    	; 0x1ba8 <move+0x1da>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1b1e:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <Left_white_line>
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	82 17       	cp	r24, r18
    1b26:	93 07       	cpc	r25, r19
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <move+0x15e>
    1b2a:	4d c0       	rjmp	.+154    	; 0x1bc6 <move+0x1f8>
		{
			//flag=1;
			forward();
    1b2c:	3f dd       	rcall	.-1410   	; 0x15ac <forward>
			lcd_print(2,1,1,3);
    1b2e:	23 e0       	ldi	r18, 0x03	; 3
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			velocity(0,speed);
    1b3e:	f7 01       	movw	r30, r14
    1b40:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b42:	f8 01       	movw	r30, r16
    1b44:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1b46:	88 83       	st	Y, r24
    1b48:	9f cf       	rjmp	.-194    	; 0x1a88 <move+0xba>
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
    1b4a:	30 dd       	rcall	.-1440   	; 0x15ac <forward>
			lcd_print(2,1,2,3);
    1b4c:	23 e0       	ldi	r18, 0x03	; 3
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	42 e0       	ldi	r20, 0x02	; 2
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			velocity(speed,0);
    1b5c:	f7 01       	movw	r30, r14
    1b5e:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b60:	f8 01       	movw	r30, r16
    1b62:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1b64:	18 82       	st	Y, r1
    1b66:	90 cf       	rjmp	.-224    	; 0x1a88 <move+0xba>
			lcd_print(2,1,0,3);
			//flag=1;
		}
		else
		{
			velocity(speed,speed);
    1b68:	f7 01       	movw	r30, r14
    1b6a:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1b70:	88 83       	st	Y, r24
    1b72:	8a cf       	rjmp	.-236    	; 0x1a88 <move+0xba>
			if(botang<0)
			botang+=360;
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
    1b74:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <ShaftCountRight>
    1b78:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <ShaftCountRight+0x1>
    1b7c:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <ShaftCountRight+0x2>
    1b80:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <ShaftCountRight+0x3>
    1b84:	0b 97       	sbiw	r24, 0x0b	; 11
    1b86:	a1 05       	cpc	r26, r1
    1b88:	b1 05       	cpc	r27, r1
    1b8a:	80 f2       	brcs	.-96     	; 0x1b2c <move+0x15e>
    1b8c:	23 c0       	rjmp	.+70     	; 0x1bd4 <move+0x206>
    1b8e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <ShaftCountRight>
    1b92:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <ShaftCountRight+0x1>
    1b96:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <ShaftCountRight+0x2>
    1b9a:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <ShaftCountRight+0x3>
    1b9e:	0b 97       	sbiw	r24, 0x0b	; 11
    1ba0:	a1 05       	cpc	r26, r1
    1ba2:	b1 05       	cpc	r27, r1
    1ba4:	90 f2       	brcs	.-92     	; 0x1b4a <move+0x17c>
    1ba6:	16 c0       	rjmp	.+44     	; 0x1bd4 <move+0x206>
			lcd_print(2,1,2,3);
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
		{
			forward();
    1ba8:	01 dd       	rcall	.-1534   	; 0x15ac <forward>
			velocity(speed,speed);
    1baa:	f7 01       	movw	r30, r14
    1bac:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1bae:	f8 01       	movw	r30, r16
    1bb0:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1bb2:	88 83       	st	Y, r24
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
    1bb4:	23 e0       	ldi	r18, 0x03	; 3
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
    1bc4:	61 cf       	rjmp	.-318    	; 0x1a88 <move+0xba>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
    1bc6:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <Right_white_line>
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	82 17       	cp	r24, r18
    1bce:	93 07       	cpc	r25, r19
    1bd0:	5c f6       	brge	.-106    	; 0x1b68 <move+0x19a>
    1bd2:	bb cf       	rjmp	.-138    	; 0x1b4a <move+0x17c>
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
		{
			forward();
    1bd4:	eb dc       	rcall	.-1578   	; 0x15ac <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1bd6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1bda:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
		{
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
    1bde:	23 e0       	ldi	r18, 0x03	; 3
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	44 e6       	ldi	r20, 0x64	; 100
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		{
			velocity(speed,speed);
		}
	}
	return suc;
}
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	08 95       	ret

00001c00 <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	9c 01       	movw	r18, r24
	int i;
	if (cost[loc - 1] == 0)
    1c06:	bc 01       	movw	r22, r24
    1c08:	61 50       	subi	r22, 0x01	; 1
    1c0a:	71 09       	sbc	r23, r1
    1c0c:	db 01       	movw	r26, r22
    1c0e:	aa 0f       	add	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	ad 51       	subi	r26, 0x1D	; 29
    1c14:	bb 4f       	sbci	r27, 0xFB	; 251
    1c16:	8d 91       	ld	r24, X+
    1c18:	9c 91       	ld	r25, X
    1c1a:	89 2b       	or	r24, r25
    1c1c:	39 f4       	brne	.+14     	; 0x1c2c <BotEndLocation+0x2c>
	{
		LastLocation = loc;
    1c1e:	30 93 4f 08 	sts	0x084F, r19	; 0x80084f <LastLocation+0x1>
    1c22:	20 93 4e 08 	sts	0x084E, r18	; 0x80084e <LastLocation>
		return LastLocation;
    1c26:	82 2f       	mov	r24, r18
    1c28:	93 2f       	mov	r25, r19
    1c2a:	3c c0       	rjmp	.+120    	; 0x1ca4 <BotEndLocation+0xa4>
	}
	int mCost = cost[node[loc - 1][0] - 1];
    1c2c:	db 01       	movw	r26, r22
    1c2e:	aa 0f       	add	r26, r26
    1c30:	bb 1f       	adc	r27, r27
    1c32:	aa 0f       	add	r26, r26
    1c34:	bb 1f       	adc	r27, r27
    1c36:	aa 0f       	add	r26, r26
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	fd 01       	movw	r30, r26
    1c3c:	ed 5b       	subi	r30, 0xBD	; 189
    1c3e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c40:	01 90       	ld	r0, Z+
    1c42:	f0 81       	ld	r31, Z
    1c44:	e0 2d       	mov	r30, r0
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ef 51       	subi	r30, 0x1F	; 31
    1c4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c4e:	c0 81       	ld	r28, Z
    1c50:	d1 81       	ldd	r29, Z+1	; 0x01
    1c52:	ab 5b       	subi	r26, 0xBB	; 187
    1c54:	ba 4f       	sbci	r27, 0xFA	; 250
	int pos = 0;
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 1; i<4; i++)
    1c5a:	21 e0       	ldi	r18, 0x01	; 1
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (node[loc - 1][i]!=0)
    1c5e:	8d 91       	ld	r24, X+
    1c60:	9d 91       	ld	r25, X+
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <BotEndLocation+0x7e>
			if (cost[node[loc - 1][i] - 1]<mCost)
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	ef 51       	subi	r30, 0x1F	; 31
    1c6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	8c 17       	cp	r24, r28
    1c76:	9d 07       	cpc	r25, r29
    1c78:	14 f4       	brge	.+4      	; 0x1c7e <BotEndLocation+0x7e>
    1c7a:	a9 01       	movw	r20, r18
			{
				mCost = cost[node[loc - 1][i] - 1];
    1c7c:	ec 01       	movw	r28, r24
		LastLocation = loc;
		return LastLocation;
	}
	int mCost = cost[node[loc - 1][0] - 1];
	int pos = 0;
	for (i = 1; i<4; i++)
    1c7e:	2f 5f       	subi	r18, 0xFF	; 255
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	24 30       	cpi	r18, 0x04	; 4
    1c84:	31 05       	cpc	r19, r1
    1c86:	59 f7       	brne	.-42     	; 0x1c5e <BotEndLocation+0x5e>
			{
				mCost = cost[node[loc - 1][i] - 1];
				pos = i;
			}
	}
	return BotEndLocation(node[loc - 1][pos]);
    1c88:	fb 01       	movw	r30, r22
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	e4 0f       	add	r30, r20
    1c94:	f5 1f       	adc	r31, r21
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	ed 5b       	subi	r30, 0xBD	; 189
    1c9c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	ae df       	rcall	.-164    	; 0x1c00 <BotEndLocation>
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <processNotes>:
FILE uart_debug = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
///////////////////////////////////////////////////////


void processNotes()
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    1cae:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    1cb2:	88 23       	and	r24, r24
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <processNotes+0xe>
    1cb6:	75 c0       	rjmp	.+234    	; 0x1da2 <processNotes+0xf8>
    1cb8:	c0 e0       	ldi	r28, 0x00	; 0
    1cba:	d0 e0       	ldi	r29, 0x00	; 0
	{
		costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e3 53       	subi	r30, 0x33	; 51
    1cc0:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc2:	80 81       	ld	r24, Z
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9c 01       	movw	r18, r24
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	82 0f       	add	r24, r18
    1cd0:	93 1f       	adc	r25, r19
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	84 5e       	subi	r24, 0xE4	; 228
    1cdc:	9d 4f       	sbci	r25, 0xFD	; 253
    1cde:	3d dd       	rcall	.-1414   	; 0x175a <costplan>
		if((taskCost+cost[botLastIndex-1])>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1]))
    1ce0:	20 91 b2 04 	lds	r18, 0x04B2	; 0x8004b2 <taskCost>
    1ce4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <botLastIndex>
    1ce8:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <botLastIndex+0x1>
    1cec:	fc 01       	movw	r30, r24
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	ef 51       	subi	r30, 0x1F	; 31
    1cf4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf6:	40 81       	ld	r20, Z
    1cf8:	51 81       	ldd	r21, Z+1	; 0x01
    1cfa:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <otherBotTaskCost>
    1cfe:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    1d02:	ba 01       	movw	r22, r20
    1d04:	62 0f       	add	r22, r18
    1d06:	71 1d       	adc	r23, r1
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	ee 0f       	add	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	ef 51       	subi	r30, 0x1F	; 31
    1d10:	fb 4f       	sbci	r31, 0xFB	; 251
    1d12:	20 81       	ld	r18, Z
    1d14:	31 81       	ldd	r19, Z+1	; 0x01
    1d16:	2a 0f       	add	r18, r26
    1d18:	31 1d       	adc	r19, r1
    1d1a:	26 17       	cp	r18, r22
    1d1c:	37 07       	cpc	r19, r23
    1d1e:	24 f5       	brge	.+72     	; 0x1d68 <processNotes+0xbe>
		{
			otherBotTaskCost+=cost[otherBotLastTaskIndex-1];
    1d20:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    1d24:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <otherBotTaskCost>
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	ef 51       	subi	r30, 0x1F	; 31
    1d30:	fb 4f       	sbci	r31, 0xFB	; 251
    1d32:	80 81       	ld	r24, Z
    1d34:	89 0f       	add	r24, r25
    1d36:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <otherBotTaskCost>
			otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);
    1d3a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	5f df       	rcall	.-322    	; 0x1c00 <BotEndLocation>
    1d42:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <otherBotLastTaskIndex>
			otherBotTask[otherBotTaskCount]=noteToProcess;
    1d46:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <otherBotTaskCount>
    1d4a:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <otherBotTaskCount+0x1>
    1d4e:	fc 01       	movw	r30, r24
    1d50:	ee 0f       	add	r30, r30
    1d52:	ff 1f       	adc	r31, r31
    1d54:	e8 57       	subi	r30, 0x78	; 120
    1d56:	fb 4f       	sbci	r31, 0xFB	; 251
    1d58:	d1 83       	std	Z+1, r29	; 0x01
    1d5a:	c0 83       	st	Z, r28
			otherBotTaskCount++;
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <otherBotTaskCount+0x1>
    1d62:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <otherBotTaskCount>
    1d66:	15 c0       	rjmp	.+42     	; 0x1d92 <processNotes+0xe8>
		}
		else
		{
			taskCost+=cost[botLastIndex-1];
    1d68:	20 91 b2 04 	lds	r18, 0x04B2	; 0x8004b2 <taskCost>
    1d6c:	42 0f       	add	r20, r18
    1d6e:	40 93 b2 04 	sts	0x04B2, r20	; 0x8004b2 <taskCost>
			botLastIndex=BotEndLocation(botLastIndex);
    1d72:	46 df       	rcall	.-372    	; 0x1c00 <BotEndLocation>
    1d74:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <botLastIndex+0x1>
    1d78:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <botLastIndex>
			tasks[(int)taskCount]=noteToProcess;
    1d7c:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <taskCount>
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	e9 54       	subi	r30, 0x49	; 73
    1d84:	fb 4f       	sbci	r31, 0xFB	; 251
    1d86:	c0 83       	st	Z, r28
			taskCount++;
    1d88:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <taskCount>
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <taskCount>
		}
		noteToProcess++;
    1d92:	21 96       	adiw	r28, 0x01	; 1


void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    1d94:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	8c 17       	cp	r24, r28
    1d9c:	9d 07       	cpc	r25, r29
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <processNotes+0xf8>
    1da0:	8d cf       	rjmp	.-230    	; 0x1cbc <processNotes+0x12>
		}
		noteToProcess++;
		
	}
	
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <main>:


int main()
{
    1da8:	2f 92       	push	r2
    1daa:	3f 92       	push	r3
    1dac:	4f 92       	push	r4
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
	declare_constants();
    1dcc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <declare_constants>
	init_devices();
    1dd0:	6a dc       	rcall	.-1836   	; 0x16a6 <init_devices>
	PORTJ = 0x00;
    1dd2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    1dd6:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <notesReceived>
	lcd_string("Waiting...");
    1dda:	81 ed       	ldi	r24, 0xD1	; 209
    1ddc:	93 e0       	ldi	r25, 0x03	; 3
    1dde:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	while(!notesReceived);
    1de2:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <notesReceived>
    1de6:	88 23       	and	r24, r24
    1de8:	e1 f3       	breq	.-8      	; 0x1de2 <main+0x3a>
	lcd_clear();
    1dea:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Received!");
    1dee:	8c ed       	ldi	r24, 0xDC	; 220
    1df0:	93 e0       	ldi	r25, 0x03	; 3
    1df2:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	PORTJ = 0xFF;
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dfc:	e0 ec       	ldi	r30, 0xC0	; 192
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	85 ff       	sbrs	r24, 5
    1e04:	fd cf       	rjmp	.-6      	; 0x1e00 <main+0x58>
	UDR0 = data;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	//_delay_ms(300);
	int i;
	for(i = 0; i<noteCount; i++)
    1e0c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    1e10:	88 23       	and	r24, r24
    1e12:	b9 f0       	breq	.+46     	; 0x1e42 <main+0x9a>
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e18:	e0 ec       	ldi	r30, 0xC0	; 192
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    1e1c:	c6 ec       	ldi	r28, 0xC6	; 198
    1e1e:	d0 e0       	ldi	r29, 0x00	; 0
	//lcd_string("Start");
	//_delay_ms(300);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    1e20:	d9 01       	movw	r26, r18
    1e22:	a3 53       	subi	r26, 0x33	; 51
    1e24:	bb 4f       	sbci	r27, 0xFB	; 251
    1e26:	9c 91       	ld	r25, X
    1e28:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e2a:	80 81       	ld	r24, Z
    1e2c:	85 ff       	sbrs	r24, 5
    1e2e:	fd cf       	rjmp	.-6      	; 0x1e2a <main+0x82>
	UDR0 = data;
    1e30:	98 83       	st	Y, r25
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	//_delay_ms(300);
	int i;
	for(i = 0; i<noteCount; i++)
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	28 17       	cp	r18, r24
    1e3e:	39 07       	cpc	r19, r25
    1e40:	7c f3       	brlt	.-34     	; 0x1e20 <main+0x78>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e42:	e0 ec       	ldi	r30, 0xC0	; 192
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	85 ff       	sbrs	r24, 5
    1e4a:	fd cf       	rjmp	.-6      	; 0x1e46 <main+0x9e>
	UDR0 = data;
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	lcd_string("Received!");
	PORTJ = 0xFF;
	
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    1e52:	8f e0       	ldi	r24, 0x0F	; 15
    1e54:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	lcd_clear();
    1e58:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Sent!");
    1e5c:	86 ee       	ldi	r24, 0xE6	; 230
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	lcd_clear();
    1e64:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Sending Tasks");
    1e68:	8c ee       	ldi	r24, 0xEC	; 236
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
    1e6c:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	processNotes();
    1e70:	1c df       	rcall	.-456    	; 0x1caa <processNotes>
	lcd_clear();
    1e72:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Processed");
    1e76:	8a ef       	ldi	r24, 0xFA	; 250
    1e78:	93 e0       	ldi	r25, 0x03	; 3
    1e7a:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	//_delay_ms(1000);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    1e7e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <otherBotTaskCount>
    1e82:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <otherBotTaskCount+0x1>
    1e86:	18 16       	cp	r1, r24
    1e88:	19 06       	cpc	r1, r25
    1e8a:	04 f5       	brge	.+64     	; 0x1ecc <main+0x124>
    1e8c:	a8 e8       	ldi	r26, 0x88	; 136
    1e8e:	b4 e0       	ldi	r27, 0x04	; 4
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e94:	e0 ec       	ldi	r30, 0xC0	; 192
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    1e98:	c6 ec       	ldi	r28, 0xC6	; 198
    1e9a:	d0 e0       	ldi	r29, 0x00	; 0
    1e9c:	53 e0       	ldi	r21, 0x03	; 3
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
    1e9e:	9c 91       	ld	r25, X
    1ea0:	12 96       	adiw	r26, 0x02	; 2

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1ea2:	80 81       	ld	r24, Z
    1ea4:	85 ff       	sbrs	r24, 5
    1ea6:	fd cf       	rjmp	.-6      	; 0x1ea2 <main+0xfa>
	UDR0 = data;
    1ea8:	58 83       	st	Y, r21

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    1eaa:	49 2f       	mov	r20, r25
    1eac:	40 68       	ori	r20, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1eae:	80 81       	ld	r24, Z
    1eb0:	85 ff       	sbrs	r24, 5
    1eb2:	fd cf       	rjmp	.-6      	; 0x1eae <main+0x106>
	UDR0 = data;
    1eb4:	48 83       	st	Y, r20
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    1eb6:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <otherBotLastTaskIndex>
	//_delay_ms(1000);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    1eba:	2f 5f       	subi	r18, 0xFF	; 255
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <otherBotTaskCount>
    1ec2:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <otherBotTaskCount+0x1>
    1ec6:	28 17       	cp	r18, r24
    1ec8:	39 07       	cpc	r19, r25
    1eca:	4c f3       	brlt	.-46     	; 0x1e9e <main+0xf6>
	lcd_string("Sending Tasks");
	processNotes();
	lcd_clear();
	lcd_string("Processed");
	SendTaskArray();
	lcd_clear();
    1ecc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Task Sent");
    1ed0:	84 e0       	ldi	r24, 0x04	; 4
    1ed2:	94 e0       	ldi	r25, 0x04	; 4
    1ed4:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	#endif

	while(taskCount==0);
    1ed8:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <taskCount>
    1edc:	88 23       	and	r24, r24
    1ede:	e1 f3       	breq	.-8      	; 0x1ed8 <main+0x130>
	
	//PC Debug (printf)
	stdout = &uart_debug;
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <__iob+0x3>
    1ee8:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <__iob+0x2>
		
	int i=0;
	for(i=0;i<noteCount;i++)
    1eec:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    1ef0:	88 23       	and	r24, r24
    1ef2:	e9 f0       	breq	.+58     	; 0x1f2e <main+0x186>
    1ef4:	c0 e0       	ldi	r28, 0x00	; 0
    1ef6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcd_print(2,1,(int)notes[i],2);
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e3 53       	subi	r30, 0x33	; 51
    1efc:	fb 4f       	sbci	r31, 0xFB	; 251
    1efe:	40 81       	ld	r20, Z
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	22 e0       	ldi	r18, 0x02	; 2
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	8c e2       	ldi	r24, 0x2C	; 44
    1f14:	21 50       	subi	r18, 0x01	; 1
    1f16:	30 40       	sbci	r19, 0x00	; 0
    1f18:	80 40       	sbci	r24, 0x00	; 0
    1f1a:	e1 f7       	brne	.-8      	; 0x1f14 <main+0x16c>
    1f1c:	00 c0       	rjmp	.+0      	; 0x1f1e <main+0x176>
    1f1e:	00 00       	nop
	
	//PC Debug (printf)
	stdout = &uart_debug;
		
	int i=0;
	for(i=0;i<noteCount;i++)
    1f20:	21 96       	adiw	r28, 0x01	; 1
    1f22:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <noteCount>
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	c8 17       	cp	r28, r24
    1f2a:	d9 07       	cpc	r29, r25
    1f2c:	2c f3       	brlt	.-54     	; 0x1ef8 <main+0x150>
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
    1f2e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1f32:	c0 ec       	ldi	r28, 0xC0	; 192
    1f34:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
    1f36:	0f 2e       	mov	r0, r31
    1f38:	f6 ec       	ldi	r31, 0xC6	; 198
    1f3a:	af 2e       	mov	r10, r31
    1f3c:	b1 2c       	mov	r11, r1
    1f3e:	f0 2d       	mov	r31, r0
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    1f40:	21 2c       	mov	r2, r1
    1f42:	42 2c       	mov	r4, r2
    1f44:	51 2c       	mov	r5, r1
			for(i=1;i<4;i++)
    1f46:	66 24       	eor	r6, r6
    1f48:	63 94       	inc	r6
    1f4a:	71 2c       	mov	r7, r1
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while(notes[(int)noteToStrike]!=0 && taskitr!=taskCount)
    1f4c:	f7 c1       	rjmp	.+1006   	; 0x233c <__stack+0x13d>
	{	
		printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e9 54       	subi	r30, 0x49	; 73
    1f52:	fb 4f       	sbci	r31, 0xFB	; 251
    1f54:	e0 81       	ld	r30, Z
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	e3 53       	subi	r30, 0x33	; 51
    1f5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f5c:	80 81       	ld	r24, Z
    1f5e:	1f 92       	push	r1
    1f60:	8f 93       	push	r24
    1f62:	ae e0       	ldi	r26, 0x0E	; 14
    1f64:	b4 e0       	ldi	r27, 0x04	; 4
    1f66:	bf 93       	push	r27
    1f68:	af 93       	push	r26
    1f6a:	9a d3       	rcall	.+1844   	; 0x26a0 <printf>
		int taskDone=0;
		int i,minCost,nxtNode,pos;
		costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    1f6c:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <taskitr>
    1f70:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <taskitr+0x1>
    1f74:	e9 54       	subi	r30, 0x49	; 73
    1f76:	fb 4f       	sbci	r31, 0xFB	; 251
    1f78:	e0 81       	ld	r30, Z
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	e3 53       	subi	r30, 0x33	; 51
    1f7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f80:	80 81       	ld	r24, Z
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9c 01       	movw	r18, r24
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	84 5e       	subi	r24, 0xE4	; 228
    1f9a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f9c:	de db       	rcall	.-2116   	; 0x175a <costplan>
		lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
    1f9e:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <taskitr>
    1fa2:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <taskitr+0x1>
    1fa6:	e9 54       	subi	r30, 0x49	; 73
    1fa8:	fb 4f       	sbci	r31, 0xFB	; 251
    1faa:	e0 81       	ld	r30, Z
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	e3 53       	subi	r30, 0x33	; 51
    1fb0:	fb 4f       	sbci	r31, 0xFB	; 251
    1fb2:	40 81       	ld	r20, Z
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	22 e0       	ldi	r18, 0x02	; 2
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	6c e0       	ldi	r22, 0x0C	; 12
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
    1fc2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    1fc6:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    1fca:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <taskitr>
    1fce:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <taskitr+0x1>
    1fd2:	a9 54       	subi	r26, 0x49	; 73
    1fd4:	bb 4f       	sbci	r27, 0xFB	; 251
    1fd6:	8c 91       	ld	r24, X
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	ef 51       	subi	r30, 0x1F	; 31
    1fde:	fb 4f       	sbci	r31, 0xFB	; 251
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	9f 93       	push	r25
    1fe4:	90 81       	ld	r25, Z
    1fe6:	9f 93       	push	r25
    1fe8:	1f 92       	push	r1
    1fea:	8f 93       	push	r24
    1fec:	a5 e2       	ldi	r26, 0x25	; 37
    1fee:	b4 e0       	ldi	r27, 0x04	; 4
    1ff0:	bf 93       	push	r27
    1ff2:	af 93       	push	r26
    1ff4:	55 d3       	rcall	.+1706   	; 0x26a0 <printf>
		while(cost[botloc-1]!=0)
    1ff6:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    1ffa:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	ef 51       	subi	r30, 0x1F	; 31
    2004:	fb 4f       	sbci	r31, 0xFB	; 251
    2006:	2d b7       	in	r18, 0x3d	; 61
    2008:	3e b7       	in	r19, 0x3e	; 62
    200a:	26 5f       	subi	r18, 0xF6	; 246
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	3e bf       	out	0x3e, r19	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	2d bf       	out	0x3d, r18	; 61
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	89 2b       	or	r24, r25
    201e:	09 f4       	brne	.+2      	; 0x2022 <main+0x27a>
    2020:	3a c1       	rjmp	.+628    	; 0x2296 <__stack+0x97>
		{
			lcd_print(2,5,botloc,2);
    2022:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <botloc>
    2026:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <botloc+0x1>
    202a:	22 e0       	ldi	r18, 0x02	; 2
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	65 e0       	ldi	r22, 0x05	; 5
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			minCost=cost[node[botloc-1][0]-1];
    2036:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    203a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e5 5c       	subi	r30, 0xC5	; 197
    204c:	fa 4f       	sbci	r31, 0xFA	; 250
    204e:	01 90       	ld	r0, Z+
    2050:	f0 81       	ld	r31, Z
    2052:	e0 2d       	mov	r30, r0
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	ef 51       	subi	r30, 0x1F	; 31
    205a:	fb 4f       	sbci	r31, 0xFB	; 251
    205c:	20 81       	ld	r18, Z
    205e:	31 81       	ldd	r19, Z+1	; 0x01
			nxtNode=node[botloc-1][0];
    2060:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2064:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	e5 5c       	subi	r30, 0xC5	; 197
    2076:	fa 4f       	sbci	r31, 0xFA	; 250
    2078:	80 80       	ld	r8, Z
    207a:	91 80       	ldd	r9, Z+1	; 0x01
			pos=0;
    207c:	e4 2c       	mov	r14, r4
    207e:	f5 2c       	mov	r15, r5
			for(i=1;i<4;i++)
    2080:	86 2d       	mov	r24, r6
    2082:	97 2d       	mov	r25, r7
			{
				if(node[botloc-1][i]!=0)
    2084:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2088:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    208c:	31 97       	sbiw	r30, 0x01	; 1
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	e8 0f       	add	r30, r24
    2098:	f9 1f       	adc	r31, r25
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	ed 5b       	subi	r30, 0xBD	; 189
    20a0:	fa 4f       	sbci	r31, 0xFA	; 250
    20a2:	40 81       	ld	r20, Z
    20a4:	51 81       	ldd	r21, Z+1	; 0x01
    20a6:	45 2b       	or	r20, r21
    20a8:	09 f4       	brne	.+2      	; 0x20ac <main+0x304>
    20aa:	45 c0       	rjmp	.+138    	; 0x2136 <main+0x38e>
					if(cost[node[botloc-1][i]-1]<minCost)
    20ac:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    20b0:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    20b4:	31 97       	sbiw	r30, 0x01	; 1
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e8 0f       	add	r30, r24
    20c0:	f9 1f       	adc	r31, r25
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ed 5b       	subi	r30, 0xBD	; 189
    20c8:	fa 4f       	sbci	r31, 0xFA	; 250
    20ca:	01 90       	ld	r0, Z+
    20cc:	f0 81       	ld	r31, Z
    20ce:	e0 2d       	mov	r30, r0
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ef 51       	subi	r30, 0x1F	; 31
    20d6:	fb 4f       	sbci	r31, 0xFB	; 251
    20d8:	40 81       	ld	r20, Z
    20da:	51 81       	ldd	r21, Z+1	; 0x01
    20dc:	42 17       	cp	r20, r18
    20de:	53 07       	cpc	r21, r19
    20e0:	54 f5       	brge	.+84     	; 0x2136 <main+0x38e>
					{
						minCost=cost[node[botloc-1][i]-1];
    20e2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    20e6:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    20ea:	31 97       	sbiw	r30, 0x01	; 1
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	e8 0f       	add	r30, r24
    20f6:	f9 1f       	adc	r31, r25
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	ed 5b       	subi	r30, 0xBD	; 189
    20fe:	fa 4f       	sbci	r31, 0xFA	; 250
    2100:	01 90       	ld	r0, Z+
    2102:	f0 81       	ld	r31, Z
    2104:	e0 2d       	mov	r30, r0
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ef 51       	subi	r30, 0x1F	; 31
    210c:	fb 4f       	sbci	r31, 0xFB	; 251
    210e:	20 81       	ld	r18, Z
    2110:	31 81       	ldd	r19, Z+1	; 0x01
						nxtNode=node[botloc-1][i];
    2112:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2116:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    211a:	31 97       	sbiw	r30, 0x01	; 1
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	e8 0f       	add	r30, r24
    2126:	f9 1f       	adc	r31, r25
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	ed 5b       	subi	r30, 0xBD	; 189
    212e:	fa 4f       	sbci	r31, 0xFA	; 250
    2130:	80 80       	ld	r8, Z
    2132:	91 80       	ldd	r9, Z+1	; 0x01
    2134:	7c 01       	movw	r14, r24
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
			for(i=1;i<4;i++)
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	84 30       	cpi	r24, 0x04	; 4
    213a:	91 05       	cpc	r25, r1
    213c:	09 f0       	breq	.+2      	; 0x2140 <main+0x398>
    213e:	a2 cf       	rjmp	.-188    	; 0x2084 <main+0x2dc>
    2140:	67 01       	movw	r12, r14
    2142:	84 01       	movw	r16, r8
						minCost=cost[node[botloc-1][i]-1];
						nxtNode=node[botloc-1][i];
						pos=i;
					}
			}
			lcd_print(2,8,nxtNode,2);
    2144:	22 e0       	ldi	r18, 0x02	; 2
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	a4 01       	movw	r20, r8
    214a:	68 e0       	ldi	r22, 0x08	; 8
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			while((int)otherBotMovingTo==nxtNode);
    2152:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <otherBotMovingTo>
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	08 17       	cp	r16, r24
    215a:	19 07       	cpc	r17, r25
    215c:	d1 f3       	breq	.-12     	; 0x2152 <main+0x3aa>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    215e:	88 81       	ld	r24, Y
    2160:	85 ff       	sbrs	r24, 5
    2162:	fd cf       	rjmp	.-6      	; 0x215e <main+0x3b6>
	UDR0 = data;
    2164:	85 e0       	ldi	r24, 0x05	; 5
    2166:	d5 01       	movw	r26, r10
    2168:	8c 93       	st	X, r24

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    216a:	00 68       	ori	r16, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    216c:	88 81       	ld	r24, Y
    216e:	85 ff       	sbrs	r24, 5
    2170:	fd cf       	rjmp	.-6      	; 0x216c <main+0x3c4>
	UDR0 = data;
    2172:	f5 01       	movw	r30, r10
    2174:	00 83       	st	Z, r16
			}
			lcd_print(2,8,nxtNode,2);
			while((int)otherBotMovingTo==nxtNode);
			SendNextNode(nxtNode);
			//while(otherBotLocation==nxtNode);
			taskDone=move(pos);
    2176:	c6 01       	movw	r24, r12
    2178:	2a dc       	rcall	.-1964   	; 0x19ce <move>
			if(taskDone==0)
    217a:	89 2b       	or	r24, r25
    217c:	09 f0       	breq	.+2      	; 0x2180 <main+0x3d8>
    217e:	5a c0       	rjmp	.+180    	; 0x2234 <__stack+0x35>
    2180:	82 2d       	mov	r24, r2
    2182:	90 e0       	ldi	r25, 0x00	; 0
			{
				for(i=0;i<4;i++)
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
    2184:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2188:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    218c:	31 97       	sbiw	r30, 0x01	; 1
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	ee 0d       	add	r30, r14
    2198:	ff 1d       	adc	r31, r15
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	ed 5b       	subi	r30, 0xBD	; 189
    21a0:	fa 4f       	sbci	r31, 0xFA	; 250
    21a2:	01 90       	ld	r0, Z+
    21a4:	f0 81       	ld	r31, Z
    21a6:	e0 2d       	mov	r30, r0
    21a8:	31 97       	sbiw	r30, 0x01	; 1
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	ee 0f       	add	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	e8 0f       	add	r30, r24
    21b4:	f9 1f       	adc	r31, r25
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ed 5b       	subi	r30, 0xBD	; 189
    21bc:	fa 4f       	sbci	r31, 0xFA	; 250
    21be:	20 81       	ld	r18, Z
    21c0:	31 81       	ldd	r19, Z+1	; 0x01
    21c2:	28 15       	cp	r18, r8
    21c4:	39 05       	cpc	r19, r9
    21c6:	f9 f4       	brne	.+62     	; 0x2206 <__stack+0x7>
						node[node[botloc-1][pos]-1][i]=0;
    21c8:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    21cc:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    21d0:	31 97       	sbiw	r30, 0x01	; 1
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	ee 0d       	add	r30, r14
    21dc:	ff 1d       	adc	r31, r15
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	ed 5b       	subi	r30, 0xBD	; 189
    21e4:	fa 4f       	sbci	r31, 0xFA	; 250
    21e6:	01 90       	ld	r0, Z+
    21e8:	f0 81       	ld	r31, Z
    21ea:	e0 2d       	mov	r30, r0
    21ec:	31 97       	sbiw	r30, 0x01	; 1
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	e8 0f       	add	r30, r24
    21f8:	f9 1f       	adc	r31, r25
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	ed 5b       	subi	r30, 0xBD	; 189
    2200:	fa 4f       	sbci	r31, 0xFA	; 250
    2202:	11 82       	std	Z+1, r1	; 0x01
    2204:	10 82       	st	Z, r1
			SendNextNode(nxtNode);
			//while(otherBotLocation==nxtNode);
			taskDone=move(pos);
			if(taskDone==0)
			{
				for(i=0;i<4;i++)
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	84 30       	cpi	r24, 0x04	; 4
    220a:	91 05       	cpc	r25, r1
    220c:	09 f0       	breq	.+2      	; 0x2210 <__stack+0x11>
    220e:	ba cf       	rjmp	.-140    	; 0x2184 <main+0x3dc>
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
						node[node[botloc-1][pos]-1][i]=0;
				node[botloc-1][pos]=0;
    2210:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2214:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2218:	31 97       	sbiw	r30, 0x01	; 1
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	ee 0d       	add	r30, r14
    2224:	ff 1d       	adc	r31, r15
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ed 5b       	subi	r30, 0xBD	; 189
    222c:	fa 4f       	sbci	r31, 0xFA	; 250
    222e:	11 82       	std	Z+1, r1	; 0x01
    2230:	10 82       	st	Z, r1
				break;
    2232:	31 c0       	rjmp	.+98     	; 0x2296 <__stack+0x97>
			}
			else
			{
				botloc=node[botloc-1][pos];
    2234:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2238:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    223c:	31 97       	sbiw	r30, 0x01	; 1
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	ec 0d       	add	r30, r12
    2248:	fd 1d       	adc	r31, r13
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	ed 5b       	subi	r30, 0xBD	; 189
    2250:	fa 4f       	sbci	r31, 0xFA	; 250
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <botloc+0x1>
    225a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <botloc>
				SendNodeReached(botloc);
    225e:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    2262:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2266:	88 81       	ld	r24, Y
    2268:	85 ff       	sbrs	r24, 5
    226a:	fd cf       	rjmp	.-6      	; 0x2266 <__stack+0x67>
	UDR0 = data;
    226c:	d5 01       	movw	r26, r10
    226e:	3c 92       	st	X, r3

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    2270:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2272:	88 81       	ld	r24, Y
    2274:	85 ff       	sbrs	r24, 5
    2276:	fd cf       	rjmp	.-6      	; 0x2272 <__stack+0x73>
	UDR0 = data;
    2278:	f5 01       	movw	r30, r10
    227a:	20 83       	st	Z, r18
		int taskDone=0;
		int i,minCost,nxtNode,pos;
		costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
		lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
		printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    227c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2280:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	ef 51       	subi	r30, 0x1F	; 31
    228a:	fb 4f       	sbci	r31, 0xFB	; 251
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	89 2b       	or	r24, r25
    2292:	09 f0       	breq	.+2      	; 0x2296 <__stack+0x97>
    2294:	c6 ce       	rjmp	.-628    	; 0x2022 <main+0x27a>
				botloc=node[botloc-1][pos];
				SendNodeReached(botloc);
			}
		}
			
		if(cost[botloc-1]==0)
    2296:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    229a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ef 51       	subi	r30, 0x1F	; 31
    22a4:	fb 4f       	sbci	r31, 0xFB	; 251
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	89 2b       	or	r24, r25
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <__stack+0xb1>
    22ae:	49 c0       	rjmp	.+146    	; 0x2342 <__stack+0x143>
		{
			while(noteToStrike!=tasks[taskitr]);
    22b0:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <taskitr>
    22b4:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <taskitr+0x1>
    22b8:	fc 01       	movw	r30, r24
    22ba:	e9 54       	subi	r30, 0x49	; 73
    22bc:	fb 4f       	sbci	r31, 0xFB	; 251
    22be:	30 81       	ld	r19, Z
    22c0:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <noteToStrike>
    22c4:	32 13       	cpse	r19, r18
    22c6:	fb cf       	rjmp	.-10     	; 0x22be <__stack+0xbf>
			// Servo Motor Control
			// Strike the Note
			printf("Reached Destination node=%d \n",(int)notes[(int)tasks[taskitr]]);
    22c8:	fc 01       	movw	r30, r24
    22ca:	e9 54       	subi	r30, 0x49	; 73
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	e0 81       	ld	r30, Z
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	e3 53       	subi	r30, 0x33	; 51
    22d4:	fb 4f       	sbci	r31, 0xFB	; 251
    22d6:	80 81       	ld	r24, Z
    22d8:	1f 92       	push	r1
    22da:	8f 93       	push	r24
    22dc:	87 e4       	ldi	r24, 0x47	; 71
    22de:	94 e0       	ldi	r25, 0x04	; 4
    22e0:	9f 93       	push	r25
    22e2:	8f 93       	push	r24
    22e4:	dd d1       	rcall	.+954    	; 0x26a0 <printf>
			buzzer_on();
    22e6:	7c d8       	rcall	.-3848   	; 0x13e0 <buzzer_on>
    22e8:	ff ef       	ldi	r31, 0xFF	; 255
    22ea:	2f e7       	ldi	r18, 0x7F	; 127
    22ec:	36 e1       	ldi	r19, 0x16	; 22
    22ee:	f1 50       	subi	r31, 0x01	; 1
    22f0:	20 40       	sbci	r18, 0x00	; 0
    22f2:	30 40       	sbci	r19, 0x00	; 0
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <__stack+0xef>
    22f6:	00 c0       	rjmp	.+0      	; 0x22f8 <__stack+0xf9>
    22f8:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    22fa:	76 d8       	rcall	.-3860   	; 0x13e8 <buzzer_off>
			taskitr++;
    22fc:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <taskitr>
    2300:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <taskitr+0x1>
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <taskitr+0x1>
    230a:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <taskitr>
			SendNoteStruck(noteToStrike);
    230e:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <noteToStrike>
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    231a:	98 81       	ld	r25, Y
    231c:	95 ff       	sbrs	r25, 5
    231e:	fd cf       	rjmp	.-6      	; 0x231a <__stack+0x11b>
	UDR0 = data;
    2320:	96 e0       	ldi	r25, 0x06	; 6
    2322:	d5 01       	movw	r26, r10
    2324:	9c 93       	st	X, r25

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    2326:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2328:	98 81       	ld	r25, Y
    232a:	95 ff       	sbrs	r25, 5
    232c:	fd cf       	rjmp	.-6      	; 0x2328 <__stack+0x129>
	UDR0 = data;
    232e:	f5 01       	movw	r30, r10
    2330:	80 83       	st	Z, r24
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    2332:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <noteToStrike>
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <noteToStrike>
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    233c:	68 94       	set
    233e:	33 24       	eor	r3, r3
    2340:	32 f8       	bld	r3, 2
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while(notes[(int)noteToStrike]!=0 && taskitr!=taskCount)
    2342:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <noteToStrike>
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	e3 53       	subi	r30, 0x33	; 51
    234a:	fb 4f       	sbci	r31, 0xFB	; 251
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	59 f0       	breq	.+22     	; 0x2368 <__stack+0x169>
    2352:	20 91 b3 04 	lds	r18, 0x04B3	; 0x8004b3 <taskCount>
    2356:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <taskitr>
    235a:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <taskitr+0x1>
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	28 17       	cp	r18, r24
    2362:	39 07       	cpc	r19, r25
    2364:	09 f0       	breq	.+2      	; 0x2368 <__stack+0x169>
    2366:	f3 cd       	rjmp	.-1050   	; 0x1f4e <main+0x1a6>
			buzzer_off();
			taskitr++;
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
    2368:	85 e6       	ldi	r24, 0x65	; 101
    236a:	94 e0       	ldi	r25, 0x04	; 4
    236c:	ac d1       	rcall	.+856    	; 0x26c6 <puts>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    236e:	e0 ec       	ldi	r30, 0xC0	; 192
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	85 ff       	sbrs	r24, 5
    2376:	fd cf       	rjmp	.-6      	; 0x2372 <__stack+0x173>
	UDR0 = data;
    2378:	8a e0       	ldi	r24, 0x0A	; 10
    237a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    237e:	e0 ec       	ldi	r30, 0xC0	; 192
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	85 ff       	sbrs	r24, 5
    2386:	fd cf       	rjmp	.-6      	; 0x2382 <__stack+0x183>
	UDR0 = data;
    2388:	80 e8       	ldi	r24, 0x80	; 128
    238a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
	BotEnded();
	while(botEnd!=1);
    238e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <botEnd>
    2392:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <botEnd+0x1>
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	d1 f7       	brne	.-12     	; 0x238e <__stack+0x18f>
	buzzer_on();
    239a:	22 d8       	rcall	.-4028   	; 0x13e0 <buzzer_on>
    239c:	ff ef       	ldi	r31, 0xFF	; 255
    239e:	2f ef       	ldi	r18, 0xFF	; 255
    23a0:	30 ee       	ldi	r19, 0xE0	; 224
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	f1 50       	subi	r31, 0x01	; 1
    23a6:	20 40       	sbci	r18, 0x00	; 0
    23a8:	30 40       	sbci	r19, 0x00	; 0
    23aa:	80 40       	sbci	r24, 0x00	; 0
    23ac:	d9 f7       	brne	.-10     	; 0x23a4 <__stack+0x1a5>
    23ae:	00 c0       	rjmp	.+0      	; 0x23b0 <__stack+0x1b1>
    23b0:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    23b2:	1a d8       	rcall	.-4044   	; 0x13e8 <buzzer_off>
	return 0;
}
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	df 90       	pop	r13
    23c6:	cf 90       	pop	r12
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	9f 90       	pop	r9
    23ce:	8f 90       	pop	r8
    23d0:	7f 90       	pop	r7
    23d2:	6f 90       	pop	r6
    23d4:	5f 90       	pop	r5
    23d6:	4f 90       	pop	r4
    23d8:	3f 90       	pop	r3
    23da:	2f 90       	pop	r2
    23dc:	08 95       	ret

000023de <__divsf3>:
    23de:	0c d0       	rcall	.+24     	; 0x23f8 <__divsf3x>
    23e0:	e6 c0       	rjmp	.+460    	; 0x25ae <__fp_round>
    23e2:	de d0       	rcall	.+444    	; 0x25a0 <__fp_pscB>
    23e4:	40 f0       	brcs	.+16     	; 0x23f6 <__divsf3+0x18>
    23e6:	d5 d0       	rcall	.+426    	; 0x2592 <__fp_pscA>
    23e8:	30 f0       	brcs	.+12     	; 0x23f6 <__divsf3+0x18>
    23ea:	21 f4       	brne	.+8      	; 0x23f4 <__divsf3+0x16>
    23ec:	5f 3f       	cpi	r21, 0xFF	; 255
    23ee:	19 f0       	breq	.+6      	; 0x23f6 <__divsf3+0x18>
    23f0:	c7 c0       	rjmp	.+398    	; 0x2580 <__fp_inf>
    23f2:	51 11       	cpse	r21, r1
    23f4:	10 c1       	rjmp	.+544    	; 0x2616 <__fp_szero>
    23f6:	ca c0       	rjmp	.+404    	; 0x258c <__fp_nan>

000023f8 <__divsf3x>:
    23f8:	eb d0       	rcall	.+470    	; 0x25d0 <__fp_split3>
    23fa:	98 f3       	brcs	.-26     	; 0x23e2 <__divsf3+0x4>

000023fc <__divsf3_pse>:
    23fc:	99 23       	and	r25, r25
    23fe:	c9 f3       	breq	.-14     	; 0x23f2 <__divsf3+0x14>
    2400:	55 23       	and	r21, r21
    2402:	b1 f3       	breq	.-20     	; 0x23f0 <__divsf3+0x12>
    2404:	95 1b       	sub	r25, r21
    2406:	55 0b       	sbc	r21, r21
    2408:	bb 27       	eor	r27, r27
    240a:	aa 27       	eor	r26, r26
    240c:	62 17       	cp	r22, r18
    240e:	73 07       	cpc	r23, r19
    2410:	84 07       	cpc	r24, r20
    2412:	38 f0       	brcs	.+14     	; 0x2422 <__divsf3_pse+0x26>
    2414:	9f 5f       	subi	r25, 0xFF	; 255
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	44 1f       	adc	r20, r20
    241e:	aa 1f       	adc	r26, r26
    2420:	a9 f3       	breq	.-22     	; 0x240c <__divsf3_pse+0x10>
    2422:	33 d0       	rcall	.+102    	; 0x248a <__divsf3_pse+0x8e>
    2424:	0e 2e       	mov	r0, r30
    2426:	3a f0       	brmi	.+14     	; 0x2436 <__divsf3_pse+0x3a>
    2428:	e0 e8       	ldi	r30, 0x80	; 128
    242a:	30 d0       	rcall	.+96     	; 0x248c <__divsf3_pse+0x90>
    242c:	91 50       	subi	r25, 0x01	; 1
    242e:	50 40       	sbci	r21, 0x00	; 0
    2430:	e6 95       	lsr	r30
    2432:	00 1c       	adc	r0, r0
    2434:	ca f7       	brpl	.-14     	; 0x2428 <__divsf3_pse+0x2c>
    2436:	29 d0       	rcall	.+82     	; 0x248a <__divsf3_pse+0x8e>
    2438:	fe 2f       	mov	r31, r30
    243a:	27 d0       	rcall	.+78     	; 0x248a <__divsf3_pse+0x8e>
    243c:	66 0f       	add	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	88 1f       	adc	r24, r24
    2442:	bb 1f       	adc	r27, r27
    2444:	26 17       	cp	r18, r22
    2446:	37 07       	cpc	r19, r23
    2448:	48 07       	cpc	r20, r24
    244a:	ab 07       	cpc	r26, r27
    244c:	b0 e8       	ldi	r27, 0x80	; 128
    244e:	09 f0       	breq	.+2      	; 0x2452 <__divsf3_pse+0x56>
    2450:	bb 0b       	sbc	r27, r27
    2452:	80 2d       	mov	r24, r0
    2454:	bf 01       	movw	r22, r30
    2456:	ff 27       	eor	r31, r31
    2458:	93 58       	subi	r25, 0x83	; 131
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	2a f0       	brmi	.+10     	; 0x2468 <__divsf3_pse+0x6c>
    245e:	9e 3f       	cpi	r25, 0xFE	; 254
    2460:	51 05       	cpc	r21, r1
    2462:	68 f0       	brcs	.+26     	; 0x247e <__divsf3_pse+0x82>
    2464:	8d c0       	rjmp	.+282    	; 0x2580 <__fp_inf>
    2466:	d7 c0       	rjmp	.+430    	; 0x2616 <__fp_szero>
    2468:	5f 3f       	cpi	r21, 0xFF	; 255
    246a:	ec f3       	brlt	.-6      	; 0x2466 <__divsf3_pse+0x6a>
    246c:	98 3e       	cpi	r25, 0xE8	; 232
    246e:	dc f3       	brlt	.-10     	; 0x2466 <__divsf3_pse+0x6a>
    2470:	86 95       	lsr	r24
    2472:	77 95       	ror	r23
    2474:	67 95       	ror	r22
    2476:	b7 95       	ror	r27
    2478:	f7 95       	ror	r31
    247a:	9f 5f       	subi	r25, 0xFF	; 255
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__divsf3_pse+0x74>
    247e:	88 0f       	add	r24, r24
    2480:	91 1d       	adc	r25, r1
    2482:	96 95       	lsr	r25
    2484:	87 95       	ror	r24
    2486:	97 f9       	bld	r25, 7
    2488:	08 95       	ret
    248a:	e1 e0       	ldi	r30, 0x01	; 1
    248c:	66 0f       	add	r22, r22
    248e:	77 1f       	adc	r23, r23
    2490:	88 1f       	adc	r24, r24
    2492:	bb 1f       	adc	r27, r27
    2494:	62 17       	cp	r22, r18
    2496:	73 07       	cpc	r23, r19
    2498:	84 07       	cpc	r24, r20
    249a:	ba 07       	cpc	r27, r26
    249c:	20 f0       	brcs	.+8      	; 0x24a6 <__divsf3_pse+0xaa>
    249e:	62 1b       	sub	r22, r18
    24a0:	73 0b       	sbc	r23, r19
    24a2:	84 0b       	sbc	r24, r20
    24a4:	ba 0b       	sbc	r27, r26
    24a6:	ee 1f       	adc	r30, r30
    24a8:	88 f7       	brcc	.-30     	; 0x248c <__divsf3_pse+0x90>
    24aa:	e0 95       	com	r30
    24ac:	08 95       	ret

000024ae <__fixunssfsi>:
    24ae:	98 d0       	rcall	.+304    	; 0x25e0 <__fp_splitA>
    24b0:	88 f0       	brcs	.+34     	; 0x24d4 <__fixunssfsi+0x26>
    24b2:	9f 57       	subi	r25, 0x7F	; 127
    24b4:	90 f0       	brcs	.+36     	; 0x24da <__fixunssfsi+0x2c>
    24b6:	b9 2f       	mov	r27, r25
    24b8:	99 27       	eor	r25, r25
    24ba:	b7 51       	subi	r27, 0x17	; 23
    24bc:	a0 f0       	brcs	.+40     	; 0x24e6 <__fixunssfsi+0x38>
    24be:	d1 f0       	breq	.+52     	; 0x24f4 <__fixunssfsi+0x46>
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	88 1f       	adc	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	1a f0       	brmi	.+6      	; 0x24d0 <__fixunssfsi+0x22>
    24ca:	ba 95       	dec	r27
    24cc:	c9 f7       	brne	.-14     	; 0x24c0 <__fixunssfsi+0x12>
    24ce:	12 c0       	rjmp	.+36     	; 0x24f4 <__fixunssfsi+0x46>
    24d0:	b1 30       	cpi	r27, 0x01	; 1
    24d2:	81 f0       	breq	.+32     	; 0x24f4 <__fixunssfsi+0x46>
    24d4:	9f d0       	rcall	.+318    	; 0x2614 <__fp_zero>
    24d6:	b1 e0       	ldi	r27, 0x01	; 1
    24d8:	08 95       	ret
    24da:	9c c0       	rjmp	.+312    	; 0x2614 <__fp_zero>
    24dc:	67 2f       	mov	r22, r23
    24de:	78 2f       	mov	r23, r24
    24e0:	88 27       	eor	r24, r24
    24e2:	b8 5f       	subi	r27, 0xF8	; 248
    24e4:	39 f0       	breq	.+14     	; 0x24f4 <__fixunssfsi+0x46>
    24e6:	b9 3f       	cpi	r27, 0xF9	; 249
    24e8:	cc f3       	brlt	.-14     	; 0x24dc <__fixunssfsi+0x2e>
    24ea:	86 95       	lsr	r24
    24ec:	77 95       	ror	r23
    24ee:	67 95       	ror	r22
    24f0:	b3 95       	inc	r27
    24f2:	d9 f7       	brne	.-10     	; 0x24ea <__fixunssfsi+0x3c>
    24f4:	3e f4       	brtc	.+14     	; 0x2504 <__fixunssfsi+0x56>
    24f6:	90 95       	com	r25
    24f8:	80 95       	com	r24
    24fa:	70 95       	com	r23
    24fc:	61 95       	neg	r22
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	8f 4f       	sbci	r24, 0xFF	; 255
    2502:	9f 4f       	sbci	r25, 0xFF	; 255
    2504:	08 95       	ret

00002506 <__floatunsisf>:
    2506:	e8 94       	clt
    2508:	09 c0       	rjmp	.+18     	; 0x251c <__floatsisf+0x12>

0000250a <__floatsisf>:
    250a:	97 fb       	bst	r25, 7
    250c:	3e f4       	brtc	.+14     	; 0x251c <__floatsisf+0x12>
    250e:	90 95       	com	r25
    2510:	80 95       	com	r24
    2512:	70 95       	com	r23
    2514:	61 95       	neg	r22
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
    2518:	8f 4f       	sbci	r24, 0xFF	; 255
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	99 23       	and	r25, r25
    251e:	a9 f0       	breq	.+42     	; 0x254a <__floatsisf+0x40>
    2520:	f9 2f       	mov	r31, r25
    2522:	96 e9       	ldi	r25, 0x96	; 150
    2524:	bb 27       	eor	r27, r27
    2526:	93 95       	inc	r25
    2528:	f6 95       	lsr	r31
    252a:	87 95       	ror	r24
    252c:	77 95       	ror	r23
    252e:	67 95       	ror	r22
    2530:	b7 95       	ror	r27
    2532:	f1 11       	cpse	r31, r1
    2534:	f8 cf       	rjmp	.-16     	; 0x2526 <__floatsisf+0x1c>
    2536:	fa f4       	brpl	.+62     	; 0x2576 <__floatsisf+0x6c>
    2538:	bb 0f       	add	r27, r27
    253a:	11 f4       	brne	.+4      	; 0x2540 <__floatsisf+0x36>
    253c:	60 ff       	sbrs	r22, 0
    253e:	1b c0       	rjmp	.+54     	; 0x2576 <__floatsisf+0x6c>
    2540:	6f 5f       	subi	r22, 0xFF	; 255
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	8f 4f       	sbci	r24, 0xFF	; 255
    2546:	9f 4f       	sbci	r25, 0xFF	; 255
    2548:	16 c0       	rjmp	.+44     	; 0x2576 <__floatsisf+0x6c>
    254a:	88 23       	and	r24, r24
    254c:	11 f0       	breq	.+4      	; 0x2552 <__floatsisf+0x48>
    254e:	96 e9       	ldi	r25, 0x96	; 150
    2550:	11 c0       	rjmp	.+34     	; 0x2574 <__floatsisf+0x6a>
    2552:	77 23       	and	r23, r23
    2554:	21 f0       	breq	.+8      	; 0x255e <__floatsisf+0x54>
    2556:	9e e8       	ldi	r25, 0x8E	; 142
    2558:	87 2f       	mov	r24, r23
    255a:	76 2f       	mov	r23, r22
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <__floatsisf+0x5e>
    255e:	66 23       	and	r22, r22
    2560:	71 f0       	breq	.+28     	; 0x257e <__floatsisf+0x74>
    2562:	96 e8       	ldi	r25, 0x86	; 134
    2564:	86 2f       	mov	r24, r22
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	2a f0       	brmi	.+10     	; 0x2576 <__floatsisf+0x6c>
    256c:	9a 95       	dec	r25
    256e:	66 0f       	add	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	88 1f       	adc	r24, r24
    2574:	da f7       	brpl	.-10     	; 0x256c <__floatsisf+0x62>
    2576:	88 0f       	add	r24, r24
    2578:	96 95       	lsr	r25
    257a:	87 95       	ror	r24
    257c:	97 f9       	bld	r25, 7
    257e:	08 95       	ret

00002580 <__fp_inf>:
    2580:	97 f9       	bld	r25, 7
    2582:	9f 67       	ori	r25, 0x7F	; 127
    2584:	80 e8       	ldi	r24, 0x80	; 128
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	08 95       	ret

0000258c <__fp_nan>:
    258c:	9f ef       	ldi	r25, 0xFF	; 255
    258e:	80 ec       	ldi	r24, 0xC0	; 192
    2590:	08 95       	ret

00002592 <__fp_pscA>:
    2592:	00 24       	eor	r0, r0
    2594:	0a 94       	dec	r0
    2596:	16 16       	cp	r1, r22
    2598:	17 06       	cpc	r1, r23
    259a:	18 06       	cpc	r1, r24
    259c:	09 06       	cpc	r0, r25
    259e:	08 95       	ret

000025a0 <__fp_pscB>:
    25a0:	00 24       	eor	r0, r0
    25a2:	0a 94       	dec	r0
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	14 06       	cpc	r1, r20
    25aa:	05 06       	cpc	r0, r21
    25ac:	08 95       	ret

000025ae <__fp_round>:
    25ae:	09 2e       	mov	r0, r25
    25b0:	03 94       	inc	r0
    25b2:	00 0c       	add	r0, r0
    25b4:	11 f4       	brne	.+4      	; 0x25ba <__fp_round+0xc>
    25b6:	88 23       	and	r24, r24
    25b8:	52 f0       	brmi	.+20     	; 0x25ce <__fp_round+0x20>
    25ba:	bb 0f       	add	r27, r27
    25bc:	40 f4       	brcc	.+16     	; 0x25ce <__fp_round+0x20>
    25be:	bf 2b       	or	r27, r31
    25c0:	11 f4       	brne	.+4      	; 0x25c6 <__fp_round+0x18>
    25c2:	60 ff       	sbrs	r22, 0
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <__fp_round+0x20>
    25c6:	6f 5f       	subi	r22, 0xFF	; 255
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	08 95       	ret

000025d0 <__fp_split3>:
    25d0:	57 fd       	sbrc	r21, 7
    25d2:	90 58       	subi	r25, 0x80	; 128
    25d4:	44 0f       	add	r20, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	59 f0       	breq	.+22     	; 0x25f0 <__fp_splitA+0x10>
    25da:	5f 3f       	cpi	r21, 0xFF	; 255
    25dc:	71 f0       	breq	.+28     	; 0x25fa <__fp_splitA+0x1a>
    25de:	47 95       	ror	r20

000025e0 <__fp_splitA>:
    25e0:	88 0f       	add	r24, r24
    25e2:	97 fb       	bst	r25, 7
    25e4:	99 1f       	adc	r25, r25
    25e6:	61 f0       	breq	.+24     	; 0x2600 <__fp_splitA+0x20>
    25e8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ea:	79 f0       	breq	.+30     	; 0x260a <__fp_splitA+0x2a>
    25ec:	87 95       	ror	r24
    25ee:	08 95       	ret
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	14 06       	cpc	r1, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	f2 cf       	rjmp	.-28     	; 0x25de <__fp_split3+0xe>
    25fa:	46 95       	lsr	r20
    25fc:	f1 df       	rcall	.-30     	; 0x25e0 <__fp_splitA>
    25fe:	08 c0       	rjmp	.+16     	; 0x2610 <__fp_splitA+0x30>
    2600:	16 16       	cp	r1, r22
    2602:	17 06       	cpc	r1, r23
    2604:	18 06       	cpc	r1, r24
    2606:	99 1f       	adc	r25, r25
    2608:	f1 cf       	rjmp	.-30     	; 0x25ec <__fp_splitA+0xc>
    260a:	86 95       	lsr	r24
    260c:	71 05       	cpc	r23, r1
    260e:	61 05       	cpc	r22, r1
    2610:	08 94       	sec
    2612:	08 95       	ret

00002614 <__fp_zero>:
    2614:	e8 94       	clt

00002616 <__fp_szero>:
    2616:	bb 27       	eor	r27, r27
    2618:	66 27       	eor	r22, r22
    261a:	77 27       	eor	r23, r23
    261c:	cb 01       	movw	r24, r22
    261e:	97 f9       	bld	r25, 7
    2620:	08 95       	ret

00002622 <__gesf2>:
    2622:	03 d0       	rcall	.+6      	; 0x262a <__fp_cmp>
    2624:	08 f4       	brcc	.+2      	; 0x2628 <__gesf2+0x6>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	08 95       	ret

0000262a <__fp_cmp>:
    262a:	99 0f       	add	r25, r25
    262c:	00 08       	sbc	r0, r0
    262e:	55 0f       	add	r21, r21
    2630:	aa 0b       	sbc	r26, r26
    2632:	e0 e8       	ldi	r30, 0x80	; 128
    2634:	fe ef       	ldi	r31, 0xFE	; 254
    2636:	16 16       	cp	r1, r22
    2638:	17 06       	cpc	r1, r23
    263a:	e8 07       	cpc	r30, r24
    263c:	f9 07       	cpc	r31, r25
    263e:	c0 f0       	brcs	.+48     	; 0x2670 <__fp_cmp+0x46>
    2640:	12 16       	cp	r1, r18
    2642:	13 06       	cpc	r1, r19
    2644:	e4 07       	cpc	r30, r20
    2646:	f5 07       	cpc	r31, r21
    2648:	98 f0       	brcs	.+38     	; 0x2670 <__fp_cmp+0x46>
    264a:	62 1b       	sub	r22, r18
    264c:	73 0b       	sbc	r23, r19
    264e:	84 0b       	sbc	r24, r20
    2650:	95 0b       	sbc	r25, r21
    2652:	39 f4       	brne	.+14     	; 0x2662 <__fp_cmp+0x38>
    2654:	0a 26       	eor	r0, r26
    2656:	61 f0       	breq	.+24     	; 0x2670 <__fp_cmp+0x46>
    2658:	23 2b       	or	r18, r19
    265a:	24 2b       	or	r18, r20
    265c:	25 2b       	or	r18, r21
    265e:	21 f4       	brne	.+8      	; 0x2668 <__fp_cmp+0x3e>
    2660:	08 95       	ret
    2662:	0a 26       	eor	r0, r26
    2664:	09 f4       	brne	.+2      	; 0x2668 <__fp_cmp+0x3e>
    2666:	a1 40       	sbci	r26, 0x01	; 1
    2668:	a6 95       	lsr	r26
    266a:	8f ef       	ldi	r24, 0xFF	; 255
    266c:	81 1d       	adc	r24, r1
    266e:	81 1d       	adc	r24, r1
    2670:	08 95       	ret

00002672 <__tablejump2__>:
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	88 1f       	adc	r24, r24
    2678:	8b bf       	out	0x3b, r24	; 59
    267a:	07 90       	elpm	r0, Z+
    267c:	f6 91       	elpm	r31, Z
    267e:	e0 2d       	mov	r30, r0
    2680:	19 94       	eijmp

00002682 <__umulhisi3>:
    2682:	a2 9f       	mul	r26, r18
    2684:	b0 01       	movw	r22, r0
    2686:	b3 9f       	mul	r27, r19
    2688:	c0 01       	movw	r24, r0
    268a:	a3 9f       	mul	r26, r19
    268c:	70 0d       	add	r23, r0
    268e:	81 1d       	adc	r24, r1
    2690:	11 24       	eor	r1, r1
    2692:	91 1d       	adc	r25, r1
    2694:	b2 9f       	mul	r27, r18
    2696:	70 0d       	add	r23, r0
    2698:	81 1d       	adc	r24, r1
    269a:	11 24       	eor	r1, r1
    269c:	91 1d       	adc	r25, r1
    269e:	08 95       	ret

000026a0 <printf>:
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	ae 01       	movw	r20, r28
    26aa:	4a 5f       	subi	r20, 0xFA	; 250
    26ac:	5f 4f       	sbci	r21, 0xFF	; 255
    26ae:	fa 01       	movw	r30, r20
    26b0:	61 91       	ld	r22, Z+
    26b2:	71 91       	ld	r23, Z+
    26b4:	af 01       	movw	r20, r30
    26b6:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <__iob+0x2>
    26ba:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <__iob+0x3>
    26be:	33 d0       	rcall	.+102    	; 0x2726 <vfprintf>
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <puts>:
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	e0 91 52 08 	lds	r30, 0x0852	; 0x800852 <__iob+0x2>
    26d2:	f0 91 53 08 	lds	r31, 0x0853	; 0x800853 <__iob+0x3>
    26d6:	23 81       	ldd	r18, Z+3	; 0x03
    26d8:	21 ff       	sbrs	r18, 1
    26da:	1b c0       	rjmp	.+54     	; 0x2712 <puts+0x4c>
    26dc:	8c 01       	movw	r16, r24
    26de:	d0 e0       	ldi	r29, 0x00	; 0
    26e0:	c0 e0       	ldi	r28, 0x00	; 0
    26e2:	f8 01       	movw	r30, r16
    26e4:	81 91       	ld	r24, Z+
    26e6:	8f 01       	movw	r16, r30
    26e8:	60 91 52 08 	lds	r22, 0x0852	; 0x800852 <__iob+0x2>
    26ec:	70 91 53 08 	lds	r23, 0x0853	; 0x800853 <__iob+0x3>
    26f0:	db 01       	movw	r26, r22
    26f2:	18 96       	adiw	r26, 0x08	; 8
    26f4:	ed 91       	ld	r30, X+
    26f6:	fc 91       	ld	r31, X
    26f8:	19 97       	sbiw	r26, 0x09	; 9
    26fa:	88 23       	and	r24, r24
    26fc:	31 f0       	breq	.+12     	; 0x270a <puts+0x44>
    26fe:	19 95       	eicall
    2700:	89 2b       	or	r24, r25
    2702:	79 f3       	breq	.-34     	; 0x26e2 <puts+0x1c>
    2704:	df ef       	ldi	r29, 0xFF	; 255
    2706:	cf ef       	ldi	r28, 0xFF	; 255
    2708:	ec cf       	rjmp	.-40     	; 0x26e2 <puts+0x1c>
    270a:	8a e0       	ldi	r24, 0x0A	; 10
    270c:	19 95       	eicall
    270e:	89 2b       	or	r24, r25
    2710:	19 f0       	breq	.+6      	; 0x2718 <puts+0x52>
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	9f ef       	ldi	r25, 0xFF	; 255
    2716:	02 c0       	rjmp	.+4      	; 0x271c <puts+0x56>
    2718:	8d 2f       	mov	r24, r29
    271a:	9c 2f       	mov	r25, r28
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	08 95       	ret

00002726 <vfprintf>:
    2726:	2f 92       	push	r2
    2728:	3f 92       	push	r3
    272a:	4f 92       	push	r4
    272c:	5f 92       	push	r5
    272e:	6f 92       	push	r6
    2730:	7f 92       	push	r7
    2732:	8f 92       	push	r8
    2734:	9f 92       	push	r9
    2736:	af 92       	push	r10
    2738:	bf 92       	push	r11
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	2c 97       	sbiw	r28, 0x0c	; 12
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	7c 01       	movw	r14, r24
    275c:	6b 01       	movw	r12, r22
    275e:	8a 01       	movw	r16, r20
    2760:	fc 01       	movw	r30, r24
    2762:	17 82       	std	Z+7, r1	; 0x07
    2764:	16 82       	std	Z+6, r1	; 0x06
    2766:	83 81       	ldd	r24, Z+3	; 0x03
    2768:	81 ff       	sbrs	r24, 1
    276a:	b0 c1       	rjmp	.+864    	; 0x2acc <vfprintf+0x3a6>
    276c:	ce 01       	movw	r24, r28
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	4c 01       	movw	r8, r24
    2772:	f7 01       	movw	r30, r14
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	f6 01       	movw	r30, r12
    2778:	93 fd       	sbrc	r25, 3
    277a:	85 91       	lpm	r24, Z+
    277c:	93 ff       	sbrs	r25, 3
    277e:	81 91       	ld	r24, Z+
    2780:	6f 01       	movw	r12, r30
    2782:	88 23       	and	r24, r24
    2784:	09 f4       	brne	.+2      	; 0x2788 <vfprintf+0x62>
    2786:	9e c1       	rjmp	.+828    	; 0x2ac4 <vfprintf+0x39e>
    2788:	85 32       	cpi	r24, 0x25	; 37
    278a:	39 f4       	brne	.+14     	; 0x279a <vfprintf+0x74>
    278c:	93 fd       	sbrc	r25, 3
    278e:	85 91       	lpm	r24, Z+
    2790:	93 ff       	sbrs	r25, 3
    2792:	81 91       	ld	r24, Z+
    2794:	6f 01       	movw	r12, r30
    2796:	85 32       	cpi	r24, 0x25	; 37
    2798:	21 f4       	brne	.+8      	; 0x27a2 <vfprintf+0x7c>
    279a:	b7 01       	movw	r22, r14
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	c7 d1       	rcall	.+910    	; 0x2b2e <fputc>
    27a0:	e8 cf       	rjmp	.-48     	; 0x2772 <vfprintf+0x4c>
    27a2:	51 2c       	mov	r5, r1
    27a4:	31 2c       	mov	r3, r1
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	20 32       	cpi	r18, 0x20	; 32
    27aa:	a0 f4       	brcc	.+40     	; 0x27d4 <vfprintf+0xae>
    27ac:	8b 32       	cpi	r24, 0x2B	; 43
    27ae:	69 f0       	breq	.+26     	; 0x27ca <vfprintf+0xa4>
    27b0:	30 f4       	brcc	.+12     	; 0x27be <vfprintf+0x98>
    27b2:	80 32       	cpi	r24, 0x20	; 32
    27b4:	59 f0       	breq	.+22     	; 0x27cc <vfprintf+0xa6>
    27b6:	83 32       	cpi	r24, 0x23	; 35
    27b8:	69 f4       	brne	.+26     	; 0x27d4 <vfprintf+0xae>
    27ba:	20 61       	ori	r18, 0x10	; 16
    27bc:	2c c0       	rjmp	.+88     	; 0x2816 <vfprintf+0xf0>
    27be:	8d 32       	cpi	r24, 0x2D	; 45
    27c0:	39 f0       	breq	.+14     	; 0x27d0 <vfprintf+0xaa>
    27c2:	80 33       	cpi	r24, 0x30	; 48
    27c4:	39 f4       	brne	.+14     	; 0x27d4 <vfprintf+0xae>
    27c6:	21 60       	ori	r18, 0x01	; 1
    27c8:	26 c0       	rjmp	.+76     	; 0x2816 <vfprintf+0xf0>
    27ca:	22 60       	ori	r18, 0x02	; 2
    27cc:	24 60       	ori	r18, 0x04	; 4
    27ce:	23 c0       	rjmp	.+70     	; 0x2816 <vfprintf+0xf0>
    27d0:	28 60       	ori	r18, 0x08	; 8
    27d2:	21 c0       	rjmp	.+66     	; 0x2816 <vfprintf+0xf0>
    27d4:	27 fd       	sbrc	r18, 7
    27d6:	27 c0       	rjmp	.+78     	; 0x2826 <vfprintf+0x100>
    27d8:	30 ed       	ldi	r19, 0xD0	; 208
    27da:	38 0f       	add	r19, r24
    27dc:	3a 30       	cpi	r19, 0x0A	; 10
    27de:	78 f4       	brcc	.+30     	; 0x27fe <vfprintf+0xd8>
    27e0:	26 ff       	sbrs	r18, 6
    27e2:	06 c0       	rjmp	.+12     	; 0x27f0 <vfprintf+0xca>
    27e4:	fa e0       	ldi	r31, 0x0A	; 10
    27e6:	5f 9e       	mul	r5, r31
    27e8:	30 0d       	add	r19, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	53 2e       	mov	r5, r19
    27ee:	13 c0       	rjmp	.+38     	; 0x2816 <vfprintf+0xf0>
    27f0:	8a e0       	ldi	r24, 0x0A	; 10
    27f2:	38 9e       	mul	r3, r24
    27f4:	30 0d       	add	r19, r0
    27f6:	11 24       	eor	r1, r1
    27f8:	33 2e       	mov	r3, r19
    27fa:	20 62       	ori	r18, 0x20	; 32
    27fc:	0c c0       	rjmp	.+24     	; 0x2816 <vfprintf+0xf0>
    27fe:	8e 32       	cpi	r24, 0x2E	; 46
    2800:	21 f4       	brne	.+8      	; 0x280a <vfprintf+0xe4>
    2802:	26 fd       	sbrc	r18, 6
    2804:	5f c1       	rjmp	.+702    	; 0x2ac4 <vfprintf+0x39e>
    2806:	20 64       	ori	r18, 0x40	; 64
    2808:	06 c0       	rjmp	.+12     	; 0x2816 <vfprintf+0xf0>
    280a:	8c 36       	cpi	r24, 0x6C	; 108
    280c:	11 f4       	brne	.+4      	; 0x2812 <vfprintf+0xec>
    280e:	20 68       	ori	r18, 0x80	; 128
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <vfprintf+0xf0>
    2812:	88 36       	cpi	r24, 0x68	; 104
    2814:	41 f4       	brne	.+16     	; 0x2826 <vfprintf+0x100>
    2816:	f6 01       	movw	r30, r12
    2818:	93 fd       	sbrc	r25, 3
    281a:	85 91       	lpm	r24, Z+
    281c:	93 ff       	sbrs	r25, 3
    281e:	81 91       	ld	r24, Z+
    2820:	6f 01       	movw	r12, r30
    2822:	81 11       	cpse	r24, r1
    2824:	c1 cf       	rjmp	.-126    	; 0x27a8 <vfprintf+0x82>
    2826:	98 2f       	mov	r25, r24
    2828:	9f 7d       	andi	r25, 0xDF	; 223
    282a:	95 54       	subi	r25, 0x45	; 69
    282c:	93 30       	cpi	r25, 0x03	; 3
    282e:	28 f4       	brcc	.+10     	; 0x283a <vfprintf+0x114>
    2830:	0c 5f       	subi	r16, 0xFC	; 252
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	ff e3       	ldi	r31, 0x3F	; 63
    2836:	f9 83       	std	Y+1, r31	; 0x01
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <vfprintf+0x12e>
    283a:	83 36       	cpi	r24, 0x63	; 99
    283c:	31 f0       	breq	.+12     	; 0x284a <vfprintf+0x124>
    283e:	83 37       	cpi	r24, 0x73	; 115
    2840:	71 f0       	breq	.+28     	; 0x285e <vfprintf+0x138>
    2842:	83 35       	cpi	r24, 0x53	; 83
    2844:	09 f0       	breq	.+2      	; 0x2848 <vfprintf+0x122>
    2846:	57 c0       	rjmp	.+174    	; 0x28f6 <vfprintf+0x1d0>
    2848:	21 c0       	rjmp	.+66     	; 0x288c <vfprintf+0x166>
    284a:	f8 01       	movw	r30, r16
    284c:	80 81       	ld	r24, Z
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	0e 5f       	subi	r16, 0xFE	; 254
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	44 24       	eor	r4, r4
    2856:	43 94       	inc	r4
    2858:	51 2c       	mov	r5, r1
    285a:	54 01       	movw	r10, r8
    285c:	14 c0       	rjmp	.+40     	; 0x2886 <vfprintf+0x160>
    285e:	38 01       	movw	r6, r16
    2860:	f2 e0       	ldi	r31, 0x02	; 2
    2862:	6f 0e       	add	r6, r31
    2864:	71 1c       	adc	r7, r1
    2866:	f8 01       	movw	r30, r16
    2868:	a0 80       	ld	r10, Z
    286a:	b1 80       	ldd	r11, Z+1	; 0x01
    286c:	26 ff       	sbrs	r18, 6
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <vfprintf+0x150>
    2870:	65 2d       	mov	r22, r5
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	02 c0       	rjmp	.+4      	; 0x287a <vfprintf+0x154>
    2876:	6f ef       	ldi	r22, 0xFF	; 255
    2878:	7f ef       	ldi	r23, 0xFF	; 255
    287a:	c5 01       	movw	r24, r10
    287c:	2c 87       	std	Y+12, r18	; 0x0c
    287e:	4c d1       	rcall	.+664    	; 0x2b18 <strnlen>
    2880:	2c 01       	movw	r4, r24
    2882:	83 01       	movw	r16, r6
    2884:	2c 85       	ldd	r18, Y+12	; 0x0c
    2886:	2f 77       	andi	r18, 0x7F	; 127
    2888:	22 2e       	mov	r2, r18
    288a:	16 c0       	rjmp	.+44     	; 0x28b8 <vfprintf+0x192>
    288c:	38 01       	movw	r6, r16
    288e:	f2 e0       	ldi	r31, 0x02	; 2
    2890:	6f 0e       	add	r6, r31
    2892:	71 1c       	adc	r7, r1
    2894:	f8 01       	movw	r30, r16
    2896:	a0 80       	ld	r10, Z
    2898:	b1 80       	ldd	r11, Z+1	; 0x01
    289a:	26 ff       	sbrs	r18, 6
    289c:	03 c0       	rjmp	.+6      	; 0x28a4 <vfprintf+0x17e>
    289e:	65 2d       	mov	r22, r5
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <vfprintf+0x182>
    28a4:	6f ef       	ldi	r22, 0xFF	; 255
    28a6:	7f ef       	ldi	r23, 0xFF	; 255
    28a8:	c5 01       	movw	r24, r10
    28aa:	2c 87       	std	Y+12, r18	; 0x0c
    28ac:	2a d1       	rcall	.+596    	; 0x2b02 <strnlen_P>
    28ae:	2c 01       	movw	r4, r24
    28b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    28b2:	20 68       	ori	r18, 0x80	; 128
    28b4:	22 2e       	mov	r2, r18
    28b6:	83 01       	movw	r16, r6
    28b8:	23 fc       	sbrc	r2, 3
    28ba:	19 c0       	rjmp	.+50     	; 0x28ee <vfprintf+0x1c8>
    28bc:	83 2d       	mov	r24, r3
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	48 16       	cp	r4, r24
    28c2:	59 06       	cpc	r5, r25
    28c4:	a0 f4       	brcc	.+40     	; 0x28ee <vfprintf+0x1c8>
    28c6:	b7 01       	movw	r22, r14
    28c8:	80 e2       	ldi	r24, 0x20	; 32
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	30 d1       	rcall	.+608    	; 0x2b2e <fputc>
    28ce:	3a 94       	dec	r3
    28d0:	f5 cf       	rjmp	.-22     	; 0x28bc <vfprintf+0x196>
    28d2:	f5 01       	movw	r30, r10
    28d4:	27 fc       	sbrc	r2, 7
    28d6:	85 91       	lpm	r24, Z+
    28d8:	27 fe       	sbrs	r2, 7
    28da:	81 91       	ld	r24, Z+
    28dc:	5f 01       	movw	r10, r30
    28de:	b7 01       	movw	r22, r14
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	25 d1       	rcall	.+586    	; 0x2b2e <fputc>
    28e4:	31 10       	cpse	r3, r1
    28e6:	3a 94       	dec	r3
    28e8:	f1 e0       	ldi	r31, 0x01	; 1
    28ea:	4f 1a       	sub	r4, r31
    28ec:	51 08       	sbc	r5, r1
    28ee:	41 14       	cp	r4, r1
    28f0:	51 04       	cpc	r5, r1
    28f2:	79 f7       	brne	.-34     	; 0x28d2 <vfprintf+0x1ac>
    28f4:	de c0       	rjmp	.+444    	; 0x2ab2 <vfprintf+0x38c>
    28f6:	84 36       	cpi	r24, 0x64	; 100
    28f8:	11 f0       	breq	.+4      	; 0x28fe <vfprintf+0x1d8>
    28fa:	89 36       	cpi	r24, 0x69	; 105
    28fc:	31 f5       	brne	.+76     	; 0x294a <vfprintf+0x224>
    28fe:	f8 01       	movw	r30, r16
    2900:	27 ff       	sbrs	r18, 7
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <vfprintf+0x1ec>
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	0c 5f       	subi	r16, 0xFC	; 252
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	08 c0       	rjmp	.+16     	; 0x2922 <vfprintf+0x1fc>
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	07 2e       	mov	r0, r23
    2918:	00 0c       	add	r0, r0
    291a:	88 0b       	sbc	r24, r24
    291c:	99 0b       	sbc	r25, r25
    291e:	0e 5f       	subi	r16, 0xFE	; 254
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	2f 76       	andi	r18, 0x6F	; 111
    2924:	72 2e       	mov	r7, r18
    2926:	97 ff       	sbrs	r25, 7
    2928:	09 c0       	rjmp	.+18     	; 0x293c <vfprintf+0x216>
    292a:	90 95       	com	r25
    292c:	80 95       	com	r24
    292e:	70 95       	com	r23
    2930:	61 95       	neg	r22
    2932:	7f 4f       	sbci	r23, 0xFF	; 255
    2934:	8f 4f       	sbci	r24, 0xFF	; 255
    2936:	9f 4f       	sbci	r25, 0xFF	; 255
    2938:	20 68       	ori	r18, 0x80	; 128
    293a:	72 2e       	mov	r7, r18
    293c:	2a e0       	ldi	r18, 0x0A	; 10
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	a4 01       	movw	r20, r8
    2942:	2d d1       	rcall	.+602    	; 0x2b9e <__ultoa_invert>
    2944:	a8 2e       	mov	r10, r24
    2946:	a8 18       	sub	r10, r8
    2948:	43 c0       	rjmp	.+134    	; 0x29d0 <vfprintf+0x2aa>
    294a:	85 37       	cpi	r24, 0x75	; 117
    294c:	29 f4       	brne	.+10     	; 0x2958 <vfprintf+0x232>
    294e:	2f 7e       	andi	r18, 0xEF	; 239
    2950:	b2 2e       	mov	r11, r18
    2952:	2a e0       	ldi	r18, 0x0A	; 10
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	25 c0       	rjmp	.+74     	; 0x29a2 <vfprintf+0x27c>
    2958:	f2 2f       	mov	r31, r18
    295a:	f9 7f       	andi	r31, 0xF9	; 249
    295c:	bf 2e       	mov	r11, r31
    295e:	8f 36       	cpi	r24, 0x6F	; 111
    2960:	c1 f0       	breq	.+48     	; 0x2992 <vfprintf+0x26c>
    2962:	18 f4       	brcc	.+6      	; 0x296a <vfprintf+0x244>
    2964:	88 35       	cpi	r24, 0x58	; 88
    2966:	79 f0       	breq	.+30     	; 0x2986 <vfprintf+0x260>
    2968:	ad c0       	rjmp	.+346    	; 0x2ac4 <vfprintf+0x39e>
    296a:	80 37       	cpi	r24, 0x70	; 112
    296c:	19 f0       	breq	.+6      	; 0x2974 <vfprintf+0x24e>
    296e:	88 37       	cpi	r24, 0x78	; 120
    2970:	21 f0       	breq	.+8      	; 0x297a <vfprintf+0x254>
    2972:	a8 c0       	rjmp	.+336    	; 0x2ac4 <vfprintf+0x39e>
    2974:	2f 2f       	mov	r18, r31
    2976:	20 61       	ori	r18, 0x10	; 16
    2978:	b2 2e       	mov	r11, r18
    297a:	b4 fe       	sbrs	r11, 4
    297c:	0d c0       	rjmp	.+26     	; 0x2998 <vfprintf+0x272>
    297e:	8b 2d       	mov	r24, r11
    2980:	84 60       	ori	r24, 0x04	; 4
    2982:	b8 2e       	mov	r11, r24
    2984:	09 c0       	rjmp	.+18     	; 0x2998 <vfprintf+0x272>
    2986:	24 ff       	sbrs	r18, 4
    2988:	0a c0       	rjmp	.+20     	; 0x299e <vfprintf+0x278>
    298a:	9f 2f       	mov	r25, r31
    298c:	96 60       	ori	r25, 0x06	; 6
    298e:	b9 2e       	mov	r11, r25
    2990:	06 c0       	rjmp	.+12     	; 0x299e <vfprintf+0x278>
    2992:	28 e0       	ldi	r18, 0x08	; 8
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <vfprintf+0x27c>
    2998:	20 e1       	ldi	r18, 0x10	; 16
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <vfprintf+0x27c>
    299e:	20 e1       	ldi	r18, 0x10	; 16
    29a0:	32 e0       	ldi	r19, 0x02	; 2
    29a2:	f8 01       	movw	r30, r16
    29a4:	b7 fe       	sbrs	r11, 7
    29a6:	07 c0       	rjmp	.+14     	; 0x29b6 <vfprintf+0x290>
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	0c 5f       	subi	r16, 0xFC	; 252
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	06 c0       	rjmp	.+12     	; 0x29c2 <vfprintf+0x29c>
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 5f       	subi	r16, 0xFE	; 254
    29c0:	1f 4f       	sbci	r17, 0xFF	; 255
    29c2:	a4 01       	movw	r20, r8
    29c4:	ec d0       	rcall	.+472    	; 0x2b9e <__ultoa_invert>
    29c6:	a8 2e       	mov	r10, r24
    29c8:	a8 18       	sub	r10, r8
    29ca:	fb 2d       	mov	r31, r11
    29cc:	ff 77       	andi	r31, 0x7F	; 127
    29ce:	7f 2e       	mov	r7, r31
    29d0:	76 fe       	sbrs	r7, 6
    29d2:	0b c0       	rjmp	.+22     	; 0x29ea <vfprintf+0x2c4>
    29d4:	37 2d       	mov	r19, r7
    29d6:	3e 7f       	andi	r19, 0xFE	; 254
    29d8:	a5 14       	cp	r10, r5
    29da:	50 f4       	brcc	.+20     	; 0x29f0 <vfprintf+0x2ca>
    29dc:	74 fe       	sbrs	r7, 4
    29de:	0a c0       	rjmp	.+20     	; 0x29f4 <vfprintf+0x2ce>
    29e0:	72 fc       	sbrc	r7, 2
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <vfprintf+0x2ce>
    29e4:	37 2d       	mov	r19, r7
    29e6:	3e 7e       	andi	r19, 0xEE	; 238
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <vfprintf+0x2ce>
    29ea:	ba 2c       	mov	r11, r10
    29ec:	37 2d       	mov	r19, r7
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <vfprintf+0x2d0>
    29f0:	ba 2c       	mov	r11, r10
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <vfprintf+0x2d0>
    29f4:	b5 2c       	mov	r11, r5
    29f6:	34 ff       	sbrs	r19, 4
    29f8:	0d c0       	rjmp	.+26     	; 0x2a14 <vfprintf+0x2ee>
    29fa:	fe 01       	movw	r30, r28
    29fc:	ea 0d       	add	r30, r10
    29fe:	f1 1d       	adc	r31, r1
    2a00:	80 81       	ld	r24, Z
    2a02:	80 33       	cpi	r24, 0x30	; 48
    2a04:	11 f4       	brne	.+4      	; 0x2a0a <vfprintf+0x2e4>
    2a06:	39 7e       	andi	r19, 0xE9	; 233
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <vfprintf+0x2f6>
    2a0a:	32 ff       	sbrs	r19, 2
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <vfprintf+0x2f4>
    2a0e:	b3 94       	inc	r11
    2a10:	b3 94       	inc	r11
    2a12:	04 c0       	rjmp	.+8      	; 0x2a1c <vfprintf+0x2f6>
    2a14:	83 2f       	mov	r24, r19
    2a16:	86 78       	andi	r24, 0x86	; 134
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <vfprintf+0x2f6>
    2a1a:	b3 94       	inc	r11
    2a1c:	33 fd       	sbrc	r19, 3
    2a1e:	12 c0       	rjmp	.+36     	; 0x2a44 <vfprintf+0x31e>
    2a20:	30 ff       	sbrs	r19, 0
    2a22:	06 c0       	rjmp	.+12     	; 0x2a30 <vfprintf+0x30a>
    2a24:	5a 2c       	mov	r5, r10
    2a26:	b3 14       	cp	r11, r3
    2a28:	18 f4       	brcc	.+6      	; 0x2a30 <vfprintf+0x30a>
    2a2a:	53 0c       	add	r5, r3
    2a2c:	5b 18       	sub	r5, r11
    2a2e:	b3 2c       	mov	r11, r3
    2a30:	b3 14       	cp	r11, r3
    2a32:	60 f4       	brcc	.+24     	; 0x2a4c <vfprintf+0x326>
    2a34:	b7 01       	movw	r22, r14
    2a36:	80 e2       	ldi	r24, 0x20	; 32
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	3c 87       	std	Y+12, r19	; 0x0c
    2a3c:	78 d0       	rcall	.+240    	; 0x2b2e <fputc>
    2a3e:	b3 94       	inc	r11
    2a40:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a42:	f6 cf       	rjmp	.-20     	; 0x2a30 <vfprintf+0x30a>
    2a44:	b3 14       	cp	r11, r3
    2a46:	10 f4       	brcc	.+4      	; 0x2a4c <vfprintf+0x326>
    2a48:	3b 18       	sub	r3, r11
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <vfprintf+0x328>
    2a4c:	31 2c       	mov	r3, r1
    2a4e:	34 ff       	sbrs	r19, 4
    2a50:	11 c0       	rjmp	.+34     	; 0x2a74 <vfprintf+0x34e>
    2a52:	b7 01       	movw	r22, r14
    2a54:	80 e3       	ldi	r24, 0x30	; 48
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	3c 87       	std	Y+12, r19	; 0x0c
    2a5a:	69 d0       	rcall	.+210    	; 0x2b2e <fputc>
    2a5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a5e:	32 ff       	sbrs	r19, 2
    2a60:	16 c0       	rjmp	.+44     	; 0x2a8e <vfprintf+0x368>
    2a62:	31 fd       	sbrc	r19, 1
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <vfprintf+0x346>
    2a66:	88 e7       	ldi	r24, 0x78	; 120
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <vfprintf+0x34a>
    2a6c:	88 e5       	ldi	r24, 0x58	; 88
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	b7 01       	movw	r22, r14
    2a72:	0c c0       	rjmp	.+24     	; 0x2a8c <vfprintf+0x366>
    2a74:	83 2f       	mov	r24, r19
    2a76:	86 78       	andi	r24, 0x86	; 134
    2a78:	51 f0       	breq	.+20     	; 0x2a8e <vfprintf+0x368>
    2a7a:	31 ff       	sbrs	r19, 1
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <vfprintf+0x35c>
    2a7e:	8b e2       	ldi	r24, 0x2B	; 43
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <vfprintf+0x35e>
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	37 fd       	sbrc	r19, 7
    2a86:	8d e2       	ldi	r24, 0x2D	; 45
    2a88:	b7 01       	movw	r22, r14
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	50 d0       	rcall	.+160    	; 0x2b2e <fputc>
    2a8e:	a5 14       	cp	r10, r5
    2a90:	30 f4       	brcc	.+12     	; 0x2a9e <vfprintf+0x378>
    2a92:	b7 01       	movw	r22, r14
    2a94:	80 e3       	ldi	r24, 0x30	; 48
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	4a d0       	rcall	.+148    	; 0x2b2e <fputc>
    2a9a:	5a 94       	dec	r5
    2a9c:	f8 cf       	rjmp	.-16     	; 0x2a8e <vfprintf+0x368>
    2a9e:	aa 94       	dec	r10
    2aa0:	f4 01       	movw	r30, r8
    2aa2:	ea 0d       	add	r30, r10
    2aa4:	f1 1d       	adc	r31, r1
    2aa6:	80 81       	ld	r24, Z
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	40 d0       	rcall	.+128    	; 0x2b2e <fputc>
    2aae:	a1 10       	cpse	r10, r1
    2ab0:	f6 cf       	rjmp	.-20     	; 0x2a9e <vfprintf+0x378>
    2ab2:	33 20       	and	r3, r3
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <vfprintf+0x392>
    2ab6:	5d ce       	rjmp	.-838    	; 0x2772 <vfprintf+0x4c>
    2ab8:	b7 01       	movw	r22, r14
    2aba:	80 e2       	ldi	r24, 0x20	; 32
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	37 d0       	rcall	.+110    	; 0x2b2e <fputc>
    2ac0:	3a 94       	dec	r3
    2ac2:	f7 cf       	rjmp	.-18     	; 0x2ab2 <vfprintf+0x38c>
    2ac4:	f7 01       	movw	r30, r14
    2ac6:	86 81       	ldd	r24, Z+6	; 0x06
    2ac8:	97 81       	ldd	r25, Z+7	; 0x07
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <vfprintf+0x3aa>
    2acc:	8f ef       	ldi	r24, 0xFF	; 255
    2ace:	9f ef       	ldi	r25, 0xFF	; 255
    2ad0:	2c 96       	adiw	r28, 0x0c	; 12
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	df 90       	pop	r13
    2aea:	cf 90       	pop	r12
    2aec:	bf 90       	pop	r11
    2aee:	af 90       	pop	r10
    2af0:	9f 90       	pop	r9
    2af2:	8f 90       	pop	r8
    2af4:	7f 90       	pop	r7
    2af6:	6f 90       	pop	r6
    2af8:	5f 90       	pop	r5
    2afa:	4f 90       	pop	r4
    2afc:	3f 90       	pop	r3
    2afe:	2f 90       	pop	r2
    2b00:	08 95       	ret

00002b02 <strnlen_P>:
    2b02:	fc 01       	movw	r30, r24
    2b04:	05 90       	lpm	r0, Z+
    2b06:	61 50       	subi	r22, 0x01	; 1
    2b08:	70 40       	sbci	r23, 0x00	; 0
    2b0a:	01 10       	cpse	r0, r1
    2b0c:	d8 f7       	brcc	.-10     	; 0x2b04 <strnlen_P+0x2>
    2b0e:	80 95       	com	r24
    2b10:	90 95       	com	r25
    2b12:	8e 0f       	add	r24, r30
    2b14:	9f 1f       	adc	r25, r31
    2b16:	08 95       	ret

00002b18 <strnlen>:
    2b18:	fc 01       	movw	r30, r24
    2b1a:	61 50       	subi	r22, 0x01	; 1
    2b1c:	70 40       	sbci	r23, 0x00	; 0
    2b1e:	01 90       	ld	r0, Z+
    2b20:	01 10       	cpse	r0, r1
    2b22:	d8 f7       	brcc	.-10     	; 0x2b1a <strnlen+0x2>
    2b24:	80 95       	com	r24
    2b26:	90 95       	com	r25
    2b28:	8e 0f       	add	r24, r30
    2b2a:	9f 1f       	adc	r25, r31
    2b2c:	08 95       	ret

00002b2e <fputc>:
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	fb 01       	movw	r30, r22
    2b38:	23 81       	ldd	r18, Z+3	; 0x03
    2b3a:	21 fd       	sbrc	r18, 1
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <fputc+0x16>
    2b3e:	8f ef       	ldi	r24, 0xFF	; 255
    2b40:	9f ef       	ldi	r25, 0xFF	; 255
    2b42:	28 c0       	rjmp	.+80     	; 0x2b94 <fputc+0x66>
    2b44:	22 ff       	sbrs	r18, 2
    2b46:	16 c0       	rjmp	.+44     	; 0x2b74 <fputc+0x46>
    2b48:	46 81       	ldd	r20, Z+6	; 0x06
    2b4a:	57 81       	ldd	r21, Z+7	; 0x07
    2b4c:	24 81       	ldd	r18, Z+4	; 0x04
    2b4e:	35 81       	ldd	r19, Z+5	; 0x05
    2b50:	42 17       	cp	r20, r18
    2b52:	53 07       	cpc	r21, r19
    2b54:	44 f4       	brge	.+16     	; 0x2b66 <fputc+0x38>
    2b56:	a0 81       	ld	r26, Z
    2b58:	b1 81       	ldd	r27, Z+1	; 0x01
    2b5a:	9d 01       	movw	r18, r26
    2b5c:	2f 5f       	subi	r18, 0xFF	; 255
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	31 83       	std	Z+1, r19	; 0x01
    2b62:	20 83       	st	Z, r18
    2b64:	8c 93       	st	X, r24
    2b66:	26 81       	ldd	r18, Z+6	; 0x06
    2b68:	37 81       	ldd	r19, Z+7	; 0x07
    2b6a:	2f 5f       	subi	r18, 0xFF	; 255
    2b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6e:	37 83       	std	Z+7, r19	; 0x07
    2b70:	26 83       	std	Z+6, r18	; 0x06
    2b72:	10 c0       	rjmp	.+32     	; 0x2b94 <fputc+0x66>
    2b74:	eb 01       	movw	r28, r22
    2b76:	09 2f       	mov	r16, r25
    2b78:	18 2f       	mov	r17, r24
    2b7a:	00 84       	ldd	r0, Z+8	; 0x08
    2b7c:	f1 85       	ldd	r31, Z+9	; 0x09
    2b7e:	e0 2d       	mov	r30, r0
    2b80:	19 95       	eicall
    2b82:	89 2b       	or	r24, r25
    2b84:	e1 f6       	brne	.-72     	; 0x2b3e <fputc+0x10>
    2b86:	8e 81       	ldd	r24, Y+6	; 0x06
    2b88:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	9f 83       	std	Y+7, r25	; 0x07
    2b8e:	8e 83       	std	Y+6, r24	; 0x06
    2b90:	81 2f       	mov	r24, r17
    2b92:	90 2f       	mov	r25, r16
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <__ultoa_invert>:
    2b9e:	fa 01       	movw	r30, r20
    2ba0:	aa 27       	eor	r26, r26
    2ba2:	28 30       	cpi	r18, 0x08	; 8
    2ba4:	51 f1       	breq	.+84     	; 0x2bfa <__ultoa_invert+0x5c>
    2ba6:	20 31       	cpi	r18, 0x10	; 16
    2ba8:	81 f1       	breq	.+96     	; 0x2c0a <__ultoa_invert+0x6c>
    2baa:	e8 94       	clt
    2bac:	6f 93       	push	r22
    2bae:	6e 7f       	andi	r22, 0xFE	; 254
    2bb0:	6e 5f       	subi	r22, 0xFE	; 254
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	af 4f       	sbci	r26, 0xFF	; 255
    2bba:	b1 e0       	ldi	r27, 0x01	; 1
    2bbc:	3e d0       	rcall	.+124    	; 0x2c3a <__ultoa_invert+0x9c>
    2bbe:	b4 e0       	ldi	r27, 0x04	; 4
    2bc0:	3c d0       	rcall	.+120    	; 0x2c3a <__ultoa_invert+0x9c>
    2bc2:	67 0f       	add	r22, r23
    2bc4:	78 1f       	adc	r23, r24
    2bc6:	89 1f       	adc	r24, r25
    2bc8:	9a 1f       	adc	r25, r26
    2bca:	a1 1d       	adc	r26, r1
    2bcc:	68 0f       	add	r22, r24
    2bce:	79 1f       	adc	r23, r25
    2bd0:	8a 1f       	adc	r24, r26
    2bd2:	91 1d       	adc	r25, r1
    2bd4:	a1 1d       	adc	r26, r1
    2bd6:	6a 0f       	add	r22, r26
    2bd8:	71 1d       	adc	r23, r1
    2bda:	81 1d       	adc	r24, r1
    2bdc:	91 1d       	adc	r25, r1
    2bde:	a1 1d       	adc	r26, r1
    2be0:	20 d0       	rcall	.+64     	; 0x2c22 <__ultoa_invert+0x84>
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <__ultoa_invert+0x48>
    2be4:	68 94       	set
    2be6:	3f 91       	pop	r19
    2be8:	2a e0       	ldi	r18, 0x0A	; 10
    2bea:	26 9f       	mul	r18, r22
    2bec:	11 24       	eor	r1, r1
    2bee:	30 19       	sub	r19, r0
    2bf0:	30 5d       	subi	r19, 0xD0	; 208
    2bf2:	31 93       	st	Z+, r19
    2bf4:	de f6       	brtc	.-74     	; 0x2bac <__ultoa_invert+0xe>
    2bf6:	cf 01       	movw	r24, r30
    2bf8:	08 95       	ret
    2bfa:	46 2f       	mov	r20, r22
    2bfc:	47 70       	andi	r20, 0x07	; 7
    2bfe:	40 5d       	subi	r20, 0xD0	; 208
    2c00:	41 93       	st	Z+, r20
    2c02:	b3 e0       	ldi	r27, 0x03	; 3
    2c04:	0f d0       	rcall	.+30     	; 0x2c24 <__ultoa_invert+0x86>
    2c06:	c9 f7       	brne	.-14     	; 0x2bfa <__ultoa_invert+0x5c>
    2c08:	f6 cf       	rjmp	.-20     	; 0x2bf6 <__ultoa_invert+0x58>
    2c0a:	46 2f       	mov	r20, r22
    2c0c:	4f 70       	andi	r20, 0x0F	; 15
    2c0e:	40 5d       	subi	r20, 0xD0	; 208
    2c10:	4a 33       	cpi	r20, 0x3A	; 58
    2c12:	18 f0       	brcs	.+6      	; 0x2c1a <__ultoa_invert+0x7c>
    2c14:	49 5d       	subi	r20, 0xD9	; 217
    2c16:	31 fd       	sbrc	r19, 1
    2c18:	40 52       	subi	r20, 0x20	; 32
    2c1a:	41 93       	st	Z+, r20
    2c1c:	02 d0       	rcall	.+4      	; 0x2c22 <__ultoa_invert+0x84>
    2c1e:	a9 f7       	brne	.-22     	; 0x2c0a <__ultoa_invert+0x6c>
    2c20:	ea cf       	rjmp	.-44     	; 0x2bf6 <__ultoa_invert+0x58>
    2c22:	b4 e0       	ldi	r27, 0x04	; 4
    2c24:	a6 95       	lsr	r26
    2c26:	97 95       	ror	r25
    2c28:	87 95       	ror	r24
    2c2a:	77 95       	ror	r23
    2c2c:	67 95       	ror	r22
    2c2e:	ba 95       	dec	r27
    2c30:	c9 f7       	brne	.-14     	; 0x2c24 <__ultoa_invert+0x86>
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	61 05       	cpc	r22, r1
    2c36:	71 05       	cpc	r23, r1
    2c38:	08 95       	ret
    2c3a:	9b 01       	movw	r18, r22
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	0a 2e       	mov	r0, r26
    2c40:	06 94       	lsr	r0
    2c42:	57 95       	ror	r21
    2c44:	47 95       	ror	r20
    2c46:	37 95       	ror	r19
    2c48:	27 95       	ror	r18
    2c4a:	ba 95       	dec	r27
    2c4c:	c9 f7       	brne	.-14     	; 0x2c40 <__ultoa_invert+0xa2>
    2c4e:	62 0f       	add	r22, r18
    2c50:	73 1f       	adc	r23, r19
    2c52:	84 1f       	adc	r24, r20
    2c54:	95 1f       	adc	r25, r21
    2c56:	a0 1d       	adc	r26, r0
    2c58:	08 95       	ret

00002c5a <_exit>:
    2c5a:	f8 94       	cli

00002c5c <__stop_program>:
    2c5c:	ff cf       	rjmp	.-2      	; 0x2c5c <__stop_program>
