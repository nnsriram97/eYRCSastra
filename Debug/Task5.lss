
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800200  00002044  000020d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b0  00800398  00800398  00002270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026b1  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001075  00000000  00000000  00004b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b10  00000000  00000000  00005bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  000076d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af6  00000000  00000000  00007bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a2  00000000  00000000  000086ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_5>
      18:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_25>
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e7 08       	sbc	r14, r7
      e6:	32 09       	sbc	r19, r2
      e8:	f3 08       	sbc	r15, r3
      ea:	ff 08       	sbc	r15, r15
      ec:	02 09       	sbc	r16, r2
      ee:	05 09       	sbc	r16, r5
      f0:	0f 09       	sbc	r16, r15
      f2:	19 09       	sbc	r17, r9
      f4:	1f 09       	sbc	r17, r15
      f6:	22 09       	sbc	r18, r2

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	13 e0       	ldi	r17, 0x03	; 3
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e4 e4       	ldi	r30, 0x44	; 68
     110:	f0 e2       	ldi	r31, 0x20	; 32
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a8 39       	cpi	r26, 0x98	; 152
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e0       	ldi	r18, 0x07	; 7
     124:	a8 e9       	ldi	r26, 0x98	; 152
     126:	b3 e0       	ldi	r27, 0x03	; 3
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a8 34       	cpi	r26, 0x48	; 72
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <main>
     136:	0c 94 20 10 	jmp	0x2040	; 0x2040 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <lcd_wr_command>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
     13c:	98 b1       	in	r25, 0x08	; 8
     13e:	9f 70       	andi	r25, 0x0F	; 15
     140:	98 b9       	out	0x08, r25	; 8
     142:	98 b1       	in	r25, 0x08	; 8
     144:	28 2f       	mov	r18, r24
     146:	20 7f       	andi	r18, 0xF0	; 240
     148:	92 2b       	or	r25, r18
     14a:	98 b9       	out	0x08, r25	; 8
     14c:	40 98       	cbi	0x08, 0	; 8
     14e:	41 98       	cbi	0x08, 1	; 8
     150:	42 9a       	sbi	0x08, 2	; 8
     152:	e1 ee       	ldi	r30, 0xE1	; 225
     154:	f4 e0       	ldi	r31, 0x04	; 4
     156:	31 97       	sbiw	r30, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <lcd_wr_command+0x1a>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_wr_command+0x20>
     15c:	00 00       	nop
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	98 b1       	in	r25, 0x08	; 8
     162:	9f 70       	andi	r25, 0x0F	; 15
     164:	98 b9       	out	0x08, r25	; 8
     166:	98 b1       	in	r25, 0x08	; 8
     168:	82 95       	swap	r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	89 2b       	or	r24, r25
     16e:	88 b9       	out	0x08, r24	; 8
     170:	40 98       	cbi	0x08, 0	; 8
     172:	41 98       	cbi	0x08, 1	; 8
     174:	42 9a       	sbi	0x08, 2	; 8
     176:	81 ee       	ldi	r24, 0xE1	; 225
     178:	94 e0       	ldi	r25, 0x04	; 4
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_wr_command+0x3e>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_wr_command+0x44>
     180:	00 00       	nop
     182:	42 98       	cbi	0x08, 2	; 8
     184:	08 95       	ret

00000186 <lcd_wr_char>:
     186:	98 b1       	in	r25, 0x08	; 8
     188:	9f 70       	andi	r25, 0x0F	; 15
     18a:	98 b9       	out	0x08, r25	; 8
     18c:	98 b1       	in	r25, 0x08	; 8
     18e:	28 2f       	mov	r18, r24
     190:	20 7f       	andi	r18, 0xF0	; 240
     192:	92 2b       	or	r25, r18
     194:	98 b9       	out	0x08, r25	; 8
     196:	40 9a       	sbi	0x08, 0	; 8
     198:	41 98       	cbi	0x08, 1	; 8
     19a:	42 9a       	sbi	0x08, 2	; 8
     19c:	e1 ee       	ldi	r30, 0xE1	; 225
     19e:	f4 e0       	ldi	r31, 0x04	; 4
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_wr_char+0x1a>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_wr_char+0x20>
     1a6:	00 00       	nop
     1a8:	42 98       	cbi	0x08, 2	; 8
     1aa:	98 b1       	in	r25, 0x08	; 8
     1ac:	9f 70       	andi	r25, 0x0F	; 15
     1ae:	98 b9       	out	0x08, r25	; 8
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	82 95       	swap	r24
     1b4:	80 7f       	andi	r24, 0xF0	; 240
     1b6:	89 2b       	or	r24, r25
     1b8:	88 b9       	out	0x08, r24	; 8
     1ba:	40 9a       	sbi	0x08, 0	; 8
     1bc:	41 98       	cbi	0x08, 1	; 8
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	81 ee       	ldi	r24, 0xE1	; 225
     1c2:	94 e0       	ldi	r25, 0x04	; 4
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_wr_char+0x3e>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_wr_char+0x44>
     1ca:	00 00       	nop
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	08 95       	ret

000001d0 <lcd_home>:
     1d0:	80 e8       	ldi	r24, 0x80	; 128
     1d2:	b4 cf       	rjmp	.-152    	; 0x13c <lcd_wr_command>
     1d4:	08 95       	ret

000001d6 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	69 f0       	breq	.+26     	; 0x1f4 <lcd_cursor+0x1e>
     1da:	18 f4       	brcc	.+6      	; 0x1e2 <lcd_cursor+0xc>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	31 f0       	breq	.+12     	; 0x1ec <lcd_cursor+0x16>
     1e0:	08 95       	ret
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	59 f0       	breq	.+22     	; 0x1fc <lcd_cursor+0x26>
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	69 f0       	breq	.+26     	; 0x204 <lcd_cursor+0x2e>
     1ea:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
     1ec:	8f e7       	ldi	r24, 0x7F	; 127
     1ee:	86 0f       	add	r24, r22
     1f0:	a5 cf       	rjmp	.-182    	; 0x13c <lcd_wr_command>
     1f2:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     1f4:	8f eb       	ldi	r24, 0xBF	; 191
     1f6:	86 0f       	add	r24, r22
     1f8:	a1 cf       	rjmp	.-190    	; 0x13c <lcd_wr_command>
     1fa:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     1fc:	83 e9       	ldi	r24, 0x93	; 147
     1fe:	86 0f       	add	r24, r22
     200:	9d cf       	rjmp	.-198    	; 0x13c <lcd_wr_command>
     202:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     204:	83 ed       	ldi	r24, 0xD3	; 211
     206:	86 0f       	add	r24, r22
     208:	99 cf       	rjmp	.-206    	; 0x13c <lcd_wr_command>
     20a:	08 95       	ret

0000020c <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	8a 01       	movw	r16, r20
     216:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     218:	88 23       	and	r24, r24
     21a:	11 f0       	breq	.+4      	; 0x220 <lcd_print+0x14>
     21c:	61 11       	cpse	r22, r1
     21e:	02 c0       	rjmp	.+4      	; 0x224 <lcd_print+0x18>
	{
		lcd_home();
     220:	d7 df       	rcall	.-82     	; 0x1d0 <lcd_home>
     222:	01 c0       	rjmp	.+2      	; 0x226 <lcd_print+0x1a>
	}
	else
	{
		lcd_cursor(row,coloumn);
     224:	d8 df       	rcall	.-80     	; 0x1d6 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     226:	c5 30       	cpi	r28, 0x05	; 5
     228:	d1 05       	cpc	r29, r1
     22a:	c1 f4       	brne	.+48     	; 0x25c <lcd_print+0x50>
	{
		million=value/10000+48;
     22c:	98 01       	movw	r18, r16
     22e:	32 95       	swap	r19
     230:	22 95       	swap	r18
     232:	2f 70       	andi	r18, 0x0F	; 15
     234:	23 27       	eor	r18, r19
     236:	3f 70       	andi	r19, 0x0F	; 15
     238:	23 27       	eor	r18, r19
     23a:	a7 e4       	ldi	r26, 0x47	; 71
     23c:	b3 e0       	ldi	r27, 0x03	; 3
     23e:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     242:	96 95       	lsr	r25
     244:	87 95       	ror	r24
     246:	96 95       	lsr	r25
     248:	87 95       	ror	r24
     24a:	96 95       	lsr	r25
     24c:	87 95       	ror	r24
     24e:	c0 96       	adiw	r24, 0x30	; 48
     250:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <million+0x1>
     254:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <million>
		lcd_wr_char(million);
     258:	96 df       	rcall	.-212    	; 0x186 <lcd_wr_char>
     25a:	04 c0       	rjmp	.+8      	; 0x264 <lcd_print+0x58>
		flag=1;
	}
	if(digits==4 || flag==1)
     25c:	c4 30       	cpi	r28, 0x04	; 4
     25e:	d1 05       	cpc	r29, r1
     260:	09 f0       	breq	.+2      	; 0x264 <lcd_print+0x58>
     262:	be c0       	rjmp	.+380    	; 0x3e0 <lcd_print+0x1d4>
	{
		temp = value/1000;
     264:	98 01       	movw	r18, r16
     266:	36 95       	lsr	r19
     268:	27 95       	ror	r18
     26a:	36 95       	lsr	r19
     26c:	27 95       	ror	r18
     26e:	36 95       	lsr	r19
     270:	27 95       	ror	r18
     272:	a5 ec       	ldi	r26, 0xC5	; 197
     274:	b0 e2       	ldi	r27, 0x20	; 32
     276:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     27a:	ac 01       	movw	r20, r24
     27c:	52 95       	swap	r21
     27e:	42 95       	swap	r20
     280:	4f 70       	andi	r20, 0x0F	; 15
     282:	45 27       	eor	r20, r21
     284:	5f 70       	andi	r21, 0x0F	; 15
     286:	45 27       	eor	r20, r21
     288:	50 93 af 03 	sts	0x03AF, r21	; 0x8003af <temp+0x1>
     28c:	40 93 ae 03 	sts	0x03AE, r20	; 0x8003ae <temp>
		thousand = temp%10 + 48;
     290:	9a 01       	movw	r18, r20
     292:	ad ec       	ldi	r26, 0xCD	; 205
     294:	bc ec       	ldi	r27, 0xCC	; 204
     296:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     29a:	96 95       	lsr	r25
     29c:	87 95       	ror	r24
     29e:	96 95       	lsr	r25
     2a0:	87 95       	ror	r24
     2a2:	96 95       	lsr	r25
     2a4:	87 95       	ror	r24
     2a6:	9c 01       	movw	r18, r24
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	82 0f       	add	r24, r18
     2ba:	93 1f       	adc	r25, r19
     2bc:	9a 01       	movw	r18, r20
     2be:	28 1b       	sub	r18, r24
     2c0:	39 0b       	sbc	r19, r25
     2c2:	c9 01       	movw	r24, r18
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <thousand+0x1>
     2ca:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <thousand>
		lcd_wr_char(thousand);
     2ce:	5b df       	rcall	.-330    	; 0x186 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
     2d0:	98 01       	movw	r18, r16
     2d2:	36 95       	lsr	r19
     2d4:	27 95       	ror	r18
     2d6:	36 95       	lsr	r19
     2d8:	27 95       	ror	r18
     2da:	ab e7       	ldi	r26, 0x7B	; 123
     2dc:	b4 e1       	ldi	r27, 0x14	; 20
     2de:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     2e2:	ac 01       	movw	r20, r24
     2e4:	56 95       	lsr	r21
     2e6:	47 95       	ror	r20
     2e8:	50 93 af 03 	sts	0x03AF, r21	; 0x8003af <temp+0x1>
     2ec:	40 93 ae 03 	sts	0x03AE, r20	; 0x8003ae <temp>
		hundred = temp%10 + 48;
     2f0:	9a 01       	movw	r18, r20
     2f2:	ad ec       	ldi	r26, 0xCD	; 205
     2f4:	bc ec       	ldi	r27, 0xCC	; 204
     2f6:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     2fa:	96 95       	lsr	r25
     2fc:	87 95       	ror	r24
     2fe:	96 95       	lsr	r25
     300:	87 95       	ror	r24
     302:	96 95       	lsr	r25
     304:	87 95       	ror	r24
     306:	9c 01       	movw	r18, r24
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	9a 01       	movw	r18, r20
     31e:	28 1b       	sub	r18, r24
     320:	39 0b       	sbc	r19, r25
     322:	c9 01       	movw	r24, r18
     324:	c0 96       	adiw	r24, 0x30	; 48
     326:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <hundred+0x1>
     32a:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <hundred>
		lcd_wr_char(hundred);
     32e:	2b df       	rcall	.-426    	; 0x186 <lcd_wr_char>
     330:	04 c0       	rjmp	.+8      	; 0x33a <lcd_print+0x12e>
		flag=1;
	}
	if(digits==2 || flag==1)
     332:	c2 30       	cpi	r28, 0x02	; 2
     334:	d1 05       	cpc	r29, r1
     336:	09 f0       	breq	.+2      	; 0x33a <lcd_print+0x12e>
     338:	58 c0       	rjmp	.+176    	; 0x3ea <lcd_print+0x1de>
	{
		temp = value/10;
     33a:	98 01       	movw	r18, r16
     33c:	ad ec       	ldi	r26, 0xCD	; 205
     33e:	bc ec       	ldi	r27, 0xCC	; 204
     340:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     344:	ac 01       	movw	r20, r24
     346:	56 95       	lsr	r21
     348:	47 95       	ror	r20
     34a:	56 95       	lsr	r21
     34c:	47 95       	ror	r20
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	50 93 af 03 	sts	0x03AF, r21	; 0x8003af <temp+0x1>
     356:	40 93 ae 03 	sts	0x03AE, r20	; 0x8003ae <temp>
		tens = temp%10 + 48;
     35a:	9a 01       	movw	r18, r20
     35c:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     360:	96 95       	lsr	r25
     362:	87 95       	ror	r24
     364:	96 95       	lsr	r25
     366:	87 95       	ror	r24
     368:	96 95       	lsr	r25
     36a:	87 95       	ror	r24
     36c:	9c 01       	movw	r18, r24
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
     382:	9a 01       	movw	r18, r20
     384:	28 1b       	sub	r18, r24
     386:	39 0b       	sbc	r19, r25
     388:	c9 01       	movw	r24, r18
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <tens+0x1>
     390:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <tens>
		lcd_wr_char(tens);
     394:	f8 de       	rcall	.-528    	; 0x186 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     396:	98 01       	movw	r18, r16
     398:	ad ec       	ldi	r26, 0xCD	; 205
     39a:	bc ec       	ldi	r27, 0xCC	; 204
     39c:	0e 94 11 10 	call	0x2022	; 0x2022 <__umulhisi3>
     3a0:	96 95       	lsr	r25
     3a2:	87 95       	ror	r24
     3a4:	96 95       	lsr	r25
     3a6:	87 95       	ror	r24
     3a8:	96 95       	lsr	r25
     3aa:	87 95       	ror	r24
     3ac:	9c 01       	movw	r18, r24
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	82 0f       	add	r24, r18
     3c0:	93 1f       	adc	r25, r19
     3c2:	98 01       	movw	r18, r16
     3c4:	28 1b       	sub	r18, r24
     3c6:	39 0b       	sbc	r19, r25
     3c8:	c9 01       	movw	r24, r18
     3ca:	c0 96       	adiw	r24, 0x30	; 48
     3cc:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <unit+0x1>
     3d0:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <unit>
		lcd_wr_char(unit);
     3d4:	d8 de       	rcall	.-592    	; 0x186 <lcd_wr_char>
	}
	if(digits>5)
     3d6:	26 97       	sbiw	r28, 0x06	; 6
     3d8:	64 f0       	brlt	.+24     	; 0x3f2 <lcd_print+0x1e6>
	{
		lcd_wr_char('E');
     3da:	85 e4       	ldi	r24, 0x45	; 69
     3dc:	d4 de       	rcall	.-600    	; 0x186 <lcd_wr_char>
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <lcd_print+0x1e6>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3e0:	c3 30       	cpi	r28, 0x03	; 3
     3e2:	d1 05       	cpc	r29, r1
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <lcd_print+0x1dc>
     3e6:	a5 cf       	rjmp	.-182    	; 0x332 <lcd_print+0x126>
     3e8:	73 cf       	rjmp	.-282    	; 0x2d0 <lcd_print+0xc4>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
     3ea:	c1 30       	cpi	r28, 0x01	; 1
     3ec:	d1 05       	cpc	r29, r1
     3ee:	99 f7       	brne	.-26     	; 0x3d6 <lcd_print+0x1ca>
     3f0:	d2 cf       	rjmp	.-92     	; 0x396 <lcd_print+0x18a>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <declare_constants>:
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count 
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;   
	ShaftCountRight = 0; 
     3fc:	2f 92       	push	r2
     3fe:	3f 92       	push	r3
     400:	4f 92       	push	r4
     402:	5f 92       	push	r5
     404:	6f 92       	push	r6
     406:	7f 92       	push	r7
     408:	8f 92       	push	r8
     40a:	9f 92       	push	r9
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	e5 ec       	ldi	r30, 0xC5	; 197
     422:	f5 e0       	ldi	r31, 0x05	; 5
     424:	0f 2e       	mov	r0, r31
     426:	fb e4       	ldi	r31, 0x4B	; 75
     428:	af 2e       	mov	r10, r31
     42a:	b1 2c       	mov	r11, r1
     42c:	f0 2d       	mov	r31, r0
     42e:	b1 82       	std	Z+1, r11	; 0x01
     430:	a0 82       	st	Z, r10
     432:	0f 2e       	mov	r0, r31
     434:	fd e1       	ldi	r31, 0x1D	; 29
     436:	4f 2e       	mov	r4, r31
     438:	55 24       	eor	r5, r5
     43a:	53 94       	inc	r5
     43c:	f0 2d       	mov	r31, r0
     43e:	53 82       	std	Z+3, r5	; 0x03
     440:	42 82       	std	Z+2, r4	; 0x02
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	9f ef       	ldi	r25, 0xFF	; 255
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	97 83       	std	Z+7, r25	; 0x07
     44c:	86 83       	std	Z+6, r24	; 0x06
     44e:	cc 24       	eor	r12, r12
     450:	ca 94       	dec	r12
     452:	d1 2c       	mov	r13, r1
     454:	d1 86       	std	Z+9, r13	; 0x09
     456:	c0 86       	std	Z+8, r12	; 0x08
     458:	ac e3       	ldi	r26, 0x3C	; 60
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	b3 87       	std	Z+11, r27	; 0x0b
     45e:	a2 87       	std	Z+10, r26	; 0x0a
     460:	95 87       	std	Z+13, r25	; 0x0d
     462:	84 87       	std	Z+12, r24	; 0x0c
     464:	97 87       	std	Z+15, r25	; 0x0f
     466:	86 87       	std	Z+14, r24	; 0x0e
     468:	20 ef       	ldi	r18, 0xF0	; 240
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	31 8b       	std	Z+17, r19	; 0x11
     46e:	20 8b       	std	Z+16, r18	; 0x10
     470:	0f 2e       	mov	r0, r31
     472:	fd e2       	ldi	r31, 0x2D	; 45
     474:	2f 2e       	mov	r2, r31
     476:	31 2c       	mov	r3, r1
     478:	f0 2d       	mov	r31, r0
     47a:	33 8a       	std	Z+19, r3	; 0x13
     47c:	22 8a       	std	Z+18, r2	; 0x12
     47e:	15 8a       	std	Z+21, r1	; 0x15
     480:	14 8a       	std	Z+20, r1	; 0x14
     482:	6c e2       	ldi	r22, 0x2C	; 44
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	77 8b       	std	Z+23, r23	; 0x17
     488:	66 8b       	std	Z+22, r22	; 0x16
     48a:	0f 2e       	mov	r0, r31
     48c:	f1 ee       	ldi	r31, 0xE1	; 225
     48e:	8f 2e       	mov	r8, r31
     490:	91 2c       	mov	r9, r1
     492:	f0 2d       	mov	r31, r0
     494:	91 8e       	std	Z+25, r9	; 0x19
     496:	80 8e       	std	Z+24, r8	; 0x18
     498:	0e e1       	ldi	r16, 0x1E	; 30
     49a:	10 e0       	ldi	r17, 0x00	; 0
     49c:	13 8f       	std	Z+27, r17	; 0x1b
     49e:	02 8f       	std	Z+26, r16	; 0x1a
     4a0:	95 8f       	std	Z+29, r25	; 0x1d
     4a2:	84 8f       	std	Z+28, r24	; 0x1c
     4a4:	97 8f       	std	Z+31, r25	; 0x1f
     4a6:	86 8f       	std	Z+30, r24	; 0x1e
     4a8:	42 ed       	ldi	r20, 0xD2	; 210
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	51 a3       	std	Z+33, r21	; 0x21
     4ae:	40 a3       	std	Z+32, r20	; 0x20
     4b0:	cf e0       	ldi	r28, 0x0F	; 15
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
     4b4:	d3 a3       	std	Z+35, r29	; 0x23
     4b6:	c2 a3       	std	Z+34, r28	; 0x22
     4b8:	95 a3       	std	Z+37, r25	; 0x25
     4ba:	84 a3       	std	Z+36, r24	; 0x24
     4bc:	97 a3       	std	Z+39, r25	; 0x27
     4be:	86 a3       	std	Z+38, r24	; 0x26
     4c0:	03 ec       	ldi	r16, 0xC3	; 195
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	11 a7       	std	Z+41, r17	; 0x29
     4c6:	00 a7       	std	Z+40, r16	; 0x28
     4c8:	13 a6       	std	Z+43, r1	; 0x2b
     4ca:	12 a6       	std	Z+42, r1	; 0x2a
     4cc:	95 a7       	std	Z+45, r25	; 0x2d
     4ce:	84 a7       	std	Z+44, r24	; 0x2c
     4d0:	97 a7       	std	Z+47, r25	; 0x2f
     4d2:	86 a7       	std	Z+46, r24	; 0x2e
     4d4:	44 eb       	ldi	r20, 0xB4	; 180
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	51 ab       	std	Z+49, r21	; 0x31
     4da:	40 ab       	std	Z+48, r20	; 0x30
     4dc:	09 e5       	ldi	r16, 0x59	; 89
     4de:	11 e0       	ldi	r17, 0x01	; 1
     4e0:	13 ab       	std	Z+51, r17	; 0x33
     4e2:	02 ab       	std	Z+50, r16	; 0x32
     4e4:	35 ab       	std	Z+53, r19	; 0x35
     4e6:	24 ab       	std	Z+52, r18	; 0x34
     4e8:	77 ab       	std	Z+55, r23	; 0x37
     4ea:	66 ab       	std	Z+54, r22	; 0x36
     4ec:	05 ea       	ldi	r16, 0xA5	; 165
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	11 af       	std	Z+57, r17	; 0x39
     4f2:	00 af       	std	Z+56, r16	; 0x38
     4f4:	0a e4       	ldi	r16, 0x4A	; 74
     4f6:	11 e0       	ldi	r17, 0x01	; 1
     4f8:	13 af       	std	Z+59, r17	; 0x3b
     4fa:	02 af       	std	Z+58, r16	; 0x3a
     4fc:	95 af       	std	Z+61, r25	; 0x3d
     4fe:	84 af       	std	Z+60, r24	; 0x3c
     500:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <angle+0x3f>
     504:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <angle+0x3e>
     508:	e6 e9       	ldi	r30, 0x96	; 150
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	f0 93 06 06 	sts	0x0606, r31	; 0x800606 <angle+0x41>
     510:	e0 93 05 06 	sts	0x0605, r30	; 0x800605 <angle+0x40>
     514:	0b e3       	ldi	r16, 0x3B	; 59
     516:	11 e0       	ldi	r17, 0x01	; 1
     518:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <angle+0x43>
     51c:	00 93 07 06 	sts	0x0607, r16	; 0x800607 <angle+0x42>
     520:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <angle+0x45>
     524:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <angle+0x44>
     528:	90 93 0c 06 	sts	0x060C, r25	; 0x80060c <angle+0x47>
     52c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <angle+0x46>
     530:	0f 2e       	mov	r0, r31
     532:	f7 e8       	ldi	r31, 0x87	; 135
     534:	6f 2e       	mov	r6, r31
     536:	71 2c       	mov	r7, r1
     538:	f0 2d       	mov	r31, r0
     53a:	70 92 0e 06 	sts	0x060E, r7	; 0x80060e <angle+0x49>
     53e:	60 92 0d 06 	sts	0x060D, r6	; 0x80060d <angle+0x48>
     542:	70 93 10 06 	sts	0x0610, r23	; 0x800610 <angle+0x4b>
     546:	60 93 0f 06 	sts	0x060F, r22	; 0x80060f <angle+0x4a>
     54a:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <angle+0x4d>
     54e:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <angle+0x4c>
     552:	90 93 14 06 	sts	0x0614, r25	; 0x800614 <angle+0x4f>
     556:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <angle+0x4e>
     55a:	e8 e7       	ldi	r30, 0x78	; 120
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	f0 93 16 06 	sts	0x0616, r31	; 0x800616 <angle+0x51>
     562:	e0 93 15 06 	sts	0x0615, r30	; 0x800615 <angle+0x50>
     566:	50 92 18 06 	sts	0x0618, r5	; 0x800618 <angle+0x53>
     56a:	40 92 17 06 	sts	0x0617, r4	; 0x800617 <angle+0x52>
     56e:	50 93 1a 06 	sts	0x061A, r21	; 0x80061a <angle+0x55>
     572:	40 93 19 06 	sts	0x0619, r20	; 0x800619 <angle+0x54>
     576:	30 93 1c 06 	sts	0x061C, r19	; 0x80061c <angle+0x57>
     57a:	20 93 1b 06 	sts	0x061B, r18	; 0x80061b <angle+0x56>
     57e:	0f 2e       	mov	r0, r31
     580:	f9 e6       	ldi	r31, 0x69	; 105
     582:	ef 2e       	mov	r14, r31
     584:	f1 2c       	mov	r15, r1
     586:	f0 2d       	mov	r31, r0
     588:	f0 92 1e 06 	sts	0x061E, r15	; 0x80061e <angle+0x59>
     58c:	e0 92 1d 06 	sts	0x061D, r14	; 0x80061d <angle+0x58>
     590:	0e e0       	ldi	r16, 0x0E	; 14
     592:	11 e0       	ldi	r17, 0x01	; 1
     594:	10 93 20 06 	sts	0x0620, r17	; 0x800620 <angle+0x5b>
     598:	00 93 1f 06 	sts	0x061F, r16	; 0x80061f <angle+0x5a>
     59c:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <angle+0x5d>
     5a0:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <angle+0x5c>
     5a4:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <angle+0x5f>
     5a8:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <angle+0x5e>
     5ac:	0a e5       	ldi	r16, 0x5A	; 90
     5ae:	10 e0       	ldi	r17, 0x00	; 0
     5b0:	10 93 26 06 	sts	0x0626, r17	; 0x800626 <angle+0x61>
     5b4:	00 93 25 06 	sts	0x0625, r16	; 0x800625 <angle+0x60>
     5b8:	d0 92 28 06 	sts	0x0628, r13	; 0x800628 <angle+0x63>
     5bc:	c0 92 27 06 	sts	0x0627, r12	; 0x800627 <angle+0x62>
     5c0:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <angle+0x65>
     5c4:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <angle+0x64>
     5c8:	90 93 2c 06 	sts	0x062C, r25	; 0x80062c <angle+0x67>
     5cc:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <angle+0x66>
     5d0:	b0 92 2e 06 	sts	0x062E, r11	; 0x80062e <angle+0x69>
     5d4:	a0 92 2d 06 	sts	0x062D, r10	; 0x80062d <angle+0x68>
     5d8:	30 93 30 06 	sts	0x0630, r19	; 0x800630 <angle+0x6b>
     5dc:	20 93 2f 06 	sts	0x062F, r18	; 0x80062f <angle+0x6a>
     5e0:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <angle+0x6d>
     5e4:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <angle+0x6c>
     5e8:	90 93 34 06 	sts	0x0634, r25	; 0x800634 <angle+0x6f>
     5ec:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <angle+0x6e>
     5f0:	b0 93 36 06 	sts	0x0636, r27	; 0x800636 <angle+0x71>
     5f4:	a0 93 35 06 	sts	0x0635, r26	; 0x800635 <angle+0x70>
     5f8:	90 92 38 06 	sts	0x0638, r9	; 0x800638 <angle+0x73>
     5fc:	80 92 37 06 	sts	0x0637, r8	; 0x800637 <angle+0x72>
     600:	f0 93 3a 06 	sts	0x063A, r31	; 0x80063a <angle+0x75>
     604:	e0 93 39 06 	sts	0x0639, r30	; 0x800639 <angle+0x74>
     608:	50 93 3c 06 	sts	0x063C, r21	; 0x80063c <angle+0x77>
     60c:	40 93 3b 06 	sts	0x063B, r20	; 0x80063b <angle+0x76>
     610:	30 92 3e 06 	sts	0x063E, r3	; 0x80063e <angle+0x79>
     614:	20 92 3d 06 	sts	0x063D, r2	; 0x80063d <angle+0x78>
     618:	0f 2e       	mov	r0, r31
     61a:	f2 ed       	ldi	r31, 0xD2	; 210
     61c:	cf 2e       	mov	r12, r31
     61e:	d1 2c       	mov	r13, r1
     620:	f0 2d       	mov	r31, r0
     622:	d0 92 40 06 	sts	0x0640, r13	; 0x800640 <angle+0x7b>
     626:	c0 92 3f 06 	sts	0x063F, r12	; 0x80063f <angle+0x7a>
     62a:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <angle+0x7d>
     62e:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <angle+0x7c>
     632:	90 93 44 06 	sts	0x0644, r25	; 0x800644 <angle+0x7f>
     636:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <angle+0x7e>
     63a:	0f 2e       	mov	r0, r31
     63c:	fe e1       	ldi	r31, 0x1E	; 30
     63e:	cf 2e       	mov	r12, r31
     640:	d1 2c       	mov	r13, r1
     642:	f0 2d       	mov	r31, r0
     644:	d0 92 46 06 	sts	0x0646, r13	; 0x800646 <angle+0x81>
     648:	c0 92 45 06 	sts	0x0645, r12	; 0x800645 <angle+0x80>
     64c:	0f 2e       	mov	r0, r31
     64e:	f3 ec       	ldi	r31, 0xC3	; 195
     650:	cf 2e       	mov	r12, r31
     652:	d1 2c       	mov	r13, r1
     654:	f0 2d       	mov	r31, r0
     656:	d0 92 48 06 	sts	0x0648, r13	; 0x800648 <angle+0x83>
     65a:	c0 92 47 06 	sts	0x0647, r12	; 0x800647 <angle+0x82>
     65e:	90 93 4a 06 	sts	0x064A, r25	; 0x80064a <angle+0x85>
     662:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <angle+0x84>
     666:	90 93 4c 06 	sts	0x064C, r25	; 0x80064c <angle+0x87>
     66a:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <angle+0x86>
     66e:	d0 93 4e 06 	sts	0x064E, r29	; 0x80064e <angle+0x89>
     672:	c0 93 4d 06 	sts	0x064D, r28	; 0x80064d <angle+0x88>
     676:	50 93 50 06 	sts	0x0650, r21	; 0x800650 <angle+0x8b>
     67a:	40 93 4f 06 	sts	0x064F, r20	; 0x80064f <angle+0x8a>
     67e:	90 93 52 06 	sts	0x0652, r25	; 0x800652 <angle+0x8d>
     682:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <angle+0x8c>
     686:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <angle+0x8f>
     68a:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <angle+0x8e>
     68e:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <angle+0x91>
     692:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <angle+0x90>
     696:	0f 2e       	mov	r0, r31
     698:	f5 ea       	ldi	r31, 0xA5	; 165
     69a:	cf 2e       	mov	r12, r31
     69c:	d1 2c       	mov	r13, r1
     69e:	f0 2d       	mov	r31, r0
     6a0:	d0 92 58 06 	sts	0x0658, r13	; 0x800658 <angle+0x93>
     6a4:	c0 92 57 06 	sts	0x0657, r12	; 0x800657 <angle+0x92>
     6a8:	b0 93 5a 06 	sts	0x065A, r27	; 0x80065a <angle+0x95>
     6ac:	a0 93 59 06 	sts	0x0659, r26	; 0x800659 <angle+0x94>
     6b0:	f0 93 5c 06 	sts	0x065C, r31	; 0x80065c <angle+0x97>
     6b4:	e0 93 5b 06 	sts	0x065B, r30	; 0x80065b <angle+0x96>
     6b8:	0f 2e       	mov	r0, r31
     6ba:	f9 e5       	ldi	r31, 0x59	; 89
     6bc:	cf 2e       	mov	r12, r31
     6be:	dd 24       	eor	r13, r13
     6c0:	d3 94       	inc	r13
     6c2:	f0 2d       	mov	r31, r0
     6c4:	d0 92 5e 06 	sts	0x065E, r13	; 0x80065e <angle+0x99>
     6c8:	c0 92 5d 06 	sts	0x065D, r12	; 0x80065d <angle+0x98>
     6cc:	0f 2e       	mov	r0, r31
     6ce:	f6 e9       	ldi	r31, 0x96	; 150
     6d0:	cf 2e       	mov	r12, r31
     6d2:	d1 2c       	mov	r13, r1
     6d4:	f0 2d       	mov	r31, r0
     6d6:	d0 92 60 06 	sts	0x0660, r13	; 0x800660 <angle+0x9b>
     6da:	c0 92 5f 06 	sts	0x065F, r12	; 0x80065f <angle+0x9a>
     6de:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <angle+0x9d>
     6e2:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <angle+0x9c>
     6e6:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <angle+0x9f>
     6ea:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <angle+0x9e>
     6ee:	0f 2e       	mov	r0, r31
     6f0:	fa e4       	ldi	r31, 0x4A	; 74
     6f2:	cf 2e       	mov	r12, r31
     6f4:	dd 24       	eor	r13, r13
     6f6:	d3 94       	inc	r13
     6f8:	f0 2d       	mov	r31, r0
     6fa:	d0 92 66 06 	sts	0x0666, r13	; 0x800666 <angle+0xa1>
     6fe:	c0 92 65 06 	sts	0x0665, r12	; 0x800665 <angle+0xa0>
     702:	70 92 68 06 	sts	0x0668, r7	; 0x800668 <angle+0xa3>
     706:	60 92 67 06 	sts	0x0667, r6	; 0x800667 <angle+0xa2>
     70a:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <angle+0xa5>
     70e:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <angle+0xa4>
     712:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <angle+0xa7>
     716:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <angle+0xa6>
     71a:	0f 2e       	mov	r0, r31
     71c:	fb e3       	ldi	r31, 0x3B	; 59
     71e:	cf 2e       	mov	r12, r31
     720:	dd 24       	eor	r13, r13
     722:	d3 94       	inc	r13
     724:	f0 2d       	mov	r31, r0
     726:	d0 92 6e 06 	sts	0x066E, r13	; 0x80066e <angle+0xa9>
     72a:	c0 92 6d 06 	sts	0x066D, r12	; 0x80066d <angle+0xa8>
     72e:	f0 93 70 06 	sts	0x0670, r31	; 0x800670 <angle+0xab>
     732:	e0 93 6f 06 	sts	0x066F, r30	; 0x80066f <angle+0xaa>
     736:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <angle+0xad>
     73a:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <angle+0xac>
     73e:	90 93 74 06 	sts	0x0674, r25	; 0x800674 <angle+0xaf>
     742:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <angle+0xae>
     746:	70 93 76 06 	sts	0x0676, r23	; 0x800676 <angle+0xb1>
     74a:	60 93 75 06 	sts	0x0675, r22	; 0x800675 <angle+0xb0>
     74e:	f0 92 78 06 	sts	0x0678, r15	; 0x800678 <angle+0xb3>
     752:	e0 92 77 06 	sts	0x0677, r14	; 0x800677 <angle+0xb2>
     756:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <angle+0xb5>
     75a:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <angle+0xb4>
     75e:	b0 93 7c 06 	sts	0x067C, r27	; 0x80067c <angle+0xb7>
     762:	a0 93 7b 06 	sts	0x067B, r26	; 0x80067b <angle+0xb6>
     766:	10 93 7e 06 	sts	0x067E, r17	; 0x80067e <angle+0xb9>
     76a:	00 93 7d 06 	sts	0x067D, r16	; 0x80067d <angle+0xb8>
     76e:	50 92 80 06 	sts	0x0680, r5	; 0x800680 <angle+0xbb>
     772:	40 92 7f 06 	sts	0x067F, r4	; 0x80067f <angle+0xba>
     776:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <angle+0xbd>
     77a:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <angle+0xbc>
     77e:	90 93 84 06 	sts	0x0684, r25	; 0x800684 <angle+0xbf>
     782:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <angle+0xbe>
     786:	50 93 86 06 	sts	0x0686, r21	; 0x800686 <angle+0xc1>
     78a:	40 93 85 06 	sts	0x0685, r20	; 0x800685 <angle+0xc0>
     78e:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <angle+0xc3>
     792:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <angle+0xc2>
     796:	30 93 8a 06 	sts	0x068A, r19	; 0x80068a <angle+0xc5>
     79a:	20 93 89 06 	sts	0x0689, r18	; 0x800689 <angle+0xc4>
     79e:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <angle+0xc7>
     7a2:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <angle+0xc6>
     7a6:	50 93 8e 06 	sts	0x068E, r21	; 0x80068e <angle+0xc9>
     7aa:	40 93 8d 06 	sts	0x068D, r20	; 0x80068d <angle+0xc8>
     7ae:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <angle+0xcb>
     7b2:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <angle+0xca>
     7b6:	b0 93 92 06 	sts	0x0692, r27	; 0x800692 <angle+0xcd>
     7ba:	a0 93 91 06 	sts	0x0691, r26	; 0x800691 <angle+0xcc>
     7be:	70 93 94 06 	sts	0x0694, r23	; 0x800694 <angle+0xcf>
     7c2:	60 93 93 06 	sts	0x0693, r22	; 0x800693 <angle+0xce>
     7c6:	50 93 96 06 	sts	0x0696, r21	; 0x800696 <angle+0xd1>
     7ca:	40 93 95 06 	sts	0x0695, r20	; 0x800695 <angle+0xd0>
     7ce:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <angle+0xd3>
     7d2:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <angle+0xd2>
     7d6:	f0 93 9a 06 	sts	0x069A, r31	; 0x80069a <angle+0xd5>
     7da:	e0 93 99 06 	sts	0x0699, r30	; 0x800699 <angle+0xd4>
     7de:	30 93 9c 06 	sts	0x069C, r19	; 0x80069c <angle+0xd7>
     7e2:	20 93 9b 06 	sts	0x069B, r18	; 0x80069b <angle+0xd6>
     7e6:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <angle+0xd9>
     7ea:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <angle+0xd8>
     7ee:	50 93 a0 06 	sts	0x06A0, r21	; 0x8006a0 <angle+0xdb>
     7f2:	40 93 9f 06 	sts	0x069F, r20	; 0x80069f <angle+0xda>
     7f6:	70 93 a2 06 	sts	0x06A2, r23	; 0x8006a2 <angle+0xdd>
     7fa:	60 93 a1 06 	sts	0x06A1, r22	; 0x8006a1 <angle+0xdc>
     7fe:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <angle+0xdf>
     802:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <angle+0xde>
     806:	b0 93 a6 06 	sts	0x06A6, r27	; 0x8006a6 <angle+0xe1>
     80a:	a0 93 a5 06 	sts	0x06A5, r26	; 0x8006a5 <angle+0xe0>
     80e:	f0 93 a8 06 	sts	0x06A8, r31	; 0x8006a8 <angle+0xe3>
     812:	e0 93 a7 06 	sts	0x06A7, r30	; 0x8006a7 <angle+0xe2>
     816:	30 93 aa 06 	sts	0x06AA, r19	; 0x8006aa <angle+0xe5>
     81a:	20 93 a9 06 	sts	0x06A9, r18	; 0x8006a9 <angle+0xe4>
     81e:	90 93 ac 06 	sts	0x06AC, r25	; 0x8006ac <angle+0xe7>
     822:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <angle+0xe6>
     826:	b0 93 ae 06 	sts	0x06AE, r27	; 0x8006ae <angle+0xe9>
     82a:	a0 93 ad 06 	sts	0x06AD, r26	; 0x8006ad <angle+0xe8>
     82e:	30 93 b0 06 	sts	0x06B0, r19	; 0x8006b0 <angle+0xeb>
     832:	20 93 af 06 	sts	0x06AF, r18	; 0x8006af <angle+0xea>
     836:	70 93 b2 06 	sts	0x06B2, r23	; 0x8006b2 <angle+0xed>
     83a:	60 93 b1 06 	sts	0x06B1, r22	; 0x8006b1 <angle+0xec>
     83e:	50 93 b4 06 	sts	0x06B4, r21	; 0x8006b4 <angle+0xef>
     842:	40 93 b3 06 	sts	0x06B3, r20	; 0x8006b3 <angle+0xee>
     846:	b0 93 b6 06 	sts	0x06B6, r27	; 0x8006b6 <angle+0xf1>
     84a:	a0 93 b5 06 	sts	0x06B5, r26	; 0x8006b5 <angle+0xf0>
     84e:	30 93 b8 06 	sts	0x06B8, r19	; 0x8006b8 <angle+0xf3>
     852:	20 93 b7 06 	sts	0x06B7, r18	; 0x8006b7 <angle+0xf2>
     856:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <angle+0xf5>
     85a:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <angle+0xf4>
     85e:	f0 93 bc 06 	sts	0x06BC, r31	; 0x8006bc <angle+0xf7>
     862:	e0 93 bb 06 	sts	0x06BB, r30	; 0x8006bb <angle+0xf6>
     866:	30 93 be 06 	sts	0x06BE, r19	; 0x8006be <angle+0xf9>
     86a:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <angle+0xf8>
     86e:	b0 93 c0 06 	sts	0x06C0, r27	; 0x8006c0 <angle+0xfb>
     872:	a0 93 bf 06 	sts	0x06BF, r26	; 0x8006bf <angle+0xfa>
     876:	50 93 c2 06 	sts	0x06C2, r21	; 0x8006c2 <angle+0xfd>
     87a:	40 93 c1 06 	sts	0x06C1, r20	; 0x8006c1 <angle+0xfc>
     87e:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <angle+0xff>
     882:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <angle+0xfe>
     886:	70 93 c6 06 	sts	0x06C6, r23	; 0x8006c6 <angle+0x101>
     88a:	60 93 c5 06 	sts	0x06C5, r22	; 0x8006c5 <angle+0x100>
     88e:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <angle+0x103>
     892:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <angle+0x102>
     896:	f0 93 ca 06 	sts	0x06CA, r31	; 0x8006ca <angle+0x105>
     89a:	e0 93 c9 06 	sts	0x06C9, r30	; 0x8006c9 <angle+0x104>
     89e:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <angle+0x107>
     8a2:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <angle+0x106>
     8a6:	70 93 ce 06 	sts	0x06CE, r23	; 0x8006ce <angle+0x109>
     8aa:	60 93 cd 06 	sts	0x06CD, r22	; 0x8006cd <angle+0x108>
     8ae:	f0 93 d0 06 	sts	0x06D0, r31	; 0x8006d0 <angle+0x10b>
     8b2:	e0 93 cf 06 	sts	0x06CF, r30	; 0x8006cf <angle+0x10a>
     8b6:	50 93 d2 06 	sts	0x06D2, r21	; 0x8006d2 <angle+0x10d>
     8ba:	40 93 d1 06 	sts	0x06D1, r20	; 0x8006d1 <angle+0x10c>
     8be:	b0 93 d4 06 	sts	0x06D4, r27	; 0x8006d4 <angle+0x10f>
     8c2:	a0 93 d3 06 	sts	0x06D3, r26	; 0x8006d3 <angle+0x10e>
     8c6:	70 93 d6 06 	sts	0x06D6, r23	; 0x8006d6 <angle+0x111>
     8ca:	60 93 d5 06 	sts	0x06D5, r22	; 0x8006d5 <angle+0x110>
     8ce:	f0 93 d8 06 	sts	0x06D8, r31	; 0x8006d8 <angle+0x113>
     8d2:	e0 93 d7 06 	sts	0x06D7, r30	; 0x8006d7 <angle+0x112>
     8d6:	30 93 da 06 	sts	0x06DA, r19	; 0x8006da <angle+0x115>
     8da:	20 93 d9 06 	sts	0x06D9, r18	; 0x8006d9 <angle+0x114>
     8de:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <angle+0x117>
     8e2:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <angle+0x116>
     8e6:	f0 93 de 06 	sts	0x06DE, r31	; 0x8006de <angle+0x119>
     8ea:	e0 93 dd 06 	sts	0x06DD, r30	; 0x8006dd <angle+0x118>
     8ee:	b0 93 e0 06 	sts	0x06E0, r27	; 0x8006e0 <angle+0x11b>
     8f2:	a0 93 df 06 	sts	0x06DF, r26	; 0x8006df <angle+0x11a>
     8f6:	70 93 e2 06 	sts	0x06E2, r23	; 0x8006e2 <angle+0x11d>
     8fa:	60 93 e1 06 	sts	0x06E1, r22	; 0x8006e1 <angle+0x11c>
     8fe:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <angle+0x11f>
     902:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <angle+0x11e>
     906:	b0 93 e6 06 	sts	0x06E6, r27	; 0x8006e6 <angle+0x121>
     90a:	a0 93 e5 06 	sts	0x06E5, r26	; 0x8006e5 <angle+0x120>
     90e:	30 93 e8 06 	sts	0x06E8, r19	; 0x8006e8 <angle+0x123>
     912:	20 93 e7 06 	sts	0x06E7, r18	; 0x8006e7 <angle+0x122>
     916:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <angle+0x125>
     91a:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <angle+0x124>
     91e:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <angle+0x127>
     922:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <angle+0x126>
     926:	f0 93 ee 06 	sts	0x06EE, r31	; 0x8006ee <angle+0x129>
     92a:	e0 93 ed 06 	sts	0x06ED, r30	; 0x8006ed <angle+0x128>
     92e:	70 93 f0 06 	sts	0x06F0, r23	; 0x8006f0 <angle+0x12b>
     932:	60 93 ef 06 	sts	0x06EF, r22	; 0x8006ef <angle+0x12a>
     936:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <angle+0x12d>
     93a:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <angle+0x12c>
     93e:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <angle+0x12f>
     942:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <angle+0x12e>
     946:	70 93 f6 06 	sts	0x06F6, r23	; 0x8006f6 <angle+0x131>
     94a:	60 93 f5 06 	sts	0x06F5, r22	; 0x8006f5 <angle+0x130>
     94e:	f0 93 f8 06 	sts	0x06F8, r31	; 0x8006f8 <angle+0x133>
     952:	e0 93 f7 06 	sts	0x06F7, r30	; 0x8006f7 <angle+0x132>
     956:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <angle+0x135>
     95a:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <angle+0x134>
     95e:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <angle+0x137>
     962:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <angle+0x136>
     966:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <angle+0x139>
     96a:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <angle+0x138>
     96e:	50 93 00 07 	sts	0x0700, r21	; 0x800700 <angle+0x13b>
     972:	40 93 ff 06 	sts	0x06FF, r20	; 0x8006ff <angle+0x13a>
     976:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <angle+0x13d>
     97a:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <angle+0x13c>
     97e:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <angle+0x13f>
     982:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <angle+0x13e>
     986:	50 93 06 07 	sts	0x0706, r21	; 0x800706 <angle+0x141>
     98a:	40 93 05 07 	sts	0x0705, r20	; 0x800705 <angle+0x140>
     98e:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <angle+0x143>
     992:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <angle+0x142>
     996:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <angle+0x145>
     99a:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <angle+0x144>
     99e:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <angle+0x147>
     9a2:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <angle+0x146>
     9a6:	30 93 0e 07 	sts	0x070E, r19	; 0x80070e <angle+0x149>
     9aa:	20 93 0d 07 	sts	0x070D, r18	; 0x80070d <angle+0x148>
     9ae:	b0 93 10 07 	sts	0x0710, r27	; 0x800710 <angle+0x14b>
     9b2:	a0 93 0f 07 	sts	0x070F, r26	; 0x80070f <angle+0x14a>
     9b6:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <angle+0x14d>
     9ba:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <angle+0x14c>
     9be:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <angle+0x14f>
     9c2:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <angle+0x14e>
     9c6:	50 93 16 07 	sts	0x0716, r21	; 0x800716 <angle+0x151>
     9ca:	40 93 15 07 	sts	0x0715, r20	; 0x800715 <angle+0x150>
     9ce:	b0 93 18 07 	sts	0x0718, r27	; 0x800718 <angle+0x153>
     9d2:	a0 93 17 07 	sts	0x0717, r26	; 0x800717 <angle+0x152>
     9d6:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <angle+0x155>
     9da:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <angle+0x154>
     9de:	90 93 1c 07 	sts	0x071C, r25	; 0x80071c <angle+0x157>
     9e2:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <angle+0x156>
     9e6:	f0 93 1e 07 	sts	0x071E, r31	; 0x80071e <angle+0x159>
     9ea:	e0 93 1d 07 	sts	0x071D, r30	; 0x80071d <angle+0x158>
     9ee:	30 93 20 07 	sts	0x0720, r19	; 0x800720 <angle+0x15b>
     9f2:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <angle+0x15a>
     9f6:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <angle+0x15d>
     9fa:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <angle+0x15c>
     9fe:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <angle+0x15f>
     a02:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <angle+0x15e>
     a06:	b0 93 26 07 	sts	0x0726, r27	; 0x800726 <angle+0x161>
     a0a:	a0 93 25 07 	sts	0x0725, r26	; 0x800725 <angle+0x160>
     a0e:	70 93 28 07 	sts	0x0728, r23	; 0x800728 <angle+0x163>
     a12:	60 93 27 07 	sts	0x0727, r22	; 0x800727 <angle+0x162>
     a16:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <angle+0x165>
     a1a:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <angle+0x164>
     a1e:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <angle+0x167>
     a22:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <angle+0x166>
     a26:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <angle+0x169>
     a2a:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <angle+0x168>
     a2e:	f0 93 30 07 	sts	0x0730, r31	; 0x800730 <angle+0x16b>
     a32:	e0 93 2f 07 	sts	0x072F, r30	; 0x80072f <angle+0x16a>
     a36:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <angle+0x16d>
     a3a:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <angle+0x16c>
     a3e:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <angle+0x16f>
     a42:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <angle+0x16e>
     a46:	70 93 36 07 	sts	0x0736, r23	; 0x800736 <angle+0x171>
     a4a:	60 93 35 07 	sts	0x0735, r22	; 0x800735 <angle+0x170>
     a4e:	50 93 38 07 	sts	0x0738, r21	; 0x800738 <angle+0x173>
     a52:	40 93 37 07 	sts	0x0737, r20	; 0x800737 <angle+0x172>
     a56:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <angle+0x175>
     a5a:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <angle+0x174>
     a5e:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <angle+0x177>
     a62:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <angle+0x176>
     a66:	30 93 3e 07 	sts	0x073E, r19	; 0x80073e <angle+0x179>
     a6a:	20 93 3d 07 	sts	0x073D, r18	; 0x80073d <angle+0x178>
     a6e:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <angle+0x17b>
     a72:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <angle+0x17a>
     a76:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <angle+0x17d>
     a7a:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <angle+0x17c>
     a7e:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <angle+0x17f>
     a82:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <angle+0x17e>
     a86:	e4 e4       	ldi	r30, 0x44	; 68
     a88:	f4 e0       	ldi	r31, 0x04	; 4
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	91 83       	std	Z+1, r25	; 0x01
     a90:	80 83       	st	Z, r24
     a92:	28 e1       	ldi	r18, 0x18	; 24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	33 83       	std	Z+3, r19	; 0x03
     a98:	22 83       	std	Z+2, r18	; 0x02
     a9a:	15 82       	std	Z+5, r1	; 0x05
     a9c:	14 82       	std	Z+4, r1	; 0x04
     a9e:	17 82       	std	Z+7, r1	; 0x07
     aa0:	16 82       	std	Z+6, r1	; 0x06
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	31 87       	std	Z+9, r19	; 0x09
     aa8:	20 87       	std	Z+8, r18	; 0x08
     aaa:	23 e0       	ldi	r18, 0x03	; 3
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	33 87       	std	Z+11, r19	; 0x0b
     ab0:	22 87       	std	Z+10, r18	; 0x0a
     ab2:	15 86       	std	Z+13, r1	; 0x0d
     ab4:	14 86       	std	Z+12, r1	; 0x0c
     ab6:	17 86       	std	Z+15, r1	; 0x0f
     ab8:	16 86       	std	Z+14, r1	; 0x0e
     aba:	91 8b       	std	Z+17, r25	; 0x11
     abc:	80 8b       	std	Z+16, r24	; 0x10
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	93 8b       	std	Z+19, r25	; 0x13
     ac4:	82 8b       	std	Z+18, r24	; 0x12
     ac6:	49 e1       	ldi	r20, 0x19	; 25
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	55 8b       	std	Z+21, r21	; 0x15
     acc:	44 8b       	std	Z+20, r20	; 0x14
     ace:	44 e2       	ldi	r20, 0x24	; 36
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	57 8b       	std	Z+23, r21	; 0x17
     ad4:	46 8b       	std	Z+22, r20	; 0x16
     ad6:	31 8f       	std	Z+25, r19	; 0x19
     ad8:	20 8f       	std	Z+24, r18	; 0x18
     ada:	25 e0       	ldi	r18, 0x05	; 5
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	33 8f       	std	Z+27, r19	; 0x1b
     ae0:	22 8f       	std	Z+26, r18	; 0x1a
     ae2:	15 8e       	std	Z+29, r1	; 0x1d
     ae4:	14 8e       	std	Z+28, r1	; 0x1c
     ae6:	17 8e       	std	Z+31, r1	; 0x1f
     ae8:	16 8e       	std	Z+30, r1	; 0x1e
     aea:	91 a3       	std	Z+33, r25	; 0x21
     aec:	80 a3       	std	Z+32, r24	; 0x20
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	93 a3       	std	Z+35, r25	; 0x23
     af4:	82 a3       	std	Z+34, r24	; 0x22
     af6:	15 a2       	std	Z+37, r1	; 0x25
     af8:	14 a2       	std	Z+36, r1	; 0x24
     afa:	17 a2       	std	Z+39, r1	; 0x27
     afc:	16 a2       	std	Z+38, r1	; 0x26
     afe:	31 a7       	std	Z+41, r19	; 0x29
     b00:	20 a7       	std	Z+40, r18	; 0x28
     b02:	27 e0       	ldi	r18, 0x07	; 7
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	33 a7       	std	Z+43, r19	; 0x2b
     b08:	22 a7       	std	Z+42, r18	; 0x2a
     b0a:	15 a6       	std	Z+45, r1	; 0x2d
     b0c:	14 a6       	std	Z+44, r1	; 0x2c
     b0e:	17 a6       	std	Z+47, r1	; 0x2f
     b10:	16 a6       	std	Z+46, r1	; 0x2e
     b12:	91 ab       	std	Z+49, r25	; 0x31
     b14:	80 ab       	std	Z+48, r24	; 0x30
     b16:	88 e0       	ldi	r24, 0x08	; 8
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	93 ab       	std	Z+51, r25	; 0x33
     b1c:	82 ab       	std	Z+50, r24	; 0x32
     b1e:	45 e2       	ldi	r20, 0x25	; 37
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	55 ab       	std	Z+53, r21	; 0x35
     b24:	44 ab       	std	Z+52, r20	; 0x34
     b26:	46 e2       	ldi	r20, 0x26	; 38
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	57 ab       	std	Z+55, r21	; 0x37
     b2c:	46 ab       	std	Z+54, r20	; 0x36
     b2e:	31 af       	std	Z+57, r19	; 0x39
     b30:	20 af       	std	Z+56, r18	; 0x38
     b32:	29 e0       	ldi	r18, 0x09	; 9
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	33 af       	std	Z+59, r19	; 0x3b
     b38:	22 af       	std	Z+58, r18	; 0x3a
     b3a:	15 ae       	std	Z+61, r1	; 0x3d
     b3c:	14 ae       	std	Z+60, r1	; 0x3c
     b3e:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <node+0x3f>
     b42:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <node+0x3e>
     b46:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <node+0x41>
     b4a:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <node+0x40>
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <node+0x43>
     b56:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <node+0x42>
     b5a:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <node+0x45>
     b5e:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <node+0x44>
     b62:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <node+0x47>
     b66:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <node+0x46>
     b6a:	30 93 8d 04 	sts	0x048D, r19	; 0x80048d <node+0x49>
     b6e:	20 93 8c 04 	sts	0x048C, r18	; 0x80048c <node+0x48>
     b72:	2b e0       	ldi	r18, 0x0B	; 11
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	30 93 8f 04 	sts	0x048F, r19	; 0x80048f <node+0x4b>
     b7a:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <node+0x4a>
     b7e:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <node+0x4d>
     b82:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <node+0x4c>
     b86:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <node+0x4f>
     b8a:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <node+0x4e>
     b8e:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <node+0x51>
     b92:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <node+0x50>
     b96:	8c e0       	ldi	r24, 0x0C	; 12
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <node+0x53>
     b9e:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <node+0x52>
     ba2:	4c e1       	ldi	r20, 0x1C	; 28
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	50 93 99 04 	sts	0x0499, r21	; 0x800499 <node+0x55>
     baa:	40 93 98 04 	sts	0x0498, r20	; 0x800498 <node+0x54>
     bae:	4d e1       	ldi	r20, 0x1D	; 29
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	50 93 9b 04 	sts	0x049B, r21	; 0x80049b <node+0x57>
     bb6:	40 93 9a 04 	sts	0x049A, r20	; 0x80049a <node+0x56>
     bba:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <node+0x59>
     bbe:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <node+0x58>
     bc2:	2d e0       	ldi	r18, 0x0D	; 13
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <node+0x5b>
     bca:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <node+0x5a>
     bce:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <node+0x5d>
     bd2:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <node+0x5c>
     bd6:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <node+0x5f>
     bda:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <node+0x5e>
     bde:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <node+0x61>
     be2:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <node+0x60>
     be6:	8e e0       	ldi	r24, 0x0E	; 14
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <node+0x63>
     bee:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <node+0x62>
     bf2:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <node+0x65>
     bf6:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <node+0x64>
     bfa:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <node+0x67>
     bfe:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <node+0x66>
     c02:	30 93 ad 04 	sts	0x04AD, r19	; 0x8004ad <node+0x69>
     c06:	20 93 ac 04 	sts	0x04AC, r18	; 0x8004ac <node+0x68>
     c0a:	d0 93 af 04 	sts	0x04AF, r29	; 0x8004af <node+0x6b>
     c0e:	c0 93 ae 04 	sts	0x04AE, r28	; 0x8004ae <node+0x6a>
     c12:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <node+0x6d>
     c16:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <node+0x6c>
     c1a:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <node+0x6f>
     c1e:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <node+0x6e>
     c22:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <node+0x71>
     c26:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <node+0x70>
     c2a:	20 e1       	ldi	r18, 0x10	; 16
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <node+0x73>
     c32:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <node+0x72>
     c36:	87 e2       	ldi	r24, 0x27	; 39
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <node+0x75>
     c3e:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <node+0x74>
     c42:	88 e2       	ldi	r24, 0x28	; 40
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <node+0x77>
     c4a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <node+0x76>
     c4e:	d0 93 bd 04 	sts	0x04BD, r29	; 0x8004bd <node+0x79>
     c52:	c0 93 bc 04 	sts	0x04BC, r28	; 0x8004bc <node+0x78>
     c56:	81 e1       	ldi	r24, 0x11	; 17
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <node+0x7b>
     c5e:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <node+0x7a>
     c62:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <node+0x7d>
     c66:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <node+0x7c>
     c6a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <node+0x7f>
     c6e:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <node+0x7e>
     c72:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <node+0x81>
     c76:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <node+0x80>
     c7a:	22 e1       	ldi	r18, 0x12	; 18
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	30 93 c7 04 	sts	0x04C7, r19	; 0x8004c7 <node+0x83>
     c82:	20 93 c6 04 	sts	0x04C6, r18	; 0x8004c6 <node+0x82>
     c86:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <node+0x85>
     c8a:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <node+0x84>
     c8e:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <node+0x87>
     c92:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <node+0x86>
     c96:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <node+0x89>
     c9a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <node+0x88>
     c9e:	83 e1       	ldi	r24, 0x13	; 19
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 cf 04 	sts	0x04CF, r25	; 0x8004cf <node+0x8b>
     ca6:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <node+0x8a>
     caa:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <node+0x8d>
     cae:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <node+0x8c>
     cb2:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <node+0x8f>
     cb6:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <node+0x8e>
     cba:	30 93 d5 04 	sts	0x04D5, r19	; 0x8004d5 <node+0x91>
     cbe:	20 93 d4 04 	sts	0x04D4, r18	; 0x8004d4 <node+0x90>
     cc2:	24 e1       	ldi	r18, 0x14	; 20
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	30 93 d7 04 	sts	0x04D7, r19	; 0x8004d7 <node+0x93>
     cca:	20 93 d6 04 	sts	0x04D6, r18	; 0x8004d6 <node+0x92>
     cce:	40 e2       	ldi	r20, 0x20	; 32
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	50 93 d9 04 	sts	0x04D9, r21	; 0x8004d9 <node+0x95>
     cd6:	40 93 d8 04 	sts	0x04D8, r20	; 0x8004d8 <node+0x94>
     cda:	41 e2       	ldi	r20, 0x21	; 33
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	50 93 db 04 	sts	0x04DB, r21	; 0x8004db <node+0x97>
     ce2:	40 93 da 04 	sts	0x04DA, r20	; 0x8004da <node+0x96>
     ce6:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <node+0x99>
     cea:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <node+0x98>
     cee:	85 e1       	ldi	r24, 0x15	; 21
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <node+0x9b>
     cf6:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <node+0x9a>
     cfa:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <node+0x9d>
     cfe:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <node+0x9c>
     d02:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <node+0x9f>
     d06:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <node+0x9e>
     d0a:	30 93 e5 04 	sts	0x04E5, r19	; 0x8004e5 <node+0xa1>
     d0e:	20 93 e4 04 	sts	0x04E4, r18	; 0x8004e4 <node+0xa0>
     d12:	26 e1       	ldi	r18, 0x16	; 22
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	30 93 e7 04 	sts	0x04E7, r19	; 0x8004e7 <node+0xa3>
     d1a:	20 93 e6 04 	sts	0x04E6, r18	; 0x8004e6 <node+0xa2>
     d1e:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <node+0xa5>
     d22:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <node+0xa4>
     d26:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <node+0xa7>
     d2a:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <node+0xa6>
     d2e:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <node+0xa9>
     d32:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <node+0xa8>
     d36:	87 e1       	ldi	r24, 0x17	; 23
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <node+0xab>
     d3e:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <node+0xaa>
     d42:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <node+0xad>
     d46:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <node+0xac>
     d4a:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <node+0xaf>
     d4e:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <node+0xae>
     d52:	86 e1       	ldi	r24, 0x16	; 22
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <node+0xb1>
     d5a:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <node+0xb0>
     d5e:	88 e1       	ldi	r24, 0x18	; 24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <node+0xb3>
     d66:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <node+0xb2>
     d6a:	c9 e2       	ldi	r28, 0x29	; 41
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
     d6e:	d0 93 f9 04 	sts	0x04F9, r29	; 0x8004f9 <node+0xb5>
     d72:	c0 93 f8 04 	sts	0x04F8, r28	; 0x8004f8 <node+0xb4>
     d76:	0f 2e       	mov	r0, r31
     d78:	fa e2       	ldi	r31, 0x2A	; 42
     d7a:	af 2e       	mov	r10, r31
     d7c:	b1 2c       	mov	r11, r1
     d7e:	f0 2d       	mov	r31, r0
     d80:	b0 92 fb 04 	sts	0x04FB, r11	; 0x8004fb <node+0xb7>
     d84:	a0 92 fa 04 	sts	0x04FA, r10	; 0x8004fa <node+0xb6>
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <node+0xb9>
     d90:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <node+0xb8>
     d94:	e7 e1       	ldi	r30, 0x17	; 23
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	f0 93 ff 04 	sts	0x04FF, r31	; 0x8004ff <node+0xbb>
     d9c:	e0 93 fe 04 	sts	0x04FE, r30	; 0x8004fe <node+0xba>
     da0:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <node+0xbd>
     da4:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <node+0xbc>
     da8:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <node+0xbf>
     dac:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <node+0xbe>
     db0:	0f 2e       	mov	r0, r31
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	8f 2e       	mov	r8, r31
     db6:	91 2c       	mov	r9, r1
     db8:	f0 2d       	mov	r31, r0
     dba:	90 92 05 05 	sts	0x0505, r9	; 0x800505 <node+0xc1>
     dbe:	80 92 04 05 	sts	0x0504, r8	; 0x800504 <node+0xc0>
     dc2:	6a e1       	ldi	r22, 0x1A	; 26
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	70 93 07 05 	sts	0x0507, r23	; 0x800507 <node+0xc3>
     dca:	60 93 06 05 	sts	0x0506, r22	; 0x800506 <node+0xc2>
     dce:	a4 e2       	ldi	r26, 0x24	; 36
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	b0 93 09 05 	sts	0x0509, r27	; 0x800509 <node+0xc5>
     dd6:	a0 93 08 05 	sts	0x0508, r26	; 0x800508 <node+0xc4>
     dda:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <node+0xc7>
     dde:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <node+0xc6>
     de2:	0f 2e       	mov	r0, r31
     de4:	f9 e1       	ldi	r31, 0x19	; 25
     de6:	6f 2e       	mov	r6, r31
     de8:	71 2c       	mov	r7, r1
     dea:	f0 2d       	mov	r31, r0
     dec:	70 92 0d 05 	sts	0x050D, r7	; 0x80050d <node+0xc9>
     df0:	60 92 0c 05 	sts	0x050C, r6	; 0x80050c <node+0xc8>
     df4:	4b e1       	ldi	r20, 0x1B	; 27
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	50 93 0f 05 	sts	0x050F, r21	; 0x80050f <node+0xcb>
     dfc:	40 93 0e 05 	sts	0x050E, r20	; 0x80050e <node+0xca>
     e00:	85 e2       	ldi	r24, 0x25	; 37
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <node+0xcd>
     e08:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <node+0xcc>
     e0c:	0f 2e       	mov	r0, r31
     e0e:	fc e2       	ldi	r31, 0x2C	; 44
     e10:	4f 2e       	mov	r4, r31
     e12:	51 2c       	mov	r5, r1
     e14:	f0 2d       	mov	r31, r0
     e16:	50 92 13 05 	sts	0x0513, r5	; 0x800513 <node+0xcf>
     e1a:	40 92 12 05 	sts	0x0512, r4	; 0x800512 <node+0xce>
     e1e:	70 93 15 05 	sts	0x0515, r23	; 0x800515 <node+0xd1>
     e22:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <node+0xd0>
     e26:	2c e1       	ldi	r18, 0x1C	; 28
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <node+0xd3>
     e2e:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <node+0xd2>
     e32:	86 e2       	ldi	r24, 0x26	; 38
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <node+0xd5>
     e3a:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <node+0xd4>
     e3e:	0d e2       	ldi	r16, 0x2D	; 45
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	10 93 1b 05 	sts	0x051B, r17	; 0x80051b <node+0xd7>
     e46:	00 93 1a 05 	sts	0x051A, r16	; 0x80051a <node+0xd6>
     e4a:	0b e0       	ldi	r16, 0x0B	; 11
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	10 93 1d 05 	sts	0x051D, r17	; 0x80051d <node+0xd9>
     e52:	00 93 1c 05 	sts	0x051C, r16	; 0x80051c <node+0xd8>
     e56:	50 93 1f 05 	sts	0x051F, r21	; 0x80051f <node+0xdb>
     e5a:	40 93 1e 05 	sts	0x051E, r20	; 0x80051e <node+0xda>
     e5e:	8d e1       	ldi	r24, 0x1D	; 29
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <node+0xdd>
     e66:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <node+0xdc>
     e6a:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <node+0xdf>
     e6e:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <node+0xde>
     e72:	10 93 25 05 	sts	0x0525, r17	; 0x800525 <node+0xe1>
     e76:	00 93 24 05 	sts	0x0524, r16	; 0x800524 <node+0xe0>
     e7a:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <node+0xe3>
     e7e:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <node+0xe2>
     e82:	2e e1       	ldi	r18, 0x1E	; 30
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	30 93 29 05 	sts	0x0529, r19	; 0x800529 <node+0xe5>
     e8a:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <node+0xe4>
     e8e:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <node+0xe7>
     e92:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <node+0xe6>
     e96:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <node+0xe9>
     e9a:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <node+0xe8>
     e9e:	8f e1       	ldi	r24, 0x1F	; 31
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <node+0xeb>
     ea6:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <node+0xea>
     eaa:	07 e2       	ldi	r16, 0x27	; 39
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	10 93 31 05 	sts	0x0531, r17	; 0x800531 <node+0xed>
     eb2:	00 93 30 05 	sts	0x0530, r16	; 0x800530 <node+0xec>
     eb6:	0f 2e       	mov	r0, r31
     eb8:	fe e2       	ldi	r31, 0x2E	; 46
     eba:	2f 2e       	mov	r2, r31
     ebc:	31 2c       	mov	r3, r1
     ebe:	f0 2d       	mov	r31, r0
     ec0:	30 92 33 05 	sts	0x0533, r3	; 0x800533 <node+0xef>
     ec4:	20 92 32 05 	sts	0x0532, r2	; 0x800532 <node+0xee>
     ec8:	30 93 35 05 	sts	0x0535, r19	; 0x800535 <node+0xf1>
     ecc:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <node+0xf0>
     ed0:	68 94       	set
     ed2:	ee 24       	eor	r14, r14
     ed4:	e5 f8       	bld	r14, 5
     ed6:	f1 2c       	mov	r15, r1
     ed8:	f0 92 37 05 	sts	0x0537, r15	; 0x800537 <node+0xf3>
     edc:	e0 92 36 05 	sts	0x0536, r14	; 0x800536 <node+0xf2>
     ee0:	08 e2       	ldi	r16, 0x28	; 40
     ee2:	10 e0       	ldi	r17, 0x00	; 0
     ee4:	10 93 39 05 	sts	0x0539, r17	; 0x800539 <node+0xf5>
     ee8:	00 93 38 05 	sts	0x0538, r16	; 0x800538 <node+0xf4>
     eec:	0f 2e       	mov	r0, r31
     eee:	ff e2       	ldi	r31, 0x2F	; 47
     ef0:	cf 2e       	mov	r12, r31
     ef2:	d1 2c       	mov	r13, r1
     ef4:	f0 2d       	mov	r31, r0
     ef6:	d0 92 3b 05 	sts	0x053B, r13	; 0x80053b <node+0xf7>
     efa:	c0 92 3a 05 	sts	0x053A, r12	; 0x80053a <node+0xf6>
     efe:	0f 2e       	mov	r0, r31
     f00:	f3 e1       	ldi	r31, 0x13	; 19
     f02:	cf 2e       	mov	r12, r31
     f04:	d1 2c       	mov	r13, r1
     f06:	f0 2d       	mov	r31, r0
     f08:	d0 92 3d 05 	sts	0x053D, r13	; 0x80053d <node+0xf9>
     f0c:	c0 92 3c 05 	sts	0x053C, r12	; 0x80053c <node+0xf8>
     f10:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <node+0xfb>
     f14:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <node+0xfa>
     f18:	01 e2       	ldi	r16, 0x21	; 33
     f1a:	10 e0       	ldi	r17, 0x00	; 0
     f1c:	10 93 41 05 	sts	0x0541, r17	; 0x800541 <node+0xfd>
     f20:	00 93 40 05 	sts	0x0540, r16	; 0x800540 <node+0xfc>
     f24:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <node+0xff>
     f28:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <node+0xfe>
     f2c:	d0 92 45 05 	sts	0x0545, r13	; 0x800545 <node+0x101>
     f30:	c0 92 44 05 	sts	0x0544, r12	; 0x800544 <node+0x100>
     f34:	f0 92 47 05 	sts	0x0547, r15	; 0x800547 <node+0x103>
     f38:	e0 92 46 05 	sts	0x0546, r14	; 0x800546 <node+0x102>
     f3c:	0f 2e       	mov	r0, r31
     f3e:	f2 e2       	ldi	r31, 0x22	; 34
     f40:	ef 2e       	mov	r14, r31
     f42:	f1 2c       	mov	r15, r1
     f44:	f0 2d       	mov	r31, r0
     f46:	f0 92 49 05 	sts	0x0549, r15	; 0x800549 <node+0x105>
     f4a:	e0 92 48 05 	sts	0x0548, r14	; 0x800548 <node+0x104>
     f4e:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <node+0x107>
     f52:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <node+0x106>
     f56:	10 93 4d 05 	sts	0x054D, r17	; 0x80054d <node+0x109>
     f5a:	00 93 4c 05 	sts	0x054C, r16	; 0x80054c <node+0x108>
     f5e:	03 e2       	ldi	r16, 0x23	; 35
     f60:	10 e0       	ldi	r17, 0x00	; 0
     f62:	10 93 4f 05 	sts	0x054F, r17	; 0x80054f <node+0x10b>
     f66:	00 93 4e 05 	sts	0x054E, r16	; 0x80054e <node+0x10a>
     f6a:	d0 93 51 05 	sts	0x0551, r29	; 0x800551 <node+0x10d>
     f6e:	c0 93 50 05 	sts	0x0550, r28	; 0x800550 <node+0x10c>
     f72:	c0 e3       	ldi	r28, 0x30	; 48
     f74:	d0 e0       	ldi	r29, 0x00	; 0
     f76:	d0 93 53 05 	sts	0x0553, r29	; 0x800553 <node+0x10f>
     f7a:	c0 93 52 05 	sts	0x0552, r28	; 0x800552 <node+0x10e>
     f7e:	f0 92 55 05 	sts	0x0555, r15	; 0x800555 <node+0x111>
     f82:	e0 92 54 05 	sts	0x0554, r14	; 0x800554 <node+0x110>
     f86:	b0 93 57 05 	sts	0x0557, r27	; 0x800557 <node+0x113>
     f8a:	a0 93 56 05 	sts	0x0556, r26	; 0x800556 <node+0x112>
     f8e:	b0 92 59 05 	sts	0x0559, r11	; 0x800559 <node+0x115>
     f92:	a0 92 58 05 	sts	0x0558, r10	; 0x800558 <node+0x114>
     f96:	ab e2       	ldi	r26, 0x2B	; 43
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	b0 93 5b 05 	sts	0x055B, r27	; 0x80055b <node+0x117>
     f9e:	a0 93 5a 05 	sts	0x055A, r26	; 0x80055a <node+0x116>
     fa2:	90 92 5d 05 	sts	0x055D, r9	; 0x80055d <node+0x119>
     fa6:	80 92 5c 05 	sts	0x055C, r8	; 0x80055c <node+0x118>
     faa:	70 92 5f 05 	sts	0x055F, r7	; 0x80055f <node+0x11b>
     fae:	60 92 5e 05 	sts	0x055E, r6	; 0x80055e <node+0x11a>
     fb2:	10 93 61 05 	sts	0x0561, r17	; 0x800561 <node+0x11d>
     fb6:	00 93 60 05 	sts	0x0560, r16	; 0x800560 <node+0x11c>
     fba:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <node+0x11f>
     fbe:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <node+0x11e>
     fc2:	0f 2e       	mov	r0, r31
     fc4:	f7 e0       	ldi	r31, 0x07	; 7
     fc6:	cf 2e       	mov	r12, r31
     fc8:	d1 2c       	mov	r13, r1
     fca:	f0 2d       	mov	r31, r0
     fcc:	d0 92 65 05 	sts	0x0565, r13	; 0x800565 <node+0x121>
     fd0:	c0 92 64 05 	sts	0x0564, r12	; 0x800564 <node+0x120>
     fd4:	70 93 67 05 	sts	0x0567, r23	; 0x800567 <node+0x123>
     fd8:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <node+0x122>
     fdc:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <node+0x125>
     fe0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <node+0x124>
     fe4:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <node+0x127>
     fe8:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <node+0x126>
     fec:	d0 92 6d 05 	sts	0x056D, r13	; 0x80056d <node+0x129>
     ff0:	c0 92 6c 05 	sts	0x056C, r12	; 0x80056c <node+0x128>
     ff4:	50 93 6f 05 	sts	0x056F, r21	; 0x80056f <node+0x12b>
     ff8:	40 93 6e 05 	sts	0x056E, r20	; 0x80056e <node+0x12a>
     ffc:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <node+0x12d>
    1000:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <node+0x12c>
    1004:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <node+0x12f>
    1008:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <node+0x12e>
    100c:	0f 2e       	mov	r0, r31
    100e:	ff e0       	ldi	r31, 0x0F	; 15
    1010:	cf 2e       	mov	r12, r31
    1012:	d1 2c       	mov	r13, r1
    1014:	f0 2d       	mov	r31, r0
    1016:	d0 92 75 05 	sts	0x0575, r13	; 0x800575 <node+0x131>
    101a:	c0 92 74 05 	sts	0x0574, r12	; 0x800574 <node+0x130>
    101e:	30 93 77 05 	sts	0x0577, r19	; 0x800577 <node+0x133>
    1022:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <node+0x132>
    1026:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <node+0x135>
    102a:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <node+0x134>
    102e:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <node+0x137>
    1032:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <node+0x136>
    1036:	d0 92 7d 05 	sts	0x057D, r13	; 0x80057d <node+0x139>
    103a:	c0 92 7c 05 	sts	0x057C, r12	; 0x80057c <node+0x138>
    103e:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <node+0x13b>
    1042:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <node+0x13a>
    1046:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <node+0x13d>
    104a:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <node+0x13c>
    104e:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <node+0x13f>
    1052:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <node+0x13e>
    1056:	f0 93 85 05 	sts	0x0585, r31	; 0x800585 <node+0x141>
    105a:	e0 93 84 05 	sts	0x0584, r30	; 0x800584 <node+0x140>
    105e:	f0 92 87 05 	sts	0x0587, r15	; 0x800587 <node+0x143>
    1062:	e0 92 86 05 	sts	0x0586, r14	; 0x800586 <node+0x142>
    1066:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <node+0x145>
    106a:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <node+0x144>
    106e:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <node+0x147>
    1072:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <node+0x146>
    1076:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <node+0x149>
    107a:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <node+0x148>
    107e:	10 93 8f 05 	sts	0x058F, r17	; 0x80058f <node+0x14b>
    1082:	00 93 8e 05 	sts	0x058E, r16	; 0x80058e <node+0x14a>
    1086:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <node+0x14d>
    108a:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <node+0x14c>
    108e:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <node+0x14f>
    1092:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <node+0x14e>
    1096:	10 93 95 05 	sts	0x0595, r17	; 0x800595 <node+0x151>
    109a:	00 93 94 05 	sts	0x0594, r16	; 0x800594 <node+0x150>
    109e:	50 92 97 05 	sts	0x0597, r5	; 0x800597 <node+0x153>
    10a2:	40 92 96 05 	sts	0x0596, r4	; 0x800596 <node+0x152>
    10a6:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <node+0x155>
    10aa:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <node+0x154>
    10ae:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <node+0x157>
    10b2:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <node+0x156>
    10b6:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <node+0x159>
    10ba:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <node+0x158>
    10be:	b0 93 9f 05 	sts	0x059F, r27	; 0x80059f <node+0x15b>
    10c2:	a0 93 9e 05 	sts	0x059E, r26	; 0x80059e <node+0x15a>
    10c6:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <node+0x15d>
    10ca:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <node+0x15c>
    10ce:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <node+0x15f>
    10d2:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <node+0x15e>
    10d6:	50 93 a5 05 	sts	0x05A5, r21	; 0x8005a5 <node+0x161>
    10da:	40 93 a4 05 	sts	0x05A4, r20	; 0x8005a4 <node+0x160>
    10de:	30 92 a7 05 	sts	0x05A7, r3	; 0x8005a7 <node+0x163>
    10e2:	20 92 a6 05 	sts	0x05A6, r2	; 0x8005a6 <node+0x162>
    10e6:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <node+0x165>
    10ea:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <node+0x164>
    10ee:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <node+0x167>
    10f2:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <node+0x166>
    10f6:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <node+0x169>
    10fa:	20 93 ac 05 	sts	0x05AC, r18	; 0x8005ac <node+0x168>
    10fe:	0d e2       	ldi	r16, 0x2D	; 45
    1100:	10 e0       	ldi	r17, 0x00	; 0
    1102:	10 93 af 05 	sts	0x05AF, r17	; 0x8005af <node+0x16b>
    1106:	00 93 ae 05 	sts	0x05AE, r16	; 0x8005ae <node+0x16a>
    110a:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <node+0x16d>
    110e:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <node+0x16c>
    1112:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <node+0x16f>
    1116:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <node+0x16e>
    111a:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <node+0x171>
    111e:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <node+0x170>
    1122:	d0 93 b7 05 	sts	0x05B7, r29	; 0x8005b7 <node+0x173>
    1126:	c0 93 b6 05 	sts	0x05B6, r28	; 0x8005b6 <node+0x172>
    112a:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <node+0x175>
    112e:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <node+0x174>
    1132:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <node+0x177>
    1136:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <node+0x176>
    113a:	f0 92 bd 05 	sts	0x05BD, r15	; 0x8005bd <node+0x179>
    113e:	e0 92 bc 05 	sts	0x05BC, r14	; 0x8005bc <node+0x178>
    1142:	2f e2       	ldi	r18, 0x2F	; 47
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	30 93 bf 05 	sts	0x05BF, r19	; 0x8005bf <node+0x17b>
    114a:	20 93 be 05 	sts	0x05BE, r18	; 0x8005be <node+0x17a>
    114e:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <node+0x17d>
    1152:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <node+0x17c>
    1156:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <node+0x17f>
    115a:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <node+0x17e>
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	5f 90       	pop	r5
    117c:	4f 90       	pop	r4
    117e:	3f 90       	pop	r3
    1180:	2f 90       	pop	r2
    1182:	08 95       	ret

00001184 <__vector_25>:
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	0b b6       	in	r0, 0x3b	; 59
    1190:	0f 92       	push	r0
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    11a6:	88 23       	and	r24, r24
    11a8:	0c f0       	brlt	.+2      	; 0x11ac <__vector_25+0x28>
    11aa:	53 c0       	rjmp	.+166    	; 0x1252 <__vector_25+0xce>
    11ac:	98 2f       	mov	r25, r24
    11ae:	9f 77       	andi	r25, 0x7F	; 127
    11b0:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <lastCommand>
    11b4:	4e 2f       	mov	r20, r30
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	fa 01       	movw	r30, r20
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	ea 30       	cpi	r30, 0x0A	; 10
    11be:	f1 05       	cpc	r31, r1
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <__vector_25+0x40>
    11c2:	50 c0       	rjmp	.+160    	; 0x1264 <__vector_25+0xe0>
    11c4:	88 27       	eor	r24, r24
    11c6:	ee 58       	subi	r30, 0x8E	; 142
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	22 c7       	rjmp	.+3652   	; 0x2012 <__tablejump2__>
    11ce:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <noteCount>
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	e0 53       	subi	r30, 0x30	; 48
    11d6:	fc 4f       	sbci	r31, 0xFC	; 252
    11d8:	90 83       	st	Z, r25
    11da:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <noteCount>
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <noteCount>
    11e4:	3f c0       	rjmp	.+126    	; 0x1264 <__vector_25+0xe0>
    11e6:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <taskCount>
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	e6 54       	subi	r30, 0x46	; 70
    11ee:	fc 4f       	sbci	r31, 0xFC	; 252
    11f0:	90 83       	st	Z, r25
    11f2:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <taskCount>
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <taskCount>
    11fc:	33 c0       	rjmp	.+102    	; 0x1264 <__vector_25+0xe0>
    11fe:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <otherBotLocation>
    1202:	30 c0       	rjmp	.+96     	; 0x1264 <__vector_25+0xe0>
    1204:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <otherBotMovingTo>
    1208:	2d c0       	rjmp	.+90     	; 0x1264 <__vector_25+0xe0>
    120a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    120e:	89 13       	cpse	r24, r25
    1210:	29 c0       	rjmp	.+82     	; 0x1264 <__vector_25+0xe0>
    1212:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <noteToStrike>
    121c:	23 c0       	rjmp	.+70     	; 0x1264 <__vector_25+0xe0>
    121e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    1222:	89 13       	cpse	r24, r25
    1224:	1f c0       	rjmp	.+62     	; 0x1264 <__vector_25+0xe0>
    1226:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <noteToProcess>
    1230:	19 c0       	rjmp	.+50     	; 0x1264 <__vector_25+0xe0>
    1232:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <taskCost>
    1236:	89 0f       	add	r24, r25
    1238:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <taskCost>
    123c:	13 c0       	rjmp	.+38     	; 0x1264 <__vector_25+0xe0>
    123e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotLastTaskIndex>
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <__vector_25+0xe0>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <botEnd+0x1>
    124c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <botEnd>
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <__vector_25+0xe0>
    1252:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <lastCommand>
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	29 f4       	brne	.+10     	; 0x1264 <__vector_25+0xe0>
    125a:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <status>
    125e:	81 60       	ori	r24, 0x01	; 1
    1260:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <status>
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	0f 90       	pop	r0
    1276:	0b be       	out	0x3b, r0	; 59
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <buzzer_pin_config>:
    1282:	3b 9a       	sbi	0x07, 3	; 7
    1284:	43 98       	cbi	0x08, 3	; 8
    1286:	08 95       	ret

00001288 <buzzer_on>:
    1288:	86 b1       	in	r24, 0x06	; 6
    128a:	88 60       	ori	r24, 0x08	; 8
    128c:	88 b9       	out	0x08, r24	; 8
    128e:	08 95       	ret

00001290 <buzzer_off>:
    1290:	86 b1       	in	r24, 0x06	; 6
    1292:	87 7f       	andi	r24, 0xF7	; 247
    1294:	88 b9       	out	0x08, r24	; 8
    1296:	08 95       	ret

00001298 <lcd_port_config>:
    1298:	87 b1       	in	r24, 0x07	; 7
    129a:	87 6f       	ori	r24, 0xF7	; 247
    129c:	87 b9       	out	0x07, r24	; 7
    129e:	88 b1       	in	r24, 0x08	; 8
    12a0:	80 78       	andi	r24, 0x80	; 128
    12a2:	88 b9       	out	0x08, r24	; 8
    12a4:	08 95       	ret

000012a6 <adc_pin_config>:
    12a6:	10 ba       	out	0x10, r1	; 16
    12a8:	11 ba       	out	0x11, r1	; 17
    12aa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    12ae:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    12b2:	08 95       	ret

000012b4 <motion_pin_config>:
    12b4:	81 b1       	in	r24, 0x01	; 1
    12b6:	8f 60       	ori	r24, 0x0F	; 15
    12b8:	81 b9       	out	0x01, r24	; 1
    12ba:	82 b1       	in	r24, 0x02	; 2
    12bc:	80 7f       	andi	r24, 0xF0	; 240
    12be:	82 b9       	out	0x02, r24	; 2
    12c0:	ea e0       	ldi	r30, 0x0A	; 10
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	80 81       	ld	r24, Z
    12c6:	88 61       	ori	r24, 0x18	; 24
    12c8:	80 83       	st	Z, r24
    12ca:	eb e0       	ldi	r30, 0x0B	; 11
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	80 81       	ld	r24, Z
    12d0:	88 61       	ori	r24, 0x18	; 24
    12d2:	80 83       	st	Z, r24
    12d4:	08 95       	ret

000012d6 <left_encoder_pin_config>:
    12d6:	6c 98       	cbi	0x0d, 4	; 13
    12d8:	74 9a       	sbi	0x0e, 4	; 14
    12da:	08 95       	ret

000012dc <right_encoder_pin_config>:
    12dc:	6d 98       	cbi	0x0d, 5	; 13
    12de:	75 9a       	sbi	0x0e, 5	; 14
    12e0:	08 95       	ret

000012e2 <port_init>:
    12e2:	e8 df       	rcall	.-48     	; 0x12b4 <motion_pin_config>
    12e4:	f8 df       	rcall	.-16     	; 0x12d6 <left_encoder_pin_config>
    12e6:	fa df       	rcall	.-12     	; 0x12dc <right_encoder_pin_config>
    12e8:	d7 df       	rcall	.-82     	; 0x1298 <lcd_port_config>
    12ea:	dd df       	rcall	.-70     	; 0x12a6 <adc_pin_config>
    12ec:	ca cf       	rjmp	.-108    	; 0x1282 <buzzer_pin_config>
    12ee:	08 95       	ret

000012f0 <timer5_init>:
    12f0:	e1 e2       	ldi	r30, 0x21	; 33
    12f2:	f1 e0       	ldi	r31, 0x01	; 1
    12f4:	10 82       	st	Z, r1
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1302:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1306:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    130a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    130e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1312:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    1316:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    131a:	89 ea       	ldi	r24, 0xA9	; 169
    131c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1320:	8b e0       	ldi	r24, 0x0B	; 11
    1322:	80 83       	st	Z, r24
    1324:	08 95       	ret

00001326 <adc_init>:
    1326:	ea e7       	ldi	r30, 0x7A	; 122
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	10 82       	st	Z, r1
    132c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1336:	80 e8       	ldi	r24, 0x80	; 128
    1338:	80 bf       	out	0x30, r24	; 48
    133a:	86 e8       	ldi	r24, 0x86	; 134
    133c:	80 83       	st	Z, r24
    133e:	08 95       	ret

00001340 <ADC_Conversion>:
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	18 f0       	brcs	.+6      	; 0x134a <ADC_Conversion+0xa>
    1344:	98 e0       	ldi	r25, 0x08	; 8
    1346:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    134a:	87 70       	andi	r24, 0x07	; 7
    134c:	80 62       	ori	r24, 0x20	; 32
    134e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1352:	ea e7       	ldi	r30, 0x7A	; 122
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 64       	ori	r24, 0x40	; 64
    135a:	80 83       	st	Z, r24
    135c:	80 81       	ld	r24, Z
    135e:	84 ff       	sbrs	r24, 4
    1360:	fd cf       	rjmp	.-6      	; 0x135c <ADC_Conversion+0x1c>
    1362:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1366:	ea e7       	ldi	r30, 0x7A	; 122
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	90 81       	ld	r25, Z
    136c:	90 61       	ori	r25, 0x10	; 16
    136e:	90 83       	st	Z, r25
    1370:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1374:	08 95       	ret

00001376 <print_sensor>:
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	d8 2f       	mov	r29, r24
    137c:	c6 2f       	mov	r28, r22
    137e:	84 2f       	mov	r24, r20
    1380:	df df       	rcall	.-66     	; 0x1340 <ADC_Conversion>
    1382:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <ADC_Value>
    1386:	48 2f       	mov	r20, r24
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	6c 2f       	mov	r22, r28
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	23 e0       	ldi	r18, 0x03	; 3
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8d 2f       	mov	r24, r29
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_print>
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <left_position_encoder_interrupt_init>:
    13a0:	f8 94       	cli
    13a2:	ea e6       	ldi	r30, 0x6A	; 106
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	82 60       	ori	r24, 0x02	; 2
    13aa:	80 83       	st	Z, r24
    13ac:	ec 9a       	sbi	0x1d, 4	; 29
    13ae:	78 94       	sei
    13b0:	08 95       	ret

000013b2 <right_position_encoder_interrupt_init>:
    13b2:	f8 94       	cli
    13b4:	ea e6       	ldi	r30, 0x6A	; 106
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 60       	ori	r24, 0x08	; 8
    13bc:	80 83       	st	Z, r24
    13be:	ed 9a       	sbi	0x1d, 5	; 29
    13c0:	78 94       	sei
    13c2:	08 95       	ret

000013c4 <__vector_6>:
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ShaftCountRight>
    13da:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    13de:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    13e2:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	a1 1d       	adc	r26, r1
    13ea:	b1 1d       	adc	r27, r1
    13ec:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <ShaftCountRight>
    13f0:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <ShaftCountRight+0x1>
    13f4:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <ShaftCountRight+0x2>
    13f8:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <ShaftCountRight+0x3>
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_5>:
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <ShaftCountLeft>
    1424:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <ShaftCountLeft+0x1>
    1428:	a0 91 a2 03 	lds	r26, 0x03A2	; 0x8003a2 <ShaftCountLeft+0x2>
    142c:	b0 91 a3 03 	lds	r27, 0x03A3	; 0x8003a3 <ShaftCountLeft+0x3>
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	a1 1d       	adc	r26, r1
    1434:	b1 1d       	adc	r27, r1
    1436:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <ShaftCountLeft>
    143a:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <ShaftCountLeft+0x1>
    143e:	a0 93 a2 03 	sts	0x03A2, r26	; 0x8003a2 <ShaftCountLeft+0x2>
    1442:	b0 93 a3 03 	sts	0x03A3, r27	; 0x8003a3 <ShaftCountLeft+0x3>
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <motion_set>:
    1458:	92 b1       	in	r25, 0x02	; 2
    145a:	90 7f       	andi	r25, 0xF0	; 240
    145c:	8f 70       	andi	r24, 0x0F	; 15
    145e:	98 2b       	or	r25, r24
    1460:	92 b9       	out	0x02, r25	; 2
    1462:	08 95       	ret

00001464 <forward>:
    1464:	86 e0       	ldi	r24, 0x06	; 6
    1466:	f8 cf       	rjmp	.-16     	; 0x1458 <motion_set>
    1468:	08 95       	ret

0000146a <left>:
    146a:	85 e0       	ldi	r24, 0x05	; 5
    146c:	f5 cf       	rjmp	.-22     	; 0x1458 <motion_set>
    146e:	08 95       	ret

00001470 <right>:
    1470:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <thresh>
    1474:	f1 cf       	rjmp	.-30     	; 0x1458 <motion_set>
    1476:	08 95       	ret

00001478 <stop>:
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	ee cf       	rjmp	.-36     	; 0x1458 <motion_set>
    147c:	08 95       	ret

0000147e <angle_rotate>:
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	bc 01       	movw	r22, r24
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	08 d5       	rcall	.+2576   	; 0x1ea6 <__floatunsisf>
    1496:	28 e4       	ldi	r18, 0x48	; 72
    1498:	31 ee       	ldi	r19, 0xE1	; 225
    149a:	42 e8       	ldi	r20, 0x82	; 130
    149c:	50 e4       	ldi	r21, 0x40	; 64
    149e:	6f d4       	rcall	.+2270   	; 0x1d7e <__divsf3>
    14a0:	d6 d4       	rcall	.+2476   	; 0x1e4e <__fixunssfsi>
    14a2:	6b 01       	movw	r12, r22
    14a4:	e1 2c       	mov	r14, r1
    14a6:	f1 2c       	mov	r15, r1
    14a8:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ShaftCountRight>
    14ac:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ShaftCountRight+0x1>
    14b0:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <ShaftCountRight+0x2>
    14b4:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <ShaftCountRight+0x3>
    14b8:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <ShaftCountLeft>
    14bc:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <ShaftCountLeft+0x1>
    14c0:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <ShaftCountLeft+0x2>
    14c4:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <ShaftCountLeft+0x3>
    14c8:	c1 e0       	ldi	r28, 0x01	; 1
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
    14cc:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <ShaftCountRight>
    14d0:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    14d4:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    14d8:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    14dc:	03 e0       	ldi	r16, 0x03	; 3
    14de:	10 e0       	ldi	r17, 0x00	; 0
    14e0:	65 e0       	ldi	r22, 0x05	; 5
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_print>
    14ec:	8c 2f       	mov	r24, r28
    14ee:	40 91 a0 03 	lds	r20, 0x03A0	; 0x8003a0 <ShaftCountLeft>
    14f2:	50 91 a1 03 	lds	r21, 0x03A1	; 0x8003a1 <ShaftCountLeft+0x1>
    14f6:	60 91 a2 03 	lds	r22, 0x03A2	; 0x8003a2 <ShaftCountLeft+0x2>
    14fa:	70 91 a3 03 	lds	r23, 0x03A3	; 0x8003a3 <ShaftCountLeft+0x3>
    14fe:	4c 15       	cp	r20, r12
    1500:	5d 05       	cpc	r21, r13
    1502:	6e 05       	cpc	r22, r14
    1504:	7f 05       	cpc	r23, r15
    1506:	08 f4       	brcc	.+2      	; 0x150a <angle_rotate+0x8c>
    1508:	8d 2f       	mov	r24, r29
    150a:	81 11       	cpse	r24, r1
    150c:	11 c0       	rjmp	.+34     	; 0x1530 <angle_rotate+0xb2>
    150e:	8c 2f       	mov	r24, r28
    1510:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <ShaftCountRight>
    1514:	50 91 9d 03 	lds	r21, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    1518:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    151c:	70 91 9f 03 	lds	r23, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    1520:	4c 15       	cp	r20, r12
    1522:	5d 05       	cpc	r21, r13
    1524:	6e 05       	cpc	r22, r14
    1526:	7f 05       	cpc	r23, r15
    1528:	08 f4       	brcc	.+2      	; 0x152c <angle_rotate+0xae>
    152a:	8d 2f       	mov	r24, r29
    152c:	88 23       	and	r24, r24
    152e:	71 f2       	breq	.-100    	; 0x14cc <angle_rotate+0x4e>
    1530:	a3 df       	rcall	.-186    	; 0x1478 <stop>
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	08 95       	ret

00001544 <left_degrees>:
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	8f df       	rcall	.-226    	; 0x146a <left>
    154c:	9f ef       	ldi	r25, 0xFF	; 255
    154e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1552:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1556:	ce 01       	movw	r24, r28
    1558:	92 df       	rcall	.-220    	; 0x147e <angle_rotate>
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <right_degrees>:
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
    1566:	84 df       	rcall	.-248    	; 0x1470 <right>
    1568:	9f ef       	ldi	r25, 0xFF	; 255
    156a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    156e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1572:	ce 01       	movw	r24, r28
    1574:	84 df       	rcall	.-248    	; 0x147e <angle_rotate>
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <init_devices>:
    157c:	f8 94       	cli
    157e:	b1 de       	rcall	.-670    	; 0x12e2 <port_init>
    1580:	e1 ec       	ldi	r30, 0xC1	; 193
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1
    1586:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    158a:	26 e0       	ldi	r18, 0x06	; 6
    158c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1590:	9f e5       	ldi	r25, 0x5F	; 95
    1592:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1596:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    159a:	88 e9       	ldi	r24, 0x98	; 152
    159c:	80 83       	st	Z, r24
    159e:	e1 ed       	ldi	r30, 0xD1	; 209
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1
    15a4:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    15a8:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    15ac:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    15b0:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    15b4:	80 83       	st	Z, r24
    15b6:	f4 de       	rcall	.-536    	; 0x13a0 <left_position_encoder_interrupt_init>
    15b8:	fc de       	rcall	.-520    	; 0x13b2 <right_position_encoder_interrupt_init>
    15ba:	b5 de       	rcall	.-662    	; 0x1326 <adc_init>
    15bc:	99 de       	rcall	.-718    	; 0x12f0 <timer5_init>
    15be:	78 94       	sei
    15c0:	08 95       	ret

000015c2 <forward_mm>:
} 


void forward_mm(unsigned int DistanceInMM)
{
	forward();
    15c2:	50 df       	rcall	.-352    	; 0x1464 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15c4:	8a e5       	ldi	r24, 0x5A	; 90
    15c6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    15ca:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count 
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;   
	ShaftCountRight = 0; 
    15ce:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ShaftCountRight>
    15d2:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ShaftCountRight+0x1>
    15d6:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <ShaftCountRight+0x2>
    15da:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <ShaftCountRight+0x3>
    15de:	ff cf       	rjmp	.-2      	; 0x15de <forward_mm+0x1c>

000015e0 <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    15e0:	4f 92       	push	r4
    15e2:	5f 92       	push	r5
    15e4:	6f 92       	push	r6
    15e6:	7f 92       	push	r7
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	bf 92       	push	r11
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	c0 5c       	subi	r28, 0xC0	; 192
    1606:	d1 09       	sbc	r29, r1
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    int j=0,k=-1;
    int list[48];
	int tmploc[48]={0};
    1612:	de 01       	movw	r26, r28
    1614:	af 59       	subi	r26, 0x9F	; 159
    1616:	bf 4f       	sbci	r27, 0xFF	; 255
    1618:	20 e6       	ldi	r18, 0x60	; 96
    161a:	fd 01       	movw	r30, r26
    161c:	11 92       	st	Z+, r1
    161e:	2a 95       	dec	r18
    1620:	e9 f7       	brne	.-6      	; 0x161c <costplan+0x3c>
    1622:	e4 ee       	ldi	r30, 0xE4	; 228
    1624:	f3 e0       	ldi	r31, 0x03	; 3
    1626:	8e 01       	movw	r16, r28
    1628:	0f 5f       	subi	r16, 0xFF	; 255
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	78 01       	movw	r14, r16
    162e:	6d 01       	movw	r12, r26
    1630:	04 e4       	ldi	r16, 0x44	; 68
    1632:	14 e0       	ldi	r17, 0x04	; 4
    1634:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
    {
	    cost[j]=99;
    1636:	63 e6       	ldi	r22, 0x63	; 99
    1638:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    163a:	4f ef       	ldi	r20, 0xFF	; 255
    163c:	5f ef       	ldi	r21, 0xFF	; 255
    int j=0,k=-1;
    int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    {
	    cost[j]=99;
    163e:	61 93       	st	Z+, r22
    1640:	71 93       	st	Z+, r23
		list[j]=-1;
    1642:	d9 01       	movw	r26, r18
    1644:	4d 93       	st	X+, r20
    1646:	5d 93       	st	X+, r21
    1648:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    164a:	d6 01       	movw	r26, r12
    164c:	1d 92       	st	X+, r1
    164e:	1d 92       	st	X+, r1
    1650:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    int j=0,k=-1;
    int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    1652:	e0 17       	cp	r30, r16
    1654:	f1 07       	cpc	r31, r17
    1656:	99 f7       	brne	.-26     	; 0x163e <costplan+0x5e>
    1658:	fc 01       	movw	r30, r24
    165a:	ac 01       	movw	r20, r24
    165c:	44 5f       	subi	r20, 0xF4	; 244
    165e:	5f 4f       	sbci	r21, 0xFF	; 255
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{  
		    cost[note_loc[j]-1]=0;
		    k=k+1;
	        list[k]=note_loc[j];   // It is the list of nodees to explore 
	        tmploc[note_loc[j]-1]=1;  // each nodee which is added to the list is marked with 1
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    1668:	20 81       	ld	r18, Z
    166a:	31 81       	ldd	r19, Z+1	; 0x01
    166c:	21 15       	cp	r18, r1
    166e:	31 05       	cpc	r19, r1
    1670:	09 f1       	breq	.+66     	; 0x16b4 <costplan+0xd4>
		{  
		    cost[note_loc[j]-1]=0;
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	d9 01       	movw	r26, r18
    1678:	ae 51       	subi	r26, 0x1E	; 30
    167a:	bc 4f       	sbci	r27, 0xFC	; 252
    167c:	1d 92       	st	X+, r1
    167e:	1c 92       	st	X, r1
		    k=k+1;
    1680:	01 96       	adiw	r24, 0x01	; 1
	        list[k]=note_loc[j];   // It is the list of nodees to explore 
    1682:	20 81       	ld	r18, Z
    1684:	31 81       	ldd	r19, Z+1	; 0x01
    1686:	dc 01       	movw	r26, r24
    1688:	aa 0f       	add	r26, r26
    168a:	bb 1f       	adc	r27, r27
    168c:	01 e0       	ldi	r16, 0x01	; 1
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	0c 0f       	add	r16, r28
    1692:	1d 1f       	adc	r17, r29
    1694:	a0 0f       	add	r26, r16
    1696:	b1 1f       	adc	r27, r17
    1698:	2d 93       	st	X+, r18
    169a:	3c 93       	st	X, r19
	        tmploc[note_loc[j]-1]=1;  // each nodee which is added to the list is marked with 1
    169c:	d9 01       	movw	r26, r18
    169e:	11 97       	sbiw	r26, 0x01	; 1
    16a0:	aa 0f       	add	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	21 e6       	ldi	r18, 0x61	; 97
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	2c 0f       	add	r18, r28
    16aa:	3d 1f       	adc	r19, r29
    16ac:	a2 0f       	add	r26, r18
    16ae:	b3 1f       	adc	r27, r19
    16b0:	6d 93       	st	X+, r22
    16b2:	7c 93       	st	X, r23
    16b4:	32 96       	adiw	r30, 0x02	; 2
    {
	    cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    16b6:	e4 17       	cp	r30, r20
    16b8:	f5 07       	cpc	r31, r21
    16ba:	b1 f6       	brne	.-84     	; 0x1668 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
    16bc:	ae 2c       	mov	r10, r14
    16be:	9f 2c       	mov	r9, r15
    16c0:	81 2c       	mov	r8, r1
    16c2:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}  
		k=k-1;
    16c4:	68 94       	set
    16c6:	bb 24       	eor	r11, r11
    16c8:	b2 f8       	bld	r11, 2
    16ca:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
					cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    16cc:	cc 24       	eor	r12, r12
    16ce:	c3 94       	inc	r12
    16d0:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    16d2:	a9 81       	ldd	r26, Y+1	; 0x01
    16d4:	ba 81       	ldd	r27, Y+2	; 0x02
    16d6:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
    16d8:	99 23       	and	r25, r25
    16da:	6c f0       	brlt	.+26     	; 0x16f6 <costplan+0x116>
    16dc:	ea 2d       	mov	r30, r10
    16de:	f9 2d       	mov	r31, r9
    16e0:	28 2d       	mov	r18, r8
    16e2:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    16e4:	2f 5f       	subi	r18, 0xFF	; 255
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	42 81       	ldd	r20, Z+2	; 0x02
    16ea:	53 81       	ldd	r21, Z+3	; 0x03
    16ec:	41 93       	st	Z+, r20
    16ee:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
    16f0:	82 17       	cp	r24, r18
    16f2:	93 07       	cpc	r25, r19
    16f4:	bc f7       	brge	.-18     	; 0x16e4 <costplan+0x104>
		{
			list[i]=list[i+1];
		}  
		k=k-1;
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	fd 01       	movw	r30, r26
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	ec 5b       	subi	r30, 0xBC	; 188
    1708:	fb 4f       	sbci	r31, 0xFB	; 251
    170a:	2b 2d       	mov	r18, r11
    170c:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    170e:	aa 0f       	add	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	ad 01       	movw	r20, r26
    1714:	4c 51       	subi	r20, 0x1C	; 28
    1716:	5c 4f       	sbci	r21, 0xFC	; 252
    1718:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}  
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    171a:	61 91       	ld	r22, Z+
    171c:	71 91       	ld	r23, Z+
    171e:	61 15       	cp	r22, r1
    1720:	71 05       	cpc	r23, r1
    1722:	d1 f1       	breq	.+116    	; 0x1798 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1724:	d2 01       	movw	r26, r4
    1726:	0d 91       	ld	r16, X+
    1728:	1c 91       	ld	r17, X
    172a:	0f 5f       	subi	r16, 0xFF	; 255
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	ab 01       	movw	r20, r22
    1730:	41 50       	subi	r20, 0x01	; 1
    1732:	51 09       	sbc	r21, r1
    1734:	7a 01       	movw	r14, r20
    1736:	ee 0c       	add	r14, r14
    1738:	ff 1c       	adc	r15, r15
    173a:	d7 01       	movw	r26, r14
    173c:	ac 51       	subi	r26, 0x1C	; 28
    173e:	bc 4f       	sbci	r27, 0xFC	; 252
    1740:	ed 90       	ld	r14, X+
    1742:	fc 90       	ld	r15, X
    1744:	e0 16       	cp	r14, r16
    1746:	f1 06       	cpc	r15, r17
    1748:	44 f0       	brlt	.+16     	; 0x175a <costplan+0x17a>
					cost[node[s][i]-1]=(cost[s]+1);
    174a:	7a 01       	movw	r14, r20
    174c:	ee 0c       	add	r14, r14
    174e:	ff 1c       	adc	r15, r15
    1750:	d7 01       	movw	r26, r14
    1752:	ac 51       	subi	r26, 0x1C	; 28
    1754:	bc 4f       	sbci	r27, 0xFC	; 252
    1756:	0d 93       	st	X+, r16
    1758:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    175a:	8a 01       	movw	r16, r20
    175c:	00 0f       	add	r16, r16
    175e:	11 1f       	adc	r17, r17
    1760:	a1 e6       	ldi	r26, 0x61	; 97
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ac 0f       	add	r26, r28
    1766:	bd 1f       	adc	r27, r29
    1768:	0a 0f       	add	r16, r26
    176a:	1b 1f       	adc	r17, r27
    176c:	d8 01       	movw	r26, r16
    176e:	0d 91       	ld	r16, X+
    1770:	1c 91       	ld	r17, X
    1772:	11 97       	sbiw	r26, 0x01	; 1
    1774:	01 30       	cpi	r16, 0x01	; 1
    1776:	11 05       	cpc	r17, r1
    1778:	79 f0       	breq	.+30     	; 0x1798 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    177a:	cd 92       	st	X+, r12
    177c:	dc 92       	st	X, r13
					k=k+1;
    177e:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    1780:	ac 01       	movw	r20, r24
    1782:	44 0f       	add	r20, r20
    1784:	55 1f       	adc	r21, r21
    1786:	01 e0       	ldi	r16, 0x01	; 1
    1788:	10 e0       	ldi	r17, 0x00	; 0
    178a:	0c 0f       	add	r16, r28
    178c:	1d 1f       	adc	r17, r29
    178e:	40 0f       	add	r20, r16
    1790:	51 1f       	adc	r21, r17
    1792:	da 01       	movw	r26, r20
    1794:	6d 93       	st	X+, r22
    1796:	7c 93       	st	X, r23
    1798:	21 50       	subi	r18, 0x01	; 1
    179a:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
		{
			list[i]=list[i+1];
		}  
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    179c:	09 f0       	breq	.+2      	; 0x17a0 <costplan+0x1c0>
    179e:	bd cf       	rjmp	.-134    	; 0x171a <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 && k!=-1);
    17a0:	49 81       	ldd	r20, Y+1	; 0x01
    17a2:	5a 81       	ldd	r21, Y+2	; 0x02
    17a4:	4f 3f       	cpi	r20, 0xFF	; 255
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <costplan+0x1d4>
    17aa:	8f 3f       	cpi	r24, 0xFF	; 255
    17ac:	ef ef       	ldi	r30, 0xFF	; 255
    17ae:	9e 07       	cpc	r25, r30
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <costplan+0x1d4>
    17b2:	8f cf       	rjmp	.-226    	; 0x16d2 <costplan+0xf2>
}
    17b4:	c0 54       	subi	r28, 0x40	; 64
    17b6:	df 4f       	sbci	r29, 0xFF	; 255
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	bf 90       	pop	r11
    17d4:	af 90       	pop	r10
    17d6:	9f 90       	pop	r9
    17d8:	8f 90       	pop	r8
    17da:	7f 90       	pop	r7
    17dc:	6f 90       	pop	r6
    17de:	5f 90       	pop	r5
    17e0:	4f 90       	pop	r4
    17e2:	08 95       	ret

000017e4 <rotate>:

void rotate(int turnang)
{
	if(turnang<0)
    17e4:	99 23       	and	r25, r25
    17e6:	44 f4       	brge	.+16     	; 0x17f8 <rotate+0x14>
	{
		turnang=-turnang;
		right_degrees(turnang-25);
    17e8:	27 ee       	ldi	r18, 0xE7	; 231
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	a9 01       	movw	r20, r18
    17ee:	48 1b       	sub	r20, r24
    17f0:	59 0b       	sbc	r21, r25
    17f2:	ca 01       	movw	r24, r20
    17f4:	b5 de       	rcall	.-662    	; 0x1560 <right_degrees>
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <rotate+0x18>
	}
	else
	{
		left_degrees(turnang-25);
    17f8:	49 97       	sbiw	r24, 0x19	; 25
    17fa:	a4 de       	rcall	.-696    	; 0x1544 <left_degrees>
	}
	while(1)
	{
		Center_white_line = ADC_Conversion(2);
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	a0 dd       	rcall	.-1216   	; 0x1340 <ADC_Conversion>
    1800:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <Center_white_line>
		if(Center_white_line>0x78)
    1804:	89 37       	cpi	r24, 0x79	; 121
    1806:	d0 f3       	brcs	.-12     	; 0x17fc <rotate+0x18>
			break;
	}
}
    1808:	08 95       	ret

0000180a <move>:

int move(int n)
{
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    180a:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <botloc>
    180e:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <botloc+0x1>
    1812:	21 50       	subi	r18, 0x01	; 1
    1814:	31 09       	sbc	r19, r1
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	22 0f       	add	r18, r18
    181c:	33 1f       	adc	r19, r19
    181e:	82 0f       	add	r24, r18
    1820:	93 1f       	adc	r25, r19
    1822:	fc 01       	movw	r30, r24
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	eb 53       	subi	r30, 0x3B	; 59
    182a:	fa 4f       	sbci	r31, 0xFA	; 250
    182c:	c0 81       	ld	r28, Z
    182e:	d1 81       	ldd	r29, Z+1	; 0x01
    1830:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1834:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1838:	7e 01       	movw	r14, r28
    183a:	e8 1a       	sub	r14, r24
    183c:	f9 0a       	sbc	r15, r25
	if(fabs(turnang)>45)
    183e:	b7 01       	movw	r22, r14
    1840:	0f 2c       	mov	r0, r15
    1842:	00 0c       	add	r0, r0
    1844:	88 0b       	sbc	r24, r24
    1846:	99 0b       	sbc	r25, r25
    1848:	30 d3       	rcall	.+1632   	; 0x1eaa <__floatsisf>
    184a:	9f 77       	andi	r25, 0x7F	; 127
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	44 e3       	ldi	r20, 0x34	; 52
    1852:	52 e4       	ldi	r21, 0x42	; 66
    1854:	b6 d3       	rcall	.+1900   	; 0x1fc2 <__gesf2>
    1856:	18 16       	cp	r1, r24
    1858:	1c f4       	brge	.+6      	; 0x1860 <move+0x56>
	{
		forward_mm(70);
    185a:	86 e4       	ldi	r24, 0x46	; 70
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	b1 de       	rcall	.-670    	; 0x15c2 <forward_mm>
		rotate(turnang);
	}
	botang=angle[botloc-1][n];
    1860:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <__data_start+0x1>
    1864:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
	forward();
    1868:	fd dd       	rcall	.-1030   	; 0x1464 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    186a:	08 e2       	ldi	r16, 0x28	; 40
    186c:	11 e0       	ldi	r17, 0x01	; 1
    186e:	0f 2e       	mov	r0, r31
    1870:	fa e5       	ldi	r31, 0x5A	; 90
    1872:	df 2e       	mov	r13, r31
    1874:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1876:	ca e2       	ldi	r28, 0x2A	; 42
    1878:	d1 e0       	ldi	r29, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    187a:	0f 2e       	mov	r0, r31
    187c:	f2 e8       	ldi	r31, 0x82	; 130
    187e:	cf 2e       	mov	r12, r31
    1880:	f0 2d       	mov	r31, r0
    1882:	04 c0       	rjmp	.+8      	; 0x188c <move+0x82>
		ShaftCountRight=0;
		
		if(Front_IR_Sensor>0xf0)
		{
			rotate(180);
			botang=botang-180-turnang;
    1884:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1888:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	}
	botang=angle[botloc-1][n];
	forward();
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	58 dd       	rcall	.-1360   	; 0x1340 <ADC_Conversion>
    1890:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	54 dd       	rcall	.-1368   	; 0x1340 <ADC_Conversion>
    1898:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	50 dd       	rcall	.-1376   	; 0x1340 <ADC_Conversion>
    18a0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	4c dd       	rcall	.-1384   	; 0x1340 <ADC_Conversion>
    18a8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <__data_end>
		
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    18ac:	43 e0       	ldi	r20, 0x03	; 3
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	61 dd       	rcall	.-1342   	; 0x1376 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    18b4:	42 e0       	ldi	r20, 0x02	; 2
    18b6:	65 e0       	ldi	r22, 0x05	; 5
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	5d dd       	rcall	.-1350   	; 0x1376 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	69 e0       	ldi	r22, 0x09	; 9
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	59 dd       	rcall	.-1358   	; 0x1376 <print_sensor>
		
		ShaftCountRight=0;
    18c4:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ShaftCountRight>
    18c8:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ShaftCountRight+0x1>
    18cc:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <ShaftCountRight+0x2>
    18d0:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <ShaftCountRight+0x3>
		
		if(Front_IR_Sensor>0xf0)
    18d4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__data_end>
    18d8:	81 3f       	cpi	r24, 0xF1	; 241
    18da:	a0 f0       	brcs	.+40     	; 0x1904 <move+0xfa>
		{
			rotate(180);
    18dc:	84 eb       	ldi	r24, 0xB4	; 180
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	81 df       	rcall	.-254    	; 0x17e4 <rotate>
			botang=botang-180-turnang;
    18e2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    18e6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    18ea:	84 5b       	subi	r24, 0xB4	; 180
    18ec:	91 09       	sbc	r25, r1
    18ee:	8e 19       	sub	r24, r14
    18f0:	9f 09       	sbc	r25, r15
			if(botang<0)
    18f2:	0a f0       	brmi	.+2      	; 0x18f6 <move+0xec>
    18f4:	c7 cf       	rjmp	.-114    	; 0x1884 <move+0x7a>
				botang+=360;
    18f6:	88 59       	subi	r24, 0x98	; 152
    18f8:	9e 4f       	sbci	r25, 0xFE	; 254
    18fa:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    18fe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1902:	c4 cf       	rjmp	.-120    	; 0x188c <move+0x82>
			suc=0;
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
    1904:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <Center_white_line>
    1908:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <thresh>
    190c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <thresh+0x1>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1910:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <Left_white_line>
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	28 17       	cp	r18, r24
    1918:	39 07       	cpc	r19, r25
    191a:	7c f4       	brge	.+30     	; 0x193a <move+0x130>
		{
			//flag=1;
			forward();
    191c:	a3 dd       	rcall	.-1210   	; 0x1464 <forward>
			lcd_print(2,1,1,3);
    191e:	23 e0       	ldi	r18, 0x03	; 3
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_print>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1932:	f8 01       	movw	r30, r16
    1934:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1936:	d8 82       	st	Y, r13
    1938:	a9 cf       	rjmp	.-174    	; 0x188c <move+0x82>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,90);
		}
		else if(Right_white_line>thresh)
    193a:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <Right_white_line>
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	24 17       	cp	r18, r20
    1942:	35 07       	cpc	r19, r21
    1944:	7c f4       	brge	.+30     	; 0x1964 <move+0x15a>
		{
			//flag=1;
			forward();
    1946:	8e dd       	rcall	.-1252   	; 0x1464 <forward>
			lcd_print(2,1,2,3);
    1948:	23 e0       	ldi	r18, 0x03	; 3
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	42 e0       	ldi	r20, 0x02	; 2
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_print>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    195c:	f8 01       	movw	r30, r16
    195e:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1960:	18 82       	st	Y, r1
    1962:	94 cf       	rjmp	.-216    	; 0x188c <move+0x82>
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(90,0);
		}
		else if(Center_white_line>0x78)
    1964:	69 37       	cpi	r22, 0x79	; 121
    1966:	70 f0       	brcs	.+28     	; 0x1984 <move+0x17a>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1968:	f8 01       	movw	r30, r16
    196a:	c0 82       	st	Z, r12
	OCR5BL = (unsigned char)right_motor;
    196c:	c8 82       	st	Y, r12
			velocity(90,0);
		}
		else if(Center_white_line>0x78)
		{
			velocity(130,130);
			lcd_print(2,1,0,3);
    196e:	23 e0       	ldi	r18, 0x03	; 3
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_print>
    1982:	84 cf       	rjmp	.-248    	; 0x188c <move+0x82>
			botang=botang-180-turnang;
			if(botang<0)
				botang+=360;
			suc=0;
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
    1984:	70 e0       	ldi	r23, 0x00	; 0
		{
			velocity(130,130);
			lcd_print(2,1,0,3);
			//flag=1;
		}
		else if(Center_white_line<thresh && Left_white_line<thresh && Right_white_line<thresh)
    1986:	62 17       	cp	r22, r18
    1988:	73 07       	cpc	r23, r19
    198a:	0c f0       	brlt	.+2      	; 0x198e <move+0x184>
    198c:	7f cf       	rjmp	.-258    	; 0x188c <move+0x82>
    198e:	82 17       	cp	r24, r18
    1990:	93 07       	cpc	r25, r19
    1992:	0c f0       	brlt	.+2      	; 0x1996 <move+0x18c>
    1994:	7b cf       	rjmp	.-266    	; 0x188c <move+0x82>
    1996:	42 17       	cp	r20, r18
    1998:	53 07       	cpc	r21, r19
    199a:	0c f0       	brlt	.+2      	; 0x199e <move+0x194>
    199c:	77 cf       	rjmp	.-274    	; 0x188c <move+0x82>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    199e:	f8 01       	movw	r30, r16
    19a0:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    19a2:	d8 82       	st	Y, r13
    19a4:	73 cf       	rjmp	.-282    	; 0x188c <move+0x82>

000019a6 <BotEndLocation>:
	}
	return suc;
}
int LastLocation;
int BotEndLocation(int loc)
{
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	9c 01       	movw	r18, r24
	int i;
	if(cost[loc-1]==0)
    19ac:	bc 01       	movw	r22, r24
    19ae:	61 50       	subi	r22, 0x01	; 1
    19b0:	71 09       	sbc	r23, r1
    19b2:	db 01       	movw	r26, r22
    19b4:	aa 0f       	add	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	ac 51       	subi	r26, 0x1C	; 28
    19ba:	bc 4f       	sbci	r27, 0xFC	; 252
    19bc:	8d 91       	ld	r24, X+
    19be:	9c 91       	ld	r25, X
    19c0:	89 2b       	or	r24, r25
    19c2:	39 f4       	brne	.+14     	; 0x19d2 <BotEndLocation+0x2c>
	{
		LastLocation=loc;
    19c4:	30 93 46 07 	sts	0x0746, r19	; 0x800746 <LastLocation+0x1>
    19c8:	20 93 45 07 	sts	0x0745, r18	; 0x800745 <LastLocation>
		return LastLocation;
    19cc:	82 2f       	mov	r24, r18
    19ce:	93 2f       	mov	r25, r19
    19d0:	38 c0       	rjmp	.+112    	; 0x1a42 <BotEndLocation+0x9c>
	}
	int mCost=cost[node[loc-1][0]];
    19d2:	db 01       	movw	r26, r22
    19d4:	aa 0f       	add	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	aa 0f       	add	r26, r26
    19da:	bb 1f       	adc	r27, r27
    19dc:	aa 0f       	add	r26, r26
    19de:	bb 1f       	adc	r27, r27
    19e0:	fd 01       	movw	r30, r26
    19e2:	ec 5b       	subi	r30, 0xBC	; 188
    19e4:	fb 4f       	sbci	r31, 0xFB	; 251
    19e6:	01 90       	ld	r0, Z+
    19e8:	f0 81       	ld	r31, Z
    19ea:	e0 2d       	mov	r30, r0
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ec 51       	subi	r30, 0x1C	; 28
    19f2:	fc 4f       	sbci	r31, 0xFC	; 252
    19f4:	c0 81       	ld	r28, Z
    19f6:	d1 81       	ldd	r29, Z+1	; 0x01
    19f8:	aa 5b       	subi	r26, 0xBA	; 186
    19fa:	bb 4f       	sbci	r27, 0xFB	; 251
	int pos=0;
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
	for(i=1;i<4;i++)
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(cost[node[loc-1][i]]<mCost)
    1a04:	ed 91       	ld	r30, X+
    1a06:	fd 91       	ld	r31, X+
    1a08:	ee 0f       	add	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	ec 51       	subi	r30, 0x1C	; 28
    1a0e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a10:	40 81       	ld	r20, Z
    1a12:	51 81       	ldd	r21, Z+1	; 0x01
    1a14:	4c 17       	cp	r20, r28
    1a16:	5d 07       	cpc	r21, r29
    1a18:	14 f4       	brge	.+4      	; 0x1a1e <BotEndLocation+0x78>
    1a1a:	9c 01       	movw	r18, r24
		{
			mCost=cost[node[loc-1][i]];
    1a1c:	ea 01       	movw	r28, r20
		LastLocation=loc;
		return LastLocation;
	}
	int mCost=cost[node[loc-1][0]];
	int pos=0;
	for(i=1;i<4;i++)
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	91 05       	cpc	r25, r1
    1a24:	79 f7       	brne	.-34     	; 0x1a04 <BotEndLocation+0x5e>
		{
			mCost=cost[node[loc-1][i]];
			pos=i;
		}
	}
	return BotEndLocation(node[loc-1][pos]);
    1a26:	fb 01       	movw	r30, r22
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	ee 0f       	add	r30, r30
    1a2e:	ff 1f       	adc	r31, r31
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ec 5b       	subi	r30, 0xBC	; 188
    1a3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	b2 df       	rcall	.-156    	; 0x19a6 <BotEndLocation>
}
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <main>:

int main()
{
    1a48:	bf 92       	push	r11
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
	declare_constants();
    1a5a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <declare_constants>
	init_devices();
    1a5e:	8e dd       	rcall	.-1252   	; 0x157c <init_devices>
	while(status.notesReceived);
    1a60:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <status>
    1a64:	80 fd       	sbrc	r24, 0
    1a66:	fc cf       	rjmp	.-8      	; 0x1a60 <main+0x18>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a68:	c0 ec       	ldi	r28, 0xC0	; 192
    1a6a:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
    1a6c:	06 ec       	ldi	r16, 0xC6	; 198
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	0f 2e       	mov	r0, r31
    1a72:	f6 e0       	ldi	r31, 0x06	; 6
    1a74:	ff 2e       	mov	r15, r31
    1a76:	f0 2d       	mov	r31, r0
    1a78:	0f 2e       	mov	r0, r31
    1a7a:	f7 e0       	ldi	r31, 0x07	; 7
    1a7c:	df 2e       	mov	r13, r31
    1a7e:	f0 2d       	mov	r31, r0
    1a80:	0f 2e       	mov	r0, r31
    1a82:	f9 e0       	ldi	r31, 0x09	; 9
    1a84:	ef 2e       	mov	r14, r31
    1a86:	f0 2d       	mov	r31, r0
    1a88:	0f 2e       	mov	r0, r31
    1a8a:	f3 e0       	ldi	r31, 0x03	; 3
    1a8c:	bf 2e       	mov	r11, r31
    1a8e:	f0 2d       	mov	r31, r0
    1a90:	68 94       	set
    1a92:	cc 24       	eor	r12, r12
    1a94:	c3 f8       	bld	r12, 3
    1a96:	3d c1       	rjmp	.+634    	; 0x1d12 <main+0x2ca>
	SendNotesToSlave();
	#endif
	
	while(notes[noteToStrike]!=0)
	{
		if(taskCount==taskitr)	// If the bot has traversed all Tasks in the list
    1a98:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <taskCount>
    1a9c:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <taskitr>
    1aa0:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <taskitr+0x1>
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	28 17       	cp	r18, r24
    1aa8:	39 07       	cpc	r19, r25
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <main+0x66>
    1aac:	9a c0       	rjmp	.+308    	; 0x1be2 <main+0x19a>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
    1aae:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <noteToProcess>
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	e0 53       	subi	r30, 0x30	; 48
    1ab6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ab8:	80 81       	ld	r24, Z
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9c 01       	movw	r18, r24
    1ac0:	22 0f       	add	r18, r18
    1ac2:	33 1f       	adc	r19, r19
    1ac4:	82 0f       	add	r24, r18
    1ac6:	93 1f       	adc	r25, r19
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	84 5f       	subi	r24, 0xF4	; 244
    1ad2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ad4:	85 dd       	rcall	.-1270   	; 0x15e0 <costplan>
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
    1ad6:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1ada:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ee 51       	subi	r30, 0x1E	; 30
    1ae4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <otherBotTaskCost>
    1aee:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	ec 51       	subi	r30, 0x1C	; 28
    1afa:	fc 4f       	sbci	r31, 0xFC	; 252
    1afc:	20 81       	ld	r18, Z
    1afe:	31 81       	ldd	r19, Z+1	; 0x01
    1b00:	24 0f       	add	r18, r20
    1b02:	31 1d       	adc	r19, r1
    1b04:	28 17       	cp	r18, r24
    1b06:	39 07       	cpc	r19, r25
    1b08:	54 f5       	brge	.+84     	; 0x1b5e <main+0x116>
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
    1b0a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b0e:	88 81       	ld	r24, Y
    1b10:	85 ff       	sbrs	r24, 5
    1b12:	fd cf       	rjmp	.-6      	; 0x1b0e <main+0xc6>
	UDR0 = data;
    1b14:	f8 01       	movw	r30, r16
    1b16:	b0 82       	st	Z, r11

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    1b18:	29 2f       	mov	r18, r25
    1b1a:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b1c:	88 81       	ld	r24, Y
    1b1e:	85 ff       	sbrs	r24, 5
    1b20:	fd cf       	rjmp	.-6      	; 0x1b1c <main+0xd4>
	UDR0 = data;
    1b22:	f8 01       	movw	r30, r16
    1b24:	20 83       	st	Z, r18
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    1b26:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotLastTaskIndex>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
    1b2a:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	ec 51       	subi	r30, 0x1C	; 28
    1b36:	fc 4f       	sbci	r31, 0xFC	; 252
    1b38:	90 81       	ld	r25, Z

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b3a:	88 81       	ld	r24, Y
    1b3c:	85 ff       	sbrs	r24, 5
    1b3e:	fd cf       	rjmp	.-6      	; 0x1b3a <main+0xf2>
	UDR0 = data;
    1b40:	f8 01       	movw	r30, r16
    1b42:	c0 82       	st	Z, r12

// To Send the Cost of the task for the other robot.
void inline SendTaskCost(char taskcost)
{
	SendByteToSlave(ADD_COST);
	SendByteToSlave(DATA(taskcost));
    1b44:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b46:	88 81       	ld	r24, Y
    1b48:	85 ff       	sbrs	r24, 5
    1b4a:	fd cf       	rjmp	.-6      	; 0x1b46 <main+0xfe>
	UDR0 = data;
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	90 83       	st	Z, r25
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
				otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);	// Update the other bot last index
    1b50:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	27 df       	rcall	.-434    	; 0x19a6 <BotEndLocation>
    1b58:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <otherBotLastTaskIndex>
    1b5c:	2f c0       	rjmp	.+94     	; 0x1bbc <main+0x174>
			}
			else
			{
				tasks[taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
    1b5e:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <taskCount>
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>
    1b68:	e6 54       	subi	r30, 0x46	; 70
    1b6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b6c:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
    1b6e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <taskCost>
    1b72:	89 0f       	add	r24, r25
    1b74:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <taskCost>
				taskCount++;
    1b78:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <taskCount>
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <taskCount>
				SendLastIndex((int)noteToProcess);
    1b82:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b86:	88 81       	ld	r24, Y
    1b88:	85 ff       	sbrs	r24, 5
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <main+0x13e>
	UDR0 = data;
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	e0 82       	st	Z, r14

// Indform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1b90:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b92:	88 81       	ld	r24, Y
    1b94:	85 ff       	sbrs	r24, 5
    1b96:	fd cf       	rjmp	.-6      	; 0x1b92 <main+0x14a>
	UDR0 = data;
    1b98:	f8 01       	movw	r30, r16
    1b9a:	90 83       	st	Z, r25
			{
				tasks[taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
    1b9c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    1ba0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1ba4:	00 df       	rcall	.-512    	; 0x19a6 <BotEndLocation>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1ba6:	98 81       	ld	r25, Y
    1ba8:	95 ff       	sbrs	r25, 5
    1baa:	fd cf       	rjmp	.-6      	; 0x1ba6 <main+0x15e>
	UDR0 = data;
    1bac:	f8 01       	movw	r30, r16
    1bae:	e0 82       	st	Z, r14

// Indform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1bb0:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1bb2:	98 81       	ld	r25, Y
    1bb4:	95 ff       	sbrs	r25, 5
    1bb6:	fd cf       	rjmp	.-6      	; 0x1bb2 <main+0x16a>
	UDR0 = data;
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
			}
			NoteProcessed(noteToProcess);
    1bbc:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1bc0:	88 81       	ld	r24, Y
    1bc2:	85 ff       	sbrs	r24, 5
    1bc4:	fd cf       	rjmp	.-6      	; 0x1bc0 <main+0x178>
	UDR0 = data;
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	d0 82       	st	Z, r13

//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
    1bca:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1bcc:	88 81       	ld	r24, Y
    1bce:	85 ff       	sbrs	r24, 5
    1bd0:	fd cf       	rjmp	.-6      	; 0x1bcc <main+0x184>
	UDR0 = data;
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	90 83       	st	Z, r25
//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
	noteToProcess++;
    1bd6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <noteToProcess>
    1be0:	98 c0       	rjmp	.+304    	; 0x1d12 <main+0x2ca>
			NoteProcessed(noteToProcess);
		}
		else
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    1be2:	fc 01       	movw	r30, r24
    1be4:	e6 54       	subi	r30, 0x46	; 70
    1be6:	fc 4f       	sbci	r31, 0xFC	; 252
    1be8:	e0 81       	ld	r30, Z
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	e0 53       	subi	r30, 0x30	; 48
    1bee:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf0:	80 81       	ld	r24, Z
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9c 01       	movw	r18, r24
    1bf8:	22 0f       	add	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	82 0f       	add	r24, r18
    1bfe:	93 1f       	adc	r25, r19
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	84 5f       	subi	r24, 0xF4	; 244
    1c0a:	9d 4f       	sbci	r25, 0xFD	; 253
    1c0c:	e9 dc       	rcall	.-1582   	; 0x15e0 <costplan>
			if(cost[botloc-1]==0)
    1c0e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    1c12:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1c16:	01 97       	sbiw	r24, 0x01	; 1
				taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
    1c18:	fc 01       	movw	r30, r24
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	ec 51       	subi	r30, 0x1C	; 28
    1c20:	fc 4f       	sbci	r31, 0xFC	; 252
    1c22:	20 81       	ld	r18, Z
    1c24:	31 81       	ldd	r19, Z+1	; 0x01
    1c26:	23 2b       	or	r18, r19
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <main+0x1e4>
    1c2a:	4f c0       	rjmp	.+158    	; 0x1cca <main+0x282>
			{
				minCost=cost[node[botloc-1][0]];
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	fc 01       	movw	r30, r24
    1c3a:	ec 5b       	subi	r30, 0xBC	; 188
    1c3c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c3e:	20 81       	ld	r18, Z
    1c40:	31 81       	ldd	r19, Z+1	; 0x01
    1c42:	f9 01       	movw	r30, r18
    1c44:	ee 0f       	add	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	ec 51       	subi	r30, 0x1C	; 28
    1c4a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4c:	a0 81       	ld	r26, Z
    1c4e:	b1 81       	ldd	r27, Z+1	; 0x01
				nxtNode=node[botloc-1][0];
				pos=0;
    1c50:	d0 e0       	ldi	r29, 0x00	; 0
    1c52:	c0 e0       	ldi	r28, 0x00	; 0
				for(i=1;i<4;i++)
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	fa 01       	movw	r30, r20
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	e8 0f       	add	r30, r24
    1c60:	f9 1f       	adc	r31, r25
    1c62:	ec 5b       	subi	r30, 0xBC	; 188
    1c64:	fb 4f       	sbci	r31, 0xFB	; 251
				{
					if(node[botloc-1][i]!=0)
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	61 15       	cp	r22, r1
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	79 f0       	breq	.+30     	; 0x1c8e <main+0x246>
						if(cost[node[botloc-1][i]]<minCost)
    1c70:	fb 01       	movw	r30, r22
    1c72:	ee 0f       	add	r30, r30
    1c74:	ff 1f       	adc	r31, r31
    1c76:	ec 51       	subi	r30, 0x1C	; 28
    1c78:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	f0 81       	ld	r31, Z
    1c7e:	e0 2d       	mov	r30, r0
    1c80:	ea 17       	cp	r30, r26
    1c82:	fb 07       	cpc	r31, r27
    1c84:	24 f4       	brge	.+8      	; 0x1c8e <main+0x246>
    1c86:	d4 2f       	mov	r29, r20
    1c88:	c5 2f       	mov	r28, r21
						{
							minCost=cost[node[botloc-1][i]];
							nxtNode=node[botloc-1][i];
    1c8a:	9b 01       	movw	r18, r22
				for(i=1;i<4;i++)
				{
					if(node[botloc-1][i]!=0)
						if(cost[node[botloc-1][i]]<minCost)
						{
							minCost=cost[node[botloc-1][i]];
    1c8c:	df 01       	movw	r26, r30
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
				for(i=1;i<4;i++)
    1c8e:	4f 5f       	subi	r20, 0xFF	; 255
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255
    1c92:	44 30       	cpi	r20, 0x04	; 4
    1c94:	51 05       	cpc	r21, r1
    1c96:	01 f7       	brne	.-64     	; 0x1c58 <main+0x210>
							minCost=cost[node[botloc-1][i]];
							nxtNode=node[botloc-1][i];
							pos=i;
						}
				}
				while(otherBotMovingTo==nxtNode);
    1c98:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <otherBotMovingTo>
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	24 17       	cp	r18, r20
    1ca0:	35 07       	cpc	r19, r21
    1ca2:	d1 f3       	breq	.-12     	; 0x1c98 <main+0x250>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1ca4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	85 ff       	sbrs	r24, 5
    1cac:	fd cf       	rjmp	.-6      	; 0x1ca8 <main+0x260>
	UDR0 = data;
    1cae:	85 e0       	ldi	r24, 0x05	; 5
    1cb0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    1cb4:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1cb6:	e0 ec       	ldi	r30, 0xC0	; 192
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	85 ff       	sbrs	r24, 5
    1cbe:	fd cf       	rjmp	.-6      	; 0x1cba <main+0x272>
	UDR0 = data;
    1cc0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
						}
				}
				while(otherBotMovingTo==nxtNode);
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
    1cc4:	8d 2f       	mov	r24, r29
    1cc6:	9c 2f       	mov	r25, r28
    1cc8:	a0 dd       	rcall	.-1216   	; 0x180a <move>
					SendNodeReached(botloc);
				}
			}
			if(cost[botloc-1]==0)
			{
				while(noteToStrike!=tasks[taskitr]);
    1cca:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <taskitr>
    1cce:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <taskitr+0x1>
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	e6 54       	subi	r30, 0x46	; 70
    1cd6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cd8:	90 81       	ld	r25, Z
    1cda:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1cde:	98 13       	cpse	r25, r24
    1ce0:	fb cf       	rjmp	.-10     	; 0x1cd8 <main+0x290>
				// Servo Motor Control
				// Strike the Note
				taskitr++;
    1ce2:	2f 5f       	subi	r18, 0xFF	; 255
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <taskitr+0x1>
    1cea:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <taskitr>
				SendNoteStruck(noteToStrike);
    1cee:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <noteToStrike>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1cf2:	88 81       	ld	r24, Y
    1cf4:	85 ff       	sbrs	r24, 5
    1cf6:	fd cf       	rjmp	.-6      	; 0x1cf2 <main+0x2aa>
	UDR0 = data;
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	f0 82       	st	Z, r15

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    1cfc:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1cfe:	88 81       	ld	r24, Y
    1d00:	85 ff       	sbrs	r24, 5
    1d02:	fd cf       	rjmp	.-6      	; 0x1cfe <main+0x2b6>
	UDR0 = data;
    1d04:	f8 01       	movw	r30, r16
    1d06:	90 83       	st	Z, r25
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    1d08:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <noteToStrike>
	//send the notes to slave if this is the master
	#ifdef MASTER
	SendNotesToSlave();
	#endif
	
	while(notes[noteToStrike]!=0)
    1d12:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <noteToStrike>
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	e0 53       	subi	r30, 0x30	; 48
    1d1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1c:	80 81       	ld	r24, Z
    1d1e:	81 11       	cpse	r24, r1
    1d20:	bb ce       	rjmp	.-650    	; 0x1a98 <main+0x50>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d22:	e0 ec       	ldi	r30, 0xC0	; 192
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	85 ff       	sbrs	r24, 5
    1d2a:	fd cf       	rjmp	.-6      	; 0x1d26 <main+0x2de>
	UDR0 = data;
    1d2c:	8a e0       	ldi	r24, 0x0A	; 10
    1d2e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d32:	e0 ec       	ldi	r30, 0xC0	; 192
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	85 ff       	sbrs	r24, 5
    1d3a:	fd cf       	rjmp	.-6      	; 0x1d36 <main+0x2ee>
	UDR0 = data;
    1d3c:	80 e8       	ldi	r24, 0x80	; 128
    1d3e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			}
		}
		
	}
	BotEnded();
	while(botEnd!=1);
    1d42:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <botEnd>
    1d46:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <botEnd+0x1>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	e9 f7       	brne	.-6      	; 0x1d4a <main+0x302>
	buzzer_on();
    1d50:	9b da       	rcall	.-2762   	; 0x1288 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d52:	ff e7       	ldi	r31, 0x7F	; 127
    1d54:	2f e4       	ldi	r18, 0x4F	; 79
    1d56:	82 e1       	ldi	r24, 0x12	; 18
    1d58:	f1 50       	subi	r31, 0x01	; 1
    1d5a:	20 40       	sbci	r18, 0x00	; 0
    1d5c:	80 40       	sbci	r24, 0x00	; 0
    1d5e:	e1 f7       	brne	.-8      	; 0x1d58 <main+0x310>
    1d60:	00 c0       	rjmp	.+0      	; 0x1d62 <main+0x31a>
    1d62:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    1d64:	95 da       	rcall	.-2774   	; 0x1290 <buzzer_off>
	return 0;
}
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	df 90       	pop	r13
    1d78:	cf 90       	pop	r12
    1d7a:	bf 90       	pop	r11
    1d7c:	08 95       	ret

00001d7e <__divsf3>:
    1d7e:	0c d0       	rcall	.+24     	; 0x1d98 <__divsf3x>
    1d80:	e6 c0       	rjmp	.+460    	; 0x1f4e <__fp_round>
    1d82:	de d0       	rcall	.+444    	; 0x1f40 <__fp_pscB>
    1d84:	40 f0       	brcs	.+16     	; 0x1d96 <__divsf3+0x18>
    1d86:	d5 d0       	rcall	.+426    	; 0x1f32 <__fp_pscA>
    1d88:	30 f0       	brcs	.+12     	; 0x1d96 <__divsf3+0x18>
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <__divsf3+0x16>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	19 f0       	breq	.+6      	; 0x1d96 <__divsf3+0x18>
    1d90:	c7 c0       	rjmp	.+398    	; 0x1f20 <__fp_inf>
    1d92:	51 11       	cpse	r21, r1
    1d94:	10 c1       	rjmp	.+544    	; 0x1fb6 <__fp_szero>
    1d96:	ca c0       	rjmp	.+404    	; 0x1f2c <__fp_nan>

00001d98 <__divsf3x>:
    1d98:	eb d0       	rcall	.+470    	; 0x1f70 <__fp_split3>
    1d9a:	98 f3       	brcs	.-26     	; 0x1d82 <__divsf3+0x4>

00001d9c <__divsf3_pse>:
    1d9c:	99 23       	and	r25, r25
    1d9e:	c9 f3       	breq	.-14     	; 0x1d92 <__divsf3+0x14>
    1da0:	55 23       	and	r21, r21
    1da2:	b1 f3       	breq	.-20     	; 0x1d90 <__divsf3+0x12>
    1da4:	95 1b       	sub	r25, r21
    1da6:	55 0b       	sbc	r21, r21
    1da8:	bb 27       	eor	r27, r27
    1daa:	aa 27       	eor	r26, r26
    1dac:	62 17       	cp	r22, r18
    1dae:	73 07       	cpc	r23, r19
    1db0:	84 07       	cpc	r24, r20
    1db2:	38 f0       	brcs	.+14     	; 0x1dc2 <__divsf3_pse+0x26>
    1db4:	9f 5f       	subi	r25, 0xFF	; 255
    1db6:	5f 4f       	sbci	r21, 0xFF	; 255
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	44 1f       	adc	r20, r20
    1dbe:	aa 1f       	adc	r26, r26
    1dc0:	a9 f3       	breq	.-22     	; 0x1dac <__divsf3_pse+0x10>
    1dc2:	33 d0       	rcall	.+102    	; 0x1e2a <__divsf3_pse+0x8e>
    1dc4:	0e 2e       	mov	r0, r30
    1dc6:	3a f0       	brmi	.+14     	; 0x1dd6 <__divsf3_pse+0x3a>
    1dc8:	e0 e8       	ldi	r30, 0x80	; 128
    1dca:	30 d0       	rcall	.+96     	; 0x1e2c <__divsf3_pse+0x90>
    1dcc:	91 50       	subi	r25, 0x01	; 1
    1dce:	50 40       	sbci	r21, 0x00	; 0
    1dd0:	e6 95       	lsr	r30
    1dd2:	00 1c       	adc	r0, r0
    1dd4:	ca f7       	brpl	.-14     	; 0x1dc8 <__divsf3_pse+0x2c>
    1dd6:	29 d0       	rcall	.+82     	; 0x1e2a <__divsf3_pse+0x8e>
    1dd8:	fe 2f       	mov	r31, r30
    1dda:	27 d0       	rcall	.+78     	; 0x1e2a <__divsf3_pse+0x8e>
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	bb 1f       	adc	r27, r27
    1de4:	26 17       	cp	r18, r22
    1de6:	37 07       	cpc	r19, r23
    1de8:	48 07       	cpc	r20, r24
    1dea:	ab 07       	cpc	r26, r27
    1dec:	b0 e8       	ldi	r27, 0x80	; 128
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <__divsf3_pse+0x56>
    1df0:	bb 0b       	sbc	r27, r27
    1df2:	80 2d       	mov	r24, r0
    1df4:	bf 01       	movw	r22, r30
    1df6:	ff 27       	eor	r31, r31
    1df8:	93 58       	subi	r25, 0x83	; 131
    1dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfc:	2a f0       	brmi	.+10     	; 0x1e08 <__divsf3_pse+0x6c>
    1dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1e00:	51 05       	cpc	r21, r1
    1e02:	68 f0       	brcs	.+26     	; 0x1e1e <__divsf3_pse+0x82>
    1e04:	8d c0       	rjmp	.+282    	; 0x1f20 <__fp_inf>
    1e06:	d7 c0       	rjmp	.+430    	; 0x1fb6 <__fp_szero>
    1e08:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0a:	ec f3       	brlt	.-6      	; 0x1e06 <__divsf3_pse+0x6a>
    1e0c:	98 3e       	cpi	r25, 0xE8	; 232
    1e0e:	dc f3       	brlt	.-10     	; 0x1e06 <__divsf3_pse+0x6a>
    1e10:	86 95       	lsr	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	b7 95       	ror	r27
    1e18:	f7 95       	ror	r31
    1e1a:	9f 5f       	subi	r25, 0xFF	; 255
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__divsf3_pse+0x74>
    1e1e:	88 0f       	add	r24, r24
    1e20:	91 1d       	adc	r25, r1
    1e22:	96 95       	lsr	r25
    1e24:	87 95       	ror	r24
    1e26:	97 f9       	bld	r25, 7
    1e28:	08 95       	ret
    1e2a:	e1 e0       	ldi	r30, 0x01	; 1
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	bb 1f       	adc	r27, r27
    1e34:	62 17       	cp	r22, r18
    1e36:	73 07       	cpc	r23, r19
    1e38:	84 07       	cpc	r24, r20
    1e3a:	ba 07       	cpc	r27, r26
    1e3c:	20 f0       	brcs	.+8      	; 0x1e46 <__divsf3_pse+0xaa>
    1e3e:	62 1b       	sub	r22, r18
    1e40:	73 0b       	sbc	r23, r19
    1e42:	84 0b       	sbc	r24, r20
    1e44:	ba 0b       	sbc	r27, r26
    1e46:	ee 1f       	adc	r30, r30
    1e48:	88 f7       	brcc	.-30     	; 0x1e2c <__divsf3_pse+0x90>
    1e4a:	e0 95       	com	r30
    1e4c:	08 95       	ret

00001e4e <__fixunssfsi>:
    1e4e:	98 d0       	rcall	.+304    	; 0x1f80 <__fp_splitA>
    1e50:	88 f0       	brcs	.+34     	; 0x1e74 <__fixunssfsi+0x26>
    1e52:	9f 57       	subi	r25, 0x7F	; 127
    1e54:	90 f0       	brcs	.+36     	; 0x1e7a <__fixunssfsi+0x2c>
    1e56:	b9 2f       	mov	r27, r25
    1e58:	99 27       	eor	r25, r25
    1e5a:	b7 51       	subi	r27, 0x17	; 23
    1e5c:	a0 f0       	brcs	.+40     	; 0x1e86 <__fixunssfsi+0x38>
    1e5e:	d1 f0       	breq	.+52     	; 0x1e94 <__fixunssfsi+0x46>
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	1a f0       	brmi	.+6      	; 0x1e70 <__fixunssfsi+0x22>
    1e6a:	ba 95       	dec	r27
    1e6c:	c9 f7       	brne	.-14     	; 0x1e60 <__fixunssfsi+0x12>
    1e6e:	12 c0       	rjmp	.+36     	; 0x1e94 <__fixunssfsi+0x46>
    1e70:	b1 30       	cpi	r27, 0x01	; 1
    1e72:	81 f0       	breq	.+32     	; 0x1e94 <__fixunssfsi+0x46>
    1e74:	9f d0       	rcall	.+318    	; 0x1fb4 <__fp_zero>
    1e76:	b1 e0       	ldi	r27, 0x01	; 1
    1e78:	08 95       	ret
    1e7a:	9c c0       	rjmp	.+312    	; 0x1fb4 <__fp_zero>
    1e7c:	67 2f       	mov	r22, r23
    1e7e:	78 2f       	mov	r23, r24
    1e80:	88 27       	eor	r24, r24
    1e82:	b8 5f       	subi	r27, 0xF8	; 248
    1e84:	39 f0       	breq	.+14     	; 0x1e94 <__fixunssfsi+0x46>
    1e86:	b9 3f       	cpi	r27, 0xF9	; 249
    1e88:	cc f3       	brlt	.-14     	; 0x1e7c <__fixunssfsi+0x2e>
    1e8a:	86 95       	lsr	r24
    1e8c:	77 95       	ror	r23
    1e8e:	67 95       	ror	r22
    1e90:	b3 95       	inc	r27
    1e92:	d9 f7       	brne	.-10     	; 0x1e8a <__fixunssfsi+0x3c>
    1e94:	3e f4       	brtc	.+14     	; 0x1ea4 <__fixunssfsi+0x56>
    1e96:	90 95       	com	r25
    1e98:	80 95       	com	r24
    1e9a:	70 95       	com	r23
    1e9c:	61 95       	neg	r22
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	08 95       	ret

00001ea6 <__floatunsisf>:
    1ea6:	e8 94       	clt
    1ea8:	09 c0       	rjmp	.+18     	; 0x1ebc <__floatsisf+0x12>

00001eaa <__floatsisf>:
    1eaa:	97 fb       	bst	r25, 7
    1eac:	3e f4       	brtc	.+14     	; 0x1ebc <__floatsisf+0x12>
    1eae:	90 95       	com	r25
    1eb0:	80 95       	com	r24
    1eb2:	70 95       	com	r23
    1eb4:	61 95       	neg	r22
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	99 23       	and	r25, r25
    1ebe:	a9 f0       	breq	.+42     	; 0x1eea <__floatsisf+0x40>
    1ec0:	f9 2f       	mov	r31, r25
    1ec2:	96 e9       	ldi	r25, 0x96	; 150
    1ec4:	bb 27       	eor	r27, r27
    1ec6:	93 95       	inc	r25
    1ec8:	f6 95       	lsr	r31
    1eca:	87 95       	ror	r24
    1ecc:	77 95       	ror	r23
    1ece:	67 95       	ror	r22
    1ed0:	b7 95       	ror	r27
    1ed2:	f1 11       	cpse	r31, r1
    1ed4:	f8 cf       	rjmp	.-16     	; 0x1ec6 <__floatsisf+0x1c>
    1ed6:	fa f4       	brpl	.+62     	; 0x1f16 <__floatsisf+0x6c>
    1ed8:	bb 0f       	add	r27, r27
    1eda:	11 f4       	brne	.+4      	; 0x1ee0 <__floatsisf+0x36>
    1edc:	60 ff       	sbrs	r22, 0
    1ede:	1b c0       	rjmp	.+54     	; 0x1f16 <__floatsisf+0x6c>
    1ee0:	6f 5f       	subi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	16 c0       	rjmp	.+44     	; 0x1f16 <__floatsisf+0x6c>
    1eea:	88 23       	and	r24, r24
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <__floatsisf+0x48>
    1eee:	96 e9       	ldi	r25, 0x96	; 150
    1ef0:	11 c0       	rjmp	.+34     	; 0x1f14 <__floatsisf+0x6a>
    1ef2:	77 23       	and	r23, r23
    1ef4:	21 f0       	breq	.+8      	; 0x1efe <__floatsisf+0x54>
    1ef6:	9e e8       	ldi	r25, 0x8E	; 142
    1ef8:	87 2f       	mov	r24, r23
    1efa:	76 2f       	mov	r23, r22
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <__floatsisf+0x5e>
    1efe:	66 23       	and	r22, r22
    1f00:	71 f0       	breq	.+28     	; 0x1f1e <__floatsisf+0x74>
    1f02:	96 e8       	ldi	r25, 0x86	; 134
    1f04:	86 2f       	mov	r24, r22
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	2a f0       	brmi	.+10     	; 0x1f16 <__floatsisf+0x6c>
    1f0c:	9a 95       	dec	r25
    1f0e:	66 0f       	add	r22, r22
    1f10:	77 1f       	adc	r23, r23
    1f12:	88 1f       	adc	r24, r24
    1f14:	da f7       	brpl	.-10     	; 0x1f0c <__floatsisf+0x62>
    1f16:	88 0f       	add	r24, r24
    1f18:	96 95       	lsr	r25
    1f1a:	87 95       	ror	r24
    1f1c:	97 f9       	bld	r25, 7
    1f1e:	08 95       	ret

00001f20 <__fp_inf>:
    1f20:	97 f9       	bld	r25, 7
    1f22:	9f 67       	ori	r25, 0x7F	; 127
    1f24:	80 e8       	ldi	r24, 0x80	; 128
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	08 95       	ret

00001f2c <__fp_nan>:
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	80 ec       	ldi	r24, 0xC0	; 192
    1f30:	08 95       	ret

00001f32 <__fp_pscA>:
    1f32:	00 24       	eor	r0, r0
    1f34:	0a 94       	dec	r0
    1f36:	16 16       	cp	r1, r22
    1f38:	17 06       	cpc	r1, r23
    1f3a:	18 06       	cpc	r1, r24
    1f3c:	09 06       	cpc	r0, r25
    1f3e:	08 95       	ret

00001f40 <__fp_pscB>:
    1f40:	00 24       	eor	r0, r0
    1f42:	0a 94       	dec	r0
    1f44:	12 16       	cp	r1, r18
    1f46:	13 06       	cpc	r1, r19
    1f48:	14 06       	cpc	r1, r20
    1f4a:	05 06       	cpc	r0, r21
    1f4c:	08 95       	ret

00001f4e <__fp_round>:
    1f4e:	09 2e       	mov	r0, r25
    1f50:	03 94       	inc	r0
    1f52:	00 0c       	add	r0, r0
    1f54:	11 f4       	brne	.+4      	; 0x1f5a <__fp_round+0xc>
    1f56:	88 23       	and	r24, r24
    1f58:	52 f0       	brmi	.+20     	; 0x1f6e <__fp_round+0x20>
    1f5a:	bb 0f       	add	r27, r27
    1f5c:	40 f4       	brcc	.+16     	; 0x1f6e <__fp_round+0x20>
    1f5e:	bf 2b       	or	r27, r31
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <__fp_round+0x18>
    1f62:	60 ff       	sbrs	r22, 0
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <__fp_round+0x20>
    1f66:	6f 5f       	subi	r22, 0xFF	; 255
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6e:	08 95       	ret

00001f70 <__fp_split3>:
    1f70:	57 fd       	sbrc	r21, 7
    1f72:	90 58       	subi	r25, 0x80	; 128
    1f74:	44 0f       	add	r20, r20
    1f76:	55 1f       	adc	r21, r21
    1f78:	59 f0       	breq	.+22     	; 0x1f90 <__fp_splitA+0x10>
    1f7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f7c:	71 f0       	breq	.+28     	; 0x1f9a <__fp_splitA+0x1a>
    1f7e:	47 95       	ror	r20

00001f80 <__fp_splitA>:
    1f80:	88 0f       	add	r24, r24
    1f82:	97 fb       	bst	r25, 7
    1f84:	99 1f       	adc	r25, r25
    1f86:	61 f0       	breq	.+24     	; 0x1fa0 <__fp_splitA+0x20>
    1f88:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8a:	79 f0       	breq	.+30     	; 0x1faa <__fp_splitA+0x2a>
    1f8c:	87 95       	ror	r24
    1f8e:	08 95       	ret
    1f90:	12 16       	cp	r1, r18
    1f92:	13 06       	cpc	r1, r19
    1f94:	14 06       	cpc	r1, r20
    1f96:	55 1f       	adc	r21, r21
    1f98:	f2 cf       	rjmp	.-28     	; 0x1f7e <__fp_split3+0xe>
    1f9a:	46 95       	lsr	r20
    1f9c:	f1 df       	rcall	.-30     	; 0x1f80 <__fp_splitA>
    1f9e:	08 c0       	rjmp	.+16     	; 0x1fb0 <__fp_splitA+0x30>
    1fa0:	16 16       	cp	r1, r22
    1fa2:	17 06       	cpc	r1, r23
    1fa4:	18 06       	cpc	r1, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	f1 cf       	rjmp	.-30     	; 0x1f8c <__fp_splitA+0xc>
    1faa:	86 95       	lsr	r24
    1fac:	71 05       	cpc	r23, r1
    1fae:	61 05       	cpc	r22, r1
    1fb0:	08 94       	sec
    1fb2:	08 95       	ret

00001fb4 <__fp_zero>:
    1fb4:	e8 94       	clt

00001fb6 <__fp_szero>:
    1fb6:	bb 27       	eor	r27, r27
    1fb8:	66 27       	eor	r22, r22
    1fba:	77 27       	eor	r23, r23
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	97 f9       	bld	r25, 7
    1fc0:	08 95       	ret

00001fc2 <__gesf2>:
    1fc2:	03 d0       	rcall	.+6      	; 0x1fca <__fp_cmp>
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <__gesf2+0x6>
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__fp_cmp>:
    1fca:	99 0f       	add	r25, r25
    1fcc:	00 08       	sbc	r0, r0
    1fce:	55 0f       	add	r21, r21
    1fd0:	aa 0b       	sbc	r26, r26
    1fd2:	e0 e8       	ldi	r30, 0x80	; 128
    1fd4:	fe ef       	ldi	r31, 0xFE	; 254
    1fd6:	16 16       	cp	r1, r22
    1fd8:	17 06       	cpc	r1, r23
    1fda:	e8 07       	cpc	r30, r24
    1fdc:	f9 07       	cpc	r31, r25
    1fde:	c0 f0       	brcs	.+48     	; 0x2010 <__fp_cmp+0x46>
    1fe0:	12 16       	cp	r1, r18
    1fe2:	13 06       	cpc	r1, r19
    1fe4:	e4 07       	cpc	r30, r20
    1fe6:	f5 07       	cpc	r31, r21
    1fe8:	98 f0       	brcs	.+38     	; 0x2010 <__fp_cmp+0x46>
    1fea:	62 1b       	sub	r22, r18
    1fec:	73 0b       	sbc	r23, r19
    1fee:	84 0b       	sbc	r24, r20
    1ff0:	95 0b       	sbc	r25, r21
    1ff2:	39 f4       	brne	.+14     	; 0x2002 <__fp_cmp+0x38>
    1ff4:	0a 26       	eor	r0, r26
    1ff6:	61 f0       	breq	.+24     	; 0x2010 <__fp_cmp+0x46>
    1ff8:	23 2b       	or	r18, r19
    1ffa:	24 2b       	or	r18, r20
    1ffc:	25 2b       	or	r18, r21
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <__fp_cmp+0x3e>
    2000:	08 95       	ret
    2002:	0a 26       	eor	r0, r26
    2004:	09 f4       	brne	.+2      	; 0x2008 <__fp_cmp+0x3e>
    2006:	a1 40       	sbci	r26, 0x01	; 1
    2008:	a6 95       	lsr	r26
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	81 1d       	adc	r24, r1
    200e:	81 1d       	adc	r24, r1
    2010:	08 95       	ret

00002012 <__tablejump2__>:
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	88 1f       	adc	r24, r24
    2018:	8b bf       	out	0x3b, r24	; 59
    201a:	07 90       	elpm	r0, Z+
    201c:	f6 91       	elpm	r31, Z
    201e:	e0 2d       	mov	r30, r0
    2020:	19 94       	eijmp

00002022 <__umulhisi3>:
    2022:	a2 9f       	mul	r26, r18
    2024:	b0 01       	movw	r22, r0
    2026:	b3 9f       	mul	r27, r19
    2028:	c0 01       	movw	r24, r0
    202a:	a3 9f       	mul	r26, r19
    202c:	70 0d       	add	r23, r0
    202e:	81 1d       	adc	r24, r1
    2030:	11 24       	eor	r1, r1
    2032:	91 1d       	adc	r25, r1
    2034:	b2 9f       	mul	r27, r18
    2036:	70 0d       	add	r23, r0
    2038:	81 1d       	adc	r24, r1
    203a:	11 24       	eor	r1, r1
    203c:	91 1d       	adc	r25, r1
    203e:	08 95       	ret

00002040 <_exit>:
    2040:	f8 94       	cli

00002042 <__stop_program>:
    2042:	ff cf       	rjmp	.-2      	; 0x2042 <__stop_program>
