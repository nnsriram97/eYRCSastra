
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005c6  00800200  00004206  0000429a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000441  008007c6  008007c6  00004860  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a25  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c5  00000000  00000000  00008541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026d1  00000000  00000000  00009606  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  0000bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da0  00000000  00000000  0000c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024c6  00000000  00000000  0000d19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000f662  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__vector_5>
      18:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_6>
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_8>
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_51>
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	71 09       	sbc	r23, r1
      e6:	9d 0a       	sbc	r9, r29
      e8:	91 09       	sbc	r25, r1
      ea:	a9 09       	sbc	r26, r9
      ec:	ac 09       	sbc	r26, r12
      ee:	af 09       	sbc	r26, r15
      f0:	b9 09       	sbc	r27, r9
      f2:	c3 09       	sbc	r28, r3
      f4:	c9 09       	sbc	r28, r9
      f6:	88 0a       	sbc	r8, r24
      f8:	81 09       	sbc	r24, r1
      fa:	9d 0a       	sbc	r9, r29
      fc:	9d 09       	sbc	r25, r13
      fe:	cf 09       	sbc	r28, r15
     100:	cc 09       	sbc	r28, r12
     102:	5e 0a       	sbc	r5, r30

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	17 e0       	ldi	r17, 0x07	; 7
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	e6 e0       	ldi	r30, 0x06	; 6
     11c:	f2 e4       	ldi	r31, 0x42	; 66
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a6 3c       	cpi	r26, 0xC6	; 198
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	2c e0       	ldi	r18, 0x0C	; 12
     130:	a6 ec       	ldi	r26, 0xC6	; 198
     132:	b7 e0       	ldi	r27, 0x07	; 7
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a7 30       	cpi	r26, 0x07	; 7
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <main>
     142:	0c 94 01 21 	jmp	0x4202	; 0x4202 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <uart_putchar>:
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
     148:	cf 93       	push	r28
     14a:	c8 2f       	mov	r28, r24
     14c:	8a 30       	cpi	r24, 0x0A	; 10
     14e:	11 f4       	brne	.+4      	; 0x154 <uart_putchar+0xc>
     150:	8d e0       	ldi	r24, 0x0D	; 13
     152:	fa df       	rcall	.-12     	; 0x148 <uart_putchar>
     154:	e0 ed       	ldi	r30, 0xD0	; 208
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	90 81       	ld	r25, Z
     15a:	95 ff       	sbrs	r25, 5
     15c:	fd cf       	rjmp	.-6      	; 0x158 <uart_putchar+0x10>
     15e:	c0 93 d6 00 	sts	0x00D6, r28	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <lcd_port_config>:
     166:	87 b1       	in	r24, 0x07	; 7
     168:	87 6f       	ori	r24, 0xF7	; 247
     16a:	87 b9       	out	0x07, r24	; 7
     16c:	88 b1       	in	r24, 0x08	; 8
     16e:	80 78       	andi	r24, 0x80	; 128
     170:	88 b9       	out	0x08, r24	; 8
     172:	08 95       	ret

00000174 <lcd_set_4bit>:
     174:	86 e6       	ldi	r24, 0x66	; 102
     176:	9e e0       	ldi	r25, 0x0E	; 14
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_set_4bit+0x4>
     17c:	00 00       	nop
     17e:	40 98       	cbi	0x08, 0	; 8
     180:	41 98       	cbi	0x08, 1	; 8
     182:	80 e3       	ldi	r24, 0x30	; 48
     184:	88 b9       	out	0x08, r24	; 8
     186:	42 9a       	sbi	0x08, 2	; 8
     188:	ef ef       	ldi	r30, 0xFF	; 255
     18a:	f7 e4       	ldi	r31, 0x47	; 71
     18c:	31 97       	sbiw	r30, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_set_4bit+0x18>
     190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_set_4bit+0x1e>
     192:	00 00       	nop
     194:	42 98       	cbi	0x08, 2	; 8
     196:	e6 e6       	ldi	r30, 0x66	; 102
     198:	fe e0       	ldi	r31, 0x0E	; 14
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_set_4bit+0x26>
     19e:	00 00       	nop
     1a0:	40 98       	cbi	0x08, 0	; 8
     1a2:	41 98       	cbi	0x08, 1	; 8
     1a4:	88 b9       	out	0x08, r24	; 8
     1a6:	42 9a       	sbi	0x08, 2	; 8
     1a8:	ef ef       	ldi	r30, 0xFF	; 255
     1aa:	f7 e4       	ldi	r31, 0x47	; 71
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_set_4bit+0x38>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_set_4bit+0x3e>
     1b2:	00 00       	nop
     1b4:	42 98       	cbi	0x08, 2	; 8
     1b6:	e6 e6       	ldi	r30, 0x66	; 102
     1b8:	fe e0       	ldi	r31, 0x0E	; 14
     1ba:	31 97       	sbiw	r30, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_set_4bit+0x46>
     1be:	00 00       	nop
     1c0:	40 98       	cbi	0x08, 0	; 8
     1c2:	41 98       	cbi	0x08, 1	; 8
     1c4:	88 b9       	out	0x08, r24	; 8
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	8f ef       	ldi	r24, 0xFF	; 255
     1ca:	97 e4       	ldi	r25, 0x47	; 71
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_set_4bit+0x58>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_set_4bit+0x5e>
     1d2:	00 00       	nop
     1d4:	42 98       	cbi	0x08, 2	; 8
     1d6:	e6 e6       	ldi	r30, 0x66	; 102
     1d8:	fe e0       	ldi	r31, 0x0E	; 14
     1da:	31 97       	sbiw	r30, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_set_4bit+0x66>
     1de:	00 00       	nop
     1e0:	40 98       	cbi	0x08, 0	; 8
     1e2:	41 98       	cbi	0x08, 1	; 8
     1e4:	80 e2       	ldi	r24, 0x20	; 32
     1e6:	88 b9       	out	0x08, r24	; 8
     1e8:	42 9a       	sbi	0x08, 2	; 8
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	97 e4       	ldi	r25, 0x47	; 71
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_set_4bit+0x7a>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_set_4bit+0x80>
     1f4:	00 00       	nop
     1f6:	42 98       	cbi	0x08, 2	; 8
     1f8:	08 95       	ret

000001fa <lcd_wr_command>:
     1fa:	98 b1       	in	r25, 0x08	; 8
     1fc:	9f 70       	andi	r25, 0x0F	; 15
     1fe:	98 b9       	out	0x08, r25	; 8
     200:	98 b1       	in	r25, 0x08	; 8
     202:	28 2f       	mov	r18, r24
     204:	20 7f       	andi	r18, 0xF0	; 240
     206:	92 2b       	or	r25, r18
     208:	98 b9       	out	0x08, r25	; 8
     20a:	40 98       	cbi	0x08, 0	; 8
     20c:	41 98       	cbi	0x08, 1	; 8
     20e:	42 9a       	sbi	0x08, 2	; 8
     210:	ef ef       	ldi	r30, 0xFF	; 255
     212:	f7 e4       	ldi	r31, 0x47	; 71
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_command+0x1a>
     218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_wr_command+0x20>
     21a:	00 00       	nop
     21c:	42 98       	cbi	0x08, 2	; 8
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
     224:	98 b1       	in	r25, 0x08	; 8
     226:	82 95       	swap	r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	89 2b       	or	r24, r25
     22c:	88 b9       	out	0x08, r24	; 8
     22e:	40 98       	cbi	0x08, 0	; 8
     230:	41 98       	cbi	0x08, 1	; 8
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	97 e4       	ldi	r25, 0x47	; 71
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_command+0x3e>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_command+0x44>
     23e:	00 00       	nop
     240:	42 98       	cbi	0x08, 2	; 8
     242:	08 95       	ret

00000244 <lcd_wr_char>:
     244:	98 b1       	in	r25, 0x08	; 8
     246:	9f 70       	andi	r25, 0x0F	; 15
     248:	98 b9       	out	0x08, r25	; 8
     24a:	98 b1       	in	r25, 0x08	; 8
     24c:	28 2f       	mov	r18, r24
     24e:	20 7f       	andi	r18, 0xF0	; 240
     250:	92 2b       	or	r25, r18
     252:	98 b9       	out	0x08, r25	; 8
     254:	40 9a       	sbi	0x08, 0	; 8
     256:	41 98       	cbi	0x08, 1	; 8
     258:	42 9a       	sbi	0x08, 2	; 8
     25a:	ef ef       	ldi	r30, 0xFF	; 255
     25c:	f7 e4       	ldi	r31, 0x47	; 71
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_wr_char+0x1a>
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_wr_char+0x20>
     264:	00 00       	nop
     266:	42 98       	cbi	0x08, 2	; 8
     268:	98 b1       	in	r25, 0x08	; 8
     26a:	9f 70       	andi	r25, 0x0F	; 15
     26c:	98 b9       	out	0x08, r25	; 8
     26e:	98 b1       	in	r25, 0x08	; 8
     270:	82 95       	swap	r24
     272:	80 7f       	andi	r24, 0xF0	; 240
     274:	89 2b       	or	r24, r25
     276:	88 b9       	out	0x08, r24	; 8
     278:	40 9a       	sbi	0x08, 0	; 8
     27a:	41 98       	cbi	0x08, 1	; 8
     27c:	42 9a       	sbi	0x08, 2	; 8
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	97 e4       	ldi	r25, 0x47	; 71
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_wr_char+0x3e>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_wr_char+0x44>
     288:	00 00       	nop
     28a:	42 98       	cbi	0x08, 2	; 8
     28c:	08 95       	ret

0000028e <lcd_home>:
     28e:	80 e8       	ldi	r24, 0x80	; 128
     290:	b4 cf       	rjmp	.-152    	; 0x1fa <lcd_wr_command>
     292:	08 95       	ret

00000294 <lcd_string>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
     29a:	88 81       	ld	r24, Y
     29c:	88 23       	and	r24, r24
     29e:	29 f0       	breq	.+10     	; 0x2aa <lcd_string+0x16>
     2a0:	21 96       	adiw	r28, 0x01	; 1
     2a2:	d0 df       	rcall	.-96     	; 0x244 <lcd_wr_char>
     2a4:	89 91       	ld	r24, Y+
     2a6:	81 11       	cpse	r24, r1
     2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <lcd_string+0xe>
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <lcd_init>:
     2b0:	86 e6       	ldi	r24, 0x66	; 102
     2b2:	9e e0       	ldi	r25, 0x0E	; 14
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x4>
     2b8:	00 00       	nop
     2ba:	88 e2       	ldi	r24, 0x28	; 40
     2bc:	9e df       	rcall	.-196    	; 0x1fa <lcd_wr_command>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	9c df       	rcall	.-200    	; 0x1fa <lcd_wr_command>
     2c2:	86 e0       	ldi	r24, 0x06	; 6
     2c4:	9a df       	rcall	.-204    	; 0x1fa <lcd_wr_command>
     2c6:	8e e0       	ldi	r24, 0x0E	; 14
     2c8:	98 df       	rcall	.-208    	; 0x1fa <lcd_wr_command>
     2ca:	80 e8       	ldi	r24, 0x80	; 128
     2cc:	96 cf       	rjmp	.-212    	; 0x1fa <lcd_wr_command>
     2ce:	08 95       	ret

000002d0 <lcd_cursor>:
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	69 f0       	breq	.+26     	; 0x2ee <lcd_cursor+0x1e>
     2d4:	18 f4       	brcc	.+6      	; 0x2dc <lcd_cursor+0xc>
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	31 f0       	breq	.+12     	; 0x2e6 <lcd_cursor+0x16>
     2da:	08 95       	ret
     2dc:	83 30       	cpi	r24, 0x03	; 3
     2de:	59 f0       	breq	.+22     	; 0x2f6 <lcd_cursor+0x26>
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	69 f0       	breq	.+26     	; 0x2fe <lcd_cursor+0x2e>
     2e4:	08 95       	ret
     2e6:	8f e7       	ldi	r24, 0x7F	; 127
     2e8:	86 0f       	add	r24, r22
     2ea:	87 cf       	rjmp	.-242    	; 0x1fa <lcd_wr_command>
     2ec:	08 95       	ret
     2ee:	8f eb       	ldi	r24, 0xBF	; 191
     2f0:	86 0f       	add	r24, r22
     2f2:	83 cf       	rjmp	.-250    	; 0x1fa <lcd_wr_command>
     2f4:	08 95       	ret
     2f6:	83 e9       	ldi	r24, 0x93	; 147
     2f8:	86 0f       	add	r24, r22
     2fa:	7f cf       	rjmp	.-258    	; 0x1fa <lcd_wr_command>
     2fc:	08 95       	ret
     2fe:	83 ed       	ldi	r24, 0xD3	; 211
     300:	86 0f       	add	r24, r22
     302:	7b cf       	rjmp	.-266    	; 0x1fa <lcd_wr_command>
     304:	08 95       	ret

00000306 <lcd_print>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	8a 01       	movw	r16, r20
     310:	e9 01       	movw	r28, r18
     312:	88 23       	and	r24, r24
     314:	11 f0       	breq	.+4      	; 0x31a <lcd_print+0x14>
     316:	61 11       	cpse	r22, r1
     318:	02 c0       	rjmp	.+4      	; 0x31e <lcd_print+0x18>
     31a:	b9 df       	rcall	.-142    	; 0x28e <lcd_home>
     31c:	01 c0       	rjmp	.+2      	; 0x320 <lcd_print+0x1a>
     31e:	d8 df       	rcall	.-80     	; 0x2d0 <lcd_cursor>
     320:	c5 30       	cpi	r28, 0x05	; 5
     322:	d1 05       	cpc	r29, r1
     324:	c1 f4       	brne	.+48     	; 0x356 <lcd_print+0x50>
     326:	98 01       	movw	r18, r16
     328:	32 95       	swap	r19
     32a:	22 95       	swap	r18
     32c:	2f 70       	andi	r18, 0x0F	; 15
     32e:	23 27       	eor	r18, r19
     330:	3f 70       	andi	r19, 0x0F	; 15
     332:	23 27       	eor	r18, r19
     334:	a7 e4       	ldi	r26, 0x47	; 71
     336:	b3 e0       	ldi	r27, 0x03	; 3
     338:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     33c:	96 95       	lsr	r25
     33e:	87 95       	ror	r24
     340:	96 95       	lsr	r25
     342:	87 95       	ror	r24
     344:	96 95       	lsr	r25
     346:	87 95       	ror	r24
     348:	c0 96       	adiw	r24, 0x30	; 48
     34a:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <million+0x1>
     34e:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <million>
     352:	78 df       	rcall	.-272    	; 0x244 <lcd_wr_char>
     354:	04 c0       	rjmp	.+8      	; 0x35e <lcd_print+0x58>
     356:	c4 30       	cpi	r28, 0x04	; 4
     358:	d1 05       	cpc	r29, r1
     35a:	09 f0       	breq	.+2      	; 0x35e <lcd_print+0x58>
     35c:	be c0       	rjmp	.+380    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     35e:	98 01       	movw	r18, r16
     360:	36 95       	lsr	r19
     362:	27 95       	ror	r18
     364:	36 95       	lsr	r19
     366:	27 95       	ror	r18
     368:	36 95       	lsr	r19
     36a:	27 95       	ror	r18
     36c:	a5 ec       	ldi	r26, 0xC5	; 197
     36e:	b0 e2       	ldi	r27, 0x20	; 32
     370:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     374:	ac 01       	movw	r20, r24
     376:	52 95       	swap	r21
     378:	42 95       	swap	r20
     37a:	4f 70       	andi	r20, 0x0F	; 15
     37c:	45 27       	eor	r20, r21
     37e:	5f 70       	andi	r21, 0x0F	; 15
     380:	45 27       	eor	r20, r21
     382:	50 93 5f 0a 	sts	0x0A5F, r21	; 0x800a5f <temp+0x1>
     386:	40 93 5e 0a 	sts	0x0A5E, r20	; 0x800a5e <temp>
     38a:	9a 01       	movw	r18, r20
     38c:	ad ec       	ldi	r26, 0xCD	; 205
     38e:	bc ec       	ldi	r27, 0xCC	; 204
     390:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     394:	96 95       	lsr	r25
     396:	87 95       	ror	r24
     398:	96 95       	lsr	r25
     39a:	87 95       	ror	r24
     39c:	96 95       	lsr	r25
     39e:	87 95       	ror	r24
     3a0:	9c 01       	movw	r18, r24
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	82 0f       	add	r24, r18
     3b4:	93 1f       	adc	r25, r19
     3b6:	9a 01       	movw	r18, r20
     3b8:	28 1b       	sub	r18, r24
     3ba:	39 0b       	sbc	r19, r25
     3bc:	c9 01       	movw	r24, r18
     3be:	c0 96       	adiw	r24, 0x30	; 48
     3c0:	90 93 fe 0b 	sts	0x0BFE, r25	; 0x800bfe <thousand+0x1>
     3c4:	80 93 fd 0b 	sts	0x0BFD, r24	; 0x800bfd <thousand>
     3c8:	3d df       	rcall	.-390    	; 0x244 <lcd_wr_char>
     3ca:	98 01       	movw	r18, r16
     3cc:	36 95       	lsr	r19
     3ce:	27 95       	ror	r18
     3d0:	36 95       	lsr	r19
     3d2:	27 95       	ror	r18
     3d4:	ab e7       	ldi	r26, 0x7B	; 123
     3d6:	b4 e1       	ldi	r27, 0x14	; 20
     3d8:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     3dc:	ac 01       	movw	r20, r24
     3de:	56 95       	lsr	r21
     3e0:	47 95       	ror	r20
     3e2:	50 93 5f 0a 	sts	0x0A5F, r21	; 0x800a5f <temp+0x1>
     3e6:	40 93 5e 0a 	sts	0x0A5E, r20	; 0x800a5e <temp>
     3ea:	9a 01       	movw	r18, r20
     3ec:	ad ec       	ldi	r26, 0xCD	; 205
     3ee:	bc ec       	ldi	r27, 0xCC	; 204
     3f0:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     3f4:	96 95       	lsr	r25
     3f6:	87 95       	ror	r24
     3f8:	96 95       	lsr	r25
     3fa:	87 95       	ror	r24
     3fc:	96 95       	lsr	r25
     3fe:	87 95       	ror	r24
     400:	9c 01       	movw	r18, r24
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	82 0f       	add	r24, r18
     414:	93 1f       	adc	r25, r19
     416:	9a 01       	movw	r18, r20
     418:	28 1b       	sub	r18, r24
     41a:	39 0b       	sbc	r19, r25
     41c:	c9 01       	movw	r24, r18
     41e:	c0 96       	adiw	r24, 0x30	; 48
     420:	90 93 fa 0b 	sts	0x0BFA, r25	; 0x800bfa <hundred+0x1>
     424:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <hundred>
     428:	0d df       	rcall	.-486    	; 0x244 <lcd_wr_char>
     42a:	04 c0       	rjmp	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     42c:	c2 30       	cpi	r28, 0x02	; 2
     42e:	d1 05       	cpc	r29, r1
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	58 c0       	rjmp	.+176    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     434:	98 01       	movw	r18, r16
     436:	ad ec       	ldi	r26, 0xCD	; 205
     438:	bc ec       	ldi	r27, 0xCC	; 204
     43a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     43e:	ac 01       	movw	r20, r24
     440:	56 95       	lsr	r21
     442:	47 95       	ror	r20
     444:	56 95       	lsr	r21
     446:	47 95       	ror	r20
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	50 93 5f 0a 	sts	0x0A5F, r21	; 0x800a5f <temp+0x1>
     450:	40 93 5e 0a 	sts	0x0A5E, r20	; 0x800a5e <temp>
     454:	9a 01       	movw	r18, r20
     456:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
     45e:	96 95       	lsr	r25
     460:	87 95       	ror	r24
     462:	96 95       	lsr	r25
     464:	87 95       	ror	r24
     466:	9c 01       	movw	r18, r24
     468:	22 0f       	add	r18, r18
     46a:	33 1f       	adc	r19, r19
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	82 0f       	add	r24, r18
     47a:	93 1f       	adc	r25, r19
     47c:	9a 01       	movw	r18, r20
     47e:	28 1b       	sub	r18, r24
     480:	39 0b       	sbc	r19, r25
     482:	c9 01       	movw	r24, r18
     484:	c0 96       	adiw	r24, 0x30	; 48
     486:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <tens+0x1>
     48a:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <tens>
     48e:	da de       	rcall	.-588    	; 0x244 <lcd_wr_char>
     490:	98 01       	movw	r18, r16
     492:	ad ec       	ldi	r26, 0xCD	; 205
     494:	bc ec       	ldi	r27, 0xCC	; 204
     496:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__umulhisi3>
     49a:	96 95       	lsr	r25
     49c:	87 95       	ror	r24
     49e:	96 95       	lsr	r25
     4a0:	87 95       	ror	r24
     4a2:	96 95       	lsr	r25
     4a4:	87 95       	ror	r24
     4a6:	9c 01       	movw	r18, r24
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	82 0f       	add	r24, r18
     4ba:	93 1f       	adc	r25, r19
     4bc:	98 01       	movw	r18, r16
     4be:	28 1b       	sub	r18, r24
     4c0:	39 0b       	sbc	r19, r25
     4c2:	c9 01       	movw	r24, r18
     4c4:	c0 96       	adiw	r24, 0x30	; 48
     4c6:	90 93 fc 0b 	sts	0x0BFC, r25	; 0x800bfc <unit+0x1>
     4ca:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <unit>
     4ce:	ba de       	rcall	.-652    	; 0x244 <lcd_wr_char>
     4d0:	26 97       	sbiw	r28, 0x06	; 6
     4d2:	64 f0       	brlt	.+24     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4d4:	85 e4       	ldi	r24, 0x45	; 69
     4d6:	b6 de       	rcall	.-660    	; 0x244 <lcd_wr_char>
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4da:	c3 30       	cpi	r28, 0x03	; 3
     4dc:	d1 05       	cpc	r29, r1
     4de:	09 f0       	breq	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4e0:	a5 cf       	rjmp	.-182    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     4e2:	73 cf       	rjmp	.-282    	; 0x3ca <lcd_print+0xc4>
     4e4:	c1 30       	cpi	r28, 0x01	; 1
     4e6:	d1 05       	cpc	r29, r1
     4e8:	99 f7       	brne	.-26     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ea:	d2 cf       	rjmp	.-92     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <lcd_clear>:
     4f6:	80 e8       	ldi	r24, 0x80	; 128
     4f8:	80 de       	rcall	.-768    	; 0x1fa <lcd_wr_command>
     4fa:	82 ec       	ldi	r24, 0xC2	; 194
     4fc:	96 e0       	ldi	r25, 0x06	; 6
     4fe:	ca de       	rcall	.-620    	; 0x294 <lcd_string>
     500:	80 ec       	ldi	r24, 0xC0	; 192
     502:	7b de       	rcall	.-778    	; 0x1fa <lcd_wr_command>
     504:	82 ec       	ldi	r24, 0xC2	; 194
     506:	96 e0       	ldi	r25, 0x06	; 6
     508:	c5 de       	rcall	.-630    	; 0x294 <lcd_string>
     50a:	c1 ce       	rjmp	.-638    	; 0x28e <lcd_home>
     50c:	08 95       	ret

0000050e <declare_constants>:
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	e8 e7       	ldi	r30, 0x78	; 120
     534:	fa e0       	ldi	r31, 0x0A	; 10
     536:	0f 2e       	mov	r0, r31
     538:	fb e4       	ldi	r31, 0x4B	; 75
     53a:	af 2e       	mov	r10, r31
     53c:	b1 2c       	mov	r11, r1
     53e:	f0 2d       	mov	r31, r0
     540:	b1 82       	std	Z+1, r11	; 0x01
     542:	a0 82       	st	Z, r10
     544:	0f 2e       	mov	r0, r31
     546:	fd e1       	ldi	r31, 0x1D	; 29
     548:	4f 2e       	mov	r4, r31
     54a:	55 24       	eor	r5, r5
     54c:	53 94       	inc	r5
     54e:	f0 2d       	mov	r31, r0
     550:	53 82       	std	Z+3, r5	; 0x03
     552:	42 82       	std	Z+2, r4	; 0x02
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	9f ef       	ldi	r25, 0xFF	; 255
     558:	95 83       	std	Z+5, r25	; 0x05
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	97 83       	std	Z+7, r25	; 0x07
     55e:	86 83       	std	Z+6, r24	; 0x06
     560:	cc 24       	eor	r12, r12
     562:	ca 94       	dec	r12
     564:	d1 2c       	mov	r13, r1
     566:	d1 86       	std	Z+9, r13	; 0x09
     568:	c0 86       	std	Z+8, r12	; 0x08
     56a:	ac e3       	ldi	r26, 0x3C	; 60
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	b3 87       	std	Z+11, r27	; 0x0b
     570:	a2 87       	std	Z+10, r26	; 0x0a
     572:	95 87       	std	Z+13, r25	; 0x0d
     574:	84 87       	std	Z+12, r24	; 0x0c
     576:	97 87       	std	Z+15, r25	; 0x0f
     578:	86 87       	std	Z+14, r24	; 0x0e
     57a:	20 ef       	ldi	r18, 0xF0	; 240
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	31 8b       	std	Z+17, r19	; 0x11
     580:	20 8b       	std	Z+16, r18	; 0x10
     582:	0f 2e       	mov	r0, r31
     584:	fd e2       	ldi	r31, 0x2D	; 45
     586:	2f 2e       	mov	r2, r31
     588:	31 2c       	mov	r3, r1
     58a:	f0 2d       	mov	r31, r0
     58c:	33 8a       	std	Z+19, r3	; 0x13
     58e:	22 8a       	std	Z+18, r2	; 0x12
     590:	15 8a       	std	Z+21, r1	; 0x15
     592:	14 8a       	std	Z+20, r1	; 0x14
     594:	6c e2       	ldi	r22, 0x2C	; 44
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	77 8b       	std	Z+23, r23	; 0x17
     59a:	66 8b       	std	Z+22, r22	; 0x16
     59c:	0f 2e       	mov	r0, r31
     59e:	f1 ee       	ldi	r31, 0xE1	; 225
     5a0:	8f 2e       	mov	r8, r31
     5a2:	91 2c       	mov	r9, r1
     5a4:	f0 2d       	mov	r31, r0
     5a6:	91 8e       	std	Z+25, r9	; 0x19
     5a8:	80 8e       	std	Z+24, r8	; 0x18
     5aa:	0e e1       	ldi	r16, 0x1E	; 30
     5ac:	10 e0       	ldi	r17, 0x00	; 0
     5ae:	13 8f       	std	Z+27, r17	; 0x1b
     5b0:	02 8f       	std	Z+26, r16	; 0x1a
     5b2:	95 8f       	std	Z+29, r25	; 0x1d
     5b4:	84 8f       	std	Z+28, r24	; 0x1c
     5b6:	97 8f       	std	Z+31, r25	; 0x1f
     5b8:	86 8f       	std	Z+30, r24	; 0x1e
     5ba:	42 ed       	ldi	r20, 0xD2	; 210
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	51 a3       	std	Z+33, r21	; 0x21
     5c0:	40 a3       	std	Z+32, r20	; 0x20
     5c2:	cf e0       	ldi	r28, 0x0F	; 15
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
     5c6:	d3 a3       	std	Z+35, r29	; 0x23
     5c8:	c2 a3       	std	Z+34, r28	; 0x22
     5ca:	95 a3       	std	Z+37, r25	; 0x25
     5cc:	84 a3       	std	Z+36, r24	; 0x24
     5ce:	97 a3       	std	Z+39, r25	; 0x27
     5d0:	86 a3       	std	Z+38, r24	; 0x26
     5d2:	03 ec       	ldi	r16, 0xC3	; 195
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	11 a7       	std	Z+41, r17	; 0x29
     5d8:	00 a7       	std	Z+40, r16	; 0x28
     5da:	13 a6       	std	Z+43, r1	; 0x2b
     5dc:	12 a6       	std	Z+42, r1	; 0x2a
     5de:	95 a7       	std	Z+45, r25	; 0x2d
     5e0:	84 a7       	std	Z+44, r24	; 0x2c
     5e2:	97 a7       	std	Z+47, r25	; 0x2f
     5e4:	86 a7       	std	Z+46, r24	; 0x2e
     5e6:	44 eb       	ldi	r20, 0xB4	; 180
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	51 ab       	std	Z+49, r21	; 0x31
     5ec:	40 ab       	std	Z+48, r20	; 0x30
     5ee:	09 e5       	ldi	r16, 0x59	; 89
     5f0:	11 e0       	ldi	r17, 0x01	; 1
     5f2:	13 ab       	std	Z+51, r17	; 0x33
     5f4:	02 ab       	std	Z+50, r16	; 0x32
     5f6:	35 ab       	std	Z+53, r19	; 0x35
     5f8:	24 ab       	std	Z+52, r18	; 0x34
     5fa:	77 ab       	std	Z+55, r23	; 0x37
     5fc:	66 ab       	std	Z+54, r22	; 0x36
     5fe:	05 ea       	ldi	r16, 0xA5	; 165
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	11 af       	std	Z+57, r17	; 0x39
     604:	00 af       	std	Z+56, r16	; 0x38
     606:	0a e4       	ldi	r16, 0x4A	; 74
     608:	11 e0       	ldi	r17, 0x01	; 1
     60a:	13 af       	std	Z+59, r17	; 0x3b
     60c:	02 af       	std	Z+58, r16	; 0x3a
     60e:	95 af       	std	Z+61, r25	; 0x3d
     610:	84 af       	std	Z+60, r24	; 0x3c
     612:	90 93 b7 0a 	sts	0x0AB7, r25	; 0x800ab7 <angle+0x3f>
     616:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <angle+0x3e>
     61a:	e6 e9       	ldi	r30, 0x96	; 150
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	f0 93 b9 0a 	sts	0x0AB9, r31	; 0x800ab9 <angle+0x41>
     622:	e0 93 b8 0a 	sts	0x0AB8, r30	; 0x800ab8 <angle+0x40>
     626:	0b e3       	ldi	r16, 0x3B	; 59
     628:	11 e0       	ldi	r17, 0x01	; 1
     62a:	10 93 bb 0a 	sts	0x0ABB, r17	; 0x800abb <angle+0x43>
     62e:	00 93 ba 0a 	sts	0x0ABA, r16	; 0x800aba <angle+0x42>
     632:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <angle+0x45>
     636:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <angle+0x44>
     63a:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <angle+0x47>
     63e:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <angle+0x46>
     642:	0f 2e       	mov	r0, r31
     644:	f7 e8       	ldi	r31, 0x87	; 135
     646:	6f 2e       	mov	r6, r31
     648:	71 2c       	mov	r7, r1
     64a:	f0 2d       	mov	r31, r0
     64c:	70 92 c1 0a 	sts	0x0AC1, r7	; 0x800ac1 <angle+0x49>
     650:	60 92 c0 0a 	sts	0x0AC0, r6	; 0x800ac0 <angle+0x48>
     654:	70 93 c3 0a 	sts	0x0AC3, r23	; 0x800ac3 <angle+0x4b>
     658:	60 93 c2 0a 	sts	0x0AC2, r22	; 0x800ac2 <angle+0x4a>
     65c:	90 93 c5 0a 	sts	0x0AC5, r25	; 0x800ac5 <angle+0x4d>
     660:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <angle+0x4c>
     664:	90 93 c7 0a 	sts	0x0AC7, r25	; 0x800ac7 <angle+0x4f>
     668:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <angle+0x4e>
     66c:	e8 e7       	ldi	r30, 0x78	; 120
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	f0 93 c9 0a 	sts	0x0AC9, r31	; 0x800ac9 <angle+0x51>
     674:	e0 93 c8 0a 	sts	0x0AC8, r30	; 0x800ac8 <angle+0x50>
     678:	50 92 cb 0a 	sts	0x0ACB, r5	; 0x800acb <angle+0x53>
     67c:	40 92 ca 0a 	sts	0x0ACA, r4	; 0x800aca <angle+0x52>
     680:	50 93 cd 0a 	sts	0x0ACD, r21	; 0x800acd <angle+0x55>
     684:	40 93 cc 0a 	sts	0x0ACC, r20	; 0x800acc <angle+0x54>
     688:	30 93 cf 0a 	sts	0x0ACF, r19	; 0x800acf <angle+0x57>
     68c:	20 93 ce 0a 	sts	0x0ACE, r18	; 0x800ace <angle+0x56>
     690:	0f 2e       	mov	r0, r31
     692:	f9 e6       	ldi	r31, 0x69	; 105
     694:	ef 2e       	mov	r14, r31
     696:	f1 2c       	mov	r15, r1
     698:	f0 2d       	mov	r31, r0
     69a:	f0 92 d1 0a 	sts	0x0AD1, r15	; 0x800ad1 <angle+0x59>
     69e:	e0 92 d0 0a 	sts	0x0AD0, r14	; 0x800ad0 <angle+0x58>
     6a2:	0e e0       	ldi	r16, 0x0E	; 14
     6a4:	11 e0       	ldi	r17, 0x01	; 1
     6a6:	10 93 d3 0a 	sts	0x0AD3, r17	; 0x800ad3 <angle+0x5b>
     6aa:	00 93 d2 0a 	sts	0x0AD2, r16	; 0x800ad2 <angle+0x5a>
     6ae:	90 93 d5 0a 	sts	0x0AD5, r25	; 0x800ad5 <angle+0x5d>
     6b2:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <angle+0x5c>
     6b6:	90 93 d7 0a 	sts	0x0AD7, r25	; 0x800ad7 <angle+0x5f>
     6ba:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <angle+0x5e>
     6be:	0a e5       	ldi	r16, 0x5A	; 90
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	10 93 d9 0a 	sts	0x0AD9, r17	; 0x800ad9 <angle+0x61>
     6c6:	00 93 d8 0a 	sts	0x0AD8, r16	; 0x800ad8 <angle+0x60>
     6ca:	d0 92 db 0a 	sts	0x0ADB, r13	; 0x800adb <angle+0x63>
     6ce:	c0 92 da 0a 	sts	0x0ADA, r12	; 0x800ada <angle+0x62>
     6d2:	90 93 dd 0a 	sts	0x0ADD, r25	; 0x800add <angle+0x65>
     6d6:	80 93 dc 0a 	sts	0x0ADC, r24	; 0x800adc <angle+0x64>
     6da:	90 93 df 0a 	sts	0x0ADF, r25	; 0x800adf <angle+0x67>
     6de:	80 93 de 0a 	sts	0x0ADE, r24	; 0x800ade <angle+0x66>
     6e2:	b0 92 e1 0a 	sts	0x0AE1, r11	; 0x800ae1 <angle+0x69>
     6e6:	a0 92 e0 0a 	sts	0x0AE0, r10	; 0x800ae0 <angle+0x68>
     6ea:	30 93 e3 0a 	sts	0x0AE3, r19	; 0x800ae3 <angle+0x6b>
     6ee:	20 93 e2 0a 	sts	0x0AE2, r18	; 0x800ae2 <angle+0x6a>
     6f2:	90 93 e5 0a 	sts	0x0AE5, r25	; 0x800ae5 <angle+0x6d>
     6f6:	80 93 e4 0a 	sts	0x0AE4, r24	; 0x800ae4 <angle+0x6c>
     6fa:	90 93 e7 0a 	sts	0x0AE7, r25	; 0x800ae7 <angle+0x6f>
     6fe:	80 93 e6 0a 	sts	0x0AE6, r24	; 0x800ae6 <angle+0x6e>
     702:	b0 93 e9 0a 	sts	0x0AE9, r27	; 0x800ae9 <angle+0x71>
     706:	a0 93 e8 0a 	sts	0x0AE8, r26	; 0x800ae8 <angle+0x70>
     70a:	90 92 eb 0a 	sts	0x0AEB, r9	; 0x800aeb <angle+0x73>
     70e:	80 92 ea 0a 	sts	0x0AEA, r8	; 0x800aea <angle+0x72>
     712:	f0 93 ed 0a 	sts	0x0AED, r31	; 0x800aed <angle+0x75>
     716:	e0 93 ec 0a 	sts	0x0AEC, r30	; 0x800aec <angle+0x74>
     71a:	50 93 ef 0a 	sts	0x0AEF, r21	; 0x800aef <angle+0x77>
     71e:	40 93 ee 0a 	sts	0x0AEE, r20	; 0x800aee <angle+0x76>
     722:	30 92 f1 0a 	sts	0x0AF1, r3	; 0x800af1 <angle+0x79>
     726:	20 92 f0 0a 	sts	0x0AF0, r2	; 0x800af0 <angle+0x78>
     72a:	0f 2e       	mov	r0, r31
     72c:	f2 ed       	ldi	r31, 0xD2	; 210
     72e:	cf 2e       	mov	r12, r31
     730:	d1 2c       	mov	r13, r1
     732:	f0 2d       	mov	r31, r0
     734:	d0 92 f3 0a 	sts	0x0AF3, r13	; 0x800af3 <angle+0x7b>
     738:	c0 92 f2 0a 	sts	0x0AF2, r12	; 0x800af2 <angle+0x7a>
     73c:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <angle+0x7d>
     740:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <angle+0x7c>
     744:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <angle+0x7f>
     748:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <angle+0x7e>
     74c:	0f 2e       	mov	r0, r31
     74e:	fe e1       	ldi	r31, 0x1E	; 30
     750:	cf 2e       	mov	r12, r31
     752:	d1 2c       	mov	r13, r1
     754:	f0 2d       	mov	r31, r0
     756:	d0 92 f9 0a 	sts	0x0AF9, r13	; 0x800af9 <angle+0x81>
     75a:	c0 92 f8 0a 	sts	0x0AF8, r12	; 0x800af8 <angle+0x80>
     75e:	0f 2e       	mov	r0, r31
     760:	f3 ec       	ldi	r31, 0xC3	; 195
     762:	cf 2e       	mov	r12, r31
     764:	d1 2c       	mov	r13, r1
     766:	f0 2d       	mov	r31, r0
     768:	d0 92 fb 0a 	sts	0x0AFB, r13	; 0x800afb <angle+0x83>
     76c:	c0 92 fa 0a 	sts	0x0AFA, r12	; 0x800afa <angle+0x82>
     770:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <angle+0x85>
     774:	80 93 fc 0a 	sts	0x0AFC, r24	; 0x800afc <angle+0x84>
     778:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <angle+0x87>
     77c:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <angle+0x86>
     780:	d0 93 01 0b 	sts	0x0B01, r29	; 0x800b01 <angle+0x89>
     784:	c0 93 00 0b 	sts	0x0B00, r28	; 0x800b00 <angle+0x88>
     788:	50 93 03 0b 	sts	0x0B03, r21	; 0x800b03 <angle+0x8b>
     78c:	40 93 02 0b 	sts	0x0B02, r20	; 0x800b02 <angle+0x8a>
     790:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <angle+0x8d>
     794:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <angle+0x8c>
     798:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <angle+0x8f>
     79c:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <angle+0x8e>
     7a0:	10 92 09 0b 	sts	0x0B09, r1	; 0x800b09 <angle+0x91>
     7a4:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <angle+0x90>
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f5 ea       	ldi	r31, 0xA5	; 165
     7ac:	cf 2e       	mov	r12, r31
     7ae:	d1 2c       	mov	r13, r1
     7b0:	f0 2d       	mov	r31, r0
     7b2:	d0 92 0b 0b 	sts	0x0B0B, r13	; 0x800b0b <angle+0x93>
     7b6:	c0 92 0a 0b 	sts	0x0B0A, r12	; 0x800b0a <angle+0x92>
     7ba:	b0 93 0d 0b 	sts	0x0B0D, r27	; 0x800b0d <angle+0x95>
     7be:	a0 93 0c 0b 	sts	0x0B0C, r26	; 0x800b0c <angle+0x94>
     7c2:	f0 93 0f 0b 	sts	0x0B0F, r31	; 0x800b0f <angle+0x97>
     7c6:	e0 93 0e 0b 	sts	0x0B0E, r30	; 0x800b0e <angle+0x96>
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f9 e5       	ldi	r31, 0x59	; 89
     7ce:	cf 2e       	mov	r12, r31
     7d0:	dd 24       	eor	r13, r13
     7d2:	d3 94       	inc	r13
     7d4:	f0 2d       	mov	r31, r0
     7d6:	d0 92 11 0b 	sts	0x0B11, r13	; 0x800b11 <angle+0x99>
     7da:	c0 92 10 0b 	sts	0x0B10, r12	; 0x800b10 <angle+0x98>
     7de:	0f 2e       	mov	r0, r31
     7e0:	f6 e9       	ldi	r31, 0x96	; 150
     7e2:	cf 2e       	mov	r12, r31
     7e4:	d1 2c       	mov	r13, r1
     7e6:	f0 2d       	mov	r31, r0
     7e8:	d0 92 13 0b 	sts	0x0B13, r13	; 0x800b13 <angle+0x9b>
     7ec:	c0 92 12 0b 	sts	0x0B12, r12	; 0x800b12 <angle+0x9a>
     7f0:	90 93 15 0b 	sts	0x0B15, r25	; 0x800b15 <angle+0x9d>
     7f4:	80 93 14 0b 	sts	0x0B14, r24	; 0x800b14 <angle+0x9c>
     7f8:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <angle+0x9f>
     7fc:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <angle+0x9e>
     800:	0f 2e       	mov	r0, r31
     802:	fa e4       	ldi	r31, 0x4A	; 74
     804:	cf 2e       	mov	r12, r31
     806:	dd 24       	eor	r13, r13
     808:	d3 94       	inc	r13
     80a:	f0 2d       	mov	r31, r0
     80c:	d0 92 19 0b 	sts	0x0B19, r13	; 0x800b19 <angle+0xa1>
     810:	c0 92 18 0b 	sts	0x0B18, r12	; 0x800b18 <angle+0xa0>
     814:	70 92 1b 0b 	sts	0x0B1B, r7	; 0x800b1b <angle+0xa3>
     818:	60 92 1a 0b 	sts	0x0B1A, r6	; 0x800b1a <angle+0xa2>
     81c:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <angle+0xa5>
     820:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <angle+0xa4>
     824:	90 93 1f 0b 	sts	0x0B1F, r25	; 0x800b1f <angle+0xa7>
     828:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <angle+0xa6>
     82c:	0f 2e       	mov	r0, r31
     82e:	fb e3       	ldi	r31, 0x3B	; 59
     830:	cf 2e       	mov	r12, r31
     832:	dd 24       	eor	r13, r13
     834:	d3 94       	inc	r13
     836:	f0 2d       	mov	r31, r0
     838:	d0 92 21 0b 	sts	0x0B21, r13	; 0x800b21 <angle+0xa9>
     83c:	c0 92 20 0b 	sts	0x0B20, r12	; 0x800b20 <angle+0xa8>
     840:	f0 93 23 0b 	sts	0x0B23, r31	; 0x800b23 <angle+0xab>
     844:	e0 93 22 0b 	sts	0x0B22, r30	; 0x800b22 <angle+0xaa>
     848:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <angle+0xad>
     84c:	80 93 24 0b 	sts	0x0B24, r24	; 0x800b24 <angle+0xac>
     850:	90 93 27 0b 	sts	0x0B27, r25	; 0x800b27 <angle+0xaf>
     854:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <angle+0xae>
     858:	70 93 29 0b 	sts	0x0B29, r23	; 0x800b29 <angle+0xb1>
     85c:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <angle+0xb0>
     860:	f0 92 2b 0b 	sts	0x0B2B, r15	; 0x800b2b <angle+0xb3>
     864:	e0 92 2a 0b 	sts	0x0B2A, r14	; 0x800b2a <angle+0xb2>
     868:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <angle+0xb5>
     86c:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <angle+0xb4>
     870:	b0 93 2f 0b 	sts	0x0B2F, r27	; 0x800b2f <angle+0xb7>
     874:	a0 93 2e 0b 	sts	0x0B2E, r26	; 0x800b2e <angle+0xb6>
     878:	10 93 31 0b 	sts	0x0B31, r17	; 0x800b31 <angle+0xb9>
     87c:	00 93 30 0b 	sts	0x0B30, r16	; 0x800b30 <angle+0xb8>
     880:	50 92 33 0b 	sts	0x0B33, r5	; 0x800b33 <angle+0xbb>
     884:	40 92 32 0b 	sts	0x0B32, r4	; 0x800b32 <angle+0xba>
     888:	90 93 35 0b 	sts	0x0B35, r25	; 0x800b35 <angle+0xbd>
     88c:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <angle+0xbc>
     890:	90 93 37 0b 	sts	0x0B37, r25	; 0x800b37 <angle+0xbf>
     894:	80 93 36 0b 	sts	0x0B36, r24	; 0x800b36 <angle+0xbe>
     898:	50 93 39 0b 	sts	0x0B39, r21	; 0x800b39 <angle+0xc1>
     89c:	40 93 38 0b 	sts	0x0B38, r20	; 0x800b38 <angle+0xc0>
     8a0:	10 92 3b 0b 	sts	0x0B3B, r1	; 0x800b3b <angle+0xc3>
     8a4:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <angle+0xc2>
     8a8:	30 93 3d 0b 	sts	0x0B3D, r19	; 0x800b3d <angle+0xc5>
     8ac:	20 93 3c 0b 	sts	0x0B3C, r18	; 0x800b3c <angle+0xc4>
     8b0:	90 93 3f 0b 	sts	0x0B3F, r25	; 0x800b3f <angle+0xc7>
     8b4:	80 93 3e 0b 	sts	0x0B3E, r24	; 0x800b3e <angle+0xc6>
     8b8:	50 93 41 0b 	sts	0x0B41, r21	; 0x800b41 <angle+0xc9>
     8bc:	40 93 40 0b 	sts	0x0B40, r20	; 0x800b40 <angle+0xc8>
     8c0:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <angle+0xcb>
     8c4:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <angle+0xca>
     8c8:	b0 93 45 0b 	sts	0x0B45, r27	; 0x800b45 <angle+0xcd>
     8cc:	a0 93 44 0b 	sts	0x0B44, r26	; 0x800b44 <angle+0xcc>
     8d0:	70 93 47 0b 	sts	0x0B47, r23	; 0x800b47 <angle+0xcf>
     8d4:	60 93 46 0b 	sts	0x0B46, r22	; 0x800b46 <angle+0xce>
     8d8:	50 93 49 0b 	sts	0x0B49, r21	; 0x800b49 <angle+0xd1>
     8dc:	40 93 48 0b 	sts	0x0B48, r20	; 0x800b48 <angle+0xd0>
     8e0:	10 92 4b 0b 	sts	0x0B4B, r1	; 0x800b4b <angle+0xd3>
     8e4:	10 92 4a 0b 	sts	0x0B4A, r1	; 0x800b4a <angle+0xd2>
     8e8:	f0 93 4d 0b 	sts	0x0B4D, r31	; 0x800b4d <angle+0xd5>
     8ec:	e0 93 4c 0b 	sts	0x0B4C, r30	; 0x800b4c <angle+0xd4>
     8f0:	30 93 4f 0b 	sts	0x0B4F, r19	; 0x800b4f <angle+0xd7>
     8f4:	20 93 4e 0b 	sts	0x0B4E, r18	; 0x800b4e <angle+0xd6>
     8f8:	10 92 51 0b 	sts	0x0B51, r1	; 0x800b51 <angle+0xd9>
     8fc:	10 92 50 0b 	sts	0x0B50, r1	; 0x800b50 <angle+0xd8>
     900:	50 93 53 0b 	sts	0x0B53, r21	; 0x800b53 <angle+0xdb>
     904:	40 93 52 0b 	sts	0x0B52, r20	; 0x800b52 <angle+0xda>
     908:	70 93 55 0b 	sts	0x0B55, r23	; 0x800b55 <angle+0xdd>
     90c:	60 93 54 0b 	sts	0x0B54, r22	; 0x800b54 <angle+0xdc>
     910:	90 93 57 0b 	sts	0x0B57, r25	; 0x800b57 <angle+0xdf>
     914:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <angle+0xde>
     918:	b0 93 59 0b 	sts	0x0B59, r27	; 0x800b59 <angle+0xe1>
     91c:	a0 93 58 0b 	sts	0x0B58, r26	; 0x800b58 <angle+0xe0>
     920:	f0 93 5b 0b 	sts	0x0B5B, r31	; 0x800b5b <angle+0xe3>
     924:	e0 93 5a 0b 	sts	0x0B5A, r30	; 0x800b5a <angle+0xe2>
     928:	30 93 5d 0b 	sts	0x0B5D, r19	; 0x800b5d <angle+0xe5>
     92c:	20 93 5c 0b 	sts	0x0B5C, r18	; 0x800b5c <angle+0xe4>
     930:	90 93 5f 0b 	sts	0x0B5F, r25	; 0x800b5f <angle+0xe7>
     934:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <angle+0xe6>
     938:	b0 93 61 0b 	sts	0x0B61, r27	; 0x800b61 <angle+0xe9>
     93c:	a0 93 60 0b 	sts	0x0B60, r26	; 0x800b60 <angle+0xe8>
     940:	30 93 63 0b 	sts	0x0B63, r19	; 0x800b63 <angle+0xeb>
     944:	20 93 62 0b 	sts	0x0B62, r18	; 0x800b62 <angle+0xea>
     948:	70 93 65 0b 	sts	0x0B65, r23	; 0x800b65 <angle+0xed>
     94c:	60 93 64 0b 	sts	0x0B64, r22	; 0x800b64 <angle+0xec>
     950:	50 93 67 0b 	sts	0x0B67, r21	; 0x800b67 <angle+0xef>
     954:	40 93 66 0b 	sts	0x0B66, r20	; 0x800b66 <angle+0xee>
     958:	b0 93 69 0b 	sts	0x0B69, r27	; 0x800b69 <angle+0xf1>
     95c:	a0 93 68 0b 	sts	0x0B68, r26	; 0x800b68 <angle+0xf0>
     960:	30 93 6b 0b 	sts	0x0B6B, r19	; 0x800b6b <angle+0xf3>
     964:	20 93 6a 0b 	sts	0x0B6A, r18	; 0x800b6a <angle+0xf2>
     968:	10 92 6d 0b 	sts	0x0B6D, r1	; 0x800b6d <angle+0xf5>
     96c:	10 92 6c 0b 	sts	0x0B6C, r1	; 0x800b6c <angle+0xf4>
     970:	f0 93 6f 0b 	sts	0x0B6F, r31	; 0x800b6f <angle+0xf7>
     974:	e0 93 6e 0b 	sts	0x0B6E, r30	; 0x800b6e <angle+0xf6>
     978:	30 93 71 0b 	sts	0x0B71, r19	; 0x800b71 <angle+0xf9>
     97c:	20 93 70 0b 	sts	0x0B70, r18	; 0x800b70 <angle+0xf8>
     980:	b0 93 73 0b 	sts	0x0B73, r27	; 0x800b73 <angle+0xfb>
     984:	a0 93 72 0b 	sts	0x0B72, r26	; 0x800b72 <angle+0xfa>
     988:	50 93 75 0b 	sts	0x0B75, r21	; 0x800b75 <angle+0xfd>
     98c:	40 93 74 0b 	sts	0x0B74, r20	; 0x800b74 <angle+0xfc>
     990:	90 93 77 0b 	sts	0x0B77, r25	; 0x800b77 <angle+0xff>
     994:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <angle+0xfe>
     998:	70 93 79 0b 	sts	0x0B79, r23	; 0x800b79 <angle+0x101>
     99c:	60 93 78 0b 	sts	0x0B78, r22	; 0x800b78 <angle+0x100>
     9a0:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <angle+0x103>
     9a4:	10 92 7a 0b 	sts	0x0B7A, r1	; 0x800b7a <angle+0x102>
     9a8:	f0 93 7d 0b 	sts	0x0B7D, r31	; 0x800b7d <angle+0x105>
     9ac:	e0 93 7c 0b 	sts	0x0B7C, r30	; 0x800b7c <angle+0x104>
     9b0:	90 93 7f 0b 	sts	0x0B7F, r25	; 0x800b7f <angle+0x107>
     9b4:	80 93 7e 0b 	sts	0x0B7E, r24	; 0x800b7e <angle+0x106>
     9b8:	70 93 81 0b 	sts	0x0B81, r23	; 0x800b81 <angle+0x109>
     9bc:	60 93 80 0b 	sts	0x0B80, r22	; 0x800b80 <angle+0x108>
     9c0:	f0 93 83 0b 	sts	0x0B83, r31	; 0x800b83 <angle+0x10b>
     9c4:	e0 93 82 0b 	sts	0x0B82, r30	; 0x800b82 <angle+0x10a>
     9c8:	50 93 85 0b 	sts	0x0B85, r21	; 0x800b85 <angle+0x10d>
     9cc:	40 93 84 0b 	sts	0x0B84, r20	; 0x800b84 <angle+0x10c>
     9d0:	b0 93 87 0b 	sts	0x0B87, r27	; 0x800b87 <angle+0x10f>
     9d4:	a0 93 86 0b 	sts	0x0B86, r26	; 0x800b86 <angle+0x10e>
     9d8:	70 93 89 0b 	sts	0x0B89, r23	; 0x800b89 <angle+0x111>
     9dc:	60 93 88 0b 	sts	0x0B88, r22	; 0x800b88 <angle+0x110>
     9e0:	f0 93 8b 0b 	sts	0x0B8B, r31	; 0x800b8b <angle+0x113>
     9e4:	e0 93 8a 0b 	sts	0x0B8A, r30	; 0x800b8a <angle+0x112>
     9e8:	30 93 8d 0b 	sts	0x0B8D, r19	; 0x800b8d <angle+0x115>
     9ec:	20 93 8c 0b 	sts	0x0B8C, r18	; 0x800b8c <angle+0x114>
     9f0:	10 92 8f 0b 	sts	0x0B8F, r1	; 0x800b8f <angle+0x117>
     9f4:	10 92 8e 0b 	sts	0x0B8E, r1	; 0x800b8e <angle+0x116>
     9f8:	f0 93 91 0b 	sts	0x0B91, r31	; 0x800b91 <angle+0x119>
     9fc:	e0 93 90 0b 	sts	0x0B90, r30	; 0x800b90 <angle+0x118>
     a00:	b0 93 93 0b 	sts	0x0B93, r27	; 0x800b93 <angle+0x11b>
     a04:	a0 93 92 0b 	sts	0x0B92, r26	; 0x800b92 <angle+0x11a>
     a08:	70 93 95 0b 	sts	0x0B95, r23	; 0x800b95 <angle+0x11d>
     a0c:	60 93 94 0b 	sts	0x0B94, r22	; 0x800b94 <angle+0x11c>
     a10:	90 93 97 0b 	sts	0x0B97, r25	; 0x800b97 <angle+0x11f>
     a14:	80 93 96 0b 	sts	0x0B96, r24	; 0x800b96 <angle+0x11e>
     a18:	b0 93 99 0b 	sts	0x0B99, r27	; 0x800b99 <angle+0x121>
     a1c:	a0 93 98 0b 	sts	0x0B98, r26	; 0x800b98 <angle+0x120>
     a20:	30 93 9b 0b 	sts	0x0B9B, r19	; 0x800b9b <angle+0x123>
     a24:	20 93 9a 0b 	sts	0x0B9A, r18	; 0x800b9a <angle+0x122>
     a28:	90 93 9d 0b 	sts	0x0B9D, r25	; 0x800b9d <angle+0x125>
     a2c:	80 93 9c 0b 	sts	0x0B9C, r24	; 0x800b9c <angle+0x124>
     a30:	90 93 9f 0b 	sts	0x0B9F, r25	; 0x800b9f <angle+0x127>
     a34:	80 93 9e 0b 	sts	0x0B9E, r24	; 0x800b9e <angle+0x126>
     a38:	f0 93 a1 0b 	sts	0x0BA1, r31	; 0x800ba1 <angle+0x129>
     a3c:	e0 93 a0 0b 	sts	0x0BA0, r30	; 0x800ba0 <angle+0x128>
     a40:	70 93 a3 0b 	sts	0x0BA3, r23	; 0x800ba3 <angle+0x12b>
     a44:	60 93 a2 0b 	sts	0x0BA2, r22	; 0x800ba2 <angle+0x12a>
     a48:	90 93 a5 0b 	sts	0x0BA5, r25	; 0x800ba5 <angle+0x12d>
     a4c:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <angle+0x12c>
     a50:	90 93 a7 0b 	sts	0x0BA7, r25	; 0x800ba7 <angle+0x12f>
     a54:	80 93 a6 0b 	sts	0x0BA6, r24	; 0x800ba6 <angle+0x12e>
     a58:	70 93 a9 0b 	sts	0x0BA9, r23	; 0x800ba9 <angle+0x131>
     a5c:	60 93 a8 0b 	sts	0x0BA8, r22	; 0x800ba8 <angle+0x130>
     a60:	f0 93 ab 0b 	sts	0x0BAB, r31	; 0x800bab <angle+0x133>
     a64:	e0 93 aa 0b 	sts	0x0BAA, r30	; 0x800baa <angle+0x132>
     a68:	90 93 ad 0b 	sts	0x0BAD, r25	; 0x800bad <angle+0x135>
     a6c:	80 93 ac 0b 	sts	0x0BAC, r24	; 0x800bac <angle+0x134>
     a70:	90 93 af 0b 	sts	0x0BAF, r25	; 0x800baf <angle+0x137>
     a74:	80 93 ae 0b 	sts	0x0BAE, r24	; 0x800bae <angle+0x136>
     a78:	10 92 b1 0b 	sts	0x0BB1, r1	; 0x800bb1 <angle+0x139>
     a7c:	10 92 b0 0b 	sts	0x0BB0, r1	; 0x800bb0 <angle+0x138>
     a80:	50 93 b3 0b 	sts	0x0BB3, r21	; 0x800bb3 <angle+0x13b>
     a84:	40 93 b2 0b 	sts	0x0BB2, r20	; 0x800bb2 <angle+0x13a>
     a88:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <angle+0x13d>
     a8c:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <angle+0x13c>
     a90:	90 93 b7 0b 	sts	0x0BB7, r25	; 0x800bb7 <angle+0x13f>
     a94:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <angle+0x13e>
     a98:	50 93 b9 0b 	sts	0x0BB9, r21	; 0x800bb9 <angle+0x141>
     a9c:	40 93 b8 0b 	sts	0x0BB8, r20	; 0x800bb8 <angle+0x140>
     aa0:	10 92 bb 0b 	sts	0x0BBB, r1	; 0x800bbb <angle+0x143>
     aa4:	10 92 ba 0b 	sts	0x0BBA, r1	; 0x800bba <angle+0x142>
     aa8:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <angle+0x145>
     aac:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <angle+0x144>
     ab0:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <angle+0x147>
     ab4:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <angle+0x146>
     ab8:	30 93 c1 0b 	sts	0x0BC1, r19	; 0x800bc1 <angle+0x149>
     abc:	20 93 c0 0b 	sts	0x0BC0, r18	; 0x800bc0 <angle+0x148>
     ac0:	b0 93 c3 0b 	sts	0x0BC3, r27	; 0x800bc3 <angle+0x14b>
     ac4:	a0 93 c2 0b 	sts	0x0BC2, r26	; 0x800bc2 <angle+0x14a>
     ac8:	90 93 c5 0b 	sts	0x0BC5, r25	; 0x800bc5 <angle+0x14d>
     acc:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <angle+0x14c>
     ad0:	90 93 c7 0b 	sts	0x0BC7, r25	; 0x800bc7 <angle+0x14f>
     ad4:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <angle+0x14e>
     ad8:	50 93 c9 0b 	sts	0x0BC9, r21	; 0x800bc9 <angle+0x151>
     adc:	40 93 c8 0b 	sts	0x0BC8, r20	; 0x800bc8 <angle+0x150>
     ae0:	b0 93 cb 0b 	sts	0x0BCB, r27	; 0x800bcb <angle+0x153>
     ae4:	a0 93 ca 0b 	sts	0x0BCA, r26	; 0x800bca <angle+0x152>
     ae8:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <angle+0x155>
     aec:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <angle+0x154>
     af0:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <angle+0x157>
     af4:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <angle+0x156>
     af8:	f0 93 d1 0b 	sts	0x0BD1, r31	; 0x800bd1 <angle+0x159>
     afc:	e0 93 d0 0b 	sts	0x0BD0, r30	; 0x800bd0 <angle+0x158>
     b00:	30 93 d3 0b 	sts	0x0BD3, r19	; 0x800bd3 <angle+0x15b>
     b04:	20 93 d2 0b 	sts	0x0BD2, r18	; 0x800bd2 <angle+0x15a>
     b08:	90 93 d5 0b 	sts	0x0BD5, r25	; 0x800bd5 <angle+0x15d>
     b0c:	80 93 d4 0b 	sts	0x0BD4, r24	; 0x800bd4 <angle+0x15c>
     b10:	90 93 d7 0b 	sts	0x0BD7, r25	; 0x800bd7 <angle+0x15f>
     b14:	80 93 d6 0b 	sts	0x0BD6, r24	; 0x800bd6 <angle+0x15e>
     b18:	b0 93 d9 0b 	sts	0x0BD9, r27	; 0x800bd9 <angle+0x161>
     b1c:	a0 93 d8 0b 	sts	0x0BD8, r26	; 0x800bd8 <angle+0x160>
     b20:	70 93 db 0b 	sts	0x0BDB, r23	; 0x800bdb <angle+0x163>
     b24:	60 93 da 0b 	sts	0x0BDA, r22	; 0x800bda <angle+0x162>
     b28:	90 93 dd 0b 	sts	0x0BDD, r25	; 0x800bdd <angle+0x165>
     b2c:	80 93 dc 0b 	sts	0x0BDC, r24	; 0x800bdc <angle+0x164>
     b30:	90 93 df 0b 	sts	0x0BDF, r25	; 0x800bdf <angle+0x167>
     b34:	80 93 de 0b 	sts	0x0BDE, r24	; 0x800bde <angle+0x166>
     b38:	10 92 e1 0b 	sts	0x0BE1, r1	; 0x800be1 <angle+0x169>
     b3c:	10 92 e0 0b 	sts	0x0BE0, r1	; 0x800be0 <angle+0x168>
     b40:	f0 93 e3 0b 	sts	0x0BE3, r31	; 0x800be3 <angle+0x16b>
     b44:	e0 93 e2 0b 	sts	0x0BE2, r30	; 0x800be2 <angle+0x16a>
     b48:	90 93 e5 0b 	sts	0x0BE5, r25	; 0x800be5 <angle+0x16d>
     b4c:	80 93 e4 0b 	sts	0x0BE4, r24	; 0x800be4 <angle+0x16c>
     b50:	90 93 e7 0b 	sts	0x0BE7, r25	; 0x800be7 <angle+0x16f>
     b54:	80 93 e6 0b 	sts	0x0BE6, r24	; 0x800be6 <angle+0x16e>
     b58:	70 93 e9 0b 	sts	0x0BE9, r23	; 0x800be9 <angle+0x171>
     b5c:	60 93 e8 0b 	sts	0x0BE8, r22	; 0x800be8 <angle+0x170>
     b60:	50 93 eb 0b 	sts	0x0BEB, r21	; 0x800beb <angle+0x173>
     b64:	40 93 ea 0b 	sts	0x0BEA, r20	; 0x800bea <angle+0x172>
     b68:	90 93 ed 0b 	sts	0x0BED, r25	; 0x800bed <angle+0x175>
     b6c:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <angle+0x174>
     b70:	90 93 ef 0b 	sts	0x0BEF, r25	; 0x800bef <angle+0x177>
     b74:	80 93 ee 0b 	sts	0x0BEE, r24	; 0x800bee <angle+0x176>
     b78:	30 93 f1 0b 	sts	0x0BF1, r19	; 0x800bf1 <angle+0x179>
     b7c:	20 93 f0 0b 	sts	0x0BF0, r18	; 0x800bf0 <angle+0x178>
     b80:	10 92 f3 0b 	sts	0x0BF3, r1	; 0x800bf3 <angle+0x17b>
     b84:	10 92 f2 0b 	sts	0x0BF2, r1	; 0x800bf2 <angle+0x17a>
     b88:	90 93 f5 0b 	sts	0x0BF5, r25	; 0x800bf5 <angle+0x17d>
     b8c:	80 93 f4 0b 	sts	0x0BF4, r24	; 0x800bf4 <angle+0x17c>
     b90:	90 93 f7 0b 	sts	0x0BF7, r25	; 0x800bf7 <angle+0x17f>
     b94:	80 93 f6 0b 	sts	0x0BF6, r24	; 0x800bf6 <angle+0x17e>
     b98:	ee ed       	ldi	r30, 0xDE	; 222
     b9a:	f8 e0       	ldi	r31, 0x08	; 8
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
     ba4:	28 e1       	ldi	r18, 0x18	; 24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	33 83       	std	Z+3, r19	; 0x03
     baa:	22 83       	std	Z+2, r18	; 0x02
     bac:	15 82       	std	Z+5, r1	; 0x05
     bae:	14 82       	std	Z+4, r1	; 0x04
     bb0:	17 82       	std	Z+7, r1	; 0x07
     bb2:	16 82       	std	Z+6, r1	; 0x06
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	31 87       	std	Z+9, r19	; 0x09
     bba:	20 87       	std	Z+8, r18	; 0x08
     bbc:	23 e0       	ldi	r18, 0x03	; 3
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	33 87       	std	Z+11, r19	; 0x0b
     bc2:	22 87       	std	Z+10, r18	; 0x0a
     bc4:	15 86       	std	Z+13, r1	; 0x0d
     bc6:	14 86       	std	Z+12, r1	; 0x0c
     bc8:	17 86       	std	Z+15, r1	; 0x0f
     bca:	16 86       	std	Z+14, r1	; 0x0e
     bcc:	91 8b       	std	Z+17, r25	; 0x11
     bce:	80 8b       	std	Z+16, r24	; 0x10
     bd0:	84 e0       	ldi	r24, 0x04	; 4
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	93 8b       	std	Z+19, r25	; 0x13
     bd6:	82 8b       	std	Z+18, r24	; 0x12
     bd8:	49 e1       	ldi	r20, 0x19	; 25
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	55 8b       	std	Z+21, r21	; 0x15
     bde:	44 8b       	std	Z+20, r20	; 0x14
     be0:	44 e2       	ldi	r20, 0x24	; 36
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	57 8b       	std	Z+23, r21	; 0x17
     be6:	46 8b       	std	Z+22, r20	; 0x16
     be8:	31 8f       	std	Z+25, r19	; 0x19
     bea:	20 8f       	std	Z+24, r18	; 0x18
     bec:	25 e0       	ldi	r18, 0x05	; 5
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	33 8f       	std	Z+27, r19	; 0x1b
     bf2:	22 8f       	std	Z+26, r18	; 0x1a
     bf4:	15 8e       	std	Z+29, r1	; 0x1d
     bf6:	14 8e       	std	Z+28, r1	; 0x1c
     bf8:	17 8e       	std	Z+31, r1	; 0x1f
     bfa:	16 8e       	std	Z+30, r1	; 0x1e
     bfc:	91 a3       	std	Z+33, r25	; 0x21
     bfe:	80 a3       	std	Z+32, r24	; 0x20
     c00:	86 e0       	ldi	r24, 0x06	; 6
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	93 a3       	std	Z+35, r25	; 0x23
     c06:	82 a3       	std	Z+34, r24	; 0x22
     c08:	15 a2       	std	Z+37, r1	; 0x25
     c0a:	14 a2       	std	Z+36, r1	; 0x24
     c0c:	17 a2       	std	Z+39, r1	; 0x27
     c0e:	16 a2       	std	Z+38, r1	; 0x26
     c10:	31 a7       	std	Z+41, r19	; 0x29
     c12:	20 a7       	std	Z+40, r18	; 0x28
     c14:	27 e0       	ldi	r18, 0x07	; 7
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	33 a7       	std	Z+43, r19	; 0x2b
     c1a:	22 a7       	std	Z+42, r18	; 0x2a
     c1c:	15 a6       	std	Z+45, r1	; 0x2d
     c1e:	14 a6       	std	Z+44, r1	; 0x2c
     c20:	17 a6       	std	Z+47, r1	; 0x2f
     c22:	16 a6       	std	Z+46, r1	; 0x2e
     c24:	91 ab       	std	Z+49, r25	; 0x31
     c26:	80 ab       	std	Z+48, r24	; 0x30
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	93 ab       	std	Z+51, r25	; 0x33
     c2e:	82 ab       	std	Z+50, r24	; 0x32
     c30:	45 e2       	ldi	r20, 0x25	; 37
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	55 ab       	std	Z+53, r21	; 0x35
     c36:	44 ab       	std	Z+52, r20	; 0x34
     c38:	46 e2       	ldi	r20, 0x26	; 38
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	57 ab       	std	Z+55, r21	; 0x37
     c3e:	46 ab       	std	Z+54, r20	; 0x36
     c40:	31 af       	std	Z+57, r19	; 0x39
     c42:	20 af       	std	Z+56, r18	; 0x38
     c44:	29 e0       	ldi	r18, 0x09	; 9
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	33 af       	std	Z+59, r19	; 0x3b
     c4a:	22 af       	std	Z+58, r18	; 0x3a
     c4c:	15 ae       	std	Z+61, r1	; 0x3d
     c4e:	14 ae       	std	Z+60, r1	; 0x3c
     c50:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <node+0x3f>
     c54:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <node+0x3e>
     c58:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <node+0x41>
     c5c:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <node+0x40>
     c60:	8a e0       	ldi	r24, 0x0A	; 10
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <node+0x43>
     c68:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <node+0x42>
     c6c:	10 92 23 09 	sts	0x0923, r1	; 0x800923 <node+0x45>
     c70:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <node+0x44>
     c74:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <node+0x47>
     c78:	10 92 24 09 	sts	0x0924, r1	; 0x800924 <node+0x46>
     c7c:	30 93 27 09 	sts	0x0927, r19	; 0x800927 <node+0x49>
     c80:	20 93 26 09 	sts	0x0926, r18	; 0x800926 <node+0x48>
     c84:	2b e0       	ldi	r18, 0x0B	; 11
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	30 93 29 09 	sts	0x0929, r19	; 0x800929 <node+0x4b>
     c8c:	20 93 28 09 	sts	0x0928, r18	; 0x800928 <node+0x4a>
     c90:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <node+0x4d>
     c94:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <node+0x4c>
     c98:	10 92 2d 09 	sts	0x092D, r1	; 0x80092d <node+0x4f>
     c9c:	10 92 2c 09 	sts	0x092C, r1	; 0x80092c <node+0x4e>
     ca0:	90 93 2f 09 	sts	0x092F, r25	; 0x80092f <node+0x51>
     ca4:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <node+0x50>
     ca8:	8c e0       	ldi	r24, 0x0C	; 12
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <node+0x53>
     cb0:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <node+0x52>
     cb4:	4c e1       	ldi	r20, 0x1C	; 28
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	50 93 33 09 	sts	0x0933, r21	; 0x800933 <node+0x55>
     cbc:	40 93 32 09 	sts	0x0932, r20	; 0x800932 <node+0x54>
     cc0:	4d e1       	ldi	r20, 0x1D	; 29
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	50 93 35 09 	sts	0x0935, r21	; 0x800935 <node+0x57>
     cc8:	40 93 34 09 	sts	0x0934, r20	; 0x800934 <node+0x56>
     ccc:	30 93 37 09 	sts	0x0937, r19	; 0x800937 <node+0x59>
     cd0:	20 93 36 09 	sts	0x0936, r18	; 0x800936 <node+0x58>
     cd4:	2d e0       	ldi	r18, 0x0D	; 13
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	30 93 39 09 	sts	0x0939, r19	; 0x800939 <node+0x5b>
     cdc:	20 93 38 09 	sts	0x0938, r18	; 0x800938 <node+0x5a>
     ce0:	10 92 3b 09 	sts	0x093B, r1	; 0x80093b <node+0x5d>
     ce4:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <node+0x5c>
     ce8:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <node+0x5f>
     cec:	10 92 3c 09 	sts	0x093C, r1	; 0x80093c <node+0x5e>
     cf0:	90 93 3f 09 	sts	0x093F, r25	; 0x80093f <node+0x61>
     cf4:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <node+0x60>
     cf8:	8e e0       	ldi	r24, 0x0E	; 14
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	90 93 41 09 	sts	0x0941, r25	; 0x800941 <node+0x63>
     d00:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <node+0x62>
     d04:	10 92 43 09 	sts	0x0943, r1	; 0x800943 <node+0x65>
     d08:	10 92 42 09 	sts	0x0942, r1	; 0x800942 <node+0x64>
     d0c:	10 92 45 09 	sts	0x0945, r1	; 0x800945 <node+0x67>
     d10:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <node+0x66>
     d14:	30 93 47 09 	sts	0x0947, r19	; 0x800947 <node+0x69>
     d18:	20 93 46 09 	sts	0x0946, r18	; 0x800946 <node+0x68>
     d1c:	d0 93 49 09 	sts	0x0949, r29	; 0x800949 <node+0x6b>
     d20:	c0 93 48 09 	sts	0x0948, r28	; 0x800948 <node+0x6a>
     d24:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <node+0x6d>
     d28:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <node+0x6c>
     d2c:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <node+0x6f>
     d30:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <node+0x6e>
     d34:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <node+0x71>
     d38:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <node+0x70>
     d3c:	20 e1       	ldi	r18, 0x10	; 16
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	30 93 51 09 	sts	0x0951, r19	; 0x800951 <node+0x73>
     d44:	20 93 50 09 	sts	0x0950, r18	; 0x800950 <node+0x72>
     d48:	87 e2       	ldi	r24, 0x27	; 39
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	90 93 53 09 	sts	0x0953, r25	; 0x800953 <node+0x75>
     d50:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <node+0x74>
     d54:	88 e2       	ldi	r24, 0x28	; 40
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <node+0x77>
     d5c:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <node+0x76>
     d60:	d0 93 57 09 	sts	0x0957, r29	; 0x800957 <node+0x79>
     d64:	c0 93 56 09 	sts	0x0956, r28	; 0x800956 <node+0x78>
     d68:	81 e1       	ldi	r24, 0x11	; 17
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <node+0x7b>
     d70:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <node+0x7a>
     d74:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <node+0x7d>
     d78:	10 92 5a 09 	sts	0x095A, r1	; 0x80095a <node+0x7c>
     d7c:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <node+0x7f>
     d80:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <node+0x7e>
     d84:	30 93 5f 09 	sts	0x095F, r19	; 0x80095f <node+0x81>
     d88:	20 93 5e 09 	sts	0x095E, r18	; 0x80095e <node+0x80>
     d8c:	22 e1       	ldi	r18, 0x12	; 18
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	30 93 61 09 	sts	0x0961, r19	; 0x800961 <node+0x83>
     d94:	20 93 60 09 	sts	0x0960, r18	; 0x800960 <node+0x82>
     d98:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <node+0x85>
     d9c:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <node+0x84>
     da0:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <node+0x87>
     da4:	10 92 64 09 	sts	0x0964, r1	; 0x800964 <node+0x86>
     da8:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <node+0x89>
     dac:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <node+0x88>
     db0:	83 e1       	ldi	r24, 0x13	; 19
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <node+0x8b>
     db8:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <node+0x8a>
     dbc:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <node+0x8d>
     dc0:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <node+0x8c>
     dc4:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <node+0x8f>
     dc8:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <node+0x8e>
     dcc:	30 93 6f 09 	sts	0x096F, r19	; 0x80096f <node+0x91>
     dd0:	20 93 6e 09 	sts	0x096E, r18	; 0x80096e <node+0x90>
     dd4:	24 e1       	ldi	r18, 0x14	; 20
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	30 93 71 09 	sts	0x0971, r19	; 0x800971 <node+0x93>
     ddc:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <node+0x92>
     de0:	40 e2       	ldi	r20, 0x20	; 32
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	50 93 73 09 	sts	0x0973, r21	; 0x800973 <node+0x95>
     de8:	40 93 72 09 	sts	0x0972, r20	; 0x800972 <node+0x94>
     dec:	41 e2       	ldi	r20, 0x21	; 33
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	50 93 75 09 	sts	0x0975, r21	; 0x800975 <node+0x97>
     df4:	40 93 74 09 	sts	0x0974, r20	; 0x800974 <node+0x96>
     df8:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <node+0x99>
     dfc:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <node+0x98>
     e00:	85 e1       	ldi	r24, 0x15	; 21
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <node+0x9b>
     e08:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <node+0x9a>
     e0c:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <node+0x9d>
     e10:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <node+0x9c>
     e14:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <node+0x9f>
     e18:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <node+0x9e>
     e1c:	30 93 7f 09 	sts	0x097F, r19	; 0x80097f <node+0xa1>
     e20:	20 93 7e 09 	sts	0x097E, r18	; 0x80097e <node+0xa0>
     e24:	26 e1       	ldi	r18, 0x16	; 22
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	30 93 81 09 	sts	0x0981, r19	; 0x800981 <node+0xa3>
     e2c:	20 93 80 09 	sts	0x0980, r18	; 0x800980 <node+0xa2>
     e30:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <node+0xa5>
     e34:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <node+0xa4>
     e38:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <node+0xa7>
     e3c:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <node+0xa6>
     e40:	90 93 87 09 	sts	0x0987, r25	; 0x800987 <node+0xa9>
     e44:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <node+0xa8>
     e48:	87 e1       	ldi	r24, 0x17	; 23
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 89 09 	sts	0x0989, r25	; 0x800989 <node+0xab>
     e50:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <node+0xaa>
     e54:	10 92 8b 09 	sts	0x098B, r1	; 0x80098b <node+0xad>
     e58:	10 92 8a 09 	sts	0x098A, r1	; 0x80098a <node+0xac>
     e5c:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <node+0xaf>
     e60:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <node+0xae>
     e64:	86 e1       	ldi	r24, 0x16	; 22
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	90 93 8f 09 	sts	0x098F, r25	; 0x80098f <node+0xb1>
     e6c:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <node+0xb0>
     e70:	88 e1       	ldi	r24, 0x18	; 24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <node+0xb3>
     e78:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <node+0xb2>
     e7c:	c9 e2       	ldi	r28, 0x29	; 41
     e7e:	d0 e0       	ldi	r29, 0x00	; 0
     e80:	d0 93 93 09 	sts	0x0993, r29	; 0x800993 <node+0xb5>
     e84:	c0 93 92 09 	sts	0x0992, r28	; 0x800992 <node+0xb4>
     e88:	0f 2e       	mov	r0, r31
     e8a:	fa e2       	ldi	r31, 0x2A	; 42
     e8c:	af 2e       	mov	r10, r31
     e8e:	b1 2c       	mov	r11, r1
     e90:	f0 2d       	mov	r31, r0
     e92:	b0 92 95 09 	sts	0x0995, r11	; 0x800995 <node+0xb7>
     e96:	a0 92 94 09 	sts	0x0994, r10	; 0x800994 <node+0xb6>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 97 09 	sts	0x0997, r25	; 0x800997 <node+0xb9>
     ea2:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <node+0xb8>
     ea6:	e7 e1       	ldi	r30, 0x17	; 23
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	f0 93 99 09 	sts	0x0999, r31	; 0x800999 <node+0xbb>
     eae:	e0 93 98 09 	sts	0x0998, r30	; 0x800998 <node+0xba>
     eb2:	10 92 9b 09 	sts	0x099B, r1	; 0x80099b <node+0xbd>
     eb6:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <node+0xbc>
     eba:	10 92 9d 09 	sts	0x099D, r1	; 0x80099d <node+0xbf>
     ebe:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <node+0xbe>
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f3 e0       	ldi	r31, 0x03	; 3
     ec6:	8f 2e       	mov	r8, r31
     ec8:	91 2c       	mov	r9, r1
     eca:	f0 2d       	mov	r31, r0
     ecc:	90 92 9f 09 	sts	0x099F, r9	; 0x80099f <node+0xc1>
     ed0:	80 92 9e 09 	sts	0x099E, r8	; 0x80099e <node+0xc0>
     ed4:	6a e1       	ldi	r22, 0x1A	; 26
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	70 93 a1 09 	sts	0x09A1, r23	; 0x8009a1 <node+0xc3>
     edc:	60 93 a0 09 	sts	0x09A0, r22	; 0x8009a0 <node+0xc2>
     ee0:	a4 e2       	ldi	r26, 0x24	; 36
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	b0 93 a3 09 	sts	0x09A3, r27	; 0x8009a3 <node+0xc5>
     ee8:	a0 93 a2 09 	sts	0x09A2, r26	; 0x8009a2 <node+0xc4>
     eec:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <node+0xc7>
     ef0:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <node+0xc6>
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f9 e1       	ldi	r31, 0x19	; 25
     ef8:	6f 2e       	mov	r6, r31
     efa:	71 2c       	mov	r7, r1
     efc:	f0 2d       	mov	r31, r0
     efe:	70 92 a7 09 	sts	0x09A7, r7	; 0x8009a7 <node+0xc9>
     f02:	60 92 a6 09 	sts	0x09A6, r6	; 0x8009a6 <node+0xc8>
     f06:	4b e1       	ldi	r20, 0x1B	; 27
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	50 93 a9 09 	sts	0x09A9, r21	; 0x8009a9 <node+0xcb>
     f0e:	40 93 a8 09 	sts	0x09A8, r20	; 0x8009a8 <node+0xca>
     f12:	85 e2       	ldi	r24, 0x25	; 37
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 ab 09 	sts	0x09AB, r25	; 0x8009ab <node+0xcd>
     f1a:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <node+0xcc>
     f1e:	0f 2e       	mov	r0, r31
     f20:	fc e2       	ldi	r31, 0x2C	; 44
     f22:	4f 2e       	mov	r4, r31
     f24:	51 2c       	mov	r5, r1
     f26:	f0 2d       	mov	r31, r0
     f28:	50 92 ad 09 	sts	0x09AD, r5	; 0x8009ad <node+0xcf>
     f2c:	40 92 ac 09 	sts	0x09AC, r4	; 0x8009ac <node+0xce>
     f30:	70 93 af 09 	sts	0x09AF, r23	; 0x8009af <node+0xd1>
     f34:	60 93 ae 09 	sts	0x09AE, r22	; 0x8009ae <node+0xd0>
     f38:	2c e1       	ldi	r18, 0x1C	; 28
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	30 93 b1 09 	sts	0x09B1, r19	; 0x8009b1 <node+0xd3>
     f40:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <node+0xd2>
     f44:	86 e2       	ldi	r24, 0x26	; 38
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	90 93 b3 09 	sts	0x09B3, r25	; 0x8009b3 <node+0xd5>
     f4c:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <node+0xd4>
     f50:	0d e2       	ldi	r16, 0x2D	; 45
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	10 93 b5 09 	sts	0x09B5, r17	; 0x8009b5 <node+0xd7>
     f58:	00 93 b4 09 	sts	0x09B4, r16	; 0x8009b4 <node+0xd6>
     f5c:	0b e0       	ldi	r16, 0x0B	; 11
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	10 93 b7 09 	sts	0x09B7, r17	; 0x8009b7 <node+0xd9>
     f64:	00 93 b6 09 	sts	0x09B6, r16	; 0x8009b6 <node+0xd8>
     f68:	50 93 b9 09 	sts	0x09B9, r21	; 0x8009b9 <node+0xdb>
     f6c:	40 93 b8 09 	sts	0x09B8, r20	; 0x8009b8 <node+0xda>
     f70:	8d e1       	ldi	r24, 0x1D	; 29
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	90 93 bb 09 	sts	0x09BB, r25	; 0x8009bb <node+0xdd>
     f78:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <node+0xdc>
     f7c:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <node+0xdf>
     f80:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <node+0xde>
     f84:	10 93 bf 09 	sts	0x09BF, r17	; 0x8009bf <node+0xe1>
     f88:	00 93 be 09 	sts	0x09BE, r16	; 0x8009be <node+0xe0>
     f8c:	30 93 c1 09 	sts	0x09C1, r19	; 0x8009c1 <node+0xe3>
     f90:	20 93 c0 09 	sts	0x09C0, r18	; 0x8009c0 <node+0xe2>
     f94:	2e e1       	ldi	r18, 0x1E	; 30
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	30 93 c3 09 	sts	0x09C3, r19	; 0x8009c3 <node+0xe5>
     f9c:	20 93 c2 09 	sts	0x09C2, r18	; 0x8009c2 <node+0xe4>
     fa0:	10 92 c5 09 	sts	0x09C5, r1	; 0x8009c5 <node+0xe7>
     fa4:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <node+0xe6>
     fa8:	90 93 c7 09 	sts	0x09C7, r25	; 0x8009c7 <node+0xe9>
     fac:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <node+0xe8>
     fb0:	8f e1       	ldi	r24, 0x1F	; 31
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	90 93 c9 09 	sts	0x09C9, r25	; 0x8009c9 <node+0xeb>
     fb8:	80 93 c8 09 	sts	0x09C8, r24	; 0x8009c8 <node+0xea>
     fbc:	07 e2       	ldi	r16, 0x27	; 39
     fbe:	10 e0       	ldi	r17, 0x00	; 0
     fc0:	10 93 cb 09 	sts	0x09CB, r17	; 0x8009cb <node+0xed>
     fc4:	00 93 ca 09 	sts	0x09CA, r16	; 0x8009ca <node+0xec>
     fc8:	0f 2e       	mov	r0, r31
     fca:	fe e2       	ldi	r31, 0x2E	; 46
     fcc:	2f 2e       	mov	r2, r31
     fce:	31 2c       	mov	r3, r1
     fd0:	f0 2d       	mov	r31, r0
     fd2:	30 92 cd 09 	sts	0x09CD, r3	; 0x8009cd <node+0xef>
     fd6:	20 92 cc 09 	sts	0x09CC, r2	; 0x8009cc <node+0xee>
     fda:	30 93 cf 09 	sts	0x09CF, r19	; 0x8009cf <node+0xf1>
     fde:	20 93 ce 09 	sts	0x09CE, r18	; 0x8009ce <node+0xf0>
     fe2:	68 94       	set
     fe4:	ee 24       	eor	r14, r14
     fe6:	e5 f8       	bld	r14, 5
     fe8:	f1 2c       	mov	r15, r1
     fea:	f0 92 d1 09 	sts	0x09D1, r15	; 0x8009d1 <node+0xf3>
     fee:	e0 92 d0 09 	sts	0x09D0, r14	; 0x8009d0 <node+0xf2>
     ff2:	08 e2       	ldi	r16, 0x28	; 40
     ff4:	10 e0       	ldi	r17, 0x00	; 0
     ff6:	10 93 d3 09 	sts	0x09D3, r17	; 0x8009d3 <node+0xf5>
     ffa:	00 93 d2 09 	sts	0x09D2, r16	; 0x8009d2 <node+0xf4>
     ffe:	0f 2e       	mov	r0, r31
    1000:	ff e2       	ldi	r31, 0x2F	; 47
    1002:	cf 2e       	mov	r12, r31
    1004:	d1 2c       	mov	r13, r1
    1006:	f0 2d       	mov	r31, r0
    1008:	d0 92 d5 09 	sts	0x09D5, r13	; 0x8009d5 <node+0xf7>
    100c:	c0 92 d4 09 	sts	0x09D4, r12	; 0x8009d4 <node+0xf6>
    1010:	0f 2e       	mov	r0, r31
    1012:	f3 e1       	ldi	r31, 0x13	; 19
    1014:	cf 2e       	mov	r12, r31
    1016:	d1 2c       	mov	r13, r1
    1018:	f0 2d       	mov	r31, r0
    101a:	d0 92 d7 09 	sts	0x09D7, r13	; 0x8009d7 <node+0xf9>
    101e:	c0 92 d6 09 	sts	0x09D6, r12	; 0x8009d6 <node+0xf8>
    1022:	90 93 d9 09 	sts	0x09D9, r25	; 0x8009d9 <node+0xfb>
    1026:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <node+0xfa>
    102a:	01 e2       	ldi	r16, 0x21	; 33
    102c:	10 e0       	ldi	r17, 0x00	; 0
    102e:	10 93 db 09 	sts	0x09DB, r17	; 0x8009db <node+0xfd>
    1032:	00 93 da 09 	sts	0x09DA, r16	; 0x8009da <node+0xfc>
    1036:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <node+0xff>
    103a:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <node+0xfe>
    103e:	d0 92 df 09 	sts	0x09DF, r13	; 0x8009df <node+0x101>
    1042:	c0 92 de 09 	sts	0x09DE, r12	; 0x8009de <node+0x100>
    1046:	f0 92 e1 09 	sts	0x09E1, r15	; 0x8009e1 <node+0x103>
    104a:	e0 92 e0 09 	sts	0x09E0, r14	; 0x8009e0 <node+0x102>
    104e:	0f 2e       	mov	r0, r31
    1050:	f2 e2       	ldi	r31, 0x22	; 34
    1052:	ef 2e       	mov	r14, r31
    1054:	f1 2c       	mov	r15, r1
    1056:	f0 2d       	mov	r31, r0
    1058:	f0 92 e3 09 	sts	0x09E3, r15	; 0x8009e3 <node+0x105>
    105c:	e0 92 e2 09 	sts	0x09E2, r14	; 0x8009e2 <node+0x104>
    1060:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <node+0x107>
    1064:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <node+0x106>
    1068:	10 93 e7 09 	sts	0x09E7, r17	; 0x8009e7 <node+0x109>
    106c:	00 93 e6 09 	sts	0x09E6, r16	; 0x8009e6 <node+0x108>
    1070:	03 e2       	ldi	r16, 0x23	; 35
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	10 93 e9 09 	sts	0x09E9, r17	; 0x8009e9 <node+0x10b>
    1078:	00 93 e8 09 	sts	0x09E8, r16	; 0x8009e8 <node+0x10a>
    107c:	d0 93 eb 09 	sts	0x09EB, r29	; 0x8009eb <node+0x10d>
    1080:	c0 93 ea 09 	sts	0x09EA, r28	; 0x8009ea <node+0x10c>
    1084:	c0 e3       	ldi	r28, 0x30	; 48
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	d0 93 ed 09 	sts	0x09ED, r29	; 0x8009ed <node+0x10f>
    108c:	c0 93 ec 09 	sts	0x09EC, r28	; 0x8009ec <node+0x10e>
    1090:	f0 92 ef 09 	sts	0x09EF, r15	; 0x8009ef <node+0x111>
    1094:	e0 92 ee 09 	sts	0x09EE, r14	; 0x8009ee <node+0x110>
    1098:	b0 93 f1 09 	sts	0x09F1, r27	; 0x8009f1 <node+0x113>
    109c:	a0 93 f0 09 	sts	0x09F0, r26	; 0x8009f0 <node+0x112>
    10a0:	b0 92 f3 09 	sts	0x09F3, r11	; 0x8009f3 <node+0x115>
    10a4:	a0 92 f2 09 	sts	0x09F2, r10	; 0x8009f2 <node+0x114>
    10a8:	ab e2       	ldi	r26, 0x2B	; 43
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	b0 93 f5 09 	sts	0x09F5, r27	; 0x8009f5 <node+0x117>
    10b0:	a0 93 f4 09 	sts	0x09F4, r26	; 0x8009f4 <node+0x116>
    10b4:	90 92 f7 09 	sts	0x09F7, r9	; 0x8009f7 <node+0x119>
    10b8:	80 92 f6 09 	sts	0x09F6, r8	; 0x8009f6 <node+0x118>
    10bc:	70 92 f9 09 	sts	0x09F9, r7	; 0x8009f9 <node+0x11b>
    10c0:	60 92 f8 09 	sts	0x09F8, r6	; 0x8009f8 <node+0x11a>
    10c4:	10 93 fb 09 	sts	0x09FB, r17	; 0x8009fb <node+0x11d>
    10c8:	00 93 fa 09 	sts	0x09FA, r16	; 0x8009fa <node+0x11c>
    10cc:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <node+0x11f>
    10d0:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <node+0x11e>
    10d4:	0f 2e       	mov	r0, r31
    10d6:	f7 e0       	ldi	r31, 0x07	; 7
    10d8:	cf 2e       	mov	r12, r31
    10da:	d1 2c       	mov	r13, r1
    10dc:	f0 2d       	mov	r31, r0
    10de:	d0 92 ff 09 	sts	0x09FF, r13	; 0x8009ff <node+0x121>
    10e2:	c0 92 fe 09 	sts	0x09FE, r12	; 0x8009fe <node+0x120>
    10e6:	70 93 01 0a 	sts	0x0A01, r23	; 0x800a01 <node+0x123>
    10ea:	60 93 00 0a 	sts	0x0A00, r22	; 0x800a00 <node+0x122>
    10ee:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <node+0x125>
    10f2:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <node+0x124>
    10f6:	10 92 05 0a 	sts	0x0A05, r1	; 0x800a05 <node+0x127>
    10fa:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <node+0x126>
    10fe:	d0 92 07 0a 	sts	0x0A07, r13	; 0x800a07 <node+0x129>
    1102:	c0 92 06 0a 	sts	0x0A06, r12	; 0x800a06 <node+0x128>
    1106:	50 93 09 0a 	sts	0x0A09, r21	; 0x800a09 <node+0x12b>
    110a:	40 93 08 0a 	sts	0x0A08, r20	; 0x800a08 <node+0x12a>
    110e:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <node+0x12d>
    1112:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <node+0x12c>
    1116:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <node+0x12f>
    111a:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <node+0x12e>
    111e:	0f 2e       	mov	r0, r31
    1120:	ff e0       	ldi	r31, 0x0F	; 15
    1122:	cf 2e       	mov	r12, r31
    1124:	d1 2c       	mov	r13, r1
    1126:	f0 2d       	mov	r31, r0
    1128:	d0 92 0f 0a 	sts	0x0A0F, r13	; 0x800a0f <node+0x131>
    112c:	c0 92 0e 0a 	sts	0x0A0E, r12	; 0x800a0e <node+0x130>
    1130:	30 93 11 0a 	sts	0x0A11, r19	; 0x800a11 <node+0x133>
    1134:	20 93 10 0a 	sts	0x0A10, r18	; 0x800a10 <node+0x132>
    1138:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <node+0x135>
    113c:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <node+0x134>
    1140:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <node+0x137>
    1144:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <node+0x136>
    1148:	d0 92 17 0a 	sts	0x0A17, r13	; 0x800a17 <node+0x139>
    114c:	c0 92 16 0a 	sts	0x0A16, r12	; 0x800a16 <node+0x138>
    1150:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <node+0x13b>
    1154:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <node+0x13a>
    1158:	10 92 1b 0a 	sts	0x0A1B, r1	; 0x800a1b <node+0x13d>
    115c:	10 92 1a 0a 	sts	0x0A1A, r1	; 0x800a1a <node+0x13c>
    1160:	10 92 1d 0a 	sts	0x0A1D, r1	; 0x800a1d <node+0x13f>
    1164:	10 92 1c 0a 	sts	0x0A1C, r1	; 0x800a1c <node+0x13e>
    1168:	f0 93 1f 0a 	sts	0x0A1F, r31	; 0x800a1f <node+0x141>
    116c:	e0 93 1e 0a 	sts	0x0A1E, r30	; 0x800a1e <node+0x140>
    1170:	f0 92 21 0a 	sts	0x0A21, r15	; 0x800a21 <node+0x143>
    1174:	e0 92 20 0a 	sts	0x0A20, r14	; 0x800a20 <node+0x142>
    1178:	10 92 23 0a 	sts	0x0A23, r1	; 0x800a23 <node+0x145>
    117c:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <node+0x144>
    1180:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <node+0x147>
    1184:	10 92 24 0a 	sts	0x0A24, r1	; 0x800a24 <node+0x146>
    1188:	f0 93 27 0a 	sts	0x0A27, r31	; 0x800a27 <node+0x149>
    118c:	e0 93 26 0a 	sts	0x0A26, r30	; 0x800a26 <node+0x148>
    1190:	10 93 29 0a 	sts	0x0A29, r17	; 0x800a29 <node+0x14b>
    1194:	00 93 28 0a 	sts	0x0A28, r16	; 0x800a28 <node+0x14a>
    1198:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <node+0x14d>
    119c:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <node+0x14c>
    11a0:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <node+0x14f>
    11a4:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <node+0x14e>
    11a8:	10 93 2f 0a 	sts	0x0A2F, r17	; 0x800a2f <node+0x151>
    11ac:	00 93 2e 0a 	sts	0x0A2E, r16	; 0x800a2e <node+0x150>
    11b0:	50 92 31 0a 	sts	0x0A31, r5	; 0x800a31 <node+0x153>
    11b4:	40 92 30 0a 	sts	0x0A30, r4	; 0x800a30 <node+0x152>
    11b8:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <node+0x155>
    11bc:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <node+0x154>
    11c0:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <node+0x157>
    11c4:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <node+0x156>
    11c8:	70 93 37 0a 	sts	0x0A37, r23	; 0x800a37 <node+0x159>
    11cc:	60 93 36 0a 	sts	0x0A36, r22	; 0x800a36 <node+0x158>
    11d0:	b0 93 39 0a 	sts	0x0A39, r27	; 0x800a39 <node+0x15b>
    11d4:	a0 93 38 0a 	sts	0x0A38, r26	; 0x800a38 <node+0x15a>
    11d8:	10 92 3b 0a 	sts	0x0A3B, r1	; 0x800a3b <node+0x15d>
    11dc:	10 92 3a 0a 	sts	0x0A3A, r1	; 0x800a3a <node+0x15c>
    11e0:	10 92 3d 0a 	sts	0x0A3D, r1	; 0x800a3d <node+0x15f>
    11e4:	10 92 3c 0a 	sts	0x0A3C, r1	; 0x800a3c <node+0x15e>
    11e8:	50 93 3f 0a 	sts	0x0A3F, r21	; 0x800a3f <node+0x161>
    11ec:	40 93 3e 0a 	sts	0x0A3E, r20	; 0x800a3e <node+0x160>
    11f0:	30 92 41 0a 	sts	0x0A41, r3	; 0x800a41 <node+0x163>
    11f4:	20 92 40 0a 	sts	0x0A40, r2	; 0x800a40 <node+0x162>
    11f8:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <node+0x165>
    11fc:	10 92 42 0a 	sts	0x0A42, r1	; 0x800a42 <node+0x164>
    1200:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <node+0x167>
    1204:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <node+0x166>
    1208:	30 93 47 0a 	sts	0x0A47, r19	; 0x800a47 <node+0x169>
    120c:	20 93 46 0a 	sts	0x0A46, r18	; 0x800a46 <node+0x168>
    1210:	0d e2       	ldi	r16, 0x2D	; 45
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	10 93 49 0a 	sts	0x0A49, r17	; 0x800a49 <node+0x16b>
    1218:	00 93 48 0a 	sts	0x0A48, r16	; 0x800a48 <node+0x16a>
    121c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <node+0x16d>
    1220:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <node+0x16c>
    1224:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <node+0x16f>
    1228:	10 92 4c 0a 	sts	0x0A4C, r1	; 0x800a4c <node+0x16e>
    122c:	90 93 4f 0a 	sts	0x0A4F, r25	; 0x800a4f <node+0x171>
    1230:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <node+0x170>
    1234:	d0 93 51 0a 	sts	0x0A51, r29	; 0x800a51 <node+0x173>
    1238:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <node+0x172>
    123c:	10 92 53 0a 	sts	0x0A53, r1	; 0x800a53 <node+0x175>
    1240:	10 92 52 0a 	sts	0x0A52, r1	; 0x800a52 <node+0x174>
    1244:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <node+0x177>
    1248:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <node+0x176>
    124c:	f0 92 57 0a 	sts	0x0A57, r15	; 0x800a57 <node+0x179>
    1250:	e0 92 56 0a 	sts	0x0A56, r14	; 0x800a56 <node+0x178>
    1254:	2f e2       	ldi	r18, 0x2F	; 47
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	30 93 59 0a 	sts	0x0A59, r19	; 0x800a59 <node+0x17b>
    125c:	20 93 58 0a 	sts	0x0A58, r18	; 0x800a58 <node+0x17a>
    1260:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <node+0x17d>
    1264:	10 92 5a 0a 	sts	0x0A5A, r1	; 0x800a5a <node+0x17c>
    1268:	10 92 5d 0a 	sts	0x0A5D, r1	; 0x800a5d <node+0x17f>
    126c:	10 92 5c 0a 	sts	0x0A5C, r1	; 0x800a5c <node+0x17e>
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	7f 90       	pop	r7
    128a:	6f 90       	pop	r6
    128c:	5f 90       	pop	r5
    128e:	4f 90       	pop	r4
    1290:	3f 90       	pop	r3
    1292:	2f 90       	pop	r2
    1294:	08 95       	ret

00001296 <__vector_25>:
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	0b b6       	in	r0, 0x3b	; 59
    12a2:	0f 92       	push	r0
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
    12b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12b8:	88 23       	and	r24, r24
    12ba:	0c f0       	brlt	.+2      	; 0x12be <__vector_25+0x28>
    12bc:	30 c1       	rjmp	.+608    	; 0x151e <__vector_25+0x288>
    12be:	98 2f       	mov	r25, r24
    12c0:	9f 77       	andi	r25, 0x7F	; 127
    12c2:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <lastCommand>
    12c6:	4e 2f       	mov	r20, r30
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	fa 01       	movw	r30, r20
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	e0 31       	cpi	r30, 0x10	; 16
    12d0:	f1 05       	cpc	r31, r1
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__vector_25+0x40>
    12d4:	32 c1       	rjmp	.+612    	; 0x153a <__vector_25+0x2a4>
    12d6:	88 27       	eor	r24, r24
    12d8:	ee 58       	subi	r30, 0x8E	; 142
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__tablejump2__>
    12e2:	e0 91 3c 08 	lds	r30, 0x083C	; 0x80083c <noteCount>
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ef 5a       	subi	r30, 0xAF	; 175
    12ea:	f7 4f       	sbci	r31, 0xF7	; 247
    12ec:	90 83       	st	Z, r25
    12ee:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <noteCount>
    12f8:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    12fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1300:	1c c1       	rjmp	.+568    	; 0x153a <__vector_25+0x2a4>
    1302:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <noteCount2>
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	e3 5c       	subi	r30, 0xC3	; 195
    130a:	f7 4f       	sbci	r31, 0xF7	; 247
    130c:	90 83       	st	Z, r25
    130e:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <noteCount2>
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <noteCount2>
    1318:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <noteCount2>
    131c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1320:	0c c1       	rjmp	.+536    	; 0x153a <__vector_25+0x2a4>
    1322:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <taskCount>
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	eb 59       	subi	r30, 0x9B	; 155
    132a:	f7 4f       	sbci	r31, 0xF7	; 247
    132c:	90 83       	st	Z, r25
    132e:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <taskCount>
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <taskCount>
    1338:	00 c1       	rjmp	.+512    	; 0x153a <__vector_25+0x2a4>
    133a:	e0 91 37 08 	lds	r30, 0x0837	; 0x800837 <taskCount2>
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ee 59       	subi	r30, 0x9E	; 158
    1342:	f5 4f       	sbci	r31, 0xF5	; 245
    1344:	90 83       	st	Z, r25
    1346:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <taskCount2>
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <taskCount2>
    1350:	f4 c0       	rjmp	.+488    	; 0x153a <__vector_25+0x2a4>
    1352:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <otherBotLocation>
    1356:	f1 c0       	rjmp	.+482    	; 0x153a <__vector_25+0x2a4>
    1358:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <otherBotMovingTo>
    135c:	ee c0       	rjmp	.+476    	; 0x153a <__vector_25+0x2a4>
    135e:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <noteToStrike>
    1362:	89 13       	cpse	r24, r25
    1364:	ea c0       	rjmp	.+468    	; 0x153a <__vector_25+0x2a4>
    1366:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <noteToStrike>
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <noteToStrike>
    1370:	e4 c0       	rjmp	.+456    	; 0x153a <__vector_25+0x2a4>
    1372:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <noteToProcess>
    1376:	89 13       	cpse	r24, r25
    1378:	e0 c0       	rjmp	.+448    	; 0x153a <__vector_25+0x2a4>
    137a:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <noteToProcess>
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <noteToProcess>
    1384:	da c0       	rjmp	.+436    	; 0x153a <__vector_25+0x2a4>
    1386:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <taskCost>
    138a:	89 0f       	add	r24, r25
    138c:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <taskCost>
    1390:	d4 c0       	rjmp	.+424    	; 0x153a <__vector_25+0x2a4>
    1392:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <otherBotLastTaskIndex>
    1396:	d1 c0       	rjmp	.+418    	; 0x153a <__vector_25+0x2a4>
    1398:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <wchTask>
    139c:	ce c0       	rjmp	.+412    	; 0x153a <__vector_25+0x2a4>
    139e:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    13a2:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    13a6:	eb 59       	subi	r30, 0x9B	; 155
    13a8:	f7 4f       	sbci	r31, 0xF7	; 247
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 37       	cpi	r24, 0x7F	; 127
    13ae:	51 f0       	breq	.+20     	; 0x13c4 <__vector_25+0x12e>
    13b0:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    13b4:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    13b8:	eb 59       	subi	r30, 0x9B	; 155
    13ba:	f7 4f       	sbci	r31, 0xF7	; 247
    13bc:	80 81       	ld	r24, Z
    13be:	80 93 f8 0b 	sts	0x0BF8, r24	; 0x800bf8 <tmpTask1>
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <__vector_25+0x140>
    13c4:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    13c8:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    13cc:	ee 59       	subi	r30, 0x9E	; 158
    13ce:	f5 4f       	sbci	r31, 0xF5	; 245
    13d0:	80 81       	ld	r24, Z
    13d2:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <tmpTask2>
    13d6:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <wchTask>
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	81 f4       	brne	.+32     	; 0x13fe <__vector_25+0x168>
    13de:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    13e2:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    13e6:	eb 59       	subi	r30, 0x9B	; 155
    13e8:	f7 4f       	sbci	r31, 0xF7	; 247
    13ea:	90 83       	st	Z, r25
    13ec:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    13f0:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    13f4:	ee 59       	subi	r30, 0x9E	; 158
    13f6:	f5 4f       	sbci	r31, 0xF5	; 245
    13f8:	8f e7       	ldi	r24, 0x7F	; 127
    13fa:	80 83       	st	Z, r24
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <__vector_25+0x186>
    13fe:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    1402:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    1406:	ee 59       	subi	r30, 0x9E	; 158
    1408:	f5 4f       	sbci	r31, 0xF5	; 245
    140a:	90 83       	st	Z, r25
    140c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    1410:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    1414:	eb 59       	subi	r30, 0x9B	; 155
    1416:	f7 4f       	sbci	r31, 0xF7	; 247
    1418:	8f e7       	ldi	r24, 0x7F	; 127
    141a:	80 83       	st	Z, r24
    141c:	80 91 f8 0b 	lds	r24, 0x0BF8	; 0x800bf8 <tmpTask1>
    1420:	8f 37       	cpi	r24, 0x7F	; 127
    1422:	19 f1       	breq	.+70     	; 0x146a <__vector_25+0x1d4>
    1424:	e0 ec       	ldi	r30, 0xC0	; 192
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	85 ff       	sbrs	r24, 5
    142c:	fd cf       	rjmp	.-6      	; 0x1428 <__vector_25+0x192>
    142e:	8f e0       	ldi	r24, 0x0F	; 15
    1430:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1434:	e0 ec       	ldi	r30, 0xC0	; 192
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	85 ff       	sbrs	r24, 5
    143c:	fd cf       	rjmp	.-6      	; 0x1438 <__vector_25+0x1a2>
    143e:	81 e8       	ldi	r24, 0x81	; 129
    1440:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1444:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <tmpTask1>
    1448:	e0 ec       	ldi	r30, 0xC0	; 192
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	85 ff       	sbrs	r24, 5
    1450:	fd cf       	rjmp	.-6      	; 0x144c <__vector_25+0x1b6>
    1452:	80 e1       	ldi	r24, 0x10	; 16
    1454:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1458:	90 68       	ori	r25, 0x80	; 128
    145a:	e0 ec       	ldi	r30, 0xC0	; 192
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	85 ff       	sbrs	r24, 5
    1462:	fd cf       	rjmp	.-6      	; 0x145e <__vector_25+0x1c8>
    1464:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1468:	22 c0       	rjmp	.+68     	; 0x14ae <__vector_25+0x218>
    146a:	e0 ec       	ldi	r30, 0xC0	; 192
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	85 ff       	sbrs	r24, 5
    1472:	fd cf       	rjmp	.-6      	; 0x146e <__vector_25+0x1d8>
    1474:	8f e0       	ldi	r24, 0x0F	; 15
    1476:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    147a:	e0 ec       	ldi	r30, 0xC0	; 192
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	85 ff       	sbrs	r24, 5
    1482:	fd cf       	rjmp	.-6      	; 0x147e <__vector_25+0x1e8>
    1484:	82 e8       	ldi	r24, 0x82	; 130
    1486:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    148a:	90 91 7b 08 	lds	r25, 0x087B	; 0x80087b <tmpTask2>
    148e:	e0 ec       	ldi	r30, 0xC0	; 192
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	85 ff       	sbrs	r24, 5
    1496:	fd cf       	rjmp	.-6      	; 0x1492 <__vector_25+0x1fc>
    1498:	80 e1       	ldi	r24, 0x10	; 16
    149a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    149e:	90 68       	ori	r25, 0x80	; 128
    14a0:	e0 ec       	ldi	r30, 0xC0	; 192
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	85 ff       	sbrs	r24, 5
    14a8:	fd cf       	rjmp	.-6      	; 0x14a4 <__vector_25+0x20e>
    14aa:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <swap+0x1>
    14b6:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <swap>
    14ba:	3f c0       	rjmp	.+126    	; 0x153a <__vector_25+0x2a4>
    14bc:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <wchTask>
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	81 f4       	brne	.+32     	; 0x14e4 <__vector_25+0x24e>
    14c4:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    14c8:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    14cc:	eb 59       	subi	r30, 0x9B	; 155
    14ce:	f7 4f       	sbci	r31, 0xF7	; 247
    14d0:	90 83       	st	Z, r25
    14d2:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    14d6:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    14da:	ee 59       	subi	r30, 0x9E	; 158
    14dc:	f5 4f       	sbci	r31, 0xF5	; 245
    14de:	8f e7       	ldi	r24, 0x7F	; 127
    14e0:	80 83       	st	Z, r24
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <__vector_25+0x26c>
    14e4:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    14e8:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    14ec:	ee 59       	subi	r30, 0x9E	; 158
    14ee:	f5 4f       	sbci	r31, 0xF5	; 245
    14f0:	90 83       	st	Z, r25
    14f2:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    14f6:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    14fa:	eb 59       	subi	r30, 0x9B	; 155
    14fc:	f7 4f       	sbci	r31, 0xF7	; 247
    14fe:	8f e7       	ldi	r24, 0x7F	; 127
    1500:	80 83       	st	Z, r24
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <swap+0x1>
    150a:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <swap>
    150e:	15 c0       	rjmp	.+42     	; 0x153a <__vector_25+0x2a4>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <botEnd+0x1>
    1518:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <botEnd>
    151c:	0e c0       	rjmp	.+28     	; 0x153a <__vector_25+0x2a4>
    151e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <lastCommand>
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	19 f0       	breq	.+6      	; 0x152c <__vector_25+0x296>
    1526:	8c 30       	cpi	r24, 0x0C	; 12
    1528:	29 f0       	breq	.+10     	; 0x1534 <__vector_25+0x29e>
    152a:	07 c0       	rjmp	.+14     	; 0x153a <__vector_25+0x2a4>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <notesReceived>
    1532:	03 c0       	rjmp	.+6      	; 0x153a <__vector_25+0x2a4>
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 32 08 	sts	0x0832, r24	; 0x800832 <notesReceived2>
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	0f 90       	pop	r0
    154c:	0b be       	out	0x3b, r0	; 59
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_51>:
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1572:	90 91 33 08 	lds	r25, 0x0833	; 0x800833 <notesReceived>
    1576:	91 11       	cpse	r25, r1
    1578:	18 c0       	rjmp	.+48     	; 0x15aa <__vector_51+0x52>
    157a:	8f 3f       	cpi	r24, 0xFF	; 255
    157c:	81 f0       	breq	.+32     	; 0x159e <__vector_51+0x46>
    157e:	e0 91 3c 08 	lds	r30, 0x083C	; 0x80083c <noteCount>
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	ef 5a       	subi	r30, 0xAF	; 175
    1586:	f7 4f       	sbci	r31, 0xF7	; 247
    1588:	80 83       	st	Z, r24
    158a:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    158e:	8f 5f       	subi	r24, 0xFF	; 255
    1590:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <noteCount>
    1594:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    1598:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    159c:	21 c0       	rjmp	.+66     	; 0x15e0 <__vector_51+0x88>
    159e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <notesReceived>
    15a8:	1b c0       	rjmp	.+54     	; 0x15e0 <__vector_51+0x88>
    15aa:	90 91 32 08 	lds	r25, 0x0832	; 0x800832 <notesReceived2>
    15ae:	91 11       	cpse	r25, r1
    15b0:	17 c0       	rjmp	.+46     	; 0x15e0 <__vector_51+0x88>
    15b2:	8f 3f       	cpi	r24, 0xFF	; 255
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <__vector_51+0x7e>
    15b6:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <noteCount2>
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	e3 5c       	subi	r30, 0xC3	; 195
    15be:	f7 4f       	sbci	r31, 0xF7	; 247
    15c0:	80 83       	st	Z, r24
    15c2:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <noteCount2>
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	80 93 3b 08 	sts	0x083B, r24	; 0x80083b <noteCount2>
    15cc:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <noteCount2>
    15d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <__vector_51+0x88>
    15d6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 32 08 	sts	0x0832, r24	; 0x800832 <notesReceived2>
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	0f 90       	pop	r0
    15ea:	0b be       	out	0x3b, r0	; 59
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <__vector_8>:
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	8f 93       	push	r24
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 61 0a 	sts	0x0A61, r24	; 0x800a61 <BootInterrupt>
    1608:	8f 91       	pop	r24
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <servo1_pin_config>:
    1614:	25 9a       	sbi	0x04, 5	; 4
    1616:	2d 9a       	sbi	0x05, 5	; 5
    1618:	08 95       	ret

0000161a <timer1_init>:
    161a:	e1 e8       	ldi	r30, 0x81	; 129
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	10 82       	st	Z, r1
    1620:	8c ef       	ldi	r24, 0xFC	; 252
    1622:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    162c:	93 e0       	ldi	r25, 0x03	; 3
    162e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    1638:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    163c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1640:	8b ea       	ldi	r24, 0xAB	; 171
    1642:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1646:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    164a:	8c e0       	ldi	r24, 0x0C	; 12
    164c:	80 83       	st	Z, r24
    164e:	08 95       	ret

00001650 <servo_1>:
    1650:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1654:	68 2f       	mov	r22, r24
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__floatunsisf>
    1660:	2b e7       	ldi	r18, 0x7B	; 123
    1662:	34 e1       	ldi	r19, 0x14	; 20
    1664:	4e ee       	ldi	r20, 0xEE	; 238
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 be 1c 	call	0x397c	; 0x397c <__divsf3>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4c e0       	ldi	r20, 0x0C	; 12
    1672:	52 e4       	ldi	r21, 0x42	; 66
    1674:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <__addsf3>
    1678:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    167c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    1680:	08 95       	ret

00001682 <buzzer_pin_config>:
    1682:	3b 9a       	sbi	0x07, 3	; 7
    1684:	43 98       	cbi	0x08, 3	; 8
    1686:	08 95       	ret

00001688 <buzzer_on>:
    1688:	86 b1       	in	r24, 0x06	; 6
    168a:	88 60       	ori	r24, 0x08	; 8
    168c:	88 b9       	out	0x08, r24	; 8
    168e:	08 95       	ret

00001690 <buzzer_off>:
    1690:	86 b1       	in	r24, 0x06	; 6
    1692:	87 7f       	andi	r24, 0xF7	; 247
    1694:	88 b9       	out	0x08, r24	; 8
    1696:	08 95       	ret

00001698 <adc_pin_config>:
    1698:	10 ba       	out	0x10, r1	; 16
    169a:	11 ba       	out	0x11, r1	; 17
    169c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    16a0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    16a4:	08 95       	ret

000016a6 <motion_pin_config>:
    16a6:	81 b1       	in	r24, 0x01	; 1
    16a8:	8f 60       	ori	r24, 0x0F	; 15
    16aa:	81 b9       	out	0x01, r24	; 1
    16ac:	82 b1       	in	r24, 0x02	; 2
    16ae:	80 7f       	andi	r24, 0xF0	; 240
    16b0:	82 b9       	out	0x02, r24	; 2
    16b2:	ea e0       	ldi	r30, 0x0A	; 10
    16b4:	f1 e0       	ldi	r31, 0x01	; 1
    16b6:	80 81       	ld	r24, Z
    16b8:	88 61       	ori	r24, 0x18	; 24
    16ba:	80 83       	st	Z, r24
    16bc:	eb e0       	ldi	r30, 0x0B	; 11
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	80 81       	ld	r24, Z
    16c2:	88 61       	ori	r24, 0x18	; 24
    16c4:	80 83       	st	Z, r24
    16c6:	08 95       	ret

000016c8 <left_encoder_pin_config>:
    16c8:	6c 98       	cbi	0x0d, 4	; 13
    16ca:	74 9a       	sbi	0x0e, 4	; 14
    16cc:	08 95       	ret

000016ce <right_encoder_pin_config>:
    16ce:	6d 98       	cbi	0x0d, 5	; 13
    16d0:	75 9a       	sbi	0x0e, 5	; 14
    16d2:	08 95       	ret

000016d4 <port_init>:
    16d4:	e8 df       	rcall	.-48     	; 0x16a6 <motion_pin_config>
    16d6:	f8 df       	rcall	.-16     	; 0x16c8 <left_encoder_pin_config>
    16d8:	fa df       	rcall	.-12     	; 0x16ce <right_encoder_pin_config>
    16da:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_port_config>
    16de:	dc df       	rcall	.-72     	; 0x1698 <adc_pin_config>
    16e0:	d0 cf       	rjmp	.-96     	; 0x1682 <buzzer_pin_config>
    16e2:	08 95       	ret

000016e4 <timer5_init>:
    16e4:	e1 e2       	ldi	r30, 0x21	; 33
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	10 82       	st	Z, r1
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    16f6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    16fa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    16fe:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1702:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1706:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    170a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    170e:	89 ea       	ldi	r24, 0xA9	; 169
    1710:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1714:	8b e0       	ldi	r24, 0x0B	; 11
    1716:	80 83       	st	Z, r24
    1718:	08 95       	ret

0000171a <adc_init>:
    171a:	ea e7       	ldi	r30, 0x7A	; 122
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	10 82       	st	Z, r1
    1720:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	80 bf       	out	0x30, r24	; 48
    172e:	86 e8       	ldi	r24, 0x86	; 134
    1730:	80 83       	st	Z, r24
    1732:	08 95       	ret

00001734 <ADC_Conversion>:
    1734:	88 30       	cpi	r24, 0x08	; 8
    1736:	18 f0       	brcs	.+6      	; 0x173e <ADC_Conversion+0xa>
    1738:	98 e0       	ldi	r25, 0x08	; 8
    173a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    173e:	87 70       	andi	r24, 0x07	; 7
    1740:	80 62       	ori	r24, 0x20	; 32
    1742:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1746:	ea e7       	ldi	r30, 0x7A	; 122
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 64       	ori	r24, 0x40	; 64
    174e:	80 83       	st	Z, r24
    1750:	80 81       	ld	r24, Z
    1752:	84 ff       	sbrs	r24, 4
    1754:	fd cf       	rjmp	.-6      	; 0x1750 <ADC_Conversion+0x1c>
    1756:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    175a:	ea e7       	ldi	r30, 0x7A	; 122
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	90 81       	ld	r25, Z
    1760:	90 61       	ori	r25, 0x10	; 16
    1762:	90 83       	st	Z, r25
    1764:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1768:	08 95       	ret

0000176a <left_position_encoder_interrupt_init>:
    176a:	f8 94       	cli
    176c:	ea e6       	ldi	r30, 0x6A	; 106
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	82 60       	ori	r24, 0x02	; 2
    1774:	80 83       	st	Z, r24
    1776:	ec 9a       	sbi	0x1d, 4	; 29
    1778:	78 94       	sei
    177a:	08 95       	ret

0000177c <right_position_encoder_interrupt_init>:
    177c:	f8 94       	cli
    177e:	ea e6       	ldi	r30, 0x6A	; 106
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 60       	ori	r24, 0x08	; 8
    1786:	80 83       	st	Z, r24
    1788:	ed 9a       	sbi	0x1d, 5	; 29
    178a:	78 94       	sei
    178c:	08 95       	ret

0000178e <__vector_6>:
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    17a4:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    17a8:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    17ac:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	a1 1d       	adc	r26, r1
    17b4:	b1 1d       	adc	r27, r1
    17b6:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <ShaftCountRight>
    17ba:	90 93 cf 07 	sts	0x07CF, r25	; 0x8007cf <ShaftCountRight+0x1>
    17be:	a0 93 d0 07 	sts	0x07D0, r26	; 0x8007d0 <ShaftCountRight+0x2>
    17c2:	b0 93 d1 07 	sts	0x07D1, r27	; 0x8007d1 <ShaftCountRight+0x3>
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	0f 90       	pop	r0
    17d4:	1f 90       	pop	r1
    17d6:	18 95       	reti

000017d8 <__vector_5>:
    17d8:	1f 92       	push	r1
    17da:	0f 92       	push	r0
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	0f 92       	push	r0
    17e0:	11 24       	eor	r1, r1
    17e2:	8f 93       	push	r24
    17e4:	9f 93       	push	r25
    17e6:	af 93       	push	r26
    17e8:	bf 93       	push	r27
    17ea:	80 91 d2 07 	lds	r24, 0x07D2	; 0x8007d2 <ShaftCountLeft>
    17ee:	90 91 d3 07 	lds	r25, 0x07D3	; 0x8007d3 <ShaftCountLeft+0x1>
    17f2:	a0 91 d4 07 	lds	r26, 0x07D4	; 0x8007d4 <ShaftCountLeft+0x2>
    17f6:	b0 91 d5 07 	lds	r27, 0x07D5	; 0x8007d5 <ShaftCountLeft+0x3>
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	a1 1d       	adc	r26, r1
    17fe:	b1 1d       	adc	r27, r1
    1800:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <ShaftCountLeft>
    1804:	90 93 d3 07 	sts	0x07D3, r25	; 0x8007d3 <ShaftCountLeft+0x1>
    1808:	a0 93 d4 07 	sts	0x07D4, r26	; 0x8007d4 <ShaftCountLeft+0x2>
    180c:	b0 93 d5 07 	sts	0x07D5, r27	; 0x8007d5 <ShaftCountLeft+0x3>
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <motion_set>:
    1822:	92 b1       	in	r25, 0x02	; 2
    1824:	90 7f       	andi	r25, 0xF0	; 240
    1826:	8f 70       	andi	r24, 0x0F	; 15
    1828:	98 2b       	or	r25, r24
    182a:	92 b9       	out	0x02, r25	; 2
    182c:	08 95       	ret

0000182e <forward>:
    182e:	86 e0       	ldi	r24, 0x06	; 6
    1830:	f8 cf       	rjmp	.-16     	; 0x1822 <motion_set>
    1832:	08 95       	ret

00001834 <left>:
    1834:	85 e0       	ldi	r24, 0x05	; 5
    1836:	f5 cf       	rjmp	.-22     	; 0x1822 <motion_set>
    1838:	08 95       	ret

0000183a <right>:
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	f2 cf       	rjmp	.-28     	; 0x1822 <motion_set>
    183e:	08 95       	ret

00001840 <stop>:
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	ef cf       	rjmp	.-34     	; 0x1822 <motion_set>
    1844:	08 95       	ret

00001846 <angle_rotate>:
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	bc 01       	movw	r22, r24
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__floatunsisf>
    185c:	28 e4       	ldi	r18, 0x48	; 72
    185e:	31 ee       	ldi	r19, 0xE1	; 225
    1860:	42 e8       	ldi	r20, 0x82	; 130
    1862:	50 e4       	ldi	r21, 0x40	; 64
    1864:	0e 94 be 1c 	call	0x397c	; 0x397c <__divsf3>
    1868:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    186c:	ab 01       	movw	r20, r22
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <ShaftCountRight>
    1876:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <ShaftCountRight+0x1>
    187a:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <ShaftCountRight+0x2>
    187e:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <ShaftCountRight+0x3>
    1882:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <ShaftCountLeft>
    1886:	10 92 d3 07 	sts	0x07D3, r1	; 0x8007d3 <ShaftCountLeft+0x1>
    188a:	10 92 d4 07 	sts	0x07D4, r1	; 0x8007d4 <ShaftCountLeft+0x2>
    188e:	10 92 d5 07 	sts	0x07D5, r1	; 0x8007d5 <ShaftCountLeft+0x3>
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	e0 e0       	ldi	r30, 0x00	; 0
    1896:	c0 90 ce 07 	lds	r12, 0x07CE	; 0x8007ce <ShaftCountRight>
    189a:	d0 90 cf 07 	lds	r13, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    189e:	e0 90 d0 07 	lds	r14, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    18a2:	f0 90 d1 07 	lds	r15, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    18a6:	00 91 d2 07 	lds	r16, 0x07D2	; 0x8007d2 <ShaftCountLeft>
    18aa:	10 91 d3 07 	lds	r17, 0x07D3	; 0x8007d3 <ShaftCountLeft+0x1>
    18ae:	20 91 d4 07 	lds	r18, 0x07D4	; 0x8007d4 <ShaftCountLeft+0x2>
    18b2:	30 91 d5 07 	lds	r19, 0x07D5	; 0x8007d5 <ShaftCountLeft+0x3>
    18b6:	89 2f       	mov	r24, r25
    18b8:	04 17       	cp	r16, r20
    18ba:	15 07       	cpc	r17, r21
    18bc:	26 07       	cpc	r18, r22
    18be:	37 07       	cpc	r19, r23
    18c0:	08 f4       	brcc	.+2      	; 0x18c4 <angle_rotate+0x7e>
    18c2:	8e 2f       	mov	r24, r30
    18c4:	81 11       	cpse	r24, r1
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <angle_rotate+0x94>
    18c8:	89 2f       	mov	r24, r25
    18ca:	c4 16       	cp	r12, r20
    18cc:	d5 06       	cpc	r13, r21
    18ce:	e6 06       	cpc	r14, r22
    18d0:	f7 06       	cpc	r15, r23
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <angle_rotate+0x90>
    18d4:	8e 2f       	mov	r24, r30
    18d6:	88 23       	and	r24, r24
    18d8:	f1 f2       	breq	.-68     	; 0x1896 <angle_rotate+0x50>
    18da:	b2 df       	rcall	.-156    	; 0x1840 <stop>
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	df 90       	pop	r13
    18e6:	cf 90       	pop	r12
    18e8:	08 95       	ret

000018ea <left_degrees>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	ec 01       	movw	r28, r24
    18f0:	a1 df       	rcall	.-190    	; 0x1834 <left>
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    18f8:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    18fc:	ce 01       	movw	r24, r28
    18fe:	a3 df       	rcall	.-186    	; 0x1846 <angle_rotate>
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <right_degrees>:
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	ec 01       	movw	r28, r24
    190c:	96 df       	rcall	.-212    	; 0x183a <right>
    190e:	9f ef       	ldi	r25, 0xFF	; 255
    1910:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1914:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1918:	ce 01       	movw	r24, r28
    191a:	95 df       	rcall	.-214    	; 0x1846 <angle_rotate>
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <LED_bargraph_config>:
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
    1928:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    192c:	08 95       	ret

0000192e <boot_Interrupt_config>:
    192e:	8d b1       	in	r24, 0x0d	; 13
    1930:	8d b9       	out	0x0d, r24	; 13
    1932:	ea e6       	ldi	r30, 0x6A	; 106
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 68       	ori	r24, 0x80	; 128
    193a:	80 83       	st	Z, r24
    193c:	ef 9a       	sbi	0x1d, 7	; 29
    193e:	08 95       	ret

00001940 <init_devices>:
    1940:	f8 94       	cli
    1942:	c8 de       	rcall	.-624    	; 0x16d4 <port_init>
    1944:	e1 ec       	ldi	r30, 0xC1	; 193
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	10 82       	st	Z, r1
    194a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    194e:	26 e0       	ldi	r18, 0x06	; 6
    1950:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1954:	9f e5       	ldi	r25, 0x5F	; 95
    1956:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    195a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    195e:	88 e9       	ldi	r24, 0x98	; 152
    1960:	80 83       	st	Z, r24
    1962:	e1 ed       	ldi	r30, 0xD1	; 209
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	10 82       	st	Z, r1
    1968:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    196c:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    1970:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1974:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1978:	80 83       	st	Z, r24
    197a:	f7 de       	rcall	.-530    	; 0x176a <left_position_encoder_interrupt_init>
    197c:	ff de       	rcall	.-514    	; 0x177c <right_position_encoder_interrupt_init>
    197e:	cd de       	rcall	.-614    	; 0x171a <adc_init>
    1980:	b1 de       	rcall	.-670    	; 0x16e4 <timer5_init>
    1982:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_set_4bit>
    1986:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_init>
    198a:	44 de       	rcall	.-888    	; 0x1614 <servo1_pin_config>
    198c:	46 de       	rcall	.-884    	; 0x161a <timer1_init>
    198e:	c9 df       	rcall	.-110    	; 0x1922 <LED_bargraph_config>
    1990:	ce df       	rcall	.-100    	; 0x192e <boot_Interrupt_config>
    1992:	78 94       	sei
    1994:	08 95       	ret

00001996 <linear_distance_mm>:
    1996:	bc 01       	movw	r22, r24
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__floatunsisf>
    19a0:	25 ee       	ldi	r18, 0xE5	; 229
    19a2:	30 ed       	ldi	r19, 0xD0	; 208
    19a4:	4a ea       	ldi	r20, 0xAA	; 170
    19a6:	50 e4       	ldi	r21, 0x40	; 64
    19a8:	0e 94 be 1c 	call	0x397c	; 0x397c <__divsf3>
    19ac:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__fixunssfsi>
    19b0:	ab 01       	movw	r20, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <ShaftCountRight>
    19b8:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <ShaftCountRight+0x1>
    19bc:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <ShaftCountRight+0x2>
    19c0:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <ShaftCountRight+0x3>
    19c4:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    19c8:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    19cc:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    19d0:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    19d4:	48 17       	cp	r20, r24
    19d6:	59 07       	cpc	r21, r25
    19d8:	6a 07       	cpc	r22, r26
    19da:	7b 07       	cpc	r23, r27
    19dc:	98 f7       	brcc	.-26     	; 0x19c4 <linear_distance_mm+0x2e>
    19de:	30 cf       	rjmp	.-416    	; 0x1840 <stop>
    19e0:	08 95       	ret

000019e2 <forward_mm>:
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ec 01       	movw	r28, r24
    19e8:	22 df       	rcall	.-444    	; 0x182e <forward>
    19ea:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <speed>
    19ee:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    19f2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    19f6:	ce 01       	movw	r24, r28
    19f8:	ce df       	rcall	.-100    	; 0x1996 <linear_distance_mm>
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <costplan>:
    1a00:	4f 92       	push	r4
    1a02:	5f 92       	push	r5
    1a04:	6f 92       	push	r6
    1a06:	7f 92       	push	r7
    1a08:	8f 92       	push	r8
    1a0a:	9f 92       	push	r9
    1a0c:	af 92       	push	r10
    1a0e:	bf 92       	push	r11
    1a10:	cf 92       	push	r12
    1a12:	df 92       	push	r13
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	c0 5c       	subi	r28, 0xC0	; 192
    1a26:	d1 09       	sbc	r29, r1
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	de 01       	movw	r26, r28
    1a34:	af 59       	subi	r26, 0x9F	; 159
    1a36:	bf 4f       	sbci	r27, 0xFF	; 255
    1a38:	20 e6       	ldi	r18, 0x60	; 96
    1a3a:	fd 01       	movw	r30, r26
    1a3c:	11 92       	st	Z+, r1
    1a3e:	2a 95       	dec	r18
    1a40:	e9 f7       	brne	.-6      	; 0x1a3c <costplan+0x3c>
    1a42:	ee e7       	ldi	r30, 0x7E	; 126
    1a44:	f8 e0       	ldi	r31, 0x08	; 8
    1a46:	8e 01       	movw	r16, r28
    1a48:	0f 5f       	subi	r16, 0xFF	; 255
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	78 01       	movw	r14, r16
    1a4e:	6d 01       	movw	r12, r26
    1a50:	0e ed       	ldi	r16, 0xDE	; 222
    1a52:	18 e0       	ldi	r17, 0x08	; 8
    1a54:	97 01       	movw	r18, r14
    1a56:	63 e6       	ldi	r22, 0x63	; 99
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	4f ef       	ldi	r20, 0xFF	; 255
    1a5c:	5f ef       	ldi	r21, 0xFF	; 255
    1a5e:	61 93       	st	Z+, r22
    1a60:	71 93       	st	Z+, r23
    1a62:	d9 01       	movw	r26, r18
    1a64:	4d 93       	st	X+, r20
    1a66:	5d 93       	st	X+, r21
    1a68:	9d 01       	movw	r18, r26
    1a6a:	d6 01       	movw	r26, r12
    1a6c:	1d 92       	st	X+, r1
    1a6e:	1d 92       	st	X+, r1
    1a70:	6d 01       	movw	r12, r26
    1a72:	e0 17       	cp	r30, r16
    1a74:	f1 07       	cpc	r31, r17
    1a76:	99 f7       	brne	.-26     	; 0x1a5e <costplan+0x5e>
    1a78:	fc 01       	movw	r30, r24
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	44 5f       	subi	r20, 0xF4	; 244
    1a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	9f ef       	ldi	r25, 0xFF	; 255
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	20 81       	ld	r18, Z
    1a8a:	31 81       	ldd	r19, Z+1	; 0x01
    1a8c:	21 15       	cp	r18, r1
    1a8e:	31 05       	cpc	r19, r1
    1a90:	09 f1       	breq	.+66     	; 0x1ad4 <costplan+0xd4>
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	d9 01       	movw	r26, r18
    1a98:	a4 58       	subi	r26, 0x84	; 132
    1a9a:	b7 4f       	sbci	r27, 0xF7	; 247
    1a9c:	1d 92       	st	X+, r1
    1a9e:	1c 92       	st	X, r1
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	20 81       	ld	r18, Z
    1aa4:	31 81       	ldd	r19, Z+1	; 0x01
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	aa 0f       	add	r26, r26
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	01 e0       	ldi	r16, 0x01	; 1
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	0c 0f       	add	r16, r28
    1ab2:	1d 1f       	adc	r17, r29
    1ab4:	a0 0f       	add	r26, r16
    1ab6:	b1 1f       	adc	r27, r17
    1ab8:	2d 93       	st	X+, r18
    1aba:	3c 93       	st	X, r19
    1abc:	d9 01       	movw	r26, r18
    1abe:	11 97       	sbiw	r26, 0x01	; 1
    1ac0:	aa 0f       	add	r26, r26
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	21 e6       	ldi	r18, 0x61	; 97
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	2c 0f       	add	r18, r28
    1aca:	3d 1f       	adc	r19, r29
    1acc:	a2 0f       	add	r26, r18
    1ace:	b3 1f       	adc	r27, r19
    1ad0:	6d 93       	st	X+, r22
    1ad2:	7c 93       	st	X, r23
    1ad4:	32 96       	adiw	r30, 0x02	; 2
    1ad6:	e4 17       	cp	r30, r20
    1ad8:	f5 07       	cpc	r31, r21
    1ada:	b1 f6       	brne	.-84     	; 0x1a88 <costplan+0x88>
    1adc:	ae 2c       	mov	r10, r14
    1ade:	9f 2c       	mov	r9, r15
    1ae0:	81 2c       	mov	r8, r1
    1ae2:	71 2c       	mov	r7, r1
    1ae4:	68 94       	set
    1ae6:	bb 24       	eor	r11, r11
    1ae8:	b2 f8       	bld	r11, 2
    1aea:	61 2c       	mov	r6, r1
    1aec:	cc 24       	eor	r12, r12
    1aee:	c3 94       	inc	r12
    1af0:	d1 2c       	mov	r13, r1
    1af2:	a9 81       	ldd	r26, Y+1	; 0x01
    1af4:	ba 81       	ldd	r27, Y+2	; 0x02
    1af6:	11 97       	sbiw	r26, 0x01	; 1
    1af8:	99 23       	and	r25, r25
    1afa:	6c f0       	brlt	.+26     	; 0x1b16 <costplan+0x116>
    1afc:	ea 2d       	mov	r30, r10
    1afe:	f9 2d       	mov	r31, r9
    1b00:	28 2d       	mov	r18, r8
    1b02:	37 2d       	mov	r19, r7
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	42 81       	ldd	r20, Z+2	; 0x02
    1b0a:	53 81       	ldd	r21, Z+3	; 0x03
    1b0c:	41 93       	st	Z+, r20
    1b0e:	51 93       	st	Z+, r21
    1b10:	82 17       	cp	r24, r18
    1b12:	93 07       	cpc	r25, r19
    1b14:	bc f7       	brge	.-18     	; 0x1b04 <costplan+0x104>
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	fd 01       	movw	r30, r26
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	e2 52       	subi	r30, 0x22	; 34
    1b28:	f7 4f       	sbci	r31, 0xF7	; 247
    1b2a:	2b 2d       	mov	r18, r11
    1b2c:	36 2d       	mov	r19, r6
    1b2e:	aa 0f       	add	r26, r26
    1b30:	bb 1f       	adc	r27, r27
    1b32:	ad 01       	movw	r20, r26
    1b34:	42 58       	subi	r20, 0x82	; 130
    1b36:	57 4f       	sbci	r21, 0xF7	; 247
    1b38:	2a 01       	movw	r4, r20
    1b3a:	61 91       	ld	r22, Z+
    1b3c:	71 91       	ld	r23, Z+
    1b3e:	61 15       	cp	r22, r1
    1b40:	71 05       	cpc	r23, r1
    1b42:	d1 f1       	breq	.+116    	; 0x1bb8 <costplan+0x1b8>
    1b44:	d2 01       	movw	r26, r4
    1b46:	0d 91       	ld	r16, X+
    1b48:	1c 91       	ld	r17, X
    1b4a:	0f 5f       	subi	r16, 0xFF	; 255
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	ab 01       	movw	r20, r22
    1b50:	41 50       	subi	r20, 0x01	; 1
    1b52:	51 09       	sbc	r21, r1
    1b54:	7a 01       	movw	r14, r20
    1b56:	ee 0c       	add	r14, r14
    1b58:	ff 1c       	adc	r15, r15
    1b5a:	d7 01       	movw	r26, r14
    1b5c:	a2 58       	subi	r26, 0x82	; 130
    1b5e:	b7 4f       	sbci	r27, 0xF7	; 247
    1b60:	ed 90       	ld	r14, X+
    1b62:	fc 90       	ld	r15, X
    1b64:	e0 16       	cp	r14, r16
    1b66:	f1 06       	cpc	r15, r17
    1b68:	44 f0       	brlt	.+16     	; 0x1b7a <costplan+0x17a>
    1b6a:	7a 01       	movw	r14, r20
    1b6c:	ee 0c       	add	r14, r14
    1b6e:	ff 1c       	adc	r15, r15
    1b70:	d7 01       	movw	r26, r14
    1b72:	a2 58       	subi	r26, 0x82	; 130
    1b74:	b7 4f       	sbci	r27, 0xF7	; 247
    1b76:	0d 93       	st	X+, r16
    1b78:	1c 93       	st	X, r17
    1b7a:	8a 01       	movw	r16, r20
    1b7c:	00 0f       	add	r16, r16
    1b7e:	11 1f       	adc	r17, r17
    1b80:	a1 e6       	ldi	r26, 0x61	; 97
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ac 0f       	add	r26, r28
    1b86:	bd 1f       	adc	r27, r29
    1b88:	0a 0f       	add	r16, r26
    1b8a:	1b 1f       	adc	r17, r27
    1b8c:	d8 01       	movw	r26, r16
    1b8e:	0d 91       	ld	r16, X+
    1b90:	1c 91       	ld	r17, X
    1b92:	11 97       	sbiw	r26, 0x01	; 1
    1b94:	01 30       	cpi	r16, 0x01	; 1
    1b96:	11 05       	cpc	r17, r1
    1b98:	79 f0       	breq	.+30     	; 0x1bb8 <costplan+0x1b8>
    1b9a:	cd 92       	st	X+, r12
    1b9c:	dc 92       	st	X, r13
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	44 0f       	add	r20, r20
    1ba4:	55 1f       	adc	r21, r21
    1ba6:	01 e0       	ldi	r16, 0x01	; 1
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
    1baa:	0c 0f       	add	r16, r28
    1bac:	1d 1f       	adc	r17, r29
    1bae:	40 0f       	add	r20, r16
    1bb0:	51 1f       	adc	r21, r17
    1bb2:	da 01       	movw	r26, r20
    1bb4:	6d 93       	st	X+, r22
    1bb6:	7c 93       	st	X, r23
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	31 09       	sbc	r19, r1
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <costplan+0x1c0>
    1bbe:	bd cf       	rjmp	.-134    	; 0x1b3a <costplan+0x13a>
    1bc0:	29 81       	ldd	r18, Y+1	; 0x01
    1bc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc4:	2f 3f       	cpi	r18, 0xFF	; 255
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <costplan+0x1cc>
    1bca:	93 cf       	rjmp	.-218    	; 0x1af2 <costplan+0xf2>
    1bcc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bce:	ef ef       	ldi	r30, 0xFF	; 255
    1bd0:	9e 07       	cpc	r25, r30
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <costplan+0x1d6>
    1bd4:	8e cf       	rjmp	.-228    	; 0x1af2 <costplan+0xf2>
    1bd6:	c0 54       	subi	r28, 0x40	; 64
    1bd8:	df 4f       	sbci	r29, 0xFF	; 255
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	9f 90       	pop	r9
    1bfa:	8f 90       	pop	r8
    1bfc:	7f 90       	pop	r7
    1bfe:	6f 90       	pop	r6
    1c00:	5f 90       	pop	r5
    1c02:	4f 90       	pop	r4
    1c04:	08 95       	ret

00001c06 <rotate>:
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	99 23       	and	r25, r25
    1c16:	c4 f4       	brge	.+48     	; 0x1c48 <rotate+0x42>
    1c18:	22 27       	eor	r18, r18
    1c1a:	33 27       	eor	r19, r19
    1c1c:	28 1b       	sub	r18, r24
    1c1e:	39 0b       	sbc	r19, r25
    1c20:	25 3b       	cpi	r18, 0xB5	; 181
    1c22:	31 05       	cpc	r19, r1
    1c24:	34 f0       	brlt	.+12     	; 0x1c32 <rotate+0x2c>
    1c26:	81 5b       	subi	r24, 0xB1	; 177
    1c28:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2a:	5f de       	rcall	.-834    	; 0x18ea <left_degrees>
    1c2c:	e1 2c       	mov	r14, r1
    1c2e:	f1 2c       	mov	r15, r1
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <rotate+0x66>
    1c32:	27 ee       	ldi	r18, 0xE7	; 231
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	a9 01       	movw	r20, r18
    1c38:	48 1b       	sub	r20, r24
    1c3a:	59 0b       	sbc	r21, r25
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	63 de       	rcall	.-826    	; 0x1906 <right_degrees>
    1c40:	ee 24       	eor	r14, r14
    1c42:	e3 94       	inc	r14
    1c44:	f1 2c       	mov	r15, r1
    1c46:	12 c0       	rjmp	.+36     	; 0x1c6c <rotate+0x66>
    1c48:	85 3b       	cpi	r24, 0xB5	; 181
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	5c f0       	brlt	.+22     	; 0x1c64 <rotate+0x5e>
    1c4e:	2f e4       	ldi	r18, 0x4F	; 79
    1c50:	31 e0       	ldi	r19, 0x01	; 1
    1c52:	f9 01       	movw	r30, r18
    1c54:	e8 1b       	sub	r30, r24
    1c56:	f9 0b       	sbc	r31, r25
    1c58:	cf 01       	movw	r24, r30
    1c5a:	55 de       	rcall	.-854    	; 0x1906 <right_degrees>
    1c5c:	ee 24       	eor	r14, r14
    1c5e:	e3 94       	inc	r14
    1c60:	f1 2c       	mov	r15, r1
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <rotate+0x66>
    1c64:	49 97       	sbiw	r24, 0x19	; 25
    1c66:	41 de       	rcall	.-894    	; 0x18ea <left_degrees>
    1c68:	e1 2c       	mov	r14, r1
    1c6a:	f1 2c       	mov	r15, r1
    1c6c:	e9 dd       	rcall	.-1070   	; 0x1840 <stop>
    1c6e:	ff ef       	ldi	r31, 0xFF	; 255
    1c70:	2f e3       	ldi	r18, 0x3F	; 63
    1c72:	42 e0       	ldi	r20, 0x02	; 2
    1c74:	f1 50       	subi	r31, 0x01	; 1
    1c76:	20 40       	sbci	r18, 0x00	; 0
    1c78:	40 40       	sbci	r20, 0x00	; 0
    1c7a:	e1 f7       	brne	.-8      	; 0x1c74 <rotate+0x6e>
    1c7c:	00 c0       	rjmp	.+0      	; 0x1c7e <rotate+0x78>
    1c7e:	00 00       	nop
    1c80:	08 e2       	ldi	r16, 0x28	; 40
    1c82:	11 e0       	ldi	r17, 0x01	; 1
    1c84:	0f 2e       	mov	r0, r31
    1c86:	f4 e6       	ldi	r31, 0x64	; 100
    1c88:	df 2e       	mov	r13, r31
    1c8a:	f0 2d       	mov	r31, r0
    1c8c:	ca e2       	ldi	r28, 0x2A	; 42
    1c8e:	d1 e0       	ldi	r29, 0x01	; 1
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	50 dd       	rcall	.-1376   	; 0x1734 <ADC_Conversion>
    1c94:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <Left_white_line>
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	4c dd       	rcall	.-1384   	; 0x1734 <ADC_Conversion>
    1c9c:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <Center_white_line>
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	48 dd       	rcall	.-1392   	; 0x1734 <ADC_Conversion>
    1ca4:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <Right_white_line>
    1ca8:	40 91 cd 07 	lds	r20, 0x07CD	; 0x8007cd <Left_white_line>
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	23 e0       	ldi	r18, 0x03	; 3
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
    1cba:	40 91 cc 07 	lds	r20, 0x07CC	; 0x8007cc <Center_white_line>
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	23 e0       	ldi	r18, 0x03	; 3
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	65 e0       	ldi	r22, 0x05	; 5
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
    1ccc:	40 91 cb 07 	lds	r20, 0x07CB	; 0x8007cb <Right_white_line>
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	23 e0       	ldi	r18, 0x03	; 3
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	69 e0       	ldi	r22, 0x09	; 9
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
    1cde:	e1 14       	cp	r14, r1
    1ce0:	f1 04       	cpc	r15, r1
    1ce2:	29 f4       	brne	.+10     	; 0x1cee <rotate+0xe8>
    1ce4:	a7 dd       	rcall	.-1202   	; 0x1834 <left>
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	d0 82       	st	Z, r13
    1cea:	d8 82       	st	Y, r13
    1cec:	04 c0       	rjmp	.+8      	; 0x1cf6 <rotate+0xf0>
    1cee:	a5 dd       	rcall	.-1206   	; 0x183a <right>
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	d0 82       	st	Z, r13
    1cf4:	d8 82       	st	Y, r13
    1cf6:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <Center_white_line>
    1cfa:	88 33       	cpi	r24, 0x38	; 56
    1cfc:	48 f4       	brcc	.+18     	; 0x1d10 <rotate+0x10a>
    1cfe:	80 91 cd 07 	lds	r24, 0x07CD	; 0x8007cd <Left_white_line>
    1d02:	89 37       	cpi	r24, 0x79	; 121
    1d04:	28 f4       	brcc	.+10     	; 0x1d10 <rotate+0x10a>
    1d06:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <Right_white_line>
    1d0a:	89 37       	cpi	r24, 0x79	; 121
    1d0c:	08 f4       	brcc	.+2      	; 0x1d10 <rotate+0x10a>
    1d0e:	c0 cf       	rjmp	.-128    	; 0x1c90 <rotate+0x8a>
    1d10:	97 dd       	rcall	.-1234   	; 0x1840 <stop>
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	08 95       	ret

00001d22 <swapTask>:
    1d22:	9c 01       	movw	r18, r24
    1d24:	fc 01       	movw	r30, r24
    1d26:	eb 59       	subi	r30, 0x9B	; 155
    1d28:	f7 4f       	sbci	r31, 0xF7	; 247
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 37       	cpi	r24, 0x7F	; 127
    1d2e:	29 f1       	breq	.+74     	; 0x1d7a <swapTask+0x58>
    1d30:	e0 ec       	ldi	r30, 0xC0	; 192
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	90 81       	ld	r25, Z
    1d36:	95 ff       	sbrs	r25, 5
    1d38:	fd cf       	rjmp	.-6      	; 0x1d34 <swapTask+0x12>
    1d3a:	8f e0       	ldi	r24, 0x0F	; 15
    1d3c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d40:	e0 ec       	ldi	r30, 0xC0	; 192
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	90 81       	ld	r25, Z
    1d46:	95 ff       	sbrs	r25, 5
    1d48:	fd cf       	rjmp	.-6      	; 0x1d44 <swapTask+0x22>
    1d4a:	81 e8       	ldi	r24, 0x81	; 129
    1d4c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d50:	f9 01       	movw	r30, r18
    1d52:	eb 59       	subi	r30, 0x9B	; 155
    1d54:	f7 4f       	sbci	r31, 0xF7	; 247
    1d56:	90 81       	ld	r25, Z
    1d58:	e0 ec       	ldi	r30, 0xC0	; 192
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	85 ff       	sbrs	r24, 5
    1d60:	fd cf       	rjmp	.-6      	; 0x1d5c <swapTask+0x3a>
    1d62:	8e e0       	ldi	r24, 0x0E	; 14
    1d64:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d68:	90 68       	ori	r25, 0x80	; 128
    1d6a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	85 ff       	sbrs	r24, 5
    1d72:	fd cf       	rjmp	.-6      	; 0x1d6e <swapTask+0x4c>
    1d74:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d78:	24 c0       	rjmp	.+72     	; 0x1dc2 <swapTask+0xa0>
    1d7a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	90 81       	ld	r25, Z
    1d80:	95 ff       	sbrs	r25, 5
    1d82:	fd cf       	rjmp	.-6      	; 0x1d7e <swapTask+0x5c>
    1d84:	8f e0       	ldi	r24, 0x0F	; 15
    1d86:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d8a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	90 81       	ld	r25, Z
    1d90:	95 ff       	sbrs	r25, 5
    1d92:	fd cf       	rjmp	.-6      	; 0x1d8e <swapTask+0x6c>
    1d94:	82 e8       	ldi	r24, 0x82	; 130
    1d96:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	ee 59       	subi	r30, 0x9E	; 158
    1d9e:	f5 4f       	sbci	r31, 0xF5	; 245
    1da0:	90 81       	ld	r25, Z
    1da2:	e0 ec       	ldi	r30, 0xC0	; 192
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	85 ff       	sbrs	r24, 5
    1daa:	fd cf       	rjmp	.-6      	; 0x1da6 <swapTask+0x84>
    1dac:	8e e0       	ldi	r24, 0x0E	; 14
    1dae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1db2:	90 68       	ori	r25, 0x80	; 128
    1db4:	e0 ec       	ldi	r30, 0xC0	; 192
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	85 ff       	sbrs	r24, 5
    1dbc:	fd cf       	rjmp	.-6      	; 0x1db8 <swapTask+0x96>
    1dbe:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <swap+0x1>
    1dca:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <swap>
    1dce:	08 95       	ret

00001dd0 <servoStrike>:
    1dd0:	cf 93       	push	r28
    1dd2:	89 2b       	or	r24, r25
    1dd4:	29 f5       	brne	.+74     	; 0x1e20 <servoStrike+0x50>
    1dd6:	ca e5       	ldi	r28, 0x5A	; 90
    1dd8:	8c 2f       	mov	r24, r28
    1dda:	3a dc       	rcall	.-1932   	; 0x1650 <servo_1>
    1ddc:	29 e9       	ldi	r18, 0x99	; 153
    1dde:	89 e5       	ldi	r24, 0x59	; 89
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	21 50       	subi	r18, 0x01	; 1
    1de4:	80 40       	sbci	r24, 0x00	; 0
    1de6:	90 40       	sbci	r25, 0x00	; 0
    1de8:	e1 f7       	brne	.-8      	; 0x1de2 <servoStrike+0x12>
    1dea:	00 00       	nop
    1dec:	c1 50       	subi	r28, 0x01	; 1
    1dee:	a0 f7       	brcc	.-24     	; 0x1dd8 <servoStrike+0x8>
    1df0:	2f ef       	ldi	r18, 0xFF	; 255
    1df2:	8f e7       	ldi	r24, 0x7F	; 127
    1df4:	94 e0       	ldi	r25, 0x04	; 4
    1df6:	21 50       	subi	r18, 0x01	; 1
    1df8:	80 40       	sbci	r24, 0x00	; 0
    1dfa:	90 40       	sbci	r25, 0x00	; 0
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <servoStrike+0x26>
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <servoStrike+0x30>
    1e00:	00 00       	nop
    1e02:	c0 e0       	ldi	r28, 0x00	; 0
    1e04:	8c 2f       	mov	r24, r28
    1e06:	24 dc       	rcall	.-1976   	; 0x1650 <servo_1>
    1e08:	29 e9       	ldi	r18, 0x99	; 153
    1e0a:	89 e5       	ldi	r24, 0x59	; 89
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	21 50       	subi	r18, 0x01	; 1
    1e10:	80 40       	sbci	r24, 0x00	; 0
    1e12:	90 40       	sbci	r25, 0x00	; 0
    1e14:	e1 f7       	brne	.-8      	; 0x1e0e <servoStrike+0x3e>
    1e16:	00 00       	nop
    1e18:	cf 5f       	subi	r28, 0xFF	; 255
    1e1a:	cb 35       	cpi	r28, 0x5B	; 91
    1e1c:	99 f7       	brne	.-26     	; 0x1e04 <servoStrike+0x34>
    1e1e:	25 c0       	rjmp	.+74     	; 0x1e6a <servoStrike+0x9a>
    1e20:	ca e5       	ldi	r28, 0x5A	; 90
    1e22:	8c 2f       	mov	r24, r28
    1e24:	15 dc       	rcall	.-2006   	; 0x1650 <servo_1>
    1e26:	29 e9       	ldi	r18, 0x99	; 153
    1e28:	89 e5       	ldi	r24, 0x59	; 89
    1e2a:	91 e0       	ldi	r25, 0x01	; 1
    1e2c:	21 50       	subi	r18, 0x01	; 1
    1e2e:	80 40       	sbci	r24, 0x00	; 0
    1e30:	90 40       	sbci	r25, 0x00	; 0
    1e32:	e1 f7       	brne	.-8      	; 0x1e2c <servoStrike+0x5c>
    1e34:	00 00       	nop
    1e36:	cf 5f       	subi	r28, 0xFF	; 255
    1e38:	c5 3b       	cpi	r28, 0xB5	; 181
    1e3a:	99 f7       	brne	.-26     	; 0x1e22 <servoStrike+0x52>
    1e3c:	2f ef       	ldi	r18, 0xFF	; 255
    1e3e:	8f e7       	ldi	r24, 0x7F	; 127
    1e40:	94 e0       	ldi	r25, 0x04	; 4
    1e42:	21 50       	subi	r18, 0x01	; 1
    1e44:	80 40       	sbci	r24, 0x00	; 0
    1e46:	90 40       	sbci	r25, 0x00	; 0
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <servoStrike+0x72>
    1e4a:	00 c0       	rjmp	.+0      	; 0x1e4c <servoStrike+0x7c>
    1e4c:	00 00       	nop
    1e4e:	c4 eb       	ldi	r28, 0xB4	; 180
    1e50:	8c 2f       	mov	r24, r28
    1e52:	fe db       	rcall	.-2052   	; 0x1650 <servo_1>
    1e54:	29 e9       	ldi	r18, 0x99	; 153
    1e56:	89 e5       	ldi	r24, 0x59	; 89
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	21 50       	subi	r18, 0x01	; 1
    1e5c:	80 40       	sbci	r24, 0x00	; 0
    1e5e:	90 40       	sbci	r25, 0x00	; 0
    1e60:	e1 f7       	brne	.-8      	; 0x1e5a <servoStrike+0x8a>
    1e62:	00 00       	nop
    1e64:	c1 50       	subi	r28, 0x01	; 1
    1e66:	c9 35       	cpi	r28, 0x59	; 89
    1e68:	99 f7       	brne	.-26     	; 0x1e50 <servoStrike+0x80>
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <move>:

int prevbotloc=1; //A global variable used in case there is a obstacle in the path.
int q=0;
int prevShaftCount=0;
int move(int n)		// A bot move function which is used to move the bot to the next node.
{
    1e6e:	2f 92       	push	r2
    1e70:	3f 92       	push	r3
    1e72:	4f 92       	push	r4
    1e74:	5f 92       	push	r5
    1e76:	6f 92       	push	r6
    1e78:	7f 92       	push	r7
    1e7a:	8f 92       	push	r8
    1e7c:	9f 92       	push	r9
    1e7e:	af 92       	push	r10
    1e80:	bf 92       	push	r11
    1e82:	cf 92       	push	r12
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	28 97       	sbiw	r28, 0x08	; 8
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	4c 01       	movw	r8, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ea4:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1ea8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
int prevShaftCount=0;
int move(int n)		// A bot move function which is used to move the bot to the next node.
{
	velocity(0,0);	//Let it start from zero velocity
	int suc=1,turnang;	// The success variable tells whether it successfully reached the next node.
	if(botang==0)
    1eac:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    1eb0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <move+0x4c>
    1eb8:	41 c0       	rjmp	.+130    	; 0x1f3c <move+0xce>
	{
		int tempang1=angle[botloc-1][n]-botang;
    1eba:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    1ebe:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    1ec2:	31 97       	sbiw	r30, 0x01	; 1
    1ec4:	ee 0f       	add	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	e8 0d       	add	r30, r8
    1ece:	f9 1d       	adc	r31, r9
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	e8 58       	subi	r30, 0x88	; 136
    1ed6:	f5 4f       	sbci	r31, 0xF5	; 245
    1ed8:	a0 80       	ld	r10, Z
    1eda:	b1 80       	ldd	r11, Z+1	; 0x01
		int tempang2=angle[botloc-1][n]-360;
    1edc:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    1ee0:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    1ee4:	31 97       	sbiw	r30, 0x01	; 1
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	e8 0d       	add	r30, r8
    1ef0:	f9 1d       	adc	r31, r9
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	e8 58       	subi	r30, 0x88	; 136
    1ef8:	f5 4f       	sbci	r31, 0xF5	; 245
    1efa:	00 81       	ld	r16, Z
    1efc:	11 81       	ldd	r17, Z+1	; 0x01
    1efe:	08 56       	subi	r16, 0x68	; 104
    1f00:	11 40       	sbci	r17, 0x01	; 1
		if(fabs(tempang2)>fabs(tempang1))
    1f02:	b8 01       	movw	r22, r16
    1f04:	01 2e       	mov	r0, r17
    1f06:	00 0c       	add	r0, r0
    1f08:	88 0b       	sbc	r24, r24
    1f0a:	99 0b       	sbc	r25, r25
    1f0c:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    1f10:	6b 01       	movw	r12, r22
    1f12:	7c 01       	movw	r14, r24
    1f14:	e8 94       	clt
    1f16:	f7 f8       	bld	r15, 7
    1f18:	b5 01       	movw	r22, r10
    1f1a:	0b 2c       	mov	r0, r11
    1f1c:	00 0c       	add	r0, r0
    1f1e:	88 0b       	sbc	r24, r24
    1f20:	99 0b       	sbc	r25, r25
    1f22:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    1f26:	9b 01       	movw	r18, r22
    1f28:	ac 01       	movw	r20, r24
    1f2a:	5f 77       	andi	r21, 0x7F	; 127
    1f2c:	c7 01       	movw	r24, r14
    1f2e:	b6 01       	movw	r22, r12
    1f30:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__gesf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	ac f0       	brlt	.+42     	; 0x1f62 <move+0xf4>
			turnang=tempang1;
		else
			turnang=tempang2;
    1f38:	58 01       	movw	r10, r16
    1f3a:	13 c0       	rjmp	.+38     	; 0x1f62 <move+0xf4>
	}
	else
		turnang=angle[botloc-1][n]-botang;	// The turn angle which the bot should be turned.
    1f3c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    1f40:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    1f44:	31 97       	sbiw	r30, 0x01	; 1
    1f46:	ee 0f       	add	r30, r30
    1f48:	ff 1f       	adc	r31, r31
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	e8 0d       	add	r30, r8
    1f50:	f9 1d       	adc	r31, r9
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	e8 58       	subi	r30, 0x88	; 136
    1f58:	f5 4f       	sbci	r31, 0xF5	; 245
    1f5a:	a0 80       	ld	r10, Z
    1f5c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f5e:	a8 1a       	sub	r10, r24
    1f60:	b9 0a       	sbc	r11, r25
	int turns=0;	//Flag variable to detect whether the bot went inside turn angle function.
	if(fabs(turnang)>45)	// Turn the bot only when the angle is >45 or else follow the path
    1f62:	b5 01       	movw	r22, r10
    1f64:	0b 2c       	mov	r0, r11
    1f66:	00 0c       	add	r0, r0
    1f68:	88 0b       	sbc	r24, r24
    1f6a:	99 0b       	sbc	r25, r25
    1f6c:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    1f70:	9f 77       	andi	r25, 0x7F	; 127
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	44 e3       	ldi	r20, 0x34	; 52
    1f78:	52 e4       	ldi	r21, 0x42	; 66
    1f7a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__gesf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	0c f0       	brlt	.+2      	; 0x1f84 <move+0x116>
    1f82:	a4 c3       	rjmp	.+1864   	; 0x26cc <__stack+0x4cd>
	{
		turns=1;
		forward_mm(70);	// Move the 7cm forward so that the wheel to the node position
    1f84:	86 e4       	ldi	r24, 0x46	; 70
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	2c dd       	rcall	.-1448   	; 0x19e2 <forward_mm>
		rotate(turnang);	// Call the rotate function to rotate the bot
    1f8a:	c5 01       	movw	r24, r10
    1f8c:	3c de       	rcall	.-904    	; 0x1c06 <rotate>
	}
	botang=angle[botloc-1][n]; //Update the bot angle as it turned to that angle.
    1f8e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    1f92:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    1f96:	31 97       	sbiw	r30, 0x01	; 1
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	e8 0d       	add	r30, r8
    1fa2:	f9 1d       	adc	r31, r9
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	e8 58       	subi	r30, 0x88	; 136
    1faa:	f5 4f       	sbci	r31, 0xF5	; 245
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <botang+0x1>
    1fb4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <botang>
	
	if(strike==1)	// In case if the strike is 1 the bot strikes the note and moves to the next note.
    1fb8:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <strike>
    1fbc:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <strike+0x1>
    1fc0:	21 30       	cpi	r18, 0x01	; 1
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <move+0x15a>
    1fc6:	9f c3       	rjmp	.+1854   	; 0x2706 <__stack+0x507>
	else
		turnang=angle[botloc-1][n]-botang;	// The turn angle which the bot should be turned.
	int turns=0;	//Flag variable to detect whether the bot went inside turn angle function.
	if(fabs(turnang)>45)	// Turn the bot only when the angle is >45 or else follow the path
	{
		turns=1;
    1fc8:	66 24       	eor	r6, r6
    1fca:	63 94       	inc	r6
    1fcc:	71 2c       	mov	r7, r1
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <move+0x166>
		else
			turnang=tempang2;
	}
	else
		turnang=angle[botloc-1][n]-botang;	// The turn angle which the bot should be turned.
	int turns=0;	//Flag variable to detect whether the bot went inside turn angle function.
    1fd0:	61 2c       	mov	r6, r1
    1fd2:	71 2c       	mov	r7, r1
	}
	botang=angle[botloc-1][n]; //Update the bot angle as it turned to that angle.
	
	if(strike==1)	// In case if the strike is 1 the bot strikes the note and moves to the next note.
	{
		if(!whichTask)
    1fd4:	20 91 d6 07 	lds	r18, 0x07D6	; 0x8007d6 <whichTask>
    1fd8:	30 91 d7 07 	lds	r19, 0x07D7	; 0x8007d7 <whichTask+0x1>
    1fdc:	23 2b       	or	r18, r19
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <move+0x174>
    1fe0:	e6 c0       	rjmp	.+460    	; 0x21ae <move+0x340>
		{
			if(noteangles[(int)notes[(int)noteToStrike]-1][q][0]==botang)
    1fe2:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	ef 5a       	subi	r30, 0xAF	; 175
    1fea:	f7 4f       	sbci	r31, 0xF7	; 247
    1fec:	e0 81       	ld	r30, Z
    1fee:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <q>
    1ff2:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <q+0x1>
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	31 97       	sbiw	r30, 0x01	; 1
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	e2 0f       	add	r30, r18
    2004:	f3 1f       	adc	r31, r19
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ea 5d       	subi	r30, 0xDA	; 218
    2010:	fc 4f       	sbci	r31, 0xFC	; 252
    2012:	40 81       	ld	r20, Z
    2014:	51 81       	ldd	r21, Z+1	; 0x01
    2016:	84 17       	cp	r24, r20
    2018:	95 07       	cpc	r25, r21
    201a:	21 f4       	brne	.+8      	; 0x2024 <move+0x1b6>
				servoStrike(1);//Strike Left
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	d7 de       	rcall	.-594    	; 0x1dd0 <servoStrike>
    2022:	aa c1       	rjmp	.+852    	; 0x2378 <__stack+0x179>
			else if(noteangles[(int)notes[(int)noteToStrike]-1][q][1]==botang)
    2024:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	ef 5a       	subi	r30, 0xAF	; 175
    202c:	f7 4f       	sbci	r31, 0xF7	; 247
    202e:	e0 81       	ld	r30, Z
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	31 97       	sbiw	r30, 0x01	; 1
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	e2 0f       	add	r30, r18
    203e:	f3 1f       	adc	r31, r19
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	ea 5d       	subi	r30, 0xDA	; 218
    204a:	fc 4f       	sbci	r31, 0xFC	; 252
    204c:	42 81       	ldd	r20, Z+2	; 0x02
    204e:	53 81       	ldd	r21, Z+3	; 0x03
    2050:	84 17       	cp	r24, r20
    2052:	95 07       	cpc	r25, r21
    2054:	21 f4       	brne	.+8      	; 0x205e <move+0x1f0>
				servoStrike(0);//Strike Right
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	ba de       	rcall	.-652    	; 0x1dd0 <servoStrike>
    205c:	8d c1       	rjmp	.+794    	; 0x2378 <__stack+0x179>
			else
			{
				int struck=0;
				int tempang=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][0]-botang);
    205e:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	ef 5a       	subi	r30, 0xAF	; 175
    2066:	f7 4f       	sbci	r31, 0xF7	; 247
    2068:	e0 81       	ld	r30, Z
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	31 97       	sbiw	r30, 0x01	; 1
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e2 0f       	add	r30, r18
    2078:	f3 1f       	adc	r31, r19
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	ea 5d       	subi	r30, 0xDA	; 218
    2084:	fc 4f       	sbci	r31, 0xFC	; 252
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	68 1b       	sub	r22, r24
    208c:	79 0b       	sbc	r23, r25
    208e:	07 2e       	mov	r0, r23
    2090:	00 0c       	add	r0, r0
    2092:	88 0b       	sbc	r24, r24
    2094:	99 0b       	sbc	r25, r25
    2096:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    209a:	9f 77       	andi	r25, 0x7F	; 127
    209c:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
				if(tempang==180)
    20a0:	64 3b       	cpi	r22, 0xB4	; 180
    20a2:	71 05       	cpc	r23, r1
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <move+0x23a>
    20a6:	62 c3       	rjmp	.+1732   	; 0x276c <__stack+0x56d>
				{
					struck=1;
					servoStrike(0);
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	91 de       	rcall	.-734    	; 0x1dd0 <servoStrike>
				}
				tempang=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][1]-botang);
    20ae:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	ef 5a       	subi	r30, 0xAF	; 175
    20b6:	f7 4f       	sbci	r31, 0xF7	; 247
    20b8:	e0 81       	ld	r30, Z
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	31 97       	sbiw	r30, 0x01	; 1
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    20ca:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <q+0x1>
    20ce:	e8 0f       	add	r30, r24
    20d0:	f9 1f       	adc	r31, r25
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	ea 5d       	subi	r30, 0xDA	; 218
    20dc:	fc 4f       	sbci	r31, 0xFC	; 252
    20de:	62 81       	ldd	r22, Z+2	; 0x02
    20e0:	73 81       	ldd	r23, Z+3	; 0x03
    20e2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    20e6:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    20ea:	68 1b       	sub	r22, r24
    20ec:	79 0b       	sbc	r23, r25
    20ee:	07 2e       	mov	r0, r23
    20f0:	00 0c       	add	r0, r0
    20f2:	88 0b       	sbc	r24, r24
    20f4:	99 0b       	sbc	r25, r25
    20f6:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    20fa:	9f 77       	andi	r25, 0x7F	; 127
    20fc:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
				if(tempang==180)
    2100:	64 3b       	cpi	r22, 0xB4	; 180
    2102:	71 05       	cpc	r23, r1
    2104:	09 f0       	breq	.+2      	; 0x2108 <move+0x29a>
    2106:	38 c1       	rjmp	.+624    	; 0x2378 <__stack+0x179>
				{	
					struck=1;
					servoStrike(1);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	61 de       	rcall	.-830    	; 0x1dd0 <servoStrike>
    210e:	34 c1       	rjmp	.+616    	; 0x2378 <__stack+0x179>
				}
				if(!struck)
				{
					int compareAngle1=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][0]-botang);
    2110:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	ef 5a       	subi	r30, 0xAF	; 175
    2118:	f7 4f       	sbci	r31, 0xF7	; 247
    211a:	e0 81       	ld	r30, Z
					int compareAngle2=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][1]-botang);
    211c:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <noteToStrike>
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	af 5a       	subi	r26, 0xAF	; 175
    2124:	b7 4f       	sbci	r27, 0xF7	; 247
    2126:	bc 90       	ld	r11, X
					struck=1;
					servoStrike(1);
				}
				if(!struck)
				{
					int compareAngle1=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][0]-botang);
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	31 97       	sbiw	r30, 0x01	; 1
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ee 0d       	add	r30, r14
    2136:	ff 1d       	adc	r31, r15
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ea 5d       	subi	r30, 0xDA	; 218
    2142:	fc 4f       	sbci	r31, 0xFC	; 252
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	60 1b       	sub	r22, r16
    214a:	71 0b       	sbc	r23, r17
    214c:	07 2e       	mov	r0, r23
    214e:	00 0c       	add	r0, r0
    2150:	88 0b       	sbc	r24, r24
    2152:	99 0b       	sbc	r25, r25
    2154:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    2158:	9f 77       	andi	r25, 0x7F	; 127
    215a:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
    215e:	6b 01       	movw	r12, r22
					int compareAngle2=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][1]-botang);
    2160:	eb 2d       	mov	r30, r11
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	31 97       	sbiw	r30, 0x01	; 1
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	ee 0d       	add	r30, r14
    2170:	ff 1d       	adc	r31, r15
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ea 5d       	subi	r30, 0xDA	; 218
    217c:	fc 4f       	sbci	r31, 0xFC	; 252
    217e:	62 81       	ldd	r22, Z+2	; 0x02
    2180:	73 81       	ldd	r23, Z+3	; 0x03
    2182:	60 1b       	sub	r22, r16
    2184:	71 0b       	sbc	r23, r17
    2186:	07 2e       	mov	r0, r23
    2188:	00 0c       	add	r0, r0
    218a:	88 0b       	sbc	r24, r24
    218c:	99 0b       	sbc	r25, r25
    218e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    2192:	9f 77       	andi	r25, 0x7F	; 127
    2194:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
					if(compareAngle1>compareAngle2)
    2198:	6c 15       	cp	r22, r12
    219a:	7d 05       	cpc	r23, r13
    219c:	24 f4       	brge	.+8      	; 0x21a6 <move+0x338>
						servoStrike(0);
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	16 de       	rcall	.-980    	; 0x1dd0 <servoStrike>
    21a4:	e9 c0       	rjmp	.+466    	; 0x2378 <__stack+0x179>
					else
						servoStrike(1);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	12 de       	rcall	.-988    	; 0x1dd0 <servoStrike>
    21ac:	e5 c0       	rjmp	.+458    	; 0x2378 <__stack+0x179>
				
			}
		}
		else
		{
			if(noteangles[(int)notes2[(int)noteToStrike]-1][q][0]==botang)
    21ae:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	e3 5c       	subi	r30, 0xC3	; 195
    21b6:	f7 4f       	sbci	r31, 0xF7	; 247
    21b8:	e0 81       	ld	r30, Z
    21ba:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <q>
    21be:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <q+0x1>
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	31 97       	sbiw	r30, 0x01	; 1
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	ea 5d       	subi	r30, 0xDA	; 218
    21dc:	fc 4f       	sbci	r31, 0xFC	; 252
    21de:	40 81       	ld	r20, Z
    21e0:	51 81       	ldd	r21, Z+1	; 0x01
    21e2:	84 17       	cp	r24, r20
    21e4:	95 07       	cpc	r25, r21
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <move+0x382>
				servoStrike(1);//Strike Left
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	f1 dd       	rcall	.-1054   	; 0x1dd0 <servoStrike>
    21ee:	c4 c0       	rjmp	.+392    	; 0x2378 <__stack+0x179>
			else if(noteangles[(int)notes2[(int)noteToStrike]-1][q][1]==botang)
    21f0:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	e3 5c       	subi	r30, 0xC3	; 195
    21f8:	f7 4f       	sbci	r31, 0xF7	; 247
    21fa:	e0 81       	ld	r30, Z
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	31 97       	sbiw	r30, 0x01	; 1
    2200:	ee 0f       	add	r30, r30
    2202:	ff 1f       	adc	r31, r31
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	e2 0f       	add	r30, r18
    220a:	f3 1f       	adc	r31, r19
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ea 5d       	subi	r30, 0xDA	; 218
    2216:	fc 4f       	sbci	r31, 0xFC	; 252
    2218:	42 81       	ldd	r20, Z+2	; 0x02
    221a:	53 81       	ldd	r21, Z+3	; 0x03
    221c:	84 17       	cp	r24, r20
    221e:	95 07       	cpc	r25, r21
    2220:	21 f4       	brne	.+8      	; 0x222a <__stack+0x2b>
				servoStrike(0);//Strike Right
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	d4 dd       	rcall	.-1112   	; 0x1dd0 <servoStrike>
    2228:	a7 c0       	rjmp	.+334    	; 0x2378 <__stack+0x179>
			else
			{
				int struck=0;
				int tempang=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][0]-botang);
    222a:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	e3 5c       	subi	r30, 0xC3	; 195
    2232:	f7 4f       	sbci	r31, 0xF7	; 247
    2234:	e0 81       	ld	r30, Z
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	31 97       	sbiw	r30, 0x01	; 1
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	ea 5d       	subi	r30, 0xDA	; 218
    2250:	fc 4f       	sbci	r31, 0xFC	; 252
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	68 1b       	sub	r22, r24
    2258:	79 0b       	sbc	r23, r25
    225a:	07 2e       	mov	r0, r23
    225c:	00 0c       	add	r0, r0
    225e:	88 0b       	sbc	r24, r24
    2260:	99 0b       	sbc	r25, r25
    2262:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    2266:	9f 77       	andi	r25, 0x7F	; 127
    2268:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
				if(tempang==180)
    226c:	64 3b       	cpi	r22, 0xB4	; 180
    226e:	71 05       	cpc	r23, r1
    2270:	09 f0       	breq	.+2      	; 0x2274 <__stack+0x75>
    2272:	aa c2       	rjmp	.+1364   	; 0x27c8 <__stack+0x5c9>
				{
					struck=1;
					servoStrike(0);
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	ab dd       	rcall	.-1194   	; 0x1dd0 <servoStrike>
				}
				tempang=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][1]-botang);
    227a:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	e3 5c       	subi	r30, 0xC3	; 195
    2282:	f7 4f       	sbci	r31, 0xF7	; 247
    2284:	e0 81       	ld	r30, Z
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	31 97       	sbiw	r30, 0x01	; 1
    228a:	ee 0f       	add	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    2296:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <q+0x1>
    229a:	e8 0f       	add	r30, r24
    229c:	f9 1f       	adc	r31, r25
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	ea 5d       	subi	r30, 0xDA	; 218
    22a8:	fc 4f       	sbci	r31, 0xFC	; 252
    22aa:	62 81       	ldd	r22, Z+2	; 0x02
    22ac:	73 81       	ldd	r23, Z+3	; 0x03
    22ae:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    22b2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    22b6:	68 1b       	sub	r22, r24
    22b8:	79 0b       	sbc	r23, r25
    22ba:	07 2e       	mov	r0, r23
    22bc:	00 0c       	add	r0, r0
    22be:	88 0b       	sbc	r24, r24
    22c0:	99 0b       	sbc	r25, r25
    22c2:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    22c6:	9f 77       	andi	r25, 0x7F	; 127
    22c8:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
				if(tempang==180)
    22cc:	64 3b       	cpi	r22, 0xB4	; 180
    22ce:	71 05       	cpc	r23, r1
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <__stack+0xd5>
    22d2:	52 c0       	rjmp	.+164    	; 0x2378 <__stack+0x179>
				{
					struck=1;
					servoStrike(1);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	7b dd       	rcall	.-1290   	; 0x1dd0 <servoStrike>
    22da:	4e c0       	rjmp	.+156    	; 0x2378 <__stack+0x179>
				}
				if(!struck)
				{
					int compareAngle1=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][0]-botang);
    22dc:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	e3 5c       	subi	r30, 0xC3	; 195
    22e4:	f7 4f       	sbci	r31, 0xF7	; 247
    22e6:	e0 81       	ld	r30, Z
					int compareAngle2=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][1]-botang);
    22e8:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <noteToStrike>
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	a3 5c       	subi	r26, 0xC3	; 195
    22f0:	b7 4f       	sbci	r27, 0xF7	; 247
    22f2:	bc 90       	ld	r11, X
					struck=1;
					servoStrike(1);
				}
				if(!struck)
				{
					int compareAngle1=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][0]-botang);
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	31 97       	sbiw	r30, 0x01	; 1
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	ee 0d       	add	r30, r14
    2302:	ff 1d       	adc	r31, r15
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	ea 5d       	subi	r30, 0xDA	; 218
    230e:	fc 4f       	sbci	r31, 0xFC	; 252
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	60 1b       	sub	r22, r16
    2316:	71 0b       	sbc	r23, r17
    2318:	07 2e       	mov	r0, r23
    231a:	00 0c       	add	r0, r0
    231c:	88 0b       	sbc	r24, r24
    231e:	99 0b       	sbc	r25, r25
    2320:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    2324:	9f 77       	andi	r25, 0x7F	; 127
    2326:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
    232a:	6b 01       	movw	r12, r22
					int compareAngle2=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][1]-botang);
    232c:	eb 2d       	mov	r30, r11
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	31 97       	sbiw	r30, 0x01	; 1
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	ee 0d       	add	r30, r14
    233c:	ff 1d       	adc	r31, r15
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ea 5d       	subi	r30, 0xDA	; 218
    2348:	fc 4f       	sbci	r31, 0xFC	; 252
    234a:	62 81       	ldd	r22, Z+2	; 0x02
    234c:	73 81       	ldd	r23, Z+3	; 0x03
    234e:	60 1b       	sub	r22, r16
    2350:	71 0b       	sbc	r23, r17
    2352:	07 2e       	mov	r0, r23
    2354:	00 0c       	add	r0, r0
    2356:	88 0b       	sbc	r24, r24
    2358:	99 0b       	sbc	r25, r25
    235a:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    235e:	9f 77       	andi	r25, 0x7F	; 127
    2360:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
					if(compareAngle1>compareAngle2)
    2364:	6c 15       	cp	r22, r12
    2366:	7d 05       	cpc	r23, r13
    2368:	24 f4       	brge	.+8      	; 0x2372 <__stack+0x173>
					servoStrike(0);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	30 dd       	rcall	.-1440   	; 0x1dd0 <servoStrike>
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <__stack+0x179>
					else
					servoStrike(1);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	2c dd       	rcall	.-1448   	; 0x1dd0 <servoStrike>
				}
			}
		}
		// Servo Motor Control
		// Strike the Note
		strike=0;
    2378:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <strike+0x1>
    237c:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <strike>
	}
	
	forward();
    2380:	56 da       	rcall	.-2900   	; 0x182e <forward>
	int flag=0,shaftitr=0;
	ShaftCountRight=0;
    2382:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <ShaftCountRight>
    2386:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <ShaftCountRight+0x1>
    238a:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <ShaftCountRight+0x2>
    238e:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <ShaftCountRight+0x3>
	prevShaftCount=ShaftCountRight;
    2392:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    2396:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    239a:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    239e:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    23a2:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__data_end+0x1>
    23a6:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__data_end>
	if(!turns)
    23aa:	67 28       	or	r6, r7
    23ac:	01 f5       	brne	.+64     	; 0x23ee <__stack+0x1ef>
		while(ShaftCountRight<10)
    23ae:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    23b2:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    23b6:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    23ba:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    23be:	0a 97       	sbiw	r24, 0x0a	; 10
    23c0:	a1 05       	cpc	r26, r1
    23c2:	b1 05       	cpc	r27, r1
    23c4:	a0 f4       	brcc	.+40     	; 0x23ee <__stack+0x1ef>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    23c6:	a8 e2       	ldi	r26, 0x28	; 40
    23c8:	b1 e0       	ldi	r27, 0x01	; 1
    23ca:	84 e6       	ldi	r24, 0x64	; 100
	OCR5BL = (unsigned char)right_motor;
    23cc:	ea e2       	ldi	r30, 0x2A	; 42
    23ce:	f1 e0       	ldi	r31, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    23d0:	8c 93       	st	X, r24
	OCR5BL = (unsigned char)right_motor;
    23d2:	80 83       	st	Z, r24
	forward();
	int flag=0,shaftitr=0;
	ShaftCountRight=0;
	prevShaftCount=ShaftCountRight;
	if(!turns)
		while(ShaftCountRight<10)
    23d4:	40 91 ce 07 	lds	r20, 0x07CE	; 0x8007ce <ShaftCountRight>
    23d8:	50 91 cf 07 	lds	r21, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    23dc:	60 91 d0 07 	lds	r22, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    23e0:	70 91 d1 07 	lds	r23, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    23e4:	4a 30       	cpi	r20, 0x0A	; 10
    23e6:	51 05       	cpc	r21, r1
    23e8:	61 05       	cpc	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	88 f3       	brcs	.-30     	; 0x23d0 <__stack+0x1d1>
		else
			turnang=tempang2;
	}
	else
		turnang=angle[botloc-1][n]-botang;	// The turn angle which the bot should be turned.
	int turns=0;	//Flag variable to detect whether the bot went inside turn angle function.
    23ee:	00 e0       	ldi	r16, 0x00	; 0
    23f0:	10 e0       	ldi	r17, 0x00	; 0
    23f2:	21 e0       	ldi	r18, 0x01	; 1
    23f4:	2f 83       	std	Y+7, r18	; 0x07
    23f6:	18 86       	std	Y+8, r1	; 0x08
			}
		}
		else
		{
			prevShaftCount=ShaftCountRight;
			speed=100;
    23f8:	0f 2e       	mov	r0, r31
    23fa:	f4 e6       	ldi	r31, 0x64	; 100
    23fc:	6f 2e       	mov	r6, r31
    23fe:	71 2c       	mov	r7, r1
    2400:	f0 2d       	mov	r31, r0
			shaftitr=0;
    2402:	51 2c       	mov	r5, r1
    2404:	41 2c       	mov	r4, r1
				{
					botang=angle[node[botloc-1][n]-1][j];
					break;
				}*/
			int p=0;
			if(n==0)
    2406:	33 24       	eor	r3, r3
    2408:	33 94       	inc	r3
    240a:	21 2c       	mov	r2, r1
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
    240c:	0f 2e       	mov	r0, r31
    240e:	f0 e1       	ldi	r31, 0x10	; 16
    2410:	af 2e       	mov	r10, r31
    2412:	f2 e0       	ldi	r31, 0x02	; 2
    2414:	bf 2e       	mov	r11, r31
    2416:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2418:	0f 2e       	mov	r0, r31
    241a:	f8 e2       	ldi	r31, 0x28	; 40
    241c:	cf 2e       	mov	r12, r31
    241e:	dd 24       	eor	r13, r13
    2420:	d3 94       	inc	r13
    2422:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    2424:	0f 2e       	mov	r0, r31
    2426:	fa e2       	ldi	r31, 0x2A	; 42
    2428:	ef 2e       	mov	r14, r31
    242a:	ff 24       	eor	r15, r15
    242c:	f3 94       	inc	r15
    242e:	f0 2d       	mov	r31, r0
		while(ShaftCountRight<10)
			velocity(100,100);
	while(1)
	{
		flag=0;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	80 d9       	rcall	.-3328   	; 0x1734 <ADC_Conversion>
    2434:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	7c d9       	rcall	.-3336   	; 0x1734 <ADC_Conversion>
    243c:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	78 d9       	rcall	.-3344   	; 0x1734 <ADC_Conversion>
    2444:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    2448:	86 e0       	ldi	r24, 0x06	; 6
    244a:	74 d9       	rcall	.-3352   	; 0x1734 <ADC_Conversion>
    244c:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <Front_IR_Sensor>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    2450:	40 91 cd 07 	lds	r20, 0x07CD	; 0x8007cd <Left_white_line>
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	23 e0       	ldi	r18, 0x03	; 3
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    2462:	40 91 cc 07 	lds	r20, 0x07CC	; 0x8007cc <Center_white_line>
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	23 e0       	ldi	r18, 0x03	; 3
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	65 e0       	ldi	r22, 0x05	; 5
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    2474:	40 91 cb 07 	lds	r20, 0x07CB	; 0x8007cb <Right_white_line>
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	23 e0       	ldi	r18, 0x03	; 3
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	69 e0       	ldi	r22, 0x09	; 9
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
		lcd_print(1,12,(int)Front_IR_Sensor,3);	//Front ir sensor Value
    2486:	40 91 ca 07 	lds	r20, 0x07CA	; 0x8007ca <Front_IR_Sensor>
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	23 e0       	ldi	r18, 0x03	; 3
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	6c e0       	ldi	r22, 0x0C	; 12
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
		
		if(prevShaftCount==ShaftCountRight)
    2498:	40 91 ce 07 	lds	r20, 0x07CE	; 0x8007ce <ShaftCountRight>
    249c:	50 91 cf 07 	lds	r21, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    24a0:	60 91 d0 07 	lds	r22, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    24a4:	70 91 d1 07 	lds	r23, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    24a8:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <__data_end>
    24ac:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <__data_end+0x1>
    24b0:	09 2e       	mov	r0, r25
    24b2:	00 0c       	add	r0, r0
    24b4:	aa 0b       	sbc	r26, r26
    24b6:	bb 0b       	sbc	r27, r27
    24b8:	84 17       	cp	r24, r20
    24ba:	95 07       	cpc	r25, r21
    24bc:	a6 07       	cpc	r26, r22
    24be:	b7 07       	cpc	r27, r23
    24c0:	89 f4       	brne	.+34     	; 0x24e4 <__stack+0x2e5>
		{
			shaftitr++;
    24c2:	0f 5f       	subi	r16, 0xFF	; 255
    24c4:	1f 4f       	sbci	r17, 0xFF	; 255
			if(shaftitr>50)
    24c6:	03 33       	cpi	r16, 0x33	; 51
    24c8:	11 05       	cpc	r17, r1
    24ca:	f4 f0       	brlt	.+60     	; 0x2508 <__stack+0x309>
			{	
				speed=speed+30;
    24cc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <speed>
    24d0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <speed+0x1>
    24d4:	4e 96       	adiw	r24, 0x1e	; 30
    24d6:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <speed+0x1>
    24da:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <speed>
				shaftitr=0;
    24de:	05 2d       	mov	r16, r5
    24e0:	14 2d       	mov	r17, r4
    24e2:	12 c0       	rjmp	.+36     	; 0x2508 <__stack+0x309>
			}
		}
		else
		{
			prevShaftCount=ShaftCountRight;
    24e4:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    24e8:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    24ec:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    24f0:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    24f4:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__data_end+0x1>
    24f8:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__data_end>
			speed=100;
    24fc:	70 92 11 02 	sts	0x0211, r7	; 0x800211 <speed+0x1>
    2500:	60 92 10 02 	sts	0x0210, r6	; 0x800210 <speed>
			shaftitr=0;
    2504:	05 2d       	mov	r16, r5
    2506:	14 2d       	mov	r17, r4
		}
		
		
		if(Front_IR_Sensor<112)
    2508:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <Front_IR_Sensor>
    250c:	80 37       	cpi	r24, 0x70	; 112
    250e:	08 f0       	brcs	.+2      	; 0x2512 <__stack+0x313>
    2510:	5b c0       	rjmp	.+182    	; 0x25c8 <__stack+0x3c9>
				{
					botang=angle[node[botloc-1][n]-1][j];
					break;
				}*/
			int p=0;
			if(n==0)
    2512:	39 82       	std	Y+1, r3	; 0x01
    2514:	2a 82       	std	Y+2, r2	; 0x02
    2516:	81 14       	cp	r8, r1
    2518:	91 04       	cpc	r9, r1
    251a:	11 f0       	breq	.+4      	; 0x2520 <__stack+0x321>
    251c:	59 82       	std	Y+1, r5	; 0x01
    251e:	4a 82       	std	Y+2, r4	; 0x02
			{
				p=n+1;
			}
			turnang=angle[botloc-1][p]-botang;
    2520:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2524:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2528:	31 97       	sbiw	r30, 0x01	; 1
    252a:	ee 0f       	add	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	ee 0f       	add	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	e8 0f       	add	r30, r24
    2538:	f9 1f       	adc	r31, r25
    253a:	ee 0f       	add	r30, r30
    253c:	ff 1f       	adc	r31, r31
    253e:	e8 58       	subi	r30, 0x88	; 136
    2540:	f5 4f       	sbci	r31, 0xF5	; 245
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <botang>
    254a:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <botang+0x1>
			rotate(turnang);
    254e:	82 1b       	sub	r24, r18
    2550:	93 0b       	sbc	r25, r19
    2552:	59 db       	rcall	.-2382   	; 0x1c06 <rotate>
			botang=angle[botloc-1][p];
    2554:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2558:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    255c:	31 97       	sbiw	r30, 0x01	; 1
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	a9 81       	ldd	r26, Y+1	; 0x01
    2568:	ba 81       	ldd	r27, Y+2	; 0x02
    256a:	ea 0f       	add	r30, r26
    256c:	fb 1f       	adc	r31, r27
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	e8 58       	subi	r30, 0x88	; 136
    2574:	f5 4f       	sbci	r31, 0xF5	; 245
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <botang+0x1>
    257e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <botang>
			prevbotloc=botloc;
    2582:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <botloc>
    2586:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <botloc+0x1>
    258a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <prevbotloc+0x1>
    258e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <prevbotloc>
			botloc=node[botloc-1][p];
    2592:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <botloc>
    2596:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <botloc+0x1>
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	8a 0f       	add	r24, r26
    25a6:	9b 1f       	adc	r25, r27
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	82 52       	subi	r24, 0x22	; 34
    25ae:	97 4f       	sbci	r25, 0xF7	; 247
    25b0:	fc 01       	movw	r30, r24
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <botloc+0x1>
    25ba:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <botloc>
			suc=0;
			flag=1;
    25be:	e3 2d       	mov	r30, r3
    25c0:	f2 2d       	mov	r31, r2
			turnang=angle[botloc-1][p]-botang;
			rotate(turnang);
			botang=angle[botloc-1][p];
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
    25c2:	5f 82       	std	Y+7, r5	; 0x07
    25c4:	48 86       	std	Y+8, r4	; 0x08
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <__stack+0x3cd>
	if(!turns)
		while(ShaftCountRight<10)
			velocity(100,100);
	while(1)
	{
		flag=0;
    25c8:	e5 2d       	mov	r30, r5
    25ca:	f4 2d       	mov	r31, r4
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    25cc:	40 91 cc 07 	lds	r20, 0x07CC	; 0x8007cc <Center_white_line>
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <thresh>
    25d6:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <thresh+0x1>
    25da:	24 17       	cp	r18, r20
    25dc:	35 07       	cpc	r19, r21
    25de:	7c f4       	brge	.+30     	; 0x25fe <__stack+0x3ff>
    25e0:	60 91 cd 07 	lds	r22, 0x07CD	; 0x8007cd <Left_white_line>
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	26 17       	cp	r18, r22
    25e8:	37 07       	cpc	r19, r23
    25ea:	0c f4       	brge	.+2      	; 0x25ee <__stack+0x3ef>
    25ec:	b0 c0       	rjmp	.+352    	; 0x274e <__stack+0x54f>
    25ee:	60 91 cb 07 	lds	r22, 0x07CB	; 0x8007cb <Right_white_line>
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	26 17       	cp	r18, r22
    25f6:	37 07       	cpc	r19, r23
    25f8:	0c f4       	brge	.+2      	; 0x25fc <__stack+0x3fd>
    25fa:	9b c0       	rjmp	.+310    	; 0x2732 <__stack+0x533>
    25fc:	31 c0       	rjmp	.+98     	; 0x2660 <__stack+0x461>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    25fe:	60 91 cd 07 	lds	r22, 0x07CD	; 0x8007cd <Left_white_line>
    2602:	86 2f       	mov	r24, r22
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	28 17       	cp	r18, r24
    2608:	39 07       	cpc	r19, r25
    260a:	84 f4       	brge	.+32     	; 0x262c <__stack+0x42d>
		{
			//flag=1;
			forward();
    260c:	10 d9       	rcall	.-3552   	; 0x182e <forward>
			lcd_print(2,1,1,3);
    260e:	23 e0       	ldi	r18, 0x03	; 3
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	43 2d       	mov	r20, r3
    2614:	52 2d       	mov	r21, r2
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
			velocity(0,speed);
    261e:	d5 01       	movw	r26, r10
    2620:	8c 91       	ld	r24, X
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2622:	f6 01       	movw	r30, r12
    2624:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    2626:	d7 01       	movw	r26, r14
    2628:	8c 93       	st	X, r24
    262a:	02 cf       	rjmp	.-508    	; 0x2430 <__stack+0x231>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
    262c:	70 91 cb 07 	lds	r23, 0x07CB	; 0x8007cb <Right_white_line>
    2630:	87 2f       	mov	r24, r23
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	84 f4       	brge	.+32     	; 0x265a <__stack+0x45b>
		{
			//flag=1;
			forward();
    263a:	f9 d8       	rcall	.-3598   	; 0x182e <forward>
			lcd_print(2,1,2,3);
    263c:	23 e0       	ldi	r18, 0x03	; 3
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	42 e0       	ldi	r20, 0x02	; 2
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
			velocity(speed,0);
    264c:	f5 01       	movw	r30, r10
    264e:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2650:	d6 01       	movw	r26, r12
    2652:	8c 93       	st	X, r24
	OCR5BL = (unsigned char)right_motor;
    2654:	f7 01       	movw	r30, r14
    2656:	10 82       	st	Z, r1
    2658:	eb ce       	rjmp	.-554    	; 0x2430 <__stack+0x231>
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
    265a:	24 17       	cp	r18, r20
    265c:	35 07       	cpc	r19, r21
    265e:	84 f4       	brge	.+32     	; 0x2680 <__stack+0x481>
		{
			forward();
    2660:	e6 d8       	rcall	.-3636   	; 0x182e <forward>
			velocity(speed,speed);
    2662:	d5 01       	movw	r26, r10
    2664:	8c 91       	ld	r24, X
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2666:	f6 01       	movw	r30, r12
    2668:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    266a:	d7 01       	movw	r26, r14
    266c:	8c 93       	st	X, r24
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
    266e:	23 e0       	ldi	r18, 0x03	; 3
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	45 2d       	mov	r20, r5
    2674:	54 2d       	mov	r21, r4
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
    267e:	d8 ce       	rjmp	.-592    	; 0x2430 <__stack+0x231>
			//flag=1;
		}
		else if(Left_white_line>Right_white_line)
    2680:	76 17       	cp	r23, r22
    2682:	38 f4       	brcc	.+14     	; 0x2692 <__stack+0x493>
		{
			velocity(0,speed);
    2684:	f5 01       	movw	r30, r10
    2686:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2688:	d6 01       	movw	r26, r12
    268a:	1c 92       	st	X, r1
	OCR5BL = (unsigned char)right_motor;
    268c:	f7 01       	movw	r30, r14
    268e:	80 83       	st	Z, r24
    2690:	cf ce       	rjmp	.-610    	; 0x2430 <__stack+0x231>
		{
			velocity(0,speed);
		}
		else
		{
			velocity(speed,0);
    2692:	d5 01       	movw	r26, r10
    2694:	8c 91       	ld	r24, X
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2696:	f6 01       	movw	r30, r12
    2698:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    269a:	d7 01       	movw	r26, r14
    269c:	1c 92       	st	X, r1
    269e:	c8 ce       	rjmp	.-624    	; 0x2430 <__stack+0x231>
		// Servo Motor Control
		// Strike the Note
		strike=0;
	}
	
	forward();
    26a0:	c6 d8       	rcall	.-3700   	; 0x182e <forward>
	int flag=0,shaftitr=0;
	ShaftCountRight=0;
    26a2:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <ShaftCountRight>
    26a6:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <ShaftCountRight+0x1>
    26aa:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <ShaftCountRight+0x2>
    26ae:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <ShaftCountRight+0x3>
	prevShaftCount=ShaftCountRight;
    26b2:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    26b6:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    26ba:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    26be:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    26c2:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__data_end+0x1>
    26c6:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__data_end>
    26ca:	71 ce       	rjmp	.-798    	; 0x23ae <__stack+0x1af>
	{
		turns=1;
		forward_mm(70);	// Move the 7cm forward so that the wheel to the node position
		rotate(turnang);	// Call the rotate function to rotate the bot
	}
	botang=angle[botloc-1][n]; //Update the bot angle as it turned to that angle.
    26cc:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    26d0:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    26d4:	31 97       	sbiw	r30, 0x01	; 1
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	ee 0f       	add	r30, r30
    26dc:	ff 1f       	adc	r31, r31
    26de:	e8 0d       	add	r30, r8
    26e0:	f9 1d       	adc	r31, r9
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	e8 58       	subi	r30, 0x88	; 136
    26e8:	f5 4f       	sbci	r31, 0xF5	; 245
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <botang+0x1>
    26f2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <botang>
	
	if(strike==1)	// In case if the strike is 1 the bot strikes the note and moves to the next note.
    26f6:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <strike>
    26fa:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <strike+0x1>
    26fe:	21 30       	cpi	r18, 0x01	; 1
    2700:	31 05       	cpc	r19, r1
    2702:	71 f6       	brne	.-100    	; 0x26a0 <__stack+0x4a1>
    2704:	65 cc       	rjmp	.-1846   	; 0x1fd0 <move+0x162>
		// Servo Motor Control
		// Strike the Note
		strike=0;
	}
	
	forward();
    2706:	93 d8       	rcall	.-3802   	; 0x182e <forward>
	int flag=0,shaftitr=0;
	ShaftCountRight=0;
    2708:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <ShaftCountRight>
    270c:	10 92 cf 07 	sts	0x07CF, r1	; 0x8007cf <ShaftCountRight+0x1>
    2710:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <ShaftCountRight+0x2>
    2714:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <ShaftCountRight+0x3>
	prevShaftCount=ShaftCountRight;
    2718:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    271c:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    2720:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    2724:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    2728:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__data_end+0x1>
    272c:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__data_end>
    2730:	5e ce       	rjmp	.-836    	; 0x23ee <__stack+0x1ef>
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    2732:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <ShaftCountRight>
    2736:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    273a:	a0 91 d0 07 	lds	r26, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    273e:	b0 91 d1 07 	lds	r27, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    2742:	45 97       	sbiw	r24, 0x15	; 21
    2744:	a1 05       	cpc	r26, r1
    2746:	b1 05       	cpc	r27, r1
    2748:	08 f0       	brcs	.+2      	; 0x274c <__stack+0x54d>
    274a:	73 c0       	rjmp	.+230    	; 0x2832 <__stack+0x633>
    274c:	76 cf       	rjmp	.-276    	; 0x263a <__stack+0x43b>
    274e:	40 91 ce 07 	lds	r20, 0x07CE	; 0x8007ce <ShaftCountRight>
    2752:	50 91 cf 07 	lds	r21, 0x07CF	; 0x8007cf <ShaftCountRight+0x1>
    2756:	60 91 d0 07 	lds	r22, 0x07D0	; 0x8007d0 <ShaftCountRight+0x2>
    275a:	70 91 d1 07 	lds	r23, 0x07D1	; 0x8007d1 <ShaftCountRight+0x3>
    275e:	45 31       	cpi	r20, 0x15	; 21
    2760:	51 05       	cpc	r21, r1
    2762:	61 05       	cpc	r22, r1
    2764:	71 05       	cpc	r23, r1
    2766:	08 f0       	brcs	.+2      	; 0x276a <__stack+0x56b>
    2768:	5d c0       	rjmp	.+186    	; 0x2824 <__stack+0x625>
    276a:	50 cf       	rjmp	.-352    	; 0x260c <__stack+0x40d>
				if(tempang==180)
				{
					struck=1;
					servoStrike(0);
				}
				tempang=fabs(noteangles[(int)notes[(int)noteToStrike]-1][q][1]-botang);
    276c:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	ef 5a       	subi	r30, 0xAF	; 175
    2774:	f7 4f       	sbci	r31, 0xF7	; 247
    2776:	e0 81       	ld	r30, Z
    2778:	e0 90 c8 07 	lds	r14, 0x07C8	; 0x8007c8 <q>
    277c:	f0 90 c9 07 	lds	r15, 0x07C9	; 0x8007c9 <q+0x1>
    2780:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <botang>
    2784:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <botang+0x1>
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	31 97       	sbiw	r30, 0x01	; 1
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ee 0d       	add	r30, r14
    2796:	ff 1d       	adc	r31, r15
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	ea 5d       	subi	r30, 0xDA	; 218
    27a2:	fc 4f       	sbci	r31, 0xFC	; 252
    27a4:	62 81       	ldd	r22, Z+2	; 0x02
    27a6:	73 81       	ldd	r23, Z+3	; 0x03
    27a8:	60 1b       	sub	r22, r16
    27aa:	71 0b       	sbc	r23, r17
    27ac:	07 2e       	mov	r0, r23
    27ae:	00 0c       	add	r0, r0
    27b0:	88 0b       	sbc	r24, r24
    27b2:	99 0b       	sbc	r25, r25
    27b4:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    27b8:	9f 77       	andi	r25, 0x7F	; 127
    27ba:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
				if(tempang==180)
    27be:	64 3b       	cpi	r22, 0xB4	; 180
    27c0:	71 05       	cpc	r23, r1
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <__stack+0x5c7>
    27c4:	a5 cc       	rjmp	.-1718   	; 0x2110 <move+0x2a2>
    27c6:	a0 cc       	rjmp	.-1728   	; 0x2108 <move+0x29a>
				if(tempang==180)
				{
					struck=1;
					servoStrike(0);
				}
				tempang=fabs(noteangles[(int)notes2[(int)noteToStrike]-1][q][1]-botang);
    27c8:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	e3 5c       	subi	r30, 0xC3	; 195
    27d0:	f7 4f       	sbci	r31, 0xF7	; 247
    27d2:	e0 81       	ld	r30, Z
    27d4:	e0 90 c8 07 	lds	r14, 0x07C8	; 0x8007c8 <q>
    27d8:	f0 90 c9 07 	lds	r15, 0x07C9	; 0x8007c9 <q+0x1>
    27dc:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <botang>
    27e0:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <botang+0x1>
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	31 97       	sbiw	r30, 0x01	; 1
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	ee 0d       	add	r30, r14
    27f2:	ff 1d       	adc	r31, r15
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ea 5d       	subi	r30, 0xDA	; 218
    27fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2800:	62 81       	ldd	r22, Z+2	; 0x02
    2802:	73 81       	ldd	r23, Z+3	; 0x03
    2804:	60 1b       	sub	r22, r16
    2806:	71 0b       	sbc	r23, r17
    2808:	07 2e       	mov	r0, r23
    280a:	00 0c       	add	r0, r0
    280c:	88 0b       	sbc	r24, r24
    280e:	99 0b       	sbc	r25, r25
    2810:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__floatsisf>
    2814:	9f 77       	andi	r25, 0x7F	; 127
    2816:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__fixsfsi>
				if(tempang==180)
    281a:	64 3b       	cpi	r22, 0xB4	; 180
    281c:	71 05       	cpc	r23, r1
    281e:	09 f0       	breq	.+2      	; 0x2822 <__stack+0x623>
    2820:	5d cd       	rjmp	.-1350   	; 0x22dc <__stack+0xdd>
    2822:	58 cd       	rjmp	.-1360   	; 0x22d4 <__stack+0xd5>
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    2824:	ef 2b       	or	r30, r31
    2826:	09 f0       	breq	.+2      	; 0x282a <__stack+0x62b>
    2828:	f1 ce       	rjmp	.-542    	; 0x260c <__stack+0x40d>
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <__stack+0x637>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    282c:	60 91 cd 07 	lds	r22, 0x07CD	; 0x8007cd <Left_white_line>
    2830:	fd ce       	rjmp	.-518    	; 0x262c <__stack+0x42d>
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    2832:	ef 2b       	or	r30, r31
    2834:	d9 f7       	brne	.-10     	; 0x282c <__stack+0x62d>
		{
			forward();
    2836:	0e 94 17 0c 	call	0x182e	; 0x182e <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    283a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    283e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
		{
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
    2842:	23 e0       	ldi	r18, 0x03	; 3
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	44 e6       	ldi	r20, 0x64	; 100
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	61 e0       	ldi	r22, 0x01	; 1
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
		{
			velocity(speed,0);
		}
	}
	return suc;
}
    2852:	8f 81       	ldd	r24, Y+7	; 0x07
    2854:	98 85       	ldd	r25, Y+8	; 0x08
    2856:	28 96       	adiw	r28, 0x08	; 8
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	df 90       	pop	r13
    2870:	cf 90       	pop	r12
    2872:	bf 90       	pop	r11
    2874:	af 90       	pop	r10
    2876:	9f 90       	pop	r9
    2878:	8f 90       	pop	r8
    287a:	7f 90       	pop	r7
    287c:	6f 90       	pop	r6
    287e:	5f 90       	pop	r5
    2880:	4f 90       	pop	r4
    2882:	3f 90       	pop	r3
    2884:	2f 90       	pop	r2
    2886:	08 95       	ret

00002888 <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	9c 01       	movw	r18, r24
	int i;
	if (cost[loc - 1] == 0)
    288e:	bc 01       	movw	r22, r24
    2890:	61 50       	subi	r22, 0x01	; 1
    2892:	71 09       	sbc	r23, r1
    2894:	db 01       	movw	r26, r22
    2896:	aa 0f       	add	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	a2 58       	subi	r26, 0x82	; 130
    289c:	b7 4f       	sbci	r27, 0xF7	; 247
    289e:	8d 91       	ld	r24, X+
    28a0:	9c 91       	ld	r25, X
    28a2:	89 2b       	or	r24, r25
    28a4:	39 f4       	brne	.+14     	; 0x28b4 <BotEndLocation+0x2c>
	{
		LastLocation = loc;
    28a6:	30 93 00 0c 	sts	0x0C00, r19	; 0x800c00 <LastLocation+0x1>
    28aa:	20 93 ff 0b 	sts	0x0BFF, r18	; 0x800bff <LastLocation>
		return LastLocation;
    28ae:	82 2f       	mov	r24, r18
    28b0:	93 2f       	mov	r25, r19
    28b2:	3c c0       	rjmp	.+120    	; 0x292c <BotEndLocation+0xa4>
	}
	int mCost = cost[node[loc - 1][0] - 1];
    28b4:	db 01       	movw	r26, r22
    28b6:	aa 0f       	add	r26, r26
    28b8:	bb 1f       	adc	r27, r27
    28ba:	aa 0f       	add	r26, r26
    28bc:	bb 1f       	adc	r27, r27
    28be:	aa 0f       	add	r26, r26
    28c0:	bb 1f       	adc	r27, r27
    28c2:	fd 01       	movw	r30, r26
    28c4:	e2 52       	subi	r30, 0x22	; 34
    28c6:	f7 4f       	sbci	r31, 0xF7	; 247
    28c8:	01 90       	ld	r0, Z+
    28ca:	f0 81       	ld	r31, Z
    28cc:	e0 2d       	mov	r30, r0
    28ce:	ee 0f       	add	r30, r30
    28d0:	ff 1f       	adc	r31, r31
    28d2:	e4 58       	subi	r30, 0x84	; 132
    28d4:	f7 4f       	sbci	r31, 0xF7	; 247
    28d6:	c0 81       	ld	r28, Z
    28d8:	d1 81       	ldd	r29, Z+1	; 0x01
    28da:	a0 52       	subi	r26, 0x20	; 32
    28dc:	b7 4f       	sbci	r27, 0xF7	; 247
	int pos = 0;
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 1; i<4; i++)
    28e2:	21 e0       	ldi	r18, 0x01	; 1
    28e4:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (node[loc - 1][i]!=0)
    28e6:	8d 91       	ld	r24, X+
    28e8:	9d 91       	ld	r25, X+
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	61 f0       	breq	.+24     	; 0x2906 <BotEndLocation+0x7e>
			if (cost[node[loc - 1][i] - 1]<mCost)
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	fc 01       	movw	r30, r24
    28f4:	e4 58       	subi	r30, 0x84	; 132
    28f6:	f7 4f       	sbci	r31, 0xF7	; 247
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	8c 17       	cp	r24, r28
    28fe:	9d 07       	cpc	r25, r29
    2900:	14 f4       	brge	.+4      	; 0x2906 <BotEndLocation+0x7e>
    2902:	a9 01       	movw	r20, r18
			{
				mCost = cost[node[loc - 1][i] - 1];
    2904:	ec 01       	movw	r28, r24
		LastLocation = loc;
		return LastLocation;
	}
	int mCost = cost[node[loc - 1][0] - 1];
	int pos = 0;
	for (i = 1; i<4; i++)
    2906:	2f 5f       	subi	r18, 0xFF	; 255
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	24 30       	cpi	r18, 0x04	; 4
    290c:	31 05       	cpc	r19, r1
    290e:	59 f7       	brne	.-42     	; 0x28e6 <BotEndLocation+0x5e>
			{
				mCost = cost[node[loc - 1][i] - 1];
				pos = i;
			}
	}
	return BotEndLocation(node[loc - 1][pos]);
    2910:	fb 01       	movw	r30, r22
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	e4 0f       	add	r30, r20
    291c:	f5 1f       	adc	r31, r21
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	e2 52       	subi	r30, 0x22	; 34
    2924:	f7 4f       	sbci	r31, 0xF7	; 247
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	ae df       	rcall	.-164    	; 0x2888 <BotEndLocation>
}
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret

00002932 <processNotes>:
FILE uart_debug = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
///////////////////////////////////////////////////////


void processNotes()
{
    2932:	9f 92       	push	r9
    2934:	af 92       	push	r10
    2936:	bf 92       	push	r11
    2938:	cf 92       	push	r12
    293a:	df 92       	push	r13
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    2948:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    294c:	88 23       	and	r24, r24
    294e:	09 f4       	brne	.+2      	; 0x2952 <processNotes+0x20>
    2950:	68 c1       	rjmp	.+720    	; 0x2c22 <processNotes+0x2f0>
    2952:	c0 e0       	ldi	r28, 0x00	; 0
    2954:	d0 e0       	ldi	r29, 0x00	; 0
    2956:	c1 2c       	mov	r12, r1
    2958:	d1 2c       	mov	r13, r1
			if(cost[botLastIndex-1]>cost[(int)otherBotLastTaskIndex-1])
				temp2=taskCost+otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1];
			else
				temp2=taskCost+otherBotTaskCost+cost[botLastIndex-1];
				
			if(temp2>temp1)
    295a:	99 24       	eor	r9, r9
    295c:	93 94       	inc	r9
    295e:	a1 2c       	mov	r10, r1
				tasks2[(int)taskCount]=127;
			}
			else
			{	
				tasks2[(int)taskCount]=noteToProcess;
				tasks[(int)taskCount]=127;
    2960:	0f 2e       	mov	r0, r31
    2962:	ff e7       	ldi	r31, 0x7F	; 127
    2964:	bf 2e       	mov	r11, r31
    2966:	f0 2d       	mov	r31, r0
				otherBotTask2[otherBotTaskCount]=127;
			}
			else
			{
				otherBotTask2[otherBotTaskCount]=noteToProcess;
				otherBotTask[otherBotTaskCount]=127;
    2968:	0f 2e       	mov	r0, r31
    296a:	ff e7       	ldi	r31, 0x7F	; 127
    296c:	ef 2e       	mov	r14, r31
    296e:	f1 2c       	mov	r15, r1
    2970:	f0 2d       	mov	r31, r0
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
	{
		int whichNote=0;
		if(notes2[(int)noteToProcess]!=0)
    2972:	fe 01       	movw	r30, r28
    2974:	e3 5c       	subi	r30, 0xC3	; 195
    2976:	f7 4f       	sbci	r31, 0xF7	; 247
    2978:	80 81       	ld	r24, Z
    297a:	88 23       	and	r24, r24
    297c:	09 f4       	brne	.+2      	; 0x2980 <processNotes+0x4e>
    297e:	95 c0       	rjmp	.+298    	; 0x2aaa <processNotes+0x178>
		{
			int temp1=0,temp2=0;
			costplan(nodesnear[(int)notes2[(int)noteToProcess]-1]);
    2980:	fe 01       	movw	r30, r28
    2982:	e3 5c       	subi	r30, 0xC3	; 195
    2984:	f7 4f       	sbci	r31, 0xF7	; 247
    2986:	80 81       	ld	r24, Z
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	9c 01       	movw	r18, r24
    298e:	22 0f       	add	r18, r18
    2990:	33 1f       	adc	r19, r19
    2992:	82 0f       	add	r24, r18
    2994:	93 1f       	adc	r25, r19
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	8a 5c       	subi	r24, 0xCA	; 202
    29a0:	9a 4f       	sbci	r25, 0xFA	; 250
    29a2:	2e d8       	rcall	.-4004   	; 0x1a00 <costplan>
			if(cost[botLastIndex-1]>cost[(int)otherBotLastTaskIndex-1])
    29a4:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <botLastIndex>
    29a8:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <botLastIndex+0x1>
    29ac:	ee 0f       	add	r30, r30
    29ae:	ff 1f       	adc	r31, r31
    29b0:	e4 58       	subi	r30, 0x84	; 132
    29b2:	f7 4f       	sbci	r31, 0xF7	; 247
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	e4 58       	subi	r30, 0x84	; 132
    29c4:	f7 4f       	sbci	r31, 0xF7	; 247
    29c6:	20 81       	ld	r18, Z
    29c8:	31 81       	ldd	r19, Z+1	; 0x01
    29ca:	28 17       	cp	r18, r24
    29cc:	39 07       	cpc	r19, r25
    29ce:	9c f4       	brge	.+38     	; 0x29f6 <processNotes+0xc4>
				temp1=taskCost+otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1];
    29d0:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <taskCost>
    29d4:	00 91 34 08 	lds	r16, 0x0834	; 0x800834 <otherBotTaskCost>
    29d8:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    29dc:	10 e0       	ldi	r17, 0x00	; 0
    29de:	08 0f       	add	r16, r24
    29e0:	11 1d       	adc	r17, r1
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	e4 58       	subi	r30, 0x84	; 132
    29ea:	f7 4f       	sbci	r31, 0xF7	; 247
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	08 0f       	add	r16, r24
    29f2:	19 1f       	adc	r17, r25
    29f4:	09 c0       	rjmp	.+18     	; 0x2a08 <processNotes+0xd6>
			else
				temp1=taskCost+otherBotTaskCost+cost[botLastIndex-1];
    29f6:	20 91 36 08 	lds	r18, 0x0836	; 0x800836 <taskCost>
    29fa:	00 91 34 08 	lds	r16, 0x0834	; 0x800834 <otherBotTaskCost>
    29fe:	10 e0       	ldi	r17, 0x00	; 0
    2a00:	02 0f       	add	r16, r18
    2a02:	11 1d       	adc	r17, r1
    2a04:	08 0f       	add	r16, r24
    2a06:	19 1f       	adc	r17, r25
				
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ef 5a       	subi	r30, 0xAF	; 175
    2a0c:	f7 4f       	sbci	r31, 0xF7	; 247
    2a0e:	80 81       	ld	r24, Z
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	9c 01       	movw	r18, r24
    2a16:	22 0f       	add	r18, r18
    2a18:	33 1f       	adc	r19, r19
    2a1a:	82 0f       	add	r24, r18
    2a1c:	93 1f       	adc	r25, r19
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	8a 5c       	subi	r24, 0xCA	; 202
    2a28:	9a 4f       	sbci	r25, 0xFA	; 250
    2a2a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <costplan>
			if(cost[botLastIndex-1]>cost[(int)otherBotLastTaskIndex-1])
    2a2e:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <botLastIndex>
    2a32:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <botLastIndex+0x1>
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	e4 58       	subi	r30, 0x84	; 132
    2a3c:	f7 4f       	sbci	r31, 0xF7	; 247
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	e4 58       	subi	r30, 0x84	; 132
    2a4e:	f7 4f       	sbci	r31, 0xF7	; 247
    2a50:	20 81       	ld	r18, Z
    2a52:	31 81       	ldd	r19, Z+1	; 0x01
    2a54:	28 17       	cp	r18, r24
    2a56:	39 07       	cpc	r19, r25
    2a58:	9c f4       	brge	.+38     	; 0x2a80 <processNotes+0x14e>
				temp2=taskCost+otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1];
    2a5a:	20 91 36 08 	lds	r18, 0x0836	; 0x800836 <taskCost>
    2a5e:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <otherBotTaskCost>
    2a62:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	82 0f       	add	r24, r18
    2a6a:	91 1d       	adc	r25, r1
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	ee 0f       	add	r30, r30
    2a70:	ff 1f       	adc	r31, r31
    2a72:	e4 58       	subi	r30, 0x84	; 132
    2a74:	f7 4f       	sbci	r31, 0xF7	; 247
    2a76:	20 81       	ld	r18, Z
    2a78:	31 81       	ldd	r19, Z+1	; 0x01
    2a7a:	82 0f       	add	r24, r18
    2a7c:	93 1f       	adc	r25, r19
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <processNotes+0x160>
			else
				temp2=taskCost+otherBotTaskCost+cost[botLastIndex-1];
    2a80:	40 91 36 08 	lds	r20, 0x0836	; 0x800836 <taskCost>
    2a84:	20 91 34 08 	lds	r18, 0x0834	; 0x800834 <otherBotTaskCost>
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	24 0f       	add	r18, r20
    2a8c:	31 1d       	adc	r19, r1
    2a8e:	82 0f       	add	r24, r18
    2a90:	93 1f       	adc	r25, r19
				
			if(temp2>temp1)
    2a92:	39 2d       	mov	r19, r9
    2a94:	2a 2d       	mov	r18, r10
    2a96:	08 17       	cp	r16, r24
    2a98:	19 07       	cpc	r17, r25
    2a9a:	14 f0       	brlt	.+4      	; 0x2aa0 <processNotes+0x16e>
    2a9c:	3c 2d       	mov	r19, r12
    2a9e:	2d 2d       	mov	r18, r13
void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
	{
		int whichNote=0;
    2aa0:	03 2f       	mov	r16, r19
    2aa2:	12 2f       	mov	r17, r18
				
			if(temp2>temp1)
				whichNote=1;
				
		}
		if(!whichNote)
    2aa4:	01 15       	cp	r16, r1
    2aa6:	11 05       	cpc	r17, r1
    2aa8:	b1 f4       	brne	.+44     	; 0x2ad6 <processNotes+0x1a4>
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ef 5a       	subi	r30, 0xAF	; 175
    2aae:	f7 4f       	sbci	r31, 0xF7	; 247
    2ab0:	80 81       	ld	r24, Z
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9c 01       	movw	r18, r24
    2ab8:	22 0f       	add	r18, r18
    2aba:	33 1f       	adc	r19, r19
    2abc:	82 0f       	add	r24, r18
    2abe:	93 1f       	adc	r25, r19
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	8a 5c       	subi	r24, 0xCA	; 202
    2aca:	9a 4f       	sbci	r25, 0xFA	; 250
    2acc:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <costplan>
    2ad0:	0c 2d       	mov	r16, r12
    2ad2:	1d 2d       	mov	r17, r13
    2ad4:	13 c0       	rjmp	.+38     	; 0x2afc <processNotes+0x1ca>
		else
			costplan(nodesnear[(int)notes2[(int)noteToProcess]-1]);
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e3 5c       	subi	r30, 0xC3	; 195
    2ada:	f7 4f       	sbci	r31, 0xF7	; 247
    2adc:	80 81       	ld	r24, Z
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9c 01       	movw	r18, r24
    2ae4:	22 0f       	add	r18, r18
    2ae6:	33 1f       	adc	r19, r19
    2ae8:	82 0f       	add	r24, r18
    2aea:	93 1f       	adc	r25, r19
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	8a 5c       	subi	r24, 0xCA	; 202
    2af6:	9a 4f       	sbci	r25, 0xFA	; 250
    2af8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <costplan>
			
		if((taskCost+cost[botLastIndex-1])>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1]))
    2afc:	20 91 36 08 	lds	r18, 0x0836	; 0x800836 <taskCost>
    2b00:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <botLastIndex>
    2b04:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <botLastIndex+0x1>
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ee 0f       	add	r30, r30
    2b0c:	ff 1f       	adc	r31, r31
    2b0e:	e4 58       	subi	r30, 0x84	; 132
    2b10:	f7 4f       	sbci	r31, 0xF7	; 247
    2b12:	40 81       	ld	r20, Z
    2b14:	51 81       	ldd	r21, Z+1	; 0x01
    2b16:	a0 91 34 08 	lds	r26, 0x0834	; 0x800834 <otherBotTaskCost>
    2b1a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2b1e:	ba 01       	movw	r22, r20
    2b20:	62 0f       	add	r22, r18
    2b22:	71 1d       	adc	r23, r1
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	ee 0f       	add	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	e4 58       	subi	r30, 0x84	; 132
    2b2c:	f7 4f       	sbci	r31, 0xF7	; 247
    2b2e:	20 81       	ld	r18, Z
    2b30:	31 81       	ldd	r19, Z+1	; 0x01
    2b32:	2a 0f       	add	r18, r26
    2b34:	31 1d       	adc	r19, r1
    2b36:	26 17       	cp	r18, r22
    2b38:	37 07       	cpc	r19, r23
    2b3a:	0c f0       	brlt	.+2      	; 0x2b3e <processNotes+0x20c>
    2b3c:	40 c0       	rjmp	.+128    	; 0x2bbe <processNotes+0x28c>
		{
			otherBotTaskCost+=cost[otherBotLastTaskIndex-1];
    2b3e:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2b42:	90 91 34 08 	lds	r25, 0x0834	; 0x800834 <otherBotTaskCost>
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	ee 0f       	add	r30, r30
    2b4a:	ff 1f       	adc	r31, r31
    2b4c:	e4 58       	subi	r30, 0x84	; 132
    2b4e:	f7 4f       	sbci	r31, 0xF7	; 247
    2b50:	80 81       	ld	r24, Z
    2b52:	89 0f       	add	r24, r25
    2b54:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <otherBotTaskCost>
			otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);
    2b58:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	94 de       	rcall	.-728    	; 0x2888 <BotEndLocation>
    2b60:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <otherBotLastTaskIndex>
			if(!whichNote)
    2b64:	01 2b       	or	r16, r17
    2b66:	89 f4       	brne	.+34     	; 0x2b8a <processNotes+0x258>
			{
				otherBotTask[otherBotTaskCount]=noteToProcess;
    2b68:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <otherBotTaskCount>
    2b6c:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <otherBotTaskCount+0x1>
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	fc 01       	movw	r30, r24
    2b76:	ea 5f       	subi	r30, 0xFA	; 250
    2b78:	f7 4f       	sbci	r31, 0xF7	; 247
    2b7a:	d1 83       	std	Z+1, r29	; 0x01
    2b7c:	c0 83       	st	Z, r28
				otherBotTask2[otherBotTaskCount]=127;
    2b7e:	fc 01       	movw	r30, r24
    2b80:	e4 52       	subi	r30, 0x24	; 36
    2b82:	f8 4f       	sbci	r31, 0xF8	; 248
    2b84:	f1 82       	std	Z+1, r15	; 0x01
    2b86:	e0 82       	st	Z, r14
    2b88:	10 c0       	rjmp	.+32     	; 0x2baa <processNotes+0x278>
			}
			else
			{
				otherBotTask2[otherBotTaskCount]=noteToProcess;
    2b8a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <otherBotTaskCount>
    2b8e:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <otherBotTaskCount+0x1>
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	fc 01       	movw	r30, r24
    2b98:	e4 52       	subi	r30, 0x24	; 36
    2b9a:	f8 4f       	sbci	r31, 0xF8	; 248
    2b9c:	d1 83       	std	Z+1, r29	; 0x01
    2b9e:	c0 83       	st	Z, r28
				otherBotTask[otherBotTaskCount]=127;
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	ea 5f       	subi	r30, 0xFA	; 250
    2ba4:	f7 4f       	sbci	r31, 0xF7	; 247
    2ba6:	f1 82       	std	Z+1, r15	; 0x01
    2ba8:	e0 82       	st	Z, r14
				
			}
			otherBotTaskCount++;
    2baa:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <otherBotTaskCount>
    2bae:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <otherBotTaskCount+0x1>
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <otherBotTaskCount+0x1>
    2bb8:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <otherBotTaskCount>
    2bbc:	2a c0       	rjmp	.+84     	; 0x2c12 <processNotes+0x2e0>
		}
		else
		{
			taskCost+=cost[botLastIndex-1];
    2bbe:	20 91 36 08 	lds	r18, 0x0836	; 0x800836 <taskCost>
    2bc2:	42 0f       	add	r20, r18
    2bc4:	40 93 36 08 	sts	0x0836, r20	; 0x800836 <taskCost>
			botLastIndex=BotEndLocation(botLastIndex);
    2bc8:	5f de       	rcall	.-834    	; 0x2888 <BotEndLocation>
    2bca:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <botLastIndex+0x1>
    2bce:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <botLastIndex>
			if(!whichNote)
    2bd2:	01 2b       	or	r16, r17
    2bd4:	69 f4       	brne	.+26     	; 0x2bf0 <processNotes+0x2be>
			{	
				tasks[(int)taskCount]=noteToProcess;
    2bd6:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <taskCount>
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	eb 59       	subi	r30, 0x9B	; 155
    2bde:	f7 4f       	sbci	r31, 0xF7	; 247
    2be0:	c0 83       	st	Z, r28
				tasks2[(int)taskCount]=127;
    2be2:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <taskCount>
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	ee 59       	subi	r30, 0x9E	; 158
    2bea:	f5 4f       	sbci	r31, 0xF5	; 245
    2bec:	b0 82       	st	Z, r11
    2bee:	0c c0       	rjmp	.+24     	; 0x2c08 <processNotes+0x2d6>
			}
			else
			{	
				tasks2[(int)taskCount]=noteToProcess;
    2bf0:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <taskCount>
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	ee 59       	subi	r30, 0x9E	; 158
    2bf8:	f5 4f       	sbci	r31, 0xF5	; 245
    2bfa:	c0 83       	st	Z, r28
				tasks[(int)taskCount]=127;
    2bfc:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <taskCount>
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	eb 59       	subi	r30, 0x9B	; 155
    2c04:	f7 4f       	sbci	r31, 0xF7	; 247
    2c06:	b0 82       	st	Z, r11
			}
			taskCount++;
    2c08:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <taskCount>
    2c0c:	8f 5f       	subi	r24, 0xFF	; 255
    2c0e:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <taskCount>
		}
		noteToProcess++;
    2c12:	21 96       	adiw	r28, 0x01	; 1


void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    2c14:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	8c 17       	cp	r24, r28
    2c1c:	9d 07       	cpc	r25, r29
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <processNotes+0x2f0>
    2c20:	a8 ce       	rjmp	.-688    	; 0x2972 <processNotes+0x40>
		}
		noteToProcess++;
		
	}
	
}
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	bf 90       	pop	r11
    2c34:	af 90       	pop	r10
    2c36:	9f 90       	pop	r9
    2c38:	08 95       	ret

00002c3a <main>:


int main()
{
    2c3a:	2f 92       	push	r2
    2c3c:	3f 92       	push	r3
    2c3e:	4f 92       	push	r4
    2c40:	5f 92       	push	r5
    2c42:	6f 92       	push	r6
    2c44:	7f 92       	push	r7
    2c46:	8f 92       	push	r8
    2c48:	9f 92       	push	r9
    2c4a:	af 92       	push	r10
    2c4c:	bf 92       	push	r11
    2c4e:	cf 92       	push	r12
    2c50:	df 92       	push	r13
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	cf 93       	push	r28
    2c5c:	df 93       	push	r29
    2c5e:	1f 92       	push	r1
    2c60:	1f 92       	push	r1
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
	declare_constants();
    2c66:	0e 94 87 02 	call	0x50e	; 0x50e <declare_constants>
	init_devices();
    2c6a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <init_devices>
	servo_1(90);
    2c6e:	8a e5       	ldi	r24, 0x5A	; 90
    2c70:	0e 94 28 0b 	call	0x1650	; 0x1650 <servo_1>
	PORTJ = 0x00;
    2c74:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    2c78:	10 92 33 08 	sts	0x0833, r1	; 0x800833 <notesReceived>
	lcd_string("Waiting...");
    2c7c:	8b ee       	ldi	r24, 0xEB	; 235
    2c7e:	96 e0       	ldi	r25, 0x06	; 6
    2c80:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_string>
	//while(!notesReceived2);
	#ifdef MASTER
		while(!BootInterrupt);
    2c84:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <BootInterrupt>
    2c88:	88 23       	and	r24, r24
    2c8a:	e1 f3       	breq	.-8      	; 0x2c84 <main+0x4a>
	#endif
	#ifndef MASTER
		while(!notesReceived2);
	#endif

	lcd_clear();
    2c8c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
	lcd_string("Received!");
    2c90:	86 ef       	ldi	r24, 0xF6	; 246
    2c92:	96 e0       	ldi	r25, 0x06	; 6
    2c94:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_string>
	PORTJ = 0xFF;
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2c9e:	e0 ec       	ldi	r30, 0xC0	; 192
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	85 ff       	sbrs	r24, 5
    2ca6:	fd cf       	rjmp	.-6      	; 0x2ca2 <main+0x68>
	UDR0 = data;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//send data to slave through ZigBee
void inline SendNotesToSlave()
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
    2cae:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    2cb2:	88 23       	and	r24, r24
    2cb4:	c1 f0       	breq	.+48     	; 0x2ce6 <main+0xac>
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2cba:	e0 ec       	ldi	r30, 0xC0	; 192
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2cbe:	46 ec       	ldi	r20, 0xC6	; 198
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    2cc2:	d9 01       	movw	r26, r18
    2cc4:	af 5a       	subi	r26, 0xAF	; 175
    2cc6:	b7 4f       	sbci	r27, 0xF7	; 247
    2cc8:	9c 91       	ld	r25, X
    2cca:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2ccc:	80 81       	ld	r24, Z
    2cce:	85 ff       	sbrs	r24, 5
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <main+0x92>
	UDR0 = data;
    2cd2:	da 01       	movw	r26, r20
    2cd4:	9c 93       	st	X, r25
//send data to slave through ZigBee
void inline SendNotesToSlave()
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
    2cd6:	2f 5f       	subi	r18, 0xFF	; 255
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <noteCount>
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	28 17       	cp	r18, r24
    2ce2:	39 07       	cpc	r19, r25
    2ce4:	74 f3       	brlt	.-36     	; 0x2cc2 <main+0x88>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2ce6:	e0 ec       	ldi	r30, 0xC0	; 192
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	85 ff       	sbrs	r24, 5
    2cee:	fd cf       	rjmp	.-6      	; 0x2cea <main+0xb0>
	UDR0 = data;
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2cf6:	e0 ec       	ldi	r30, 0xC0	; 192
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	85 ff       	sbrs	r24, 5
    2cfe:	fd cf       	rjmp	.-6      	; 0x2cfa <main+0xc0>
	UDR0 = data;
    2d00:	8b e0       	ldi	r24, 0x0B	; 11
    2d02:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		SendByteToSlave(DATA(notes[i]));
	}
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
    2d06:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <noteCount2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	c1 f0       	breq	.+48     	; 0x2d3e <main+0x104>
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2d12:	e0 ec       	ldi	r30, 0xC0	; 192
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2d16:	46 ec       	ldi	r20, 0xC6	; 198
    2d18:	50 e0       	ldi	r21, 0x00	; 0
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
	{
		SendByteToSlave(DATA(notes2[i]));
    2d1a:	d9 01       	movw	r26, r18
    2d1c:	a3 5c       	subi	r26, 0xC3	; 195
    2d1e:	b7 4f       	sbci	r27, 0xF7	; 247
    2d20:	9c 91       	ld	r25, X
    2d22:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2d24:	80 81       	ld	r24, Z
    2d26:	85 ff       	sbrs	r24, 5
    2d28:	fd cf       	rjmp	.-6      	; 0x2d24 <main+0xea>
	UDR0 = data;
    2d2a:	da 01       	movw	r26, r20
    2d2c:	9c 93       	st	X, r25
		SendByteToSlave(DATA(notes[i]));
	}
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
    2d2e:	2f 5f       	subi	r18, 0xFF	; 255
    2d30:	3f 4f       	sbci	r19, 0xFF	; 255
    2d32:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <noteCount2>
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	28 17       	cp	r18, r24
    2d3a:	39 07       	cpc	r19, r25
    2d3c:	74 f3       	brlt	.-36     	; 0x2d1a <main+0xe0>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2d3e:	e0 ec       	ldi	r30, 0xC0	; 192
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	85 ff       	sbrs	r24, 5
    2d46:	fd cf       	rjmp	.-6      	; 0x2d42 <main+0x108>
	UDR0 = data;
    2d48:	8c e0       	ldi	r24, 0x0C	; 12
    2d4a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	lcd_string("Received!");
	PORTJ = 0xFF;
	
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    2d4e:	8f e0       	ldi	r24, 0x0F	; 15
    2d50:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	lcd_clear();
    2d54:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
	lcd_string("Sent!");
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	97 e0       	ldi	r25, 0x07	; 7
    2d5c:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_string>
	lcd_clear();
    2d60:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
	lcd_string("Sending Tasks");
    2d64:	86 e0       	ldi	r24, 0x06	; 6
    2d66:	97 e0       	ldi	r25, 0x07	; 7
    2d68:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_string>
	processNotes();
    2d6c:	e2 dd       	rcall	.-1084   	; 0x2932 <processNotes>
	lcd_clear();
    2d6e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
	lcd_string("Processed");
    2d72:	84 e1       	ldi	r24, 0x14	; 20
    2d74:	97 e0       	ldi	r25, 0x07	; 7
    2d76:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_string>
	SendByteToSlave(RC_NOT_E2);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    2d7a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <otherBotTaskCount>
    2d7e:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <otherBotTaskCount+0x1>
    2d82:	18 16       	cp	r1, r24
    2d84:	19 06       	cpc	r1, r25
    2d86:	f4 f5       	brge	.+124    	; 0x2e04 <main+0x1ca>
    2d88:	46 e0       	ldi	r20, 0x06	; 6
    2d8a:	58 e0       	ldi	r21, 0x08	; 8
    2d8c:	0f 2e       	mov	r0, r31
    2d8e:	fc ed       	ldi	r31, 0xDC	; 220
    2d90:	cf 2e       	mov	r12, r31
    2d92:	f7 e0       	ldi	r31, 0x07	; 7
    2d94:	df 2e       	mov	r13, r31
    2d96:	f0 2d       	mov	r31, r0
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2d9c:	e0 ec       	ldi	r30, 0xC0	; 192
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2da0:	0f 2e       	mov	r0, r31
    2da2:	f6 ec       	ldi	r31, 0xC6	; 198
    2da4:	ef 2e       	mov	r14, r31
    2da6:	f1 2c       	mov	r15, r1
    2da8:	f0 2d       	mov	r31, r0
    2daa:	13 e0       	ldi	r17, 0x03	; 3
    2dac:	7d e0       	ldi	r23, 0x0D	; 13
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
    2dae:	da 01       	movw	r26, r20
    2db0:	9c 91       	ld	r25, X
    2db2:	4e 5f       	subi	r20, 0xFE	; 254
    2db4:	5f 4f       	sbci	r21, 0xFF	; 255

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2db6:	80 81       	ld	r24, Z
    2db8:	85 ff       	sbrs	r24, 5
    2dba:	fd cf       	rjmp	.-6      	; 0x2db6 <main+0x17c>
	UDR0 = data;
    2dbc:	d7 01       	movw	r26, r14
    2dbe:	1c 93       	st	X, r17

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    2dc0:	69 2f       	mov	r22, r25
    2dc2:	60 68       	ori	r22, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2dc4:	80 81       	ld	r24, Z
    2dc6:	85 ff       	sbrs	r24, 5
    2dc8:	fd cf       	rjmp	.-6      	; 0x2dc4 <main+0x18a>
	UDR0 = data;
    2dca:	d7 01       	movw	r26, r14
    2dcc:	6c 93       	st	X, r22
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    2dce:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <otherBotLastTaskIndex>
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
		SendTask2ToSlave(otherBotTask2[i]);
    2dd2:	d6 01       	movw	r26, r12
    2dd4:	9c 91       	ld	r25, X
    2dd6:	b2 e0       	ldi	r27, 0x02	; 2
    2dd8:	cb 0e       	add	r12, r27
    2dda:	d1 1c       	adc	r13, r1

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2ddc:	80 81       	ld	r24, Z
    2dde:	85 ff       	sbrs	r24, 5
    2de0:	fd cf       	rjmp	.-6      	; 0x2ddc <main+0x1a2>
	UDR0 = data;
    2de2:	d7 01       	movw	r26, r14
    2de4:	7c 93       	st	X, r23

//send the task2 to slave
void inline SendTask2ToSlave(char task)
{
	SendByteToSlave(ADD_TASK2);
	SendByteToSlave(DATA(task));
    2de6:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2de8:	80 81       	ld	r24, Z
    2dea:	85 ff       	sbrs	r24, 5
    2dec:	fd cf       	rjmp	.-6      	; 0x2de8 <main+0x1ae>
	UDR0 = data;
    2dee:	d7 01       	movw	r26, r14
    2df0:	9c 93       	st	X, r25
	SendByteToSlave(RC_NOT_E2);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    2df2:	2f 5f       	subi	r18, 0xFF	; 255
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <otherBotTaskCount>
    2dfa:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <otherBotTaskCount+0x1>
    2dfe:	28 17       	cp	r18, r24
    2e00:	39 07       	cpc	r19, r25
    2e02:	ac f2       	brlt	.-86     	; 0x2dae <main+0x174>
	lcd_string("Sending Tasks");
	processNotes();
	lcd_clear();
	lcd_string("Processed");
	SendTaskArray();
	lcd_clear();
    2e04:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
	lcd_string("Task Sent");
    2e08:	8e e1       	ldi	r24, 0x1E	; 30
    2e0a:	97 e0       	ldi	r25, 0x07	; 7
    2e0c:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_string>
	#endif

	while(taskCount==0);
    2e10:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <taskCount>
    2e14:	88 23       	and	r24, r24
    2e16:	e1 f3       	breq	.-8      	; 0x2e10 <main+0x1d6>
	
	//PC Debug (printf)
	stdout = &uart_debug;
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	92 e0       	ldi	r25, 0x02	; 2
    2e1c:	90 93 04 0c 	sts	0x0C04, r25	; 0x800c04 <__iob+0x3>
    2e20:	80 93 03 0c 	sts	0x0C03, r24	; 0x800c03 <__iob+0x2>
	printf("Gonna Start!!!\n");
    2e24:	88 e2       	ldi	r24, 0x28	; 40
    2e26:	97 e0       	ldi	r25, 0x07	; 7
    2e28:	22 d7       	rcall	.+3652   	; 0x3c6e <puts>
	int i=0;
	lcd_clear();
    2e2a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_clear>
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
	{	
		//printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
		int taskDone=0;
		whichTask=0;
    2e2e:	21 2c       	mov	r2, r1
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    2e30:	0f 2e       	mov	r0, r31
    2e32:	f6 ec       	ldi	r31, 0xC6	; 198
    2e34:	af 2e       	mov	r10, r31
    2e36:	b1 2c       	mov	r11, r1
    2e38:	f0 2d       	mov	r31, r0
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=99;
			nxtNode=node[botloc-1][0];
			pos=0;
    2e3a:	29 82       	std	Y+1, r2	; 0x01
    2e3c:	1a 82       	std	Y+2, r1	; 0x02
    2e3e:	61 2c       	mov	r6, r1
    2e40:	71 2c       	mov	r7, r1
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=99;
    2e42:	0f 2e       	mov	r0, r31
    2e44:	f3 e6       	ldi	r31, 0x63	; 99
    2e46:	4f 2e       	mov	r4, r31
    2e48:	f0 2d       	mov	r31, r0
    2e4a:	51 2c       	mov	r5, r1
	stdout = &uart_debug;
	printf("Gonna Start!!!\n");
	int i=0;
	lcd_clear();
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
    2e4c:	d5 c4       	rjmp	.+2474   	; 0x37f8 <main+0xbbe>
	{	
		//printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
		int taskDone=0;
		whichTask=0;
    2e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e50:	fa 81       	ldd	r31, Y+2	; 0x02
    2e52:	f0 93 d7 07 	sts	0x07D7, r31	; 0x8007d7 <whichTask+0x1>
    2e56:	e0 93 d6 07 	sts	0x07D6, r30	; 0x8007d6 <whichTask>
		int i,minCost,nxtNode,pos;
		if((int)tasks[taskitr]!=127)
    2e5a:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    2e5e:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    2e62:	eb 59       	subi	r30, 0x9B	; 155
    2e64:	f7 4f       	sbci	r31, 0xF7	; 247
    2e66:	80 81       	ld	r24, Z
    2e68:	8f 37       	cpi	r24, 0x7F	; 127
    2e6a:	69 f1       	breq	.+90     	; 0x2ec6 <main+0x28c>
		{
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    2e6c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    2e70:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    2e74:	eb 59       	subi	r30, 0x9B	; 155
    2e76:	f7 4f       	sbci	r31, 0xF7	; 247
    2e78:	e0 81       	ld	r30, Z
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	ef 5a       	subi	r30, 0xAF	; 175
    2e7e:	f7 4f       	sbci	r31, 0xF7	; 247
    2e80:	80 81       	ld	r24, Z
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9c 01       	movw	r18, r24
    2e88:	22 0f       	add	r18, r18
    2e8a:	33 1f       	adc	r19, r19
    2e8c:	82 0f       	add	r24, r18
    2e8e:	93 1f       	adc	r25, r19
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	8a 5c       	subi	r24, 0xCA	; 202
    2e9a:	9a 4f       	sbci	r25, 0xFA	; 250
    2e9c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <costplan>
			lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
    2ea0:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    2ea4:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    2ea8:	eb 59       	subi	r30, 0x9B	; 155
    2eaa:	f7 4f       	sbci	r31, 0xF7	; 247
    2eac:	e0 81       	ld	r30, Z
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	ef 5a       	subi	r30, 0xAF	; 175
    2eb2:	f7 4f       	sbci	r31, 0xF7	; 247
    2eb4:	40 81       	ld	r20, Z
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	22 e0       	ldi	r18, 0x02	; 2
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	6c e0       	ldi	r22, 0x0C	; 12
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
    2ec4:	32 c0       	rjmp	.+100    	; 0x2f2a <main+0x2f0>
		}
		else
		{
			whichTask=1;
    2ec6:	21 e0       	ldi	r18, 0x01	; 1
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	30 93 d7 07 	sts	0x07D7, r19	; 0x8007d7 <whichTask+0x1>
    2ece:	20 93 d6 07 	sts	0x07D6, r18	; 0x8007d6 <whichTask>
			costplan(nodesnear[(int)notes2[(int)tasks2[taskitr]]-1]);
    2ed2:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    2ed6:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    2eda:	ee 59       	subi	r30, 0x9E	; 158
    2edc:	f5 4f       	sbci	r31, 0xF5	; 245
    2ede:	e0 81       	ld	r30, Z
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	e3 5c       	subi	r30, 0xC3	; 195
    2ee4:	f7 4f       	sbci	r31, 0xF7	; 247
    2ee6:	80 81       	ld	r24, Z
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	9c 01       	movw	r18, r24
    2eee:	22 0f       	add	r18, r18
    2ef0:	33 1f       	adc	r19, r19
    2ef2:	82 0f       	add	r24, r18
    2ef4:	93 1f       	adc	r25, r19
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	8a 5c       	subi	r24, 0xCA	; 202
    2f00:	9a 4f       	sbci	r25, 0xFA	; 250
    2f02:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <costplan>
			lcd_print(2,12,(int)notes2[(int)tasks2[taskitr]],2);
    2f06:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    2f0a:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    2f0e:	ee 59       	subi	r30, 0x9E	; 158
    2f10:	f5 4f       	sbci	r31, 0xF5	; 245
    2f12:	e0 81       	ld	r30, Z
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	e3 5c       	subi	r30, 0xC3	; 195
    2f18:	f7 4f       	sbci	r31, 0xF7	; 247
    2f1a:	40 81       	ld	r20, Z
    2f1c:	50 e0       	ldi	r21, 0x00	; 0
    2f1e:	22 e0       	ldi	r18, 0x02	; 2
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	6c e0       	ldi	r22, 0x0C	; 12
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
		}
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    2f2a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2f2e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2f32:	ee 0f       	add	r30, r30
    2f34:	ff 1f       	adc	r31, r31
    2f36:	e4 58       	subi	r30, 0x84	; 132
    2f38:	f7 4f       	sbci	r31, 0xF7	; 247
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	89 2b       	or	r24, r25
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <main+0x30a>
    2f42:	50 c1       	rjmp	.+672    	; 0x31e4 <main+0x5aa>
		{
			lcd_print(2,5,botloc,2);
    2f44:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <botloc>
    2f48:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <botloc+0x1>
    2f4c:	22 e0       	ldi	r18, 0x02	; 2
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	65 e0       	ldi	r22, 0x05	; 5
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
			minCost=99;
			nxtNode=node[botloc-1][0];
    2f58:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2f5c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2f60:	ee 0f       	add	r30, r30
    2f62:	ff 1f       	adc	r31, r31
    2f64:	ee 0f       	add	r30, r30
    2f66:	ff 1f       	adc	r31, r31
    2f68:	ee 0f       	add	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	ea 52       	subi	r30, 0x2A	; 42
    2f6e:	f7 4f       	sbci	r31, 0xF7	; 247
    2f70:	80 80       	ld	r8, Z
    2f72:	91 80       	ldd	r9, Z+1	; 0x01
			pos=0;
    2f74:	e6 2c       	mov	r14, r6
    2f76:	f7 2c       	mov	r15, r7
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=99;
    2f78:	24 2d       	mov	r18, r4
    2f7a:	35 2d       	mov	r19, r5
			nxtNode=node[botloc-1][0];
			pos=0;
			for(i=0;i<4;i++)
    2f7c:	86 2d       	mov	r24, r6
    2f7e:	97 2d       	mov	r25, r7
			{
				if(node[botloc-1][i]!=0)
    2f80:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2f84:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2f88:	31 97       	sbiw	r30, 0x01	; 1
    2f8a:	ee 0f       	add	r30, r30
    2f8c:	ff 1f       	adc	r31, r31
    2f8e:	ee 0f       	add	r30, r30
    2f90:	ff 1f       	adc	r31, r31
    2f92:	e8 0f       	add	r30, r24
    2f94:	f9 1f       	adc	r31, r25
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	e2 52       	subi	r30, 0x22	; 34
    2f9c:	f7 4f       	sbci	r31, 0xF7	; 247
    2f9e:	40 81       	ld	r20, Z
    2fa0:	51 81       	ldd	r21, Z+1	; 0x01
    2fa2:	45 2b       	or	r20, r21
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <main+0x36e>
    2fa6:	45 c0       	rjmp	.+138    	; 0x3032 <main+0x3f8>
					if(cost[node[botloc-1][i]-1]<minCost)
    2fa8:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2fac:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2fb0:	31 97       	sbiw	r30, 0x01	; 1
    2fb2:	ee 0f       	add	r30, r30
    2fb4:	ff 1f       	adc	r31, r31
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	e8 0f       	add	r30, r24
    2fbc:	f9 1f       	adc	r31, r25
    2fbe:	ee 0f       	add	r30, r30
    2fc0:	ff 1f       	adc	r31, r31
    2fc2:	e2 52       	subi	r30, 0x22	; 34
    2fc4:	f7 4f       	sbci	r31, 0xF7	; 247
    2fc6:	01 90       	ld	r0, Z+
    2fc8:	f0 81       	ld	r31, Z
    2fca:	e0 2d       	mov	r30, r0
    2fcc:	ee 0f       	add	r30, r30
    2fce:	ff 1f       	adc	r31, r31
    2fd0:	e4 58       	subi	r30, 0x84	; 132
    2fd2:	f7 4f       	sbci	r31, 0xF7	; 247
    2fd4:	40 81       	ld	r20, Z
    2fd6:	51 81       	ldd	r21, Z+1	; 0x01
    2fd8:	42 17       	cp	r20, r18
    2fda:	53 07       	cpc	r21, r19
    2fdc:	54 f5       	brge	.+84     	; 0x3032 <main+0x3f8>
					{
						minCost=cost[node[botloc-1][i]-1];
    2fde:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2fe2:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2fe6:	31 97       	sbiw	r30, 0x01	; 1
    2fe8:	ee 0f       	add	r30, r30
    2fea:	ff 1f       	adc	r31, r31
    2fec:	ee 0f       	add	r30, r30
    2fee:	ff 1f       	adc	r31, r31
    2ff0:	e8 0f       	add	r30, r24
    2ff2:	f9 1f       	adc	r31, r25
    2ff4:	ee 0f       	add	r30, r30
    2ff6:	ff 1f       	adc	r31, r31
    2ff8:	e2 52       	subi	r30, 0x22	; 34
    2ffa:	f7 4f       	sbci	r31, 0xF7	; 247
    2ffc:	01 90       	ld	r0, Z+
    2ffe:	f0 81       	ld	r31, Z
    3000:	e0 2d       	mov	r30, r0
    3002:	ee 0f       	add	r30, r30
    3004:	ff 1f       	adc	r31, r31
    3006:	e4 58       	subi	r30, 0x84	; 132
    3008:	f7 4f       	sbci	r31, 0xF7	; 247
    300a:	20 81       	ld	r18, Z
    300c:	31 81       	ldd	r19, Z+1	; 0x01
						nxtNode=node[botloc-1][i];
    300e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    3012:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    3016:	31 97       	sbiw	r30, 0x01	; 1
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	e8 0f       	add	r30, r24
    3022:	f9 1f       	adc	r31, r25
    3024:	ee 0f       	add	r30, r30
    3026:	ff 1f       	adc	r31, r31
    3028:	e2 52       	subi	r30, 0x22	; 34
    302a:	f7 4f       	sbci	r31, 0xF7	; 247
    302c:	80 80       	ld	r8, Z
    302e:	91 80       	ldd	r9, Z+1	; 0x01
    3030:	7c 01       	movw	r14, r24
		{
			lcd_print(2,5,botloc,2);
			minCost=99;
			nxtNode=node[botloc-1][0];
			pos=0;
			for(i=0;i<4;i++)
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	84 30       	cpi	r24, 0x04	; 4
    3036:	91 05       	cpc	r25, r1
    3038:	09 f0       	breq	.+2      	; 0x303c <main+0x402>
    303a:	a2 cf       	rjmp	.-188    	; 0x2f80 <main+0x346>
    303c:	67 01       	movw	r12, r14
    303e:	84 01       	movw	r16, r8
						minCost=cost[node[botloc-1][i]-1];
						nxtNode=node[botloc-1][i];
						pos=i;
					}
			}
			lcd_print(2,8,nxtNode,2);
    3040:	22 e0       	ldi	r18, 0x02	; 2
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	a4 01       	movw	r20, r8
    3046:	68 e0       	ldi	r22, 0x08	; 8
    3048:	82 e0       	ldi	r24, 0x02	; 2
    304a:	0e 94 83 01 	call	0x306	; 0x306 <lcd_print>
			if(otherBotMovingTo==botloc)
    304e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <otherBotMovingTo>
    3052:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <botloc>
    3056:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <botloc+0x1>
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	82 17       	cp	r24, r18
    305e:	93 07       	cpc	r25, r19
    3060:	99 f4       	brne	.+38     	; 0x3088 <main+0x44e>
				if(nxtNode==otherBotLocation)
    3062:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <otherBotLocation>
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	88 15       	cp	r24, r8
    306a:	99 05       	cpc	r25, r9
    306c:	69 f4       	brne	.+26     	; 0x3088 <main+0x44e>
				{	
					swapTask(taskitr);
    306e:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <taskitr>
    3072:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <taskitr+0x1>
    3076:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <swapTask>
					swap=0;
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <swap+0x1>
    3082:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <swap>
					break;
    3086:	ae c0       	rjmp	.+348    	; 0x31e4 <main+0x5aa>
				}
			while((int)otherBotMovingTo==nxtNode);
    3088:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <otherBotMovingTo>
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	80 17       	cp	r24, r16
    3090:	91 07       	cpc	r25, r17
    3092:	d1 f3       	breq	.-12     	; 0x3088 <main+0x44e>
			while((int)otherBotLocation==nxtNode);
    3094:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <otherBotLocation>
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	80 17       	cp	r24, r16
    309c:	91 07       	cpc	r25, r17
    309e:	d1 f3       	breq	.-12     	; 0x3094 <main+0x45a>
			if(swap==1)
    30a0:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <swap>
    30a4:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <swap+0x1>
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	39 f4       	brne	.+14     	; 0x30ba <main+0x480>
			{
				swap=0;
    30ac:	a9 81       	ldd	r26, Y+1	; 0x01
    30ae:	ba 81       	ldd	r27, Y+2	; 0x02
    30b0:	b0 93 31 08 	sts	0x0831, r27	; 0x800831 <swap+0x1>
    30b4:	a0 93 30 08 	sts	0x0830, r26	; 0x800830 <swap>
				break;
    30b8:	95 c0       	rjmp	.+298    	; 0x31e4 <main+0x5aa>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    30ba:	e0 ec       	ldi	r30, 0xC0	; 192
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	85 ff       	sbrs	r24, 5
    30c2:	fb cf       	rjmp	.-10     	; 0x30ba <main+0x480>
	UDR0 = data;
    30c4:	85 e0       	ldi	r24, 0x05	; 5
    30c6:	d5 01       	movw	r26, r10
    30c8:	8c 93       	st	X, r24

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    30ca:	00 68       	ori	r16, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    30cc:	e0 ec       	ldi	r30, 0xC0	; 192
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	85 ff       	sbrs	r24, 5
    30d4:	fb cf       	rjmp	.-10     	; 0x30cc <main+0x492>
	UDR0 = data;
    30d6:	d5 01       	movw	r26, r10
    30d8:	0c 93       	st	X, r16
			{
				swap=0;
				break;
			}
			SendNextNode(nxtNode);
			taskDone=move(pos);
    30da:	c6 01       	movw	r24, r12
    30dc:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <move>
			if(!taskDone)
    30e0:	89 2b       	or	r24, r25
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <main+0x4ac>
    30e4:	4a c0       	rjmp	.+148    	; 0x317a <main+0x540>
			{
				for(i=0;i<4;i++)
					if(node[node[prevbotloc-1][pos]-1][i]==prevbotloc)
    30e6:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <prevbotloc>
    30ea:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <prevbotloc+0x1>
    30ee:	da 01       	movw	r26, r20
    30f0:	11 97       	sbiw	r26, 0x01	; 1
    30f2:	29 81       	ldd	r18, Y+1	; 0x01
    30f4:	3a 81       	ldd	r19, Y+2	; 0x02
    30f6:	aa 0f       	add	r26, r26
    30f8:	bb 1f       	adc	r27, r27
    30fa:	aa 0f       	add	r26, r26
    30fc:	bb 1f       	adc	r27, r27
    30fe:	ae 0d       	add	r26, r14
    3100:	bf 1d       	adc	r27, r15
    3102:	aa 0f       	add	r26, r26
    3104:	bb 1f       	adc	r27, r27
    3106:	a2 52       	subi	r26, 0x22	; 34
    3108:	b7 4f       	sbci	r27, 0xF7	; 247
    310a:	8d 91       	ld	r24, X+
    310c:	9c 91       	ld	r25, X
    310e:	11 97       	sbiw	r26, 0x01	; 1
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	fc 01       	movw	r30, r24
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	ee 0f       	add	r30, r30
    311a:	ff 1f       	adc	r31, r31
    311c:	e2 0f       	add	r30, r18
    311e:	f3 1f       	adc	r31, r19
    3120:	ee 0f       	add	r30, r30
    3122:	ff 1f       	adc	r31, r31
    3124:	e2 52       	subi	r30, 0x22	; 34
    3126:	f7 4f       	sbci	r31, 0xF7	; 247
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	46 17       	cp	r20, r22
    312e:	57 07       	cpc	r21, r23
    3130:	69 f4       	brne	.+26     	; 0x314c <main+0x512>
						node[node[prevbotloc-1][pos]-1][i]=0;
    3132:	fc 01       	movw	r30, r24
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	ee 0f       	add	r30, r30
    313a:	ff 1f       	adc	r31, r31
    313c:	e2 0f       	add	r30, r18
    313e:	f3 1f       	adc	r31, r19
    3140:	ee 0f       	add	r30, r30
    3142:	ff 1f       	adc	r31, r31
    3144:	e2 52       	subi	r30, 0x22	; 34
    3146:	f7 4f       	sbci	r31, 0xF7	; 247
    3148:	11 82       	std	Z+1, r1	; 0x01
    314a:	10 82       	st	Z, r1
			}
			SendNextNode(nxtNode);
			taskDone=move(pos);
			if(!taskDone)
			{
				for(i=0;i<4;i++)
    314c:	2f 5f       	subi	r18, 0xFF	; 255
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	24 30       	cpi	r18, 0x04	; 4
    3152:	31 05       	cpc	r19, r1
    3154:	d1 f6       	brne	.-76     	; 0x310a <main+0x4d0>
					if(node[node[prevbotloc-1][pos]-1][i]==prevbotloc)
						node[node[prevbotloc-1][pos]-1][i]=0;
				node[prevbotloc-1][pos]=0;
    3156:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <prevbotloc>
    315a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <prevbotloc+0x1>
    315e:	31 97       	sbiw	r30, 0x01	; 1
    3160:	ee 0f       	add	r30, r30
    3162:	ff 1f       	adc	r31, r31
    3164:	ee 0f       	add	r30, r30
    3166:	ff 1f       	adc	r31, r31
    3168:	ee 0d       	add	r30, r14
    316a:	ff 1d       	adc	r31, r15
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	e2 52       	subi	r30, 0x22	; 34
    3172:	f7 4f       	sbci	r31, 0xF7	; 247
    3174:	11 82       	std	Z+1, r1	; 0x01
    3176:	10 82       	st	Z, r1
				break;
    3178:	35 c0       	rjmp	.+106    	; 0x31e4 <main+0x5aa>
			}
			else
			{

				botloc=node[botloc-1][pos];
    317a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    317e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    3182:	31 97       	sbiw	r30, 0x01	; 1
    3184:	ee 0f       	add	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	ee 0f       	add	r30, r30
    318a:	ff 1f       	adc	r31, r31
    318c:	ec 0d       	add	r30, r12
    318e:	fd 1d       	adc	r31, r13
    3190:	ee 0f       	add	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	e2 52       	subi	r30, 0x22	; 34
    3196:	f7 4f       	sbci	r31, 0xF7	; 247
    3198:	80 81       	ld	r24, Z
    319a:	91 81       	ldd	r25, Z+1	; 0x01
    319c:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <botloc+0x1>
    31a0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <botloc>
				SendNodeReached(botloc);
    31a4:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <botloc>
    31a8:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    31ac:	e0 ec       	ldi	r30, 0xC0	; 192
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	85 ff       	sbrs	r24, 5
    31b4:	fb cf       	rjmp	.-10     	; 0x31ac <main+0x572>
	UDR0 = data;
    31b6:	d5 01       	movw	r26, r10
    31b8:	3c 92       	st	X, r3

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    31ba:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    31bc:	e0 ec       	ldi	r30, 0xC0	; 192
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	85 ff       	sbrs	r24, 5
    31c4:	fb cf       	rjmp	.-10     	; 0x31bc <main+0x582>
	UDR0 = data;
    31c6:	d5 01       	movw	r26, r10
    31c8:	2c 93       	st	X, r18
			costplan(nodesnear[(int)notes2[(int)tasks2[taskitr]]-1]);
			lcd_print(2,12,(int)notes2[(int)tasks2[taskitr]],2);
		}
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    31ca:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    31ce:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    31d2:	ee 0f       	add	r30, r30
    31d4:	ff 1f       	adc	r31, r31
    31d6:	e4 58       	subi	r30, 0x84	; 132
    31d8:	f7 4f       	sbci	r31, 0xF7	; 247
    31da:	80 81       	ld	r24, Z
    31dc:	91 81       	ldd	r25, Z+1	; 0x01
    31de:	89 2b       	or	r24, r25
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <main+0x5aa>
    31e2:	b0 ce       	rjmp	.-672    	; 0x2f44 <main+0x30a>
				botloc=node[botloc-1][pos];
				SendNodeReached(botloc);
			}
		}
			
		if(cost[botloc-1]==0)
    31e4:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    31e8:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    31ec:	ee 0f       	add	r30, r30
    31ee:	ff 1f       	adc	r31, r31
    31f0:	e4 58       	subi	r30, 0x84	; 132
    31f2:	f7 4f       	sbci	r31, 0xF7	; 247
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	89 2b       	or	r24, r25
    31fa:	09 f0       	breq	.+2      	; 0x31fe <main+0x5c4>
    31fc:	00 c3       	rjmp	.+1536   	; 0x37fe <main+0xbc4>
		{
			if(!whichTask)
    31fe:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <whichTask>
    3202:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <whichTask+0x1>
    3206:	89 2b       	or	r24, r25
    3208:	61 f4       	brne	.+24     	; 0x3222 <main+0x5e8>
				while(noteToStrike!=tasks[taskitr]);
    320a:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    320e:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    3212:	eb 59       	subi	r30, 0x9B	; 155
    3214:	f7 4f       	sbci	r31, 0xF7	; 247
    3216:	90 81       	ld	r25, Z
    3218:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <noteToStrike>
    321c:	98 13       	cpse	r25, r24
    321e:	f5 cf       	rjmp	.-22     	; 0x320a <main+0x5d0>
    3220:	0c c0       	rjmp	.+24     	; 0x323a <main+0x600>
			else
				while(noteToStrike!=tasks2[taskitr]);
    3222:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <taskitr>
    3226:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <taskitr+0x1>
    322a:	ee 59       	subi	r30, 0x9E	; 158
    322c:	f5 4f       	sbci	r31, 0xF5	; 245
    322e:	90 81       	ld	r25, Z
    3230:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <noteToStrike>
    3234:	98 13       	cpse	r25, r24
    3236:	f5 cf       	rjmp	.-22     	; 0x3222 <main+0x5e8>
    3238:	31 c0       	rjmp	.+98     	; 0x329c <main+0x662>
    323a:	b0 91 c8 07 	lds	r27, 0x07C8	; 0x8007c8 <q>
    323e:	a0 91 c9 07 	lds	r26, 0x07C9	; 0x8007c9 <q+0x1>
		}
			
		if(cost[botloc-1]==0)
		{
			if(!whichTask)
				while(noteToStrike!=tasks[taskitr]);
    3242:	22 2d       	mov	r18, r2
    3244:	30 e0       	ldi	r19, 0x00	; 0
			else
				while(noteToStrike!=tasks2[taskitr]);
			if(!whichTask)
			{
				for(int i=0;i<4;i++)
					if(botloc==nodesnear[(int)notes[(int)noteToStrike]-1][i])
    3246:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	ef 5a       	subi	r30, 0xAF	; 175
    324e:	f7 4f       	sbci	r31, 0xF7	; 247
    3250:	80 81       	ld	r24, Z
    3252:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <botloc>
    3256:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <botloc+0x1>
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	bc 01       	movw	r22, r24
    3260:	66 0f       	add	r22, r22
    3262:	77 1f       	adc	r23, r23
    3264:	fb 01       	movw	r30, r22
    3266:	e8 0f       	add	r30, r24
    3268:	f9 1f       	adc	r31, r25
    326a:	ee 0f       	add	r30, r30
    326c:	ff 1f       	adc	r31, r31
    326e:	e2 0f       	add	r30, r18
    3270:	f3 1f       	adc	r31, r19
    3272:	ee 0f       	add	r30, r30
    3274:	ff 1f       	adc	r31, r31
    3276:	ea 5c       	subi	r30, 0xCA	; 202
    3278:	fa 4f       	sbci	r31, 0xFA	; 250
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	84 17       	cp	r24, r20
    3280:	95 07       	cpc	r25, r21
    3282:	11 f4       	brne	.+4      	; 0x3288 <main+0x64e>
						q=i;
    3284:	b2 2f       	mov	r27, r18
    3286:	a3 2f       	mov	r26, r19
				while(noteToStrike!=tasks[taskitr]);
			else
				while(noteToStrike!=tasks2[taskitr]);
			if(!whichTask)
			{
				for(int i=0;i<4;i++)
    3288:	2f 5f       	subi	r18, 0xFF	; 255
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	24 30       	cpi	r18, 0x04	; 4
    328e:	31 05       	cpc	r19, r1
    3290:	d1 f6       	brne	.-76     	; 0x3246 <main+0x60c>
    3292:	b0 93 c8 07 	sts	0x07C8, r27	; 0x8007c8 <q>
    3296:	a0 93 c9 07 	sts	0x07C9, r26	; 0x8007c9 <q+0x1>
    329a:	30 c0       	rjmp	.+96     	; 0x32fc <main+0x6c2>
    329c:	b0 91 c8 07 	lds	r27, 0x07C8	; 0x8007c8 <q>
    32a0:	a0 91 c9 07 	lds	r26, 0x07C9	; 0x8007c9 <q+0x1>
		if(cost[botloc-1]==0)
		{
			if(!whichTask)
				while(noteToStrike!=tasks[taskitr]);
			else
				while(noteToStrike!=tasks2[taskitr]);
    32a4:	22 2d       	mov	r18, r2
    32a6:	30 e0       	ldi	r19, 0x00	; 0
						q=i;
			}
			else
			{
				for(int i=0;i<4;i++)
					if(botloc==nodesnear[(int)notes2[(int)noteToStrike]-1][i])
    32a8:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	e3 5c       	subi	r30, 0xC3	; 195
    32b0:	f7 4f       	sbci	r31, 0xF7	; 247
    32b2:	80 81       	ld	r24, Z
    32b4:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <botloc>
    32b8:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <botloc+0x1>
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	bc 01       	movw	r22, r24
    32c2:	66 0f       	add	r22, r22
    32c4:	77 1f       	adc	r23, r23
    32c6:	fb 01       	movw	r30, r22
    32c8:	e8 0f       	add	r30, r24
    32ca:	f9 1f       	adc	r31, r25
    32cc:	ee 0f       	add	r30, r30
    32ce:	ff 1f       	adc	r31, r31
    32d0:	e2 0f       	add	r30, r18
    32d2:	f3 1f       	adc	r31, r19
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	ea 5c       	subi	r30, 0xCA	; 202
    32da:	fa 4f       	sbci	r31, 0xFA	; 250
    32dc:	80 81       	ld	r24, Z
    32de:	91 81       	ldd	r25, Z+1	; 0x01
    32e0:	84 17       	cp	r24, r20
    32e2:	95 07       	cpc	r25, r21
    32e4:	11 f4       	brne	.+4      	; 0x32ea <main+0x6b0>
						q=i;
    32e6:	b2 2f       	mov	r27, r18
    32e8:	a3 2f       	mov	r26, r19
					if(botloc==nodesnear[(int)notes[(int)noteToStrike]-1][i])
						q=i;
			}
			else
			{
				for(int i=0;i<4;i++)
    32ea:	2f 5f       	subi	r18, 0xFF	; 255
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	24 30       	cpi	r18, 0x04	; 4
    32f0:	31 05       	cpc	r19, r1
    32f2:	d1 f6       	brne	.-76     	; 0x32a8 <main+0x66e>
    32f4:	b0 93 c8 07 	sts	0x07C8, r27	; 0x8007c8 <q>
    32f8:	a0 93 c9 07 	sts	0x07C9, r26	; 0x8007c9 <q+0x1>
					if(botloc==nodesnear[(int)notes2[(int)noteToStrike]-1][i])
						q=i;
			}
			printf("Currently on %d of nodesnear of that note \n",q);
    32fc:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <q+0x1>
    3300:	8f 93       	push	r24
    3302:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    3306:	8f 93       	push	r24
    3308:	87 e3       	ldi	r24, 0x37	; 55
    330a:	97 e0       	ldi	r25, 0x07	; 7
    330c:	9f 93       	push	r25
    330e:	8f 93       	push	r24
    3310:	9b d4       	rcall	.+2358   	; 0x3c48 <printf>
			if((!whichTask) && (noteangles[(int)notes[(int)noteToStrike]-1][q][0]==botang || noteangles[(int)notes[(int)noteToStrike]-1][q][1]==botang))
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <whichTask>
    331e:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <whichTask+0x1>
    3322:	89 2b       	or	r24, r25
    3324:	09 f0       	breq	.+2      	; 0x3328 <main+0x6ee>
    3326:	71 c0       	rjmp	.+226    	; 0x340a <main+0x7d0>
    3328:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	ef 5a       	subi	r30, 0xAF	; 175
    3330:	f7 4f       	sbci	r31, 0xF7	; 247
    3332:	e0 81       	ld	r30, Z
    3334:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    3338:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <q+0x1>
    333c:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <botang>
    3340:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <botang+0x1>
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	31 97       	sbiw	r30, 0x01	; 1
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	ee 0f       	add	r30, r30
    334e:	ff 1f       	adc	r31, r31
    3350:	e8 0f       	add	r30, r24
    3352:	f9 1f       	adc	r31, r25
    3354:	ee 0f       	add	r30, r30
    3356:	ff 1f       	adc	r31, r31
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	ea 5d       	subi	r30, 0xDA	; 218
    335e:	fc 4f       	sbci	r31, 0xFC	; 252
    3360:	40 81       	ld	r20, Z
    3362:	51 81       	ldd	r21, Z+1	; 0x01
    3364:	42 17       	cp	r20, r18
    3366:	53 07       	cpc	r21, r19
    3368:	d1 f0       	breq	.+52     	; 0x339e <main+0x764>
    336a:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	ef 5a       	subi	r30, 0xAF	; 175
    3372:	f7 4f       	sbci	r31, 0xF7	; 247
    3374:	e0 81       	ld	r30, Z
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	31 97       	sbiw	r30, 0x01	; 1
    337a:	ee 0f       	add	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	ee 0f       	add	r30, r30
    3380:	ff 1f       	adc	r31, r31
    3382:	e8 0f       	add	r30, r24
    3384:	f9 1f       	adc	r31, r25
    3386:	ee 0f       	add	r30, r30
    3388:	ff 1f       	adc	r31, r31
    338a:	ee 0f       	add	r30, r30
    338c:	ff 1f       	adc	r31, r31
    338e:	ea 5d       	subi	r30, 0xDA	; 218
    3390:	fc 4f       	sbci	r31, 0xFC	; 252
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	28 17       	cp	r18, r24
    3398:	39 07       	cpc	r19, r25
    339a:	09 f0       	breq	.+2      	; 0x339e <main+0x764>
    339c:	a6 c0       	rjmp	.+332    	; 0x34ea <main+0x8b0>
			{
				printf("Gonna Strike here itself as botang = %d \n",botang);
    339e:	3f 93       	push	r19
    33a0:	2f 93       	push	r18
    33a2:	83 e6       	ldi	r24, 0x63	; 99
    33a4:	97 e0       	ldi	r25, 0x07	; 7
    33a6:	9f 93       	push	r25
    33a8:	8f 93       	push	r24
    33aa:	4e d4       	rcall	.+2204   	; 0x3c48 <printf>
				if(noteangles[(int)notes[(int)noteToStrike]-1][q][0]==botang)
    33ac:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	ef 5a       	subi	r30, 0xAF	; 175
    33b4:	f7 4f       	sbci	r31, 0xF7	; 247
    33b6:	e0 81       	ld	r30, Z
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	31 97       	sbiw	r30, 0x01	; 1
    33bc:	ee 0f       	add	r30, r30
    33be:	ff 1f       	adc	r31, r31
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    33c8:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <q+0x1>
    33cc:	e8 0f       	add	r30, r24
    33ce:	f9 1f       	adc	r31, r25
    33d0:	ee 0f       	add	r30, r30
    33d2:	ff 1f       	adc	r31, r31
    33d4:	ee 0f       	add	r30, r30
    33d6:	ff 1f       	adc	r31, r31
    33d8:	ea 5d       	subi	r30, 0xDA	; 218
    33da:	fc 4f       	sbci	r31, 0xFC	; 252
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	20 81       	ld	r18, Z
    33e6:	31 81       	ldd	r19, Z+1	; 0x01
    33e8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    33ec:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    33f0:	28 17       	cp	r18, r24
    33f2:	39 07       	cpc	r19, r25
    33f4:	29 f4       	brne	.+10     	; 0x3400 <main+0x7c6>
					servoStrike(1); // Strike Left
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <servoStrike>
    33fe:	dc c1       	rjmp	.+952    	; 0x37b8 <main+0xb7e>
				else
					servoStrike(0);//Strike Right
    3400:	82 2d       	mov	r24, r2
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <servoStrike>
    3408:	d7 c1       	rjmp	.+942    	; 0x37b8 <main+0xb7e>
					
				// Servo Motor Control
				// Strike the Note
			}
			else if((whichTask) && (noteangles[(int)notes2[(int)noteToStrike]-1][q][0]==botang || noteangles[(int)notes2[(int)noteToStrike]-1][q][1]==botang))
    340a:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	e3 5c       	subi	r30, 0xC3	; 195
    3412:	f7 4f       	sbci	r31, 0xF7	; 247
    3414:	e0 81       	ld	r30, Z
    3416:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    341a:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <q+0x1>
    341e:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <botang>
    3422:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <botang+0x1>
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	31 97       	sbiw	r30, 0x01	; 1
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	ee 0f       	add	r30, r30
    3430:	ff 1f       	adc	r31, r31
    3432:	e8 0f       	add	r30, r24
    3434:	f9 1f       	adc	r31, r25
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	ee 0f       	add	r30, r30
    343c:	ff 1f       	adc	r31, r31
    343e:	ea 5d       	subi	r30, 0xDA	; 218
    3440:	fc 4f       	sbci	r31, 0xFC	; 252
    3442:	40 81       	ld	r20, Z
    3444:	51 81       	ldd	r21, Z+1	; 0x01
    3446:	42 17       	cp	r20, r18
    3448:	53 07       	cpc	r21, r19
    344a:	c9 f0       	breq	.+50     	; 0x347e <main+0x844>
    344c:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	e3 5c       	subi	r30, 0xC3	; 195
    3454:	f7 4f       	sbci	r31, 0xF7	; 247
    3456:	e0 81       	ld	r30, Z
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	31 97       	sbiw	r30, 0x01	; 1
    345c:	ee 0f       	add	r30, r30
    345e:	ff 1f       	adc	r31, r31
    3460:	ee 0f       	add	r30, r30
    3462:	ff 1f       	adc	r31, r31
    3464:	e8 0f       	add	r30, r24
    3466:	f9 1f       	adc	r31, r25
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	ee 0f       	add	r30, r30
    346e:	ff 1f       	adc	r31, r31
    3470:	ea 5d       	subi	r30, 0xDA	; 218
    3472:	fc 4f       	sbci	r31, 0xFC	; 252
    3474:	82 81       	ldd	r24, Z+2	; 0x02
    3476:	93 81       	ldd	r25, Z+3	; 0x03
    3478:	28 17       	cp	r18, r24
    347a:	39 07       	cpc	r19, r25
    347c:	b1 f5       	brne	.+108    	; 0x34ea <main+0x8b0>
			{
				printf("Gonna Strike here itself as botang = %d \n",botang);
    347e:	3f 93       	push	r19
    3480:	2f 93       	push	r18
    3482:	83 e6       	ldi	r24, 0x63	; 99
    3484:	97 e0       	ldi	r25, 0x07	; 7
    3486:	9f 93       	push	r25
    3488:	8f 93       	push	r24
    348a:	de d3       	rcall	.+1980   	; 0x3c48 <printf>
				if(noteangles[(int)notes2[(int)noteToStrike]-1][q][0]==botang)
    348c:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	e3 5c       	subi	r30, 0xC3	; 195
    3494:	f7 4f       	sbci	r31, 0xF7	; 247
    3496:	e0 81       	ld	r30, Z
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	31 97       	sbiw	r30, 0x01	; 1
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <q>
    34a8:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <q+0x1>
    34ac:	e8 0f       	add	r30, r24
    34ae:	f9 1f       	adc	r31, r25
    34b0:	ee 0f       	add	r30, r30
    34b2:	ff 1f       	adc	r31, r31
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	ea 5d       	subi	r30, 0xDA	; 218
    34ba:	fc 4f       	sbci	r31, 0xFC	; 252
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	20 81       	ld	r18, Z
    34c6:	31 81       	ldd	r19, Z+1	; 0x01
    34c8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    34cc:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    34d0:	28 17       	cp	r18, r24
    34d2:	39 07       	cpc	r19, r25
    34d4:	29 f4       	brne	.+10     	; 0x34e0 <main+0x8a6>
				servoStrike(1); // Strike Left
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <servoStrike>
    34de:	6c c1       	rjmp	.+728    	; 0x37b8 <main+0xb7e>
				else
				servoStrike(0);//Strike Right
    34e0:	82 2d       	mov	r24, r2
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <servoStrike>
    34e8:	67 c1       	rjmp	.+718    	; 0x37b8 <main+0xb7e>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				printf("Gonna move to next node as botang = %d \n",botang);
    34ea:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <botang+0x1>
    34ee:	8f 93       	push	r24
    34f0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    34f4:	8f 93       	push	r24
    34f6:	8d e8       	ldi	r24, 0x8D	; 141
    34f8:	97 e0       	ldi	r25, 0x07	; 7
    34fa:	9f 93       	push	r25
    34fc:	8f 93       	push	r24
    34fe:	a4 d3       	rcall	.+1864   	; 0x3c48 <printf>
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
				{
					if((!whichTask) && (nodesnear[(int)notes[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes[(int)noteToStrike]-1][j]))
    3500:	60 91 d6 07 	lds	r22, 0x07D6	; 0x8007d6 <whichTask>
    3504:	70 91 d7 07 	lds	r23, 0x07D7	; 0x8007d7 <whichTask+0x1>
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
			}
			else
			{
				printf("Gonna move to next node as botang = %d \n",botang);
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
    3510:	82 2d       	mov	r24, r2
    3512:	90 e0       	ldi	r25, 0x00	; 0
					if((!whichTask) && (nodesnear[(int)notes[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes[(int)noteToStrike]-1][j]))
					{
						tpos=j;
						break;
					}
					else if((whichTask) && (nodesnear[(int)notes2[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes2[(int)noteToStrike]-1][j]))
    3514:	16 e0       	ldi	r17, 0x06	; 6
			{
				printf("Gonna move to next node as botang = %d \n",botang);
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
				{
					if((!whichTask) && (nodesnear[(int)notes[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes[(int)noteToStrike]-1][j]))
    3516:	61 15       	cp	r22, r1
    3518:	71 05       	cpc	r23, r1
    351a:	d9 f5       	brne	.+118    	; 0x3592 <main+0x958>
    351c:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	ef 5a       	subi	r30, 0xAF	; 175
    3524:	f7 4f       	sbci	r31, 0xF7	; 247
    3526:	20 81       	ld	r18, Z
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	21 50       	subi	r18, 0x01	; 1
    352c:	31 09       	sbc	r19, r1
    352e:	a9 01       	movw	r20, r18
    3530:	44 0f       	add	r20, r20
    3532:	55 1f       	adc	r21, r21
    3534:	fa 01       	movw	r30, r20
    3536:	e2 0f       	add	r30, r18
    3538:	f3 1f       	adc	r31, r19
    353a:	ee 0f       	add	r30, r30
    353c:	ff 1f       	adc	r31, r31
    353e:	e8 0f       	add	r30, r24
    3540:	f9 1f       	adc	r31, r25
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	ea 5c       	subi	r30, 0xCA	; 202
    3548:	fa 4f       	sbci	r31, 0xFA	; 250
    354a:	20 81       	ld	r18, Z
    354c:	31 81       	ldd	r19, Z+1	; 0x01
    354e:	23 2b       	or	r18, r19
    3550:	09 f4       	brne	.+2      	; 0x3554 <main+0x91a>
    3552:	58 c0       	rjmp	.+176    	; 0x3604 <main+0x9ca>
    3554:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	ef 5a       	subi	r30, 0xAF	; 175
    355c:	f7 4f       	sbci	r31, 0xF7	; 247
    355e:	40 81       	ld	r20, Z
    3560:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    3564:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	41 50       	subi	r20, 0x01	; 1
    356c:	51 09       	sbc	r21, r1
    356e:	14 9f       	mul	r17, r20
    3570:	90 01       	movw	r18, r0
    3572:	15 9f       	mul	r17, r21
    3574:	30 0d       	add	r19, r0
    3576:	11 24       	eor	r1, r1
    3578:	d9 01       	movw	r26, r18
    357a:	a8 0f       	add	r26, r24
    357c:	b9 1f       	adc	r27, r25
    357e:	aa 0f       	add	r26, r26
    3580:	bb 1f       	adc	r27, r27
    3582:	aa 5c       	subi	r26, 0xCA	; 202
    3584:	ba 4f       	sbci	r27, 0xFA	; 250
    3586:	2d 91       	ld	r18, X+
    3588:	3c 91       	ld	r19, X
    358a:	2e 17       	cp	r18, r30
    358c:	3f 07       	cpc	r19, r31
    358e:	d1 f5       	brne	.+116    	; 0x3604 <main+0x9ca>
    3590:	40 c0       	rjmp	.+128    	; 0x3612 <main+0x9d8>
					{
						tpos=j;
						break;
					}
					else if((whichTask) && (nodesnear[(int)notes2[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes2[(int)noteToStrike]-1][j]))
    3592:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	e3 5c       	subi	r30, 0xC3	; 195
    359a:	f7 4f       	sbci	r31, 0xF7	; 247
    359c:	20 81       	ld	r18, Z
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	21 50       	subi	r18, 0x01	; 1
    35a2:	31 09       	sbc	r19, r1
    35a4:	a9 01       	movw	r20, r18
    35a6:	44 0f       	add	r20, r20
    35a8:	55 1f       	adc	r21, r21
    35aa:	fa 01       	movw	r30, r20
    35ac:	e2 0f       	add	r30, r18
    35ae:	f3 1f       	adc	r31, r19
    35b0:	ee 0f       	add	r30, r30
    35b2:	ff 1f       	adc	r31, r31
    35b4:	e8 0f       	add	r30, r24
    35b6:	f9 1f       	adc	r31, r25
    35b8:	ee 0f       	add	r30, r30
    35ba:	ff 1f       	adc	r31, r31
    35bc:	ea 5c       	subi	r30, 0xCA	; 202
    35be:	fa 4f       	sbci	r31, 0xFA	; 250
    35c0:	20 81       	ld	r18, Z
    35c2:	31 81       	ldd	r19, Z+1	; 0x01
    35c4:	23 2b       	or	r18, r19
    35c6:	f1 f0       	breq	.+60     	; 0x3604 <main+0x9ca>
    35c8:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	e3 5c       	subi	r30, 0xC3	; 195
    35d0:	f7 4f       	sbci	r31, 0xF7	; 247
    35d2:	40 81       	ld	r20, Z
    35d4:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    35d8:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	41 50       	subi	r20, 0x01	; 1
    35e0:	51 09       	sbc	r21, r1
    35e2:	14 9f       	mul	r17, r20
    35e4:	90 01       	movw	r18, r0
    35e6:	15 9f       	mul	r17, r21
    35e8:	30 0d       	add	r19, r0
    35ea:	11 24       	eor	r1, r1
    35ec:	d9 01       	movw	r26, r18
    35ee:	a8 0f       	add	r26, r24
    35f0:	b9 1f       	adc	r27, r25
    35f2:	aa 0f       	add	r26, r26
    35f4:	bb 1f       	adc	r27, r27
    35f6:	aa 5c       	subi	r26, 0xCA	; 202
    35f8:	ba 4f       	sbci	r27, 0xFA	; 250
    35fa:	2d 91       	ld	r18, X+
    35fc:	3c 91       	ld	r19, X
    35fe:	2e 17       	cp	r18, r30
    3600:	3f 07       	cpc	r19, r31
    3602:	39 f0       	breq	.+14     	; 0x3612 <main+0x9d8>
			}
			else
			{
				printf("Gonna move to next node as botang = %d \n",botang);
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	84 30       	cpi	r24, 0x04	; 4
    3608:	91 05       	cpc	r25, r1
    360a:	09 f0       	breq	.+2      	; 0x360e <main+0x9d4>
    360c:	84 cf       	rjmp	.-248    	; 0x3516 <main+0x8dc>
				// Strike the Note
			}
			else
			{
				printf("Gonna move to next node as botang = %d \n",botang);
				int tpos=0,p=0;
    360e:	82 2d       	mov	r24, r2
    3610:	90 e0       	ldi	r25, 0x00	; 0
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    3612:	02 2d       	mov	r16, r2
    3614:	10 e0       	ldi	r17, 0x00	; 0
				{
					if((!whichTask) && (node[botloc-1][j]==movToDestNote[(int)notes[(int)noteToStrike]-1][tpos]))
    3616:	61 15       	cp	r22, r1
    3618:	71 05       	cpc	r23, r1
    361a:	d9 f5       	brne	.+118    	; 0x3692 <main+0xa58>
    361c:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <botloc>
    3620:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <botloc+0x1>
    3624:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	ef 5a       	subi	r30, 0xAF	; 175
    362c:	f7 4f       	sbci	r31, 0xF7	; 247
    362e:	e0 81       	ld	r30, Z
    3630:	11 97       	sbiw	r26, 0x01	; 1
    3632:	aa 0f       	add	r26, r26
    3634:	bb 1f       	adc	r27, r27
    3636:	aa 0f       	add	r26, r26
    3638:	bb 1f       	adc	r27, r27
    363a:	a0 0f       	add	r26, r16
    363c:	b1 1f       	adc	r27, r17
    363e:	aa 0f       	add	r26, r26
    3640:	bb 1f       	adc	r27, r27
    3642:	a2 52       	subi	r26, 0x22	; 34
    3644:	b7 4f       	sbci	r27, 0xF7	; 247
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	31 97       	sbiw	r30, 0x01	; 1
    364a:	ee 0f       	add	r30, r30
    364c:	ff 1f       	adc	r31, r31
    364e:	ee 0f       	add	r30, r30
    3650:	ff 1f       	adc	r31, r31
    3652:	e8 0f       	add	r30, r24
    3654:	f9 1f       	adc	r31, r25
    3656:	ee 0f       	add	r30, r30
    3658:	ff 1f       	adc	r31, r31
    365a:	e2 5e       	subi	r30, 0xE2	; 226
    365c:	fd 4f       	sbci	r31, 0xFD	; 253
    365e:	2d 91       	ld	r18, X+
    3660:	3c 91       	ld	r19, X
    3662:	40 81       	ld	r20, Z
    3664:	51 81       	ldd	r21, Z+1	; 0x01
    3666:	24 17       	cp	r18, r20
    3668:	35 07       	cpc	r19, r21
    366a:	09 f0       	breq	.+2      	; 0x366e <main+0xa34>
    366c:	4c c0       	rjmp	.+152    	; 0x3706 <main+0xacc>
					{
						p=j;
						nxtNode=node[botloc-1][j];
    366e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    3672:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    3676:	31 97       	sbiw	r30, 0x01	; 1
    3678:	ee 0f       	add	r30, r30
    367a:	ff 1f       	adc	r31, r31
    367c:	ee 0f       	add	r30, r30
    367e:	ff 1f       	adc	r31, r31
    3680:	e0 0f       	add	r30, r16
    3682:	f1 1f       	adc	r31, r17
    3684:	ee 0f       	add	r30, r30
    3686:	ff 1f       	adc	r31, r31
    3688:	e2 52       	subi	r30, 0x22	; 34
    368a:	f7 4f       	sbci	r31, 0xF7	; 247
    368c:	80 80       	ld	r8, Z
    368e:	91 80       	ldd	r9, Z+1	; 0x01
						break;
    3690:	42 c0       	rjmp	.+132    	; 0x3716 <main+0xadc>
					}
					else if((whichTask) && (node[botloc-1][j]==movToDestNote[(int)notes2[(int)noteToStrike]-1][tpos]))
    3692:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <botloc>
    3696:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <botloc+0x1>
    369a:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	e3 5c       	subi	r30, 0xC3	; 195
    36a2:	f7 4f       	sbci	r31, 0xF7	; 247
    36a4:	e0 81       	ld	r30, Z
    36a6:	11 97       	sbiw	r26, 0x01	; 1
    36a8:	aa 0f       	add	r26, r26
    36aa:	bb 1f       	adc	r27, r27
    36ac:	aa 0f       	add	r26, r26
    36ae:	bb 1f       	adc	r27, r27
    36b0:	a0 0f       	add	r26, r16
    36b2:	b1 1f       	adc	r27, r17
    36b4:	aa 0f       	add	r26, r26
    36b6:	bb 1f       	adc	r27, r27
    36b8:	a2 52       	subi	r26, 0x22	; 34
    36ba:	b7 4f       	sbci	r27, 0xF7	; 247
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	31 97       	sbiw	r30, 0x01	; 1
    36c0:	ee 0f       	add	r30, r30
    36c2:	ff 1f       	adc	r31, r31
    36c4:	ee 0f       	add	r30, r30
    36c6:	ff 1f       	adc	r31, r31
    36c8:	e8 0f       	add	r30, r24
    36ca:	f9 1f       	adc	r31, r25
    36cc:	ee 0f       	add	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	e2 5e       	subi	r30, 0xE2	; 226
    36d2:	fd 4f       	sbci	r31, 0xFD	; 253
    36d4:	2d 91       	ld	r18, X+
    36d6:	3c 91       	ld	r19, X
    36d8:	40 81       	ld	r20, Z
    36da:	51 81       	ldd	r21, Z+1	; 0x01
    36dc:	24 17       	cp	r18, r20
    36de:	35 07       	cpc	r19, r21
    36e0:	91 f4       	brne	.+36     	; 0x3706 <main+0xacc>
					{
						p=j;
						nxtNode=node[botloc-1][j];
    36e2:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    36e6:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    36ea:	31 97       	sbiw	r30, 0x01	; 1
    36ec:	ee 0f       	add	r30, r30
    36ee:	ff 1f       	adc	r31, r31
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	e0 0f       	add	r30, r16
    36f6:	f1 1f       	adc	r31, r17
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	e2 52       	subi	r30, 0x22	; 34
    36fe:	f7 4f       	sbci	r31, 0xF7	; 247
    3700:	80 80       	ld	r8, Z
    3702:	91 80       	ldd	r9, Z+1	; 0x01
						break;
    3704:	08 c0       	rjmp	.+16     	; 0x3716 <main+0xadc>
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    3706:	0f 5f       	subi	r16, 0xFF	; 255
    3708:	1f 4f       	sbci	r17, 0xFF	; 255
    370a:	04 30       	cpi	r16, 0x04	; 4
    370c:	11 05       	cpc	r17, r1
    370e:	09 f0       	breq	.+2      	; 0x3712 <main+0xad8>
    3710:	82 cf       	rjmp	.-252    	; 0x3616 <main+0x9dc>
				// Strike the Note
			}
			else
			{
				printf("Gonna move to next node as botang = %d \n",botang);
				int tpos=0,p=0;
    3712:	02 2d       	mov	r16, r2
    3714:	10 e0       	ldi	r17, 0x00	; 0
						p=j;
						nxtNode=node[botloc-1][j];
						break;
					}
				}
				strike=1;
    3716:	e1 e0       	ldi	r30, 0x01	; 1
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	f0 93 d9 07 	sts	0x07D9, r31	; 0x8007d9 <strike+0x1>
    371e:	e0 93 d8 07 	sts	0x07D8, r30	; 0x8007d8 <strike>
				while((int)otherBotMovingTo==nxtNode);
    3722:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <otherBotMovingTo>
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	88 15       	cp	r24, r8
    372a:	99 05       	cpc	r25, r9
    372c:	d1 f3       	breq	.-12     	; 0x3722 <main+0xae8>
				while((int)otherBotLocation==nxtNode);
    372e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <otherBotLocation>
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	88 15       	cp	r24, r8
    3736:	99 05       	cpc	r25, r9
    3738:	d1 f3       	breq	.-12     	; 0x372e <main+0xaf4>
				SendNextNode(nxtNode);
    373a:	88 2d       	mov	r24, r8

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    373c:	a0 ec       	ldi	r26, 0xC0	; 192
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	9c 91       	ld	r25, X
    3742:	95 ff       	sbrs	r25, 5
    3744:	fb cf       	rjmp	.-10     	; 0x373c <main+0xb02>
	UDR0 = data;
    3746:	95 e0       	ldi	r25, 0x05	; 5
    3748:	f5 01       	movw	r30, r10
    374a:	90 83       	st	Z, r25

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    374c:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    374e:	a0 ec       	ldi	r26, 0xC0	; 192
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	9c 91       	ld	r25, X
    3754:	95 ff       	sbrs	r25, 5
    3756:	fb cf       	rjmp	.-10     	; 0x374e <main+0xb14>
	UDR0 = data;
    3758:	f5 01       	movw	r30, r10
    375a:	80 83       	st	Z, r24
				}
				strike=1;
				while((int)otherBotMovingTo==nxtNode);
				while((int)otherBotLocation==nxtNode);
				SendNextNode(nxtNode);
				taskDone=move(p);
    375c:	c8 01       	movw	r24, r16
    375e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <move>
				if(taskDone==1)
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	49 f5       	brne	.+82     	; 0x37b8 <main+0xb7e>
				{
					botloc=node[botloc-1][p];
    3766:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    376a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    376e:	31 97       	sbiw	r30, 0x01	; 1
    3770:	ee 0f       	add	r30, r30
    3772:	ff 1f       	adc	r31, r31
    3774:	ee 0f       	add	r30, r30
    3776:	ff 1f       	adc	r31, r31
    3778:	e0 0f       	add	r30, r16
    377a:	f1 1f       	adc	r31, r17
    377c:	ee 0f       	add	r30, r30
    377e:	ff 1f       	adc	r31, r31
    3780:	e2 52       	subi	r30, 0x22	; 34
    3782:	f7 4f       	sbci	r31, 0xF7	; 247
    3784:	80 81       	ld	r24, Z
    3786:	91 81       	ldd	r25, Z+1	; 0x01
    3788:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <botloc+0x1>
    378c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <botloc>
					SendNodeReached(botloc);
    3790:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <botloc>
    3794:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    3798:	a0 ec       	ldi	r26, 0xC0	; 192
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	2c 91       	ld	r18, X
    379e:	25 ff       	sbrs	r18, 5
    37a0:	fb cf       	rjmp	.-10     	; 0x3798 <main+0xb5e>
	UDR0 = data;
    37a2:	94 e0       	ldi	r25, 0x04	; 4
    37a4:	f5 01       	movw	r30, r10
    37a6:	90 83       	st	Z, r25

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    37a8:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    37aa:	a0 ec       	ldi	r26, 0xC0	; 192
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	9c 91       	ld	r25, X
    37b0:	95 ff       	sbrs	r25, 5
    37b2:	fb cf       	rjmp	.-10     	; 0x37aa <main+0xb70>
	UDR0 = data;
    37b4:	f5 01       	movw	r30, r10
    37b6:	80 83       	st	Z, r24
			}
			//printf("Reached Destination node=%d \n",(int)notes[(int)tasks[taskitr]]);
			//buzzer_on();
			//_delay_ms(500);
			//buzzer_off();
			taskitr++;
    37b8:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <taskitr>
    37bc:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <taskitr+0x1>
    37c0:	01 96       	adiw	r24, 0x01	; 1
    37c2:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <taskitr+0x1>
    37c6:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <taskitr>
			SendNoteStruck(noteToStrike);
    37ca:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <noteToStrike>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    37ce:	a0 ec       	ldi	r26, 0xC0	; 192
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	9c 91       	ld	r25, X
    37d4:	95 ff       	sbrs	r25, 5
    37d6:	fb cf       	rjmp	.-10     	; 0x37ce <main+0xb94>
	UDR0 = data;
    37d8:	96 e0       	ldi	r25, 0x06	; 6
    37da:	f5 01       	movw	r30, r10
    37dc:	90 83       	st	Z, r25

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    37de:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    37e0:	a0 ec       	ldi	r26, 0xC0	; 192
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	9c 91       	ld	r25, X
    37e6:	95 ff       	sbrs	r25, 5
    37e8:	fb cf       	rjmp	.-10     	; 0x37e0 <main+0xba6>
	UDR0 = data;
    37ea:	f5 01       	movw	r30, r10
    37ec:	80 83       	st	Z, r24
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    37ee:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <noteToStrike>
    37f2:	8f 5f       	subi	r24, 0xFF	; 255
    37f4:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <noteToStrike>
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    37f8:	68 94       	set
    37fa:	33 24       	eor	r3, r3
    37fc:	32 f8       	bld	r3, 2
	stdout = &uart_debug;
	printf("Gonna Start!!!\n");
	int i=0;
	lcd_clear();
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
    37fe:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	ef 5a       	subi	r30, 0xAF	; 175
    3806:	f7 4f       	sbci	r31, 0xF7	; 247
    3808:	80 81       	ld	r24, Z
    380a:	81 11       	cpse	r24, r1
    380c:	08 c0       	rjmp	.+16     	; 0x381e <main+0xbe4>
    380e:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <noteToStrike>
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	e3 5c       	subi	r30, 0xC3	; 195
    3816:	f7 4f       	sbci	r31, 0xF7	; 247
    3818:	80 81       	ld	r24, Z
    381a:	88 23       	and	r24, r24
    381c:	59 f0       	breq	.+22     	; 0x3834 <main+0xbfa>
    381e:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <taskCount>
    3822:	20 91 2e 08 	lds	r18, 0x082E	; 0x80082e <taskitr>
    3826:	30 91 2f 08 	lds	r19, 0x082F	; 0x80082f <taskitr+0x1>
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	82 17       	cp	r24, r18
    382e:	93 07       	cpc	r25, r19
    3830:	09 f0       	breq	.+2      	; 0x3834 <main+0xbfa>
    3832:	0d cb       	rjmp	.-2534   	; 0x2e4e <main+0x214>
			//buzzer_off();
			taskitr++;
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
    3834:	86 eb       	ldi	r24, 0xB6	; 182
    3836:	97 e0       	ldi	r25, 0x07	; 7
    3838:	1a d2       	rcall	.+1076   	; 0x3c6e <puts>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    383a:	e0 ec       	ldi	r30, 0xC0	; 192
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	85 ff       	sbrs	r24, 5
    3842:	fd cf       	rjmp	.-6      	; 0x383e <main+0xc04>
	UDR0 = data;
    3844:	8a e0       	ldi	r24, 0x0A	; 10
    3846:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    384a:	e0 ec       	ldi	r30, 0xC0	; 192
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	80 81       	ld	r24, Z
    3850:	85 ff       	sbrs	r24, 5
    3852:	fd cf       	rjmp	.-6      	; 0x384e <main+0xc14>
	UDR0 = data;
    3854:	80 e8       	ldi	r24, 0x80	; 128
    3856:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
	BotEnded();
	while(botEnd!=1);
    385a:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <botEnd>
    385e:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <botEnd+0x1>
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	d1 f7       	brne	.-12     	; 0x385a <main+0xc20>
	buzzer_on();
    3866:	0e 94 44 0b 	call	0x1688	; 0x1688 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    386a:	ff ef       	ldi	r31, 0xFF	; 255
    386c:	2f ef       	ldi	r18, 0xFF	; 255
    386e:	30 ee       	ldi	r19, 0xE0	; 224
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	f1 50       	subi	r31, 0x01	; 1
    3874:	20 40       	sbci	r18, 0x00	; 0
    3876:	30 40       	sbci	r19, 0x00	; 0
    3878:	80 40       	sbci	r24, 0x00	; 0
    387a:	d9 f7       	brne	.-10     	; 0x3872 <main+0xc38>
    387c:	00 c0       	rjmp	.+0      	; 0x387e <main+0xc44>
    387e:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    3880:	0e 94 48 0b 	call	0x1690	; 0x1690 <buzzer_off>
	return 0;
}
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	ff 90       	pop	r15
    3896:	ef 90       	pop	r14
    3898:	df 90       	pop	r13
    389a:	cf 90       	pop	r12
    389c:	bf 90       	pop	r11
    389e:	af 90       	pop	r10
    38a0:	9f 90       	pop	r9
    38a2:	8f 90       	pop	r8
    38a4:	7f 90       	pop	r7
    38a6:	6f 90       	pop	r6
    38a8:	5f 90       	pop	r5
    38aa:	4f 90       	pop	r4
    38ac:	3f 90       	pop	r3
    38ae:	2f 90       	pop	r2
    38b0:	08 95       	ret

000038b2 <__subsf3>:
    38b2:	50 58       	subi	r21, 0x80	; 128

000038b4 <__addsf3>:
    38b4:	bb 27       	eor	r27, r27
    38b6:	aa 27       	eor	r26, r26
    38b8:	0e d0       	rcall	.+28     	; 0x38d6 <__addsf3x>
    38ba:	4d c1       	rjmp	.+666    	; 0x3b56 <__fp_round>
    38bc:	3e d1       	rcall	.+636    	; 0x3b3a <__fp_pscA>
    38be:	30 f0       	brcs	.+12     	; 0x38cc <__addsf3+0x18>
    38c0:	43 d1       	rcall	.+646    	; 0x3b48 <__fp_pscB>
    38c2:	20 f0       	brcs	.+8      	; 0x38cc <__addsf3+0x18>
    38c4:	31 f4       	brne	.+12     	; 0x38d2 <__addsf3+0x1e>
    38c6:	9f 3f       	cpi	r25, 0xFF	; 255
    38c8:	11 f4       	brne	.+4      	; 0x38ce <__addsf3+0x1a>
    38ca:	1e f4       	brtc	.+6      	; 0x38d2 <__addsf3+0x1e>
    38cc:	33 c1       	rjmp	.+614    	; 0x3b34 <__fp_nan>
    38ce:	0e f4       	brtc	.+2      	; 0x38d2 <__addsf3+0x1e>
    38d0:	e0 95       	com	r30
    38d2:	e7 fb       	bst	r30, 7
    38d4:	29 c1       	rjmp	.+594    	; 0x3b28 <__fp_inf>

000038d6 <__addsf3x>:
    38d6:	e9 2f       	mov	r30, r25
    38d8:	4f d1       	rcall	.+670    	; 0x3b78 <__fp_split3>
    38da:	80 f3       	brcs	.-32     	; 0x38bc <__addsf3+0x8>
    38dc:	ba 17       	cp	r27, r26
    38de:	62 07       	cpc	r22, r18
    38e0:	73 07       	cpc	r23, r19
    38e2:	84 07       	cpc	r24, r20
    38e4:	95 07       	cpc	r25, r21
    38e6:	18 f0       	brcs	.+6      	; 0x38ee <__addsf3x+0x18>
    38e8:	71 f4       	brne	.+28     	; 0x3906 <__addsf3x+0x30>
    38ea:	9e f5       	brtc	.+102    	; 0x3952 <__addsf3x+0x7c>
    38ec:	67 c1       	rjmp	.+718    	; 0x3bbc <__fp_zero>
    38ee:	0e f4       	brtc	.+2      	; 0x38f2 <__addsf3x+0x1c>
    38f0:	e0 95       	com	r30
    38f2:	0b 2e       	mov	r0, r27
    38f4:	ba 2f       	mov	r27, r26
    38f6:	a0 2d       	mov	r26, r0
    38f8:	0b 01       	movw	r0, r22
    38fa:	b9 01       	movw	r22, r18
    38fc:	90 01       	movw	r18, r0
    38fe:	0c 01       	movw	r0, r24
    3900:	ca 01       	movw	r24, r20
    3902:	a0 01       	movw	r20, r0
    3904:	11 24       	eor	r1, r1
    3906:	ff 27       	eor	r31, r31
    3908:	59 1b       	sub	r21, r25
    390a:	99 f0       	breq	.+38     	; 0x3932 <__addsf3x+0x5c>
    390c:	59 3f       	cpi	r21, 0xF9	; 249
    390e:	50 f4       	brcc	.+20     	; 0x3924 <__addsf3x+0x4e>
    3910:	50 3e       	cpi	r21, 0xE0	; 224
    3912:	68 f1       	brcs	.+90     	; 0x396e <__addsf3x+0x98>
    3914:	1a 16       	cp	r1, r26
    3916:	f0 40       	sbci	r31, 0x00	; 0
    3918:	a2 2f       	mov	r26, r18
    391a:	23 2f       	mov	r18, r19
    391c:	34 2f       	mov	r19, r20
    391e:	44 27       	eor	r20, r20
    3920:	58 5f       	subi	r21, 0xF8	; 248
    3922:	f3 cf       	rjmp	.-26     	; 0x390a <__addsf3x+0x34>
    3924:	46 95       	lsr	r20
    3926:	37 95       	ror	r19
    3928:	27 95       	ror	r18
    392a:	a7 95       	ror	r26
    392c:	f0 40       	sbci	r31, 0x00	; 0
    392e:	53 95       	inc	r21
    3930:	c9 f7       	brne	.-14     	; 0x3924 <__addsf3x+0x4e>
    3932:	7e f4       	brtc	.+30     	; 0x3952 <__addsf3x+0x7c>
    3934:	1f 16       	cp	r1, r31
    3936:	ba 0b       	sbc	r27, r26
    3938:	62 0b       	sbc	r22, r18
    393a:	73 0b       	sbc	r23, r19
    393c:	84 0b       	sbc	r24, r20
    393e:	ba f0       	brmi	.+46     	; 0x396e <__addsf3x+0x98>
    3940:	91 50       	subi	r25, 0x01	; 1
    3942:	a1 f0       	breq	.+40     	; 0x396c <__addsf3x+0x96>
    3944:	ff 0f       	add	r31, r31
    3946:	bb 1f       	adc	r27, r27
    3948:	66 1f       	adc	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	88 1f       	adc	r24, r24
    394e:	c2 f7       	brpl	.-16     	; 0x3940 <__addsf3x+0x6a>
    3950:	0e c0       	rjmp	.+28     	; 0x396e <__addsf3x+0x98>
    3952:	ba 0f       	add	r27, r26
    3954:	62 1f       	adc	r22, r18
    3956:	73 1f       	adc	r23, r19
    3958:	84 1f       	adc	r24, r20
    395a:	48 f4       	brcc	.+18     	; 0x396e <__addsf3x+0x98>
    395c:	87 95       	ror	r24
    395e:	77 95       	ror	r23
    3960:	67 95       	ror	r22
    3962:	b7 95       	ror	r27
    3964:	f7 95       	ror	r31
    3966:	9e 3f       	cpi	r25, 0xFE	; 254
    3968:	08 f0       	brcs	.+2      	; 0x396c <__addsf3x+0x96>
    396a:	b3 cf       	rjmp	.-154    	; 0x38d2 <__addsf3+0x1e>
    396c:	93 95       	inc	r25
    396e:	88 0f       	add	r24, r24
    3970:	08 f0       	brcs	.+2      	; 0x3974 <__addsf3x+0x9e>
    3972:	99 27       	eor	r25, r25
    3974:	ee 0f       	add	r30, r30
    3976:	97 95       	ror	r25
    3978:	87 95       	ror	r24
    397a:	08 95       	ret

0000397c <__divsf3>:
    397c:	0c d0       	rcall	.+24     	; 0x3996 <__divsf3x>
    397e:	eb c0       	rjmp	.+470    	; 0x3b56 <__fp_round>
    3980:	e3 d0       	rcall	.+454    	; 0x3b48 <__fp_pscB>
    3982:	40 f0       	brcs	.+16     	; 0x3994 <__divsf3+0x18>
    3984:	da d0       	rcall	.+436    	; 0x3b3a <__fp_pscA>
    3986:	30 f0       	brcs	.+12     	; 0x3994 <__divsf3+0x18>
    3988:	21 f4       	brne	.+8      	; 0x3992 <__divsf3+0x16>
    398a:	5f 3f       	cpi	r21, 0xFF	; 255
    398c:	19 f0       	breq	.+6      	; 0x3994 <__divsf3+0x18>
    398e:	cc c0       	rjmp	.+408    	; 0x3b28 <__fp_inf>
    3990:	51 11       	cpse	r21, r1
    3992:	15 c1       	rjmp	.+554    	; 0x3bbe <__fp_szero>
    3994:	cf c0       	rjmp	.+414    	; 0x3b34 <__fp_nan>

00003996 <__divsf3x>:
    3996:	f0 d0       	rcall	.+480    	; 0x3b78 <__fp_split3>
    3998:	98 f3       	brcs	.-26     	; 0x3980 <__divsf3+0x4>

0000399a <__divsf3_pse>:
    399a:	99 23       	and	r25, r25
    399c:	c9 f3       	breq	.-14     	; 0x3990 <__divsf3+0x14>
    399e:	55 23       	and	r21, r21
    39a0:	b1 f3       	breq	.-20     	; 0x398e <__divsf3+0x12>
    39a2:	95 1b       	sub	r25, r21
    39a4:	55 0b       	sbc	r21, r21
    39a6:	bb 27       	eor	r27, r27
    39a8:	aa 27       	eor	r26, r26
    39aa:	62 17       	cp	r22, r18
    39ac:	73 07       	cpc	r23, r19
    39ae:	84 07       	cpc	r24, r20
    39b0:	38 f0       	brcs	.+14     	; 0x39c0 <__divsf3_pse+0x26>
    39b2:	9f 5f       	subi	r25, 0xFF	; 255
    39b4:	5f 4f       	sbci	r21, 0xFF	; 255
    39b6:	22 0f       	add	r18, r18
    39b8:	33 1f       	adc	r19, r19
    39ba:	44 1f       	adc	r20, r20
    39bc:	aa 1f       	adc	r26, r26
    39be:	a9 f3       	breq	.-22     	; 0x39aa <__divsf3_pse+0x10>
    39c0:	33 d0       	rcall	.+102    	; 0x3a28 <__divsf3_pse+0x8e>
    39c2:	0e 2e       	mov	r0, r30
    39c4:	3a f0       	brmi	.+14     	; 0x39d4 <__divsf3_pse+0x3a>
    39c6:	e0 e8       	ldi	r30, 0x80	; 128
    39c8:	30 d0       	rcall	.+96     	; 0x3a2a <__divsf3_pse+0x90>
    39ca:	91 50       	subi	r25, 0x01	; 1
    39cc:	50 40       	sbci	r21, 0x00	; 0
    39ce:	e6 95       	lsr	r30
    39d0:	00 1c       	adc	r0, r0
    39d2:	ca f7       	brpl	.-14     	; 0x39c6 <__divsf3_pse+0x2c>
    39d4:	29 d0       	rcall	.+82     	; 0x3a28 <__divsf3_pse+0x8e>
    39d6:	fe 2f       	mov	r31, r30
    39d8:	27 d0       	rcall	.+78     	; 0x3a28 <__divsf3_pse+0x8e>
    39da:	66 0f       	add	r22, r22
    39dc:	77 1f       	adc	r23, r23
    39de:	88 1f       	adc	r24, r24
    39e0:	bb 1f       	adc	r27, r27
    39e2:	26 17       	cp	r18, r22
    39e4:	37 07       	cpc	r19, r23
    39e6:	48 07       	cpc	r20, r24
    39e8:	ab 07       	cpc	r26, r27
    39ea:	b0 e8       	ldi	r27, 0x80	; 128
    39ec:	09 f0       	breq	.+2      	; 0x39f0 <__divsf3_pse+0x56>
    39ee:	bb 0b       	sbc	r27, r27
    39f0:	80 2d       	mov	r24, r0
    39f2:	bf 01       	movw	r22, r30
    39f4:	ff 27       	eor	r31, r31
    39f6:	93 58       	subi	r25, 0x83	; 131
    39f8:	5f 4f       	sbci	r21, 0xFF	; 255
    39fa:	2a f0       	brmi	.+10     	; 0x3a06 <__divsf3_pse+0x6c>
    39fc:	9e 3f       	cpi	r25, 0xFE	; 254
    39fe:	51 05       	cpc	r21, r1
    3a00:	68 f0       	brcs	.+26     	; 0x3a1c <__divsf3_pse+0x82>
    3a02:	92 c0       	rjmp	.+292    	; 0x3b28 <__fp_inf>
    3a04:	dc c0       	rjmp	.+440    	; 0x3bbe <__fp_szero>
    3a06:	5f 3f       	cpi	r21, 0xFF	; 255
    3a08:	ec f3       	brlt	.-6      	; 0x3a04 <__divsf3_pse+0x6a>
    3a0a:	98 3e       	cpi	r25, 0xE8	; 232
    3a0c:	dc f3       	brlt	.-10     	; 0x3a04 <__divsf3_pse+0x6a>
    3a0e:	86 95       	lsr	r24
    3a10:	77 95       	ror	r23
    3a12:	67 95       	ror	r22
    3a14:	b7 95       	ror	r27
    3a16:	f7 95       	ror	r31
    3a18:	9f 5f       	subi	r25, 0xFF	; 255
    3a1a:	c9 f7       	brne	.-14     	; 0x3a0e <__divsf3_pse+0x74>
    3a1c:	88 0f       	add	r24, r24
    3a1e:	91 1d       	adc	r25, r1
    3a20:	96 95       	lsr	r25
    3a22:	87 95       	ror	r24
    3a24:	97 f9       	bld	r25, 7
    3a26:	08 95       	ret
    3a28:	e1 e0       	ldi	r30, 0x01	; 1
    3a2a:	66 0f       	add	r22, r22
    3a2c:	77 1f       	adc	r23, r23
    3a2e:	88 1f       	adc	r24, r24
    3a30:	bb 1f       	adc	r27, r27
    3a32:	62 17       	cp	r22, r18
    3a34:	73 07       	cpc	r23, r19
    3a36:	84 07       	cpc	r24, r20
    3a38:	ba 07       	cpc	r27, r26
    3a3a:	20 f0       	brcs	.+8      	; 0x3a44 <__divsf3_pse+0xaa>
    3a3c:	62 1b       	sub	r22, r18
    3a3e:	73 0b       	sbc	r23, r19
    3a40:	84 0b       	sbc	r24, r20
    3a42:	ba 0b       	sbc	r27, r26
    3a44:	ee 1f       	adc	r30, r30
    3a46:	88 f7       	brcc	.-30     	; 0x3a2a <__divsf3_pse+0x90>
    3a48:	e0 95       	com	r30
    3a4a:	08 95       	ret

00003a4c <__fixsfsi>:
    3a4c:	04 d0       	rcall	.+8      	; 0x3a56 <__fixunssfsi>
    3a4e:	68 94       	set
    3a50:	b1 11       	cpse	r27, r1
    3a52:	b5 c0       	rjmp	.+362    	; 0x3bbe <__fp_szero>
    3a54:	08 95       	ret

00003a56 <__fixunssfsi>:
    3a56:	98 d0       	rcall	.+304    	; 0x3b88 <__fp_splitA>
    3a58:	88 f0       	brcs	.+34     	; 0x3a7c <__fixunssfsi+0x26>
    3a5a:	9f 57       	subi	r25, 0x7F	; 127
    3a5c:	90 f0       	brcs	.+36     	; 0x3a82 <__fixunssfsi+0x2c>
    3a5e:	b9 2f       	mov	r27, r25
    3a60:	99 27       	eor	r25, r25
    3a62:	b7 51       	subi	r27, 0x17	; 23
    3a64:	a0 f0       	brcs	.+40     	; 0x3a8e <__fixunssfsi+0x38>
    3a66:	d1 f0       	breq	.+52     	; 0x3a9c <__fixunssfsi+0x46>
    3a68:	66 0f       	add	r22, r22
    3a6a:	77 1f       	adc	r23, r23
    3a6c:	88 1f       	adc	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	1a f0       	brmi	.+6      	; 0x3a78 <__fixunssfsi+0x22>
    3a72:	ba 95       	dec	r27
    3a74:	c9 f7       	brne	.-14     	; 0x3a68 <__fixunssfsi+0x12>
    3a76:	12 c0       	rjmp	.+36     	; 0x3a9c <__fixunssfsi+0x46>
    3a78:	b1 30       	cpi	r27, 0x01	; 1
    3a7a:	81 f0       	breq	.+32     	; 0x3a9c <__fixunssfsi+0x46>
    3a7c:	9f d0       	rcall	.+318    	; 0x3bbc <__fp_zero>
    3a7e:	b1 e0       	ldi	r27, 0x01	; 1
    3a80:	08 95       	ret
    3a82:	9c c0       	rjmp	.+312    	; 0x3bbc <__fp_zero>
    3a84:	67 2f       	mov	r22, r23
    3a86:	78 2f       	mov	r23, r24
    3a88:	88 27       	eor	r24, r24
    3a8a:	b8 5f       	subi	r27, 0xF8	; 248
    3a8c:	39 f0       	breq	.+14     	; 0x3a9c <__fixunssfsi+0x46>
    3a8e:	b9 3f       	cpi	r27, 0xF9	; 249
    3a90:	cc f3       	brlt	.-14     	; 0x3a84 <__fixunssfsi+0x2e>
    3a92:	86 95       	lsr	r24
    3a94:	77 95       	ror	r23
    3a96:	67 95       	ror	r22
    3a98:	b3 95       	inc	r27
    3a9a:	d9 f7       	brne	.-10     	; 0x3a92 <__fixunssfsi+0x3c>
    3a9c:	3e f4       	brtc	.+14     	; 0x3aac <__fixunssfsi+0x56>
    3a9e:	90 95       	com	r25
    3aa0:	80 95       	com	r24
    3aa2:	70 95       	com	r23
    3aa4:	61 95       	neg	r22
    3aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3aac:	08 95       	ret

00003aae <__floatunsisf>:
    3aae:	e8 94       	clt
    3ab0:	09 c0       	rjmp	.+18     	; 0x3ac4 <__floatsisf+0x12>

00003ab2 <__floatsisf>:
    3ab2:	97 fb       	bst	r25, 7
    3ab4:	3e f4       	brtc	.+14     	; 0x3ac4 <__floatsisf+0x12>
    3ab6:	90 95       	com	r25
    3ab8:	80 95       	com	r24
    3aba:	70 95       	com	r23
    3abc:	61 95       	neg	r22
    3abe:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac4:	99 23       	and	r25, r25
    3ac6:	a9 f0       	breq	.+42     	; 0x3af2 <__floatsisf+0x40>
    3ac8:	f9 2f       	mov	r31, r25
    3aca:	96 e9       	ldi	r25, 0x96	; 150
    3acc:	bb 27       	eor	r27, r27
    3ace:	93 95       	inc	r25
    3ad0:	f6 95       	lsr	r31
    3ad2:	87 95       	ror	r24
    3ad4:	77 95       	ror	r23
    3ad6:	67 95       	ror	r22
    3ad8:	b7 95       	ror	r27
    3ada:	f1 11       	cpse	r31, r1
    3adc:	f8 cf       	rjmp	.-16     	; 0x3ace <__floatsisf+0x1c>
    3ade:	fa f4       	brpl	.+62     	; 0x3b1e <__floatsisf+0x6c>
    3ae0:	bb 0f       	add	r27, r27
    3ae2:	11 f4       	brne	.+4      	; 0x3ae8 <__floatsisf+0x36>
    3ae4:	60 ff       	sbrs	r22, 0
    3ae6:	1b c0       	rjmp	.+54     	; 0x3b1e <__floatsisf+0x6c>
    3ae8:	6f 5f       	subi	r22, 0xFF	; 255
    3aea:	7f 4f       	sbci	r23, 0xFF	; 255
    3aec:	8f 4f       	sbci	r24, 0xFF	; 255
    3aee:	9f 4f       	sbci	r25, 0xFF	; 255
    3af0:	16 c0       	rjmp	.+44     	; 0x3b1e <__floatsisf+0x6c>
    3af2:	88 23       	and	r24, r24
    3af4:	11 f0       	breq	.+4      	; 0x3afa <__floatsisf+0x48>
    3af6:	96 e9       	ldi	r25, 0x96	; 150
    3af8:	11 c0       	rjmp	.+34     	; 0x3b1c <__floatsisf+0x6a>
    3afa:	77 23       	and	r23, r23
    3afc:	21 f0       	breq	.+8      	; 0x3b06 <__floatsisf+0x54>
    3afe:	9e e8       	ldi	r25, 0x8E	; 142
    3b00:	87 2f       	mov	r24, r23
    3b02:	76 2f       	mov	r23, r22
    3b04:	05 c0       	rjmp	.+10     	; 0x3b10 <__floatsisf+0x5e>
    3b06:	66 23       	and	r22, r22
    3b08:	71 f0       	breq	.+28     	; 0x3b26 <__floatsisf+0x74>
    3b0a:	96 e8       	ldi	r25, 0x86	; 134
    3b0c:	86 2f       	mov	r24, r22
    3b0e:	70 e0       	ldi	r23, 0x00	; 0
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	2a f0       	brmi	.+10     	; 0x3b1e <__floatsisf+0x6c>
    3b14:	9a 95       	dec	r25
    3b16:	66 0f       	add	r22, r22
    3b18:	77 1f       	adc	r23, r23
    3b1a:	88 1f       	adc	r24, r24
    3b1c:	da f7       	brpl	.-10     	; 0x3b14 <__floatsisf+0x62>
    3b1e:	88 0f       	add	r24, r24
    3b20:	96 95       	lsr	r25
    3b22:	87 95       	ror	r24
    3b24:	97 f9       	bld	r25, 7
    3b26:	08 95       	ret

00003b28 <__fp_inf>:
    3b28:	97 f9       	bld	r25, 7
    3b2a:	9f 67       	ori	r25, 0x7F	; 127
    3b2c:	80 e8       	ldi	r24, 0x80	; 128
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	60 e0       	ldi	r22, 0x00	; 0
    3b32:	08 95       	ret

00003b34 <__fp_nan>:
    3b34:	9f ef       	ldi	r25, 0xFF	; 255
    3b36:	80 ec       	ldi	r24, 0xC0	; 192
    3b38:	08 95       	ret

00003b3a <__fp_pscA>:
    3b3a:	00 24       	eor	r0, r0
    3b3c:	0a 94       	dec	r0
    3b3e:	16 16       	cp	r1, r22
    3b40:	17 06       	cpc	r1, r23
    3b42:	18 06       	cpc	r1, r24
    3b44:	09 06       	cpc	r0, r25
    3b46:	08 95       	ret

00003b48 <__fp_pscB>:
    3b48:	00 24       	eor	r0, r0
    3b4a:	0a 94       	dec	r0
    3b4c:	12 16       	cp	r1, r18
    3b4e:	13 06       	cpc	r1, r19
    3b50:	14 06       	cpc	r1, r20
    3b52:	05 06       	cpc	r0, r21
    3b54:	08 95       	ret

00003b56 <__fp_round>:
    3b56:	09 2e       	mov	r0, r25
    3b58:	03 94       	inc	r0
    3b5a:	00 0c       	add	r0, r0
    3b5c:	11 f4       	brne	.+4      	; 0x3b62 <__fp_round+0xc>
    3b5e:	88 23       	and	r24, r24
    3b60:	52 f0       	brmi	.+20     	; 0x3b76 <__fp_round+0x20>
    3b62:	bb 0f       	add	r27, r27
    3b64:	40 f4       	brcc	.+16     	; 0x3b76 <__fp_round+0x20>
    3b66:	bf 2b       	or	r27, r31
    3b68:	11 f4       	brne	.+4      	; 0x3b6e <__fp_round+0x18>
    3b6a:	60 ff       	sbrs	r22, 0
    3b6c:	04 c0       	rjmp	.+8      	; 0x3b76 <__fp_round+0x20>
    3b6e:	6f 5f       	subi	r22, 0xFF	; 255
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	8f 4f       	sbci	r24, 0xFF	; 255
    3b74:	9f 4f       	sbci	r25, 0xFF	; 255
    3b76:	08 95       	ret

00003b78 <__fp_split3>:
    3b78:	57 fd       	sbrc	r21, 7
    3b7a:	90 58       	subi	r25, 0x80	; 128
    3b7c:	44 0f       	add	r20, r20
    3b7e:	55 1f       	adc	r21, r21
    3b80:	59 f0       	breq	.+22     	; 0x3b98 <__fp_splitA+0x10>
    3b82:	5f 3f       	cpi	r21, 0xFF	; 255
    3b84:	71 f0       	breq	.+28     	; 0x3ba2 <__fp_splitA+0x1a>
    3b86:	47 95       	ror	r20

00003b88 <__fp_splitA>:
    3b88:	88 0f       	add	r24, r24
    3b8a:	97 fb       	bst	r25, 7
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	61 f0       	breq	.+24     	; 0x3ba8 <__fp_splitA+0x20>
    3b90:	9f 3f       	cpi	r25, 0xFF	; 255
    3b92:	79 f0       	breq	.+30     	; 0x3bb2 <__fp_splitA+0x2a>
    3b94:	87 95       	ror	r24
    3b96:	08 95       	ret
    3b98:	12 16       	cp	r1, r18
    3b9a:	13 06       	cpc	r1, r19
    3b9c:	14 06       	cpc	r1, r20
    3b9e:	55 1f       	adc	r21, r21
    3ba0:	f2 cf       	rjmp	.-28     	; 0x3b86 <__fp_split3+0xe>
    3ba2:	46 95       	lsr	r20
    3ba4:	f1 df       	rcall	.-30     	; 0x3b88 <__fp_splitA>
    3ba6:	08 c0       	rjmp	.+16     	; 0x3bb8 <__fp_splitA+0x30>
    3ba8:	16 16       	cp	r1, r22
    3baa:	17 06       	cpc	r1, r23
    3bac:	18 06       	cpc	r1, r24
    3bae:	99 1f       	adc	r25, r25
    3bb0:	f1 cf       	rjmp	.-30     	; 0x3b94 <__fp_splitA+0xc>
    3bb2:	86 95       	lsr	r24
    3bb4:	71 05       	cpc	r23, r1
    3bb6:	61 05       	cpc	r22, r1
    3bb8:	08 94       	sec
    3bba:	08 95       	ret

00003bbc <__fp_zero>:
    3bbc:	e8 94       	clt

00003bbe <__fp_szero>:
    3bbe:	bb 27       	eor	r27, r27
    3bc0:	66 27       	eor	r22, r22
    3bc2:	77 27       	eor	r23, r23
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	97 f9       	bld	r25, 7
    3bc8:	08 95       	ret

00003bca <__gesf2>:
    3bca:	03 d0       	rcall	.+6      	; 0x3bd2 <__fp_cmp>
    3bcc:	08 f4       	brcc	.+2      	; 0x3bd0 <__gesf2+0x6>
    3bce:	8f ef       	ldi	r24, 0xFF	; 255
    3bd0:	08 95       	ret

00003bd2 <__fp_cmp>:
    3bd2:	99 0f       	add	r25, r25
    3bd4:	00 08       	sbc	r0, r0
    3bd6:	55 0f       	add	r21, r21
    3bd8:	aa 0b       	sbc	r26, r26
    3bda:	e0 e8       	ldi	r30, 0x80	; 128
    3bdc:	fe ef       	ldi	r31, 0xFE	; 254
    3bde:	16 16       	cp	r1, r22
    3be0:	17 06       	cpc	r1, r23
    3be2:	e8 07       	cpc	r30, r24
    3be4:	f9 07       	cpc	r31, r25
    3be6:	c0 f0       	brcs	.+48     	; 0x3c18 <__fp_cmp+0x46>
    3be8:	12 16       	cp	r1, r18
    3bea:	13 06       	cpc	r1, r19
    3bec:	e4 07       	cpc	r30, r20
    3bee:	f5 07       	cpc	r31, r21
    3bf0:	98 f0       	brcs	.+38     	; 0x3c18 <__fp_cmp+0x46>
    3bf2:	62 1b       	sub	r22, r18
    3bf4:	73 0b       	sbc	r23, r19
    3bf6:	84 0b       	sbc	r24, r20
    3bf8:	95 0b       	sbc	r25, r21
    3bfa:	39 f4       	brne	.+14     	; 0x3c0a <__fp_cmp+0x38>
    3bfc:	0a 26       	eor	r0, r26
    3bfe:	61 f0       	breq	.+24     	; 0x3c18 <__fp_cmp+0x46>
    3c00:	23 2b       	or	r18, r19
    3c02:	24 2b       	or	r18, r20
    3c04:	25 2b       	or	r18, r21
    3c06:	21 f4       	brne	.+8      	; 0x3c10 <__fp_cmp+0x3e>
    3c08:	08 95       	ret
    3c0a:	0a 26       	eor	r0, r26
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <__fp_cmp+0x3e>
    3c0e:	a1 40       	sbci	r26, 0x01	; 1
    3c10:	a6 95       	lsr	r26
    3c12:	8f ef       	ldi	r24, 0xFF	; 255
    3c14:	81 1d       	adc	r24, r1
    3c16:	81 1d       	adc	r24, r1
    3c18:	08 95       	ret

00003c1a <__tablejump2__>:
    3c1a:	ee 0f       	add	r30, r30
    3c1c:	ff 1f       	adc	r31, r31
    3c1e:	88 1f       	adc	r24, r24
    3c20:	8b bf       	out	0x3b, r24	; 59
    3c22:	07 90       	elpm	r0, Z+
    3c24:	f6 91       	elpm	r31, Z
    3c26:	e0 2d       	mov	r30, r0
    3c28:	19 94       	eijmp

00003c2a <__umulhisi3>:
    3c2a:	a2 9f       	mul	r26, r18
    3c2c:	b0 01       	movw	r22, r0
    3c2e:	b3 9f       	mul	r27, r19
    3c30:	c0 01       	movw	r24, r0
    3c32:	a3 9f       	mul	r26, r19
    3c34:	70 0d       	add	r23, r0
    3c36:	81 1d       	adc	r24, r1
    3c38:	11 24       	eor	r1, r1
    3c3a:	91 1d       	adc	r25, r1
    3c3c:	b2 9f       	mul	r27, r18
    3c3e:	70 0d       	add	r23, r0
    3c40:	81 1d       	adc	r24, r1
    3c42:	11 24       	eor	r1, r1
    3c44:	91 1d       	adc	r25, r1
    3c46:	08 95       	ret

00003c48 <printf>:
    3c48:	cf 93       	push	r28
    3c4a:	df 93       	push	r29
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	ae 01       	movw	r20, r28
    3c52:	4a 5f       	subi	r20, 0xFA	; 250
    3c54:	5f 4f       	sbci	r21, 0xFF	; 255
    3c56:	fa 01       	movw	r30, r20
    3c58:	61 91       	ld	r22, Z+
    3c5a:	71 91       	ld	r23, Z+
    3c5c:	af 01       	movw	r20, r30
    3c5e:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <__iob+0x2>
    3c62:	90 91 04 0c 	lds	r25, 0x0C04	; 0x800c04 <__iob+0x3>
    3c66:	33 d0       	rcall	.+102    	; 0x3cce <vfprintf>
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	08 95       	ret

00003c6e <puts>:
    3c6e:	0f 93       	push	r16
    3c70:	1f 93       	push	r17
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	e0 91 03 0c 	lds	r30, 0x0C03	; 0x800c03 <__iob+0x2>
    3c7a:	f0 91 04 0c 	lds	r31, 0x0C04	; 0x800c04 <__iob+0x3>
    3c7e:	23 81       	ldd	r18, Z+3	; 0x03
    3c80:	21 ff       	sbrs	r18, 1
    3c82:	1b c0       	rjmp	.+54     	; 0x3cba <puts+0x4c>
    3c84:	8c 01       	movw	r16, r24
    3c86:	d0 e0       	ldi	r29, 0x00	; 0
    3c88:	c0 e0       	ldi	r28, 0x00	; 0
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	81 91       	ld	r24, Z+
    3c8e:	8f 01       	movw	r16, r30
    3c90:	60 91 03 0c 	lds	r22, 0x0C03	; 0x800c03 <__iob+0x2>
    3c94:	70 91 04 0c 	lds	r23, 0x0C04	; 0x800c04 <__iob+0x3>
    3c98:	db 01       	movw	r26, r22
    3c9a:	18 96       	adiw	r26, 0x08	; 8
    3c9c:	ed 91       	ld	r30, X+
    3c9e:	fc 91       	ld	r31, X
    3ca0:	19 97       	sbiw	r26, 0x09	; 9
    3ca2:	88 23       	and	r24, r24
    3ca4:	31 f0       	breq	.+12     	; 0x3cb2 <puts+0x44>
    3ca6:	19 95       	eicall
    3ca8:	89 2b       	or	r24, r25
    3caa:	79 f3       	breq	.-34     	; 0x3c8a <puts+0x1c>
    3cac:	df ef       	ldi	r29, 0xFF	; 255
    3cae:	cf ef       	ldi	r28, 0xFF	; 255
    3cb0:	ec cf       	rjmp	.-40     	; 0x3c8a <puts+0x1c>
    3cb2:	8a e0       	ldi	r24, 0x0A	; 10
    3cb4:	19 95       	eicall
    3cb6:	89 2b       	or	r24, r25
    3cb8:	19 f0       	breq	.+6      	; 0x3cc0 <puts+0x52>
    3cba:	8f ef       	ldi	r24, 0xFF	; 255
    3cbc:	9f ef       	ldi	r25, 0xFF	; 255
    3cbe:	02 c0       	rjmp	.+4      	; 0x3cc4 <puts+0x56>
    3cc0:	8d 2f       	mov	r24, r29
    3cc2:	9c 2f       	mov	r25, r28
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	08 95       	ret

00003cce <vfprintf>:
    3cce:	2f 92       	push	r2
    3cd0:	3f 92       	push	r3
    3cd2:	4f 92       	push	r4
    3cd4:	5f 92       	push	r5
    3cd6:	6f 92       	push	r6
    3cd8:	7f 92       	push	r7
    3cda:	8f 92       	push	r8
    3cdc:	9f 92       	push	r9
    3cde:	af 92       	push	r10
    3ce0:	bf 92       	push	r11
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	2c 97       	sbiw	r28, 0x0c	; 12
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	7c 01       	movw	r14, r24
    3d04:	6b 01       	movw	r12, r22
    3d06:	8a 01       	movw	r16, r20
    3d08:	fc 01       	movw	r30, r24
    3d0a:	17 82       	std	Z+7, r1	; 0x07
    3d0c:	16 82       	std	Z+6, r1	; 0x06
    3d0e:	83 81       	ldd	r24, Z+3	; 0x03
    3d10:	81 ff       	sbrs	r24, 1
    3d12:	b0 c1       	rjmp	.+864    	; 0x4074 <vfprintf+0x3a6>
    3d14:	ce 01       	movw	r24, r28
    3d16:	01 96       	adiw	r24, 0x01	; 1
    3d18:	4c 01       	movw	r8, r24
    3d1a:	f7 01       	movw	r30, r14
    3d1c:	93 81       	ldd	r25, Z+3	; 0x03
    3d1e:	f6 01       	movw	r30, r12
    3d20:	93 fd       	sbrc	r25, 3
    3d22:	85 91       	lpm	r24, Z+
    3d24:	93 ff       	sbrs	r25, 3
    3d26:	81 91       	ld	r24, Z+
    3d28:	6f 01       	movw	r12, r30
    3d2a:	88 23       	and	r24, r24
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <vfprintf+0x62>
    3d2e:	9e c1       	rjmp	.+828    	; 0x406c <vfprintf+0x39e>
    3d30:	85 32       	cpi	r24, 0x25	; 37
    3d32:	39 f4       	brne	.+14     	; 0x3d42 <vfprintf+0x74>
    3d34:	93 fd       	sbrc	r25, 3
    3d36:	85 91       	lpm	r24, Z+
    3d38:	93 ff       	sbrs	r25, 3
    3d3a:	81 91       	ld	r24, Z+
    3d3c:	6f 01       	movw	r12, r30
    3d3e:	85 32       	cpi	r24, 0x25	; 37
    3d40:	21 f4       	brne	.+8      	; 0x3d4a <vfprintf+0x7c>
    3d42:	b7 01       	movw	r22, r14
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	c7 d1       	rcall	.+910    	; 0x40d6 <fputc>
    3d48:	e8 cf       	rjmp	.-48     	; 0x3d1a <vfprintf+0x4c>
    3d4a:	51 2c       	mov	r5, r1
    3d4c:	31 2c       	mov	r3, r1
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	20 32       	cpi	r18, 0x20	; 32
    3d52:	a0 f4       	brcc	.+40     	; 0x3d7c <vfprintf+0xae>
    3d54:	8b 32       	cpi	r24, 0x2B	; 43
    3d56:	69 f0       	breq	.+26     	; 0x3d72 <vfprintf+0xa4>
    3d58:	30 f4       	brcc	.+12     	; 0x3d66 <vfprintf+0x98>
    3d5a:	80 32       	cpi	r24, 0x20	; 32
    3d5c:	59 f0       	breq	.+22     	; 0x3d74 <vfprintf+0xa6>
    3d5e:	83 32       	cpi	r24, 0x23	; 35
    3d60:	69 f4       	brne	.+26     	; 0x3d7c <vfprintf+0xae>
    3d62:	20 61       	ori	r18, 0x10	; 16
    3d64:	2c c0       	rjmp	.+88     	; 0x3dbe <vfprintf+0xf0>
    3d66:	8d 32       	cpi	r24, 0x2D	; 45
    3d68:	39 f0       	breq	.+14     	; 0x3d78 <vfprintf+0xaa>
    3d6a:	80 33       	cpi	r24, 0x30	; 48
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <vfprintf+0xae>
    3d6e:	21 60       	ori	r18, 0x01	; 1
    3d70:	26 c0       	rjmp	.+76     	; 0x3dbe <vfprintf+0xf0>
    3d72:	22 60       	ori	r18, 0x02	; 2
    3d74:	24 60       	ori	r18, 0x04	; 4
    3d76:	23 c0       	rjmp	.+70     	; 0x3dbe <vfprintf+0xf0>
    3d78:	28 60       	ori	r18, 0x08	; 8
    3d7a:	21 c0       	rjmp	.+66     	; 0x3dbe <vfprintf+0xf0>
    3d7c:	27 fd       	sbrc	r18, 7
    3d7e:	27 c0       	rjmp	.+78     	; 0x3dce <vfprintf+0x100>
    3d80:	30 ed       	ldi	r19, 0xD0	; 208
    3d82:	38 0f       	add	r19, r24
    3d84:	3a 30       	cpi	r19, 0x0A	; 10
    3d86:	78 f4       	brcc	.+30     	; 0x3da6 <vfprintf+0xd8>
    3d88:	26 ff       	sbrs	r18, 6
    3d8a:	06 c0       	rjmp	.+12     	; 0x3d98 <vfprintf+0xca>
    3d8c:	fa e0       	ldi	r31, 0x0A	; 10
    3d8e:	5f 9e       	mul	r5, r31
    3d90:	30 0d       	add	r19, r0
    3d92:	11 24       	eor	r1, r1
    3d94:	53 2e       	mov	r5, r19
    3d96:	13 c0       	rjmp	.+38     	; 0x3dbe <vfprintf+0xf0>
    3d98:	8a e0       	ldi	r24, 0x0A	; 10
    3d9a:	38 9e       	mul	r3, r24
    3d9c:	30 0d       	add	r19, r0
    3d9e:	11 24       	eor	r1, r1
    3da0:	33 2e       	mov	r3, r19
    3da2:	20 62       	ori	r18, 0x20	; 32
    3da4:	0c c0       	rjmp	.+24     	; 0x3dbe <vfprintf+0xf0>
    3da6:	8e 32       	cpi	r24, 0x2E	; 46
    3da8:	21 f4       	brne	.+8      	; 0x3db2 <vfprintf+0xe4>
    3daa:	26 fd       	sbrc	r18, 6
    3dac:	5f c1       	rjmp	.+702    	; 0x406c <vfprintf+0x39e>
    3dae:	20 64       	ori	r18, 0x40	; 64
    3db0:	06 c0       	rjmp	.+12     	; 0x3dbe <vfprintf+0xf0>
    3db2:	8c 36       	cpi	r24, 0x6C	; 108
    3db4:	11 f4       	brne	.+4      	; 0x3dba <vfprintf+0xec>
    3db6:	20 68       	ori	r18, 0x80	; 128
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <vfprintf+0xf0>
    3dba:	88 36       	cpi	r24, 0x68	; 104
    3dbc:	41 f4       	brne	.+16     	; 0x3dce <vfprintf+0x100>
    3dbe:	f6 01       	movw	r30, r12
    3dc0:	93 fd       	sbrc	r25, 3
    3dc2:	85 91       	lpm	r24, Z+
    3dc4:	93 ff       	sbrs	r25, 3
    3dc6:	81 91       	ld	r24, Z+
    3dc8:	6f 01       	movw	r12, r30
    3dca:	81 11       	cpse	r24, r1
    3dcc:	c1 cf       	rjmp	.-126    	; 0x3d50 <vfprintf+0x82>
    3dce:	98 2f       	mov	r25, r24
    3dd0:	9f 7d       	andi	r25, 0xDF	; 223
    3dd2:	95 54       	subi	r25, 0x45	; 69
    3dd4:	93 30       	cpi	r25, 0x03	; 3
    3dd6:	28 f4       	brcc	.+10     	; 0x3de2 <vfprintf+0x114>
    3dd8:	0c 5f       	subi	r16, 0xFC	; 252
    3dda:	1f 4f       	sbci	r17, 0xFF	; 255
    3ddc:	ff e3       	ldi	r31, 0x3F	; 63
    3dde:	f9 83       	std	Y+1, r31	; 0x01
    3de0:	0d c0       	rjmp	.+26     	; 0x3dfc <vfprintf+0x12e>
    3de2:	83 36       	cpi	r24, 0x63	; 99
    3de4:	31 f0       	breq	.+12     	; 0x3df2 <vfprintf+0x124>
    3de6:	83 37       	cpi	r24, 0x73	; 115
    3de8:	71 f0       	breq	.+28     	; 0x3e06 <vfprintf+0x138>
    3dea:	83 35       	cpi	r24, 0x53	; 83
    3dec:	09 f0       	breq	.+2      	; 0x3df0 <vfprintf+0x122>
    3dee:	57 c0       	rjmp	.+174    	; 0x3e9e <vfprintf+0x1d0>
    3df0:	21 c0       	rjmp	.+66     	; 0x3e34 <vfprintf+0x166>
    3df2:	f8 01       	movw	r30, r16
    3df4:	80 81       	ld	r24, Z
    3df6:	89 83       	std	Y+1, r24	; 0x01
    3df8:	0e 5f       	subi	r16, 0xFE	; 254
    3dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfc:	44 24       	eor	r4, r4
    3dfe:	43 94       	inc	r4
    3e00:	51 2c       	mov	r5, r1
    3e02:	54 01       	movw	r10, r8
    3e04:	14 c0       	rjmp	.+40     	; 0x3e2e <vfprintf+0x160>
    3e06:	38 01       	movw	r6, r16
    3e08:	f2 e0       	ldi	r31, 0x02	; 2
    3e0a:	6f 0e       	add	r6, r31
    3e0c:	71 1c       	adc	r7, r1
    3e0e:	f8 01       	movw	r30, r16
    3e10:	a0 80       	ld	r10, Z
    3e12:	b1 80       	ldd	r11, Z+1	; 0x01
    3e14:	26 ff       	sbrs	r18, 6
    3e16:	03 c0       	rjmp	.+6      	; 0x3e1e <vfprintf+0x150>
    3e18:	65 2d       	mov	r22, r5
    3e1a:	70 e0       	ldi	r23, 0x00	; 0
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <vfprintf+0x154>
    3e1e:	6f ef       	ldi	r22, 0xFF	; 255
    3e20:	7f ef       	ldi	r23, 0xFF	; 255
    3e22:	c5 01       	movw	r24, r10
    3e24:	2c 87       	std	Y+12, r18	; 0x0c
    3e26:	4c d1       	rcall	.+664    	; 0x40c0 <strnlen>
    3e28:	2c 01       	movw	r4, r24
    3e2a:	83 01       	movw	r16, r6
    3e2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e2e:	2f 77       	andi	r18, 0x7F	; 127
    3e30:	22 2e       	mov	r2, r18
    3e32:	16 c0       	rjmp	.+44     	; 0x3e60 <vfprintf+0x192>
    3e34:	38 01       	movw	r6, r16
    3e36:	f2 e0       	ldi	r31, 0x02	; 2
    3e38:	6f 0e       	add	r6, r31
    3e3a:	71 1c       	adc	r7, r1
    3e3c:	f8 01       	movw	r30, r16
    3e3e:	a0 80       	ld	r10, Z
    3e40:	b1 80       	ldd	r11, Z+1	; 0x01
    3e42:	26 ff       	sbrs	r18, 6
    3e44:	03 c0       	rjmp	.+6      	; 0x3e4c <vfprintf+0x17e>
    3e46:	65 2d       	mov	r22, r5
    3e48:	70 e0       	ldi	r23, 0x00	; 0
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <vfprintf+0x182>
    3e4c:	6f ef       	ldi	r22, 0xFF	; 255
    3e4e:	7f ef       	ldi	r23, 0xFF	; 255
    3e50:	c5 01       	movw	r24, r10
    3e52:	2c 87       	std	Y+12, r18	; 0x0c
    3e54:	2a d1       	rcall	.+596    	; 0x40aa <strnlen_P>
    3e56:	2c 01       	movw	r4, r24
    3e58:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e5a:	20 68       	ori	r18, 0x80	; 128
    3e5c:	22 2e       	mov	r2, r18
    3e5e:	83 01       	movw	r16, r6
    3e60:	23 fc       	sbrc	r2, 3
    3e62:	19 c0       	rjmp	.+50     	; 0x3e96 <vfprintf+0x1c8>
    3e64:	83 2d       	mov	r24, r3
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	48 16       	cp	r4, r24
    3e6a:	59 06       	cpc	r5, r25
    3e6c:	a0 f4       	brcc	.+40     	; 0x3e96 <vfprintf+0x1c8>
    3e6e:	b7 01       	movw	r22, r14
    3e70:	80 e2       	ldi	r24, 0x20	; 32
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	30 d1       	rcall	.+608    	; 0x40d6 <fputc>
    3e76:	3a 94       	dec	r3
    3e78:	f5 cf       	rjmp	.-22     	; 0x3e64 <vfprintf+0x196>
    3e7a:	f5 01       	movw	r30, r10
    3e7c:	27 fc       	sbrc	r2, 7
    3e7e:	85 91       	lpm	r24, Z+
    3e80:	27 fe       	sbrs	r2, 7
    3e82:	81 91       	ld	r24, Z+
    3e84:	5f 01       	movw	r10, r30
    3e86:	b7 01       	movw	r22, r14
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	25 d1       	rcall	.+586    	; 0x40d6 <fputc>
    3e8c:	31 10       	cpse	r3, r1
    3e8e:	3a 94       	dec	r3
    3e90:	f1 e0       	ldi	r31, 0x01	; 1
    3e92:	4f 1a       	sub	r4, r31
    3e94:	51 08       	sbc	r5, r1
    3e96:	41 14       	cp	r4, r1
    3e98:	51 04       	cpc	r5, r1
    3e9a:	79 f7       	brne	.-34     	; 0x3e7a <vfprintf+0x1ac>
    3e9c:	de c0       	rjmp	.+444    	; 0x405a <vfprintf+0x38c>
    3e9e:	84 36       	cpi	r24, 0x64	; 100
    3ea0:	11 f0       	breq	.+4      	; 0x3ea6 <vfprintf+0x1d8>
    3ea2:	89 36       	cpi	r24, 0x69	; 105
    3ea4:	31 f5       	brne	.+76     	; 0x3ef2 <vfprintf+0x224>
    3ea6:	f8 01       	movw	r30, r16
    3ea8:	27 ff       	sbrs	r18, 7
    3eaa:	07 c0       	rjmp	.+14     	; 0x3eba <vfprintf+0x1ec>
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	0c 5f       	subi	r16, 0xFC	; 252
    3eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb8:	08 c0       	rjmp	.+16     	; 0x3eca <vfprintf+0x1fc>
    3eba:	60 81       	ld	r22, Z
    3ebc:	71 81       	ldd	r23, Z+1	; 0x01
    3ebe:	07 2e       	mov	r0, r23
    3ec0:	00 0c       	add	r0, r0
    3ec2:	88 0b       	sbc	r24, r24
    3ec4:	99 0b       	sbc	r25, r25
    3ec6:	0e 5f       	subi	r16, 0xFE	; 254
    3ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eca:	2f 76       	andi	r18, 0x6F	; 111
    3ecc:	72 2e       	mov	r7, r18
    3ece:	97 ff       	sbrs	r25, 7
    3ed0:	09 c0       	rjmp	.+18     	; 0x3ee4 <vfprintf+0x216>
    3ed2:	90 95       	com	r25
    3ed4:	80 95       	com	r24
    3ed6:	70 95       	com	r23
    3ed8:	61 95       	neg	r22
    3eda:	7f 4f       	sbci	r23, 0xFF	; 255
    3edc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ede:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee0:	20 68       	ori	r18, 0x80	; 128
    3ee2:	72 2e       	mov	r7, r18
    3ee4:	2a e0       	ldi	r18, 0x0A	; 10
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	a4 01       	movw	r20, r8
    3eea:	2d d1       	rcall	.+602    	; 0x4146 <__ultoa_invert>
    3eec:	a8 2e       	mov	r10, r24
    3eee:	a8 18       	sub	r10, r8
    3ef0:	43 c0       	rjmp	.+134    	; 0x3f78 <vfprintf+0x2aa>
    3ef2:	85 37       	cpi	r24, 0x75	; 117
    3ef4:	29 f4       	brne	.+10     	; 0x3f00 <vfprintf+0x232>
    3ef6:	2f 7e       	andi	r18, 0xEF	; 239
    3ef8:	b2 2e       	mov	r11, r18
    3efa:	2a e0       	ldi	r18, 0x0A	; 10
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	25 c0       	rjmp	.+74     	; 0x3f4a <vfprintf+0x27c>
    3f00:	f2 2f       	mov	r31, r18
    3f02:	f9 7f       	andi	r31, 0xF9	; 249
    3f04:	bf 2e       	mov	r11, r31
    3f06:	8f 36       	cpi	r24, 0x6F	; 111
    3f08:	c1 f0       	breq	.+48     	; 0x3f3a <vfprintf+0x26c>
    3f0a:	18 f4       	brcc	.+6      	; 0x3f12 <vfprintf+0x244>
    3f0c:	88 35       	cpi	r24, 0x58	; 88
    3f0e:	79 f0       	breq	.+30     	; 0x3f2e <vfprintf+0x260>
    3f10:	ad c0       	rjmp	.+346    	; 0x406c <vfprintf+0x39e>
    3f12:	80 37       	cpi	r24, 0x70	; 112
    3f14:	19 f0       	breq	.+6      	; 0x3f1c <vfprintf+0x24e>
    3f16:	88 37       	cpi	r24, 0x78	; 120
    3f18:	21 f0       	breq	.+8      	; 0x3f22 <vfprintf+0x254>
    3f1a:	a8 c0       	rjmp	.+336    	; 0x406c <vfprintf+0x39e>
    3f1c:	2f 2f       	mov	r18, r31
    3f1e:	20 61       	ori	r18, 0x10	; 16
    3f20:	b2 2e       	mov	r11, r18
    3f22:	b4 fe       	sbrs	r11, 4
    3f24:	0d c0       	rjmp	.+26     	; 0x3f40 <vfprintf+0x272>
    3f26:	8b 2d       	mov	r24, r11
    3f28:	84 60       	ori	r24, 0x04	; 4
    3f2a:	b8 2e       	mov	r11, r24
    3f2c:	09 c0       	rjmp	.+18     	; 0x3f40 <vfprintf+0x272>
    3f2e:	24 ff       	sbrs	r18, 4
    3f30:	0a c0       	rjmp	.+20     	; 0x3f46 <vfprintf+0x278>
    3f32:	9f 2f       	mov	r25, r31
    3f34:	96 60       	ori	r25, 0x06	; 6
    3f36:	b9 2e       	mov	r11, r25
    3f38:	06 c0       	rjmp	.+12     	; 0x3f46 <vfprintf+0x278>
    3f3a:	28 e0       	ldi	r18, 0x08	; 8
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	05 c0       	rjmp	.+10     	; 0x3f4a <vfprintf+0x27c>
    3f40:	20 e1       	ldi	r18, 0x10	; 16
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	02 c0       	rjmp	.+4      	; 0x3f4a <vfprintf+0x27c>
    3f46:	20 e1       	ldi	r18, 0x10	; 16
    3f48:	32 e0       	ldi	r19, 0x02	; 2
    3f4a:	f8 01       	movw	r30, r16
    3f4c:	b7 fe       	sbrs	r11, 7
    3f4e:	07 c0       	rjmp	.+14     	; 0x3f5e <vfprintf+0x290>
    3f50:	60 81       	ld	r22, Z
    3f52:	71 81       	ldd	r23, Z+1	; 0x01
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	0c 5f       	subi	r16, 0xFC	; 252
    3f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5c:	06 c0       	rjmp	.+12     	; 0x3f6a <vfprintf+0x29c>
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 5f       	subi	r16, 0xFE	; 254
    3f68:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6a:	a4 01       	movw	r20, r8
    3f6c:	ec d0       	rcall	.+472    	; 0x4146 <__ultoa_invert>
    3f6e:	a8 2e       	mov	r10, r24
    3f70:	a8 18       	sub	r10, r8
    3f72:	fb 2d       	mov	r31, r11
    3f74:	ff 77       	andi	r31, 0x7F	; 127
    3f76:	7f 2e       	mov	r7, r31
    3f78:	76 fe       	sbrs	r7, 6
    3f7a:	0b c0       	rjmp	.+22     	; 0x3f92 <vfprintf+0x2c4>
    3f7c:	37 2d       	mov	r19, r7
    3f7e:	3e 7f       	andi	r19, 0xFE	; 254
    3f80:	a5 14       	cp	r10, r5
    3f82:	50 f4       	brcc	.+20     	; 0x3f98 <vfprintf+0x2ca>
    3f84:	74 fe       	sbrs	r7, 4
    3f86:	0a c0       	rjmp	.+20     	; 0x3f9c <vfprintf+0x2ce>
    3f88:	72 fc       	sbrc	r7, 2
    3f8a:	08 c0       	rjmp	.+16     	; 0x3f9c <vfprintf+0x2ce>
    3f8c:	37 2d       	mov	r19, r7
    3f8e:	3e 7e       	andi	r19, 0xEE	; 238
    3f90:	05 c0       	rjmp	.+10     	; 0x3f9c <vfprintf+0x2ce>
    3f92:	ba 2c       	mov	r11, r10
    3f94:	37 2d       	mov	r19, r7
    3f96:	03 c0       	rjmp	.+6      	; 0x3f9e <vfprintf+0x2d0>
    3f98:	ba 2c       	mov	r11, r10
    3f9a:	01 c0       	rjmp	.+2      	; 0x3f9e <vfprintf+0x2d0>
    3f9c:	b5 2c       	mov	r11, r5
    3f9e:	34 ff       	sbrs	r19, 4
    3fa0:	0d c0       	rjmp	.+26     	; 0x3fbc <vfprintf+0x2ee>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	ea 0d       	add	r30, r10
    3fa6:	f1 1d       	adc	r31, r1
    3fa8:	80 81       	ld	r24, Z
    3faa:	80 33       	cpi	r24, 0x30	; 48
    3fac:	11 f4       	brne	.+4      	; 0x3fb2 <vfprintf+0x2e4>
    3fae:	39 7e       	andi	r19, 0xE9	; 233
    3fb0:	09 c0       	rjmp	.+18     	; 0x3fc4 <vfprintf+0x2f6>
    3fb2:	32 ff       	sbrs	r19, 2
    3fb4:	06 c0       	rjmp	.+12     	; 0x3fc2 <vfprintf+0x2f4>
    3fb6:	b3 94       	inc	r11
    3fb8:	b3 94       	inc	r11
    3fba:	04 c0       	rjmp	.+8      	; 0x3fc4 <vfprintf+0x2f6>
    3fbc:	83 2f       	mov	r24, r19
    3fbe:	86 78       	andi	r24, 0x86	; 134
    3fc0:	09 f0       	breq	.+2      	; 0x3fc4 <vfprintf+0x2f6>
    3fc2:	b3 94       	inc	r11
    3fc4:	33 fd       	sbrc	r19, 3
    3fc6:	12 c0       	rjmp	.+36     	; 0x3fec <vfprintf+0x31e>
    3fc8:	30 ff       	sbrs	r19, 0
    3fca:	06 c0       	rjmp	.+12     	; 0x3fd8 <vfprintf+0x30a>
    3fcc:	5a 2c       	mov	r5, r10
    3fce:	b3 14       	cp	r11, r3
    3fd0:	18 f4       	brcc	.+6      	; 0x3fd8 <vfprintf+0x30a>
    3fd2:	53 0c       	add	r5, r3
    3fd4:	5b 18       	sub	r5, r11
    3fd6:	b3 2c       	mov	r11, r3
    3fd8:	b3 14       	cp	r11, r3
    3fda:	60 f4       	brcc	.+24     	; 0x3ff4 <vfprintf+0x326>
    3fdc:	b7 01       	movw	r22, r14
    3fde:	80 e2       	ldi	r24, 0x20	; 32
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	3c 87       	std	Y+12, r19	; 0x0c
    3fe4:	78 d0       	rcall	.+240    	; 0x40d6 <fputc>
    3fe6:	b3 94       	inc	r11
    3fe8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fea:	f6 cf       	rjmp	.-20     	; 0x3fd8 <vfprintf+0x30a>
    3fec:	b3 14       	cp	r11, r3
    3fee:	10 f4       	brcc	.+4      	; 0x3ff4 <vfprintf+0x326>
    3ff0:	3b 18       	sub	r3, r11
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <vfprintf+0x328>
    3ff4:	31 2c       	mov	r3, r1
    3ff6:	34 ff       	sbrs	r19, 4
    3ff8:	11 c0       	rjmp	.+34     	; 0x401c <vfprintf+0x34e>
    3ffa:	b7 01       	movw	r22, r14
    3ffc:	80 e3       	ldi	r24, 0x30	; 48
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	3c 87       	std	Y+12, r19	; 0x0c
    4002:	69 d0       	rcall	.+210    	; 0x40d6 <fputc>
    4004:	3c 85       	ldd	r19, Y+12	; 0x0c
    4006:	32 ff       	sbrs	r19, 2
    4008:	16 c0       	rjmp	.+44     	; 0x4036 <vfprintf+0x368>
    400a:	31 fd       	sbrc	r19, 1
    400c:	03 c0       	rjmp	.+6      	; 0x4014 <vfprintf+0x346>
    400e:	88 e7       	ldi	r24, 0x78	; 120
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	02 c0       	rjmp	.+4      	; 0x4018 <vfprintf+0x34a>
    4014:	88 e5       	ldi	r24, 0x58	; 88
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	b7 01       	movw	r22, r14
    401a:	0c c0       	rjmp	.+24     	; 0x4034 <vfprintf+0x366>
    401c:	83 2f       	mov	r24, r19
    401e:	86 78       	andi	r24, 0x86	; 134
    4020:	51 f0       	breq	.+20     	; 0x4036 <vfprintf+0x368>
    4022:	31 ff       	sbrs	r19, 1
    4024:	02 c0       	rjmp	.+4      	; 0x402a <vfprintf+0x35c>
    4026:	8b e2       	ldi	r24, 0x2B	; 43
    4028:	01 c0       	rjmp	.+2      	; 0x402c <vfprintf+0x35e>
    402a:	80 e2       	ldi	r24, 0x20	; 32
    402c:	37 fd       	sbrc	r19, 7
    402e:	8d e2       	ldi	r24, 0x2D	; 45
    4030:	b7 01       	movw	r22, r14
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	50 d0       	rcall	.+160    	; 0x40d6 <fputc>
    4036:	a5 14       	cp	r10, r5
    4038:	30 f4       	brcc	.+12     	; 0x4046 <vfprintf+0x378>
    403a:	b7 01       	movw	r22, r14
    403c:	80 e3       	ldi	r24, 0x30	; 48
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	4a d0       	rcall	.+148    	; 0x40d6 <fputc>
    4042:	5a 94       	dec	r5
    4044:	f8 cf       	rjmp	.-16     	; 0x4036 <vfprintf+0x368>
    4046:	aa 94       	dec	r10
    4048:	f4 01       	movw	r30, r8
    404a:	ea 0d       	add	r30, r10
    404c:	f1 1d       	adc	r31, r1
    404e:	80 81       	ld	r24, Z
    4050:	b7 01       	movw	r22, r14
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	40 d0       	rcall	.+128    	; 0x40d6 <fputc>
    4056:	a1 10       	cpse	r10, r1
    4058:	f6 cf       	rjmp	.-20     	; 0x4046 <vfprintf+0x378>
    405a:	33 20       	and	r3, r3
    405c:	09 f4       	brne	.+2      	; 0x4060 <vfprintf+0x392>
    405e:	5d ce       	rjmp	.-838    	; 0x3d1a <vfprintf+0x4c>
    4060:	b7 01       	movw	r22, r14
    4062:	80 e2       	ldi	r24, 0x20	; 32
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	37 d0       	rcall	.+110    	; 0x40d6 <fputc>
    4068:	3a 94       	dec	r3
    406a:	f7 cf       	rjmp	.-18     	; 0x405a <vfprintf+0x38c>
    406c:	f7 01       	movw	r30, r14
    406e:	86 81       	ldd	r24, Z+6	; 0x06
    4070:	97 81       	ldd	r25, Z+7	; 0x07
    4072:	02 c0       	rjmp	.+4      	; 0x4078 <vfprintf+0x3aa>
    4074:	8f ef       	ldi	r24, 0xFF	; 255
    4076:	9f ef       	ldi	r25, 0xFF	; 255
    4078:	2c 96       	adiw	r28, 0x0c	; 12
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61
    4084:	df 91       	pop	r29
    4086:	cf 91       	pop	r28
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	ff 90       	pop	r15
    408e:	ef 90       	pop	r14
    4090:	df 90       	pop	r13
    4092:	cf 90       	pop	r12
    4094:	bf 90       	pop	r11
    4096:	af 90       	pop	r10
    4098:	9f 90       	pop	r9
    409a:	8f 90       	pop	r8
    409c:	7f 90       	pop	r7
    409e:	6f 90       	pop	r6
    40a0:	5f 90       	pop	r5
    40a2:	4f 90       	pop	r4
    40a4:	3f 90       	pop	r3
    40a6:	2f 90       	pop	r2
    40a8:	08 95       	ret

000040aa <strnlen_P>:
    40aa:	fc 01       	movw	r30, r24
    40ac:	05 90       	lpm	r0, Z+
    40ae:	61 50       	subi	r22, 0x01	; 1
    40b0:	70 40       	sbci	r23, 0x00	; 0
    40b2:	01 10       	cpse	r0, r1
    40b4:	d8 f7       	brcc	.-10     	; 0x40ac <strnlen_P+0x2>
    40b6:	80 95       	com	r24
    40b8:	90 95       	com	r25
    40ba:	8e 0f       	add	r24, r30
    40bc:	9f 1f       	adc	r25, r31
    40be:	08 95       	ret

000040c0 <strnlen>:
    40c0:	fc 01       	movw	r30, r24
    40c2:	61 50       	subi	r22, 0x01	; 1
    40c4:	70 40       	sbci	r23, 0x00	; 0
    40c6:	01 90       	ld	r0, Z+
    40c8:	01 10       	cpse	r0, r1
    40ca:	d8 f7       	brcc	.-10     	; 0x40c2 <strnlen+0x2>
    40cc:	80 95       	com	r24
    40ce:	90 95       	com	r25
    40d0:	8e 0f       	add	r24, r30
    40d2:	9f 1f       	adc	r25, r31
    40d4:	08 95       	ret

000040d6 <fputc>:
    40d6:	0f 93       	push	r16
    40d8:	1f 93       	push	r17
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	fb 01       	movw	r30, r22
    40e0:	23 81       	ldd	r18, Z+3	; 0x03
    40e2:	21 fd       	sbrc	r18, 1
    40e4:	03 c0       	rjmp	.+6      	; 0x40ec <fputc+0x16>
    40e6:	8f ef       	ldi	r24, 0xFF	; 255
    40e8:	9f ef       	ldi	r25, 0xFF	; 255
    40ea:	28 c0       	rjmp	.+80     	; 0x413c <fputc+0x66>
    40ec:	22 ff       	sbrs	r18, 2
    40ee:	16 c0       	rjmp	.+44     	; 0x411c <fputc+0x46>
    40f0:	46 81       	ldd	r20, Z+6	; 0x06
    40f2:	57 81       	ldd	r21, Z+7	; 0x07
    40f4:	24 81       	ldd	r18, Z+4	; 0x04
    40f6:	35 81       	ldd	r19, Z+5	; 0x05
    40f8:	42 17       	cp	r20, r18
    40fa:	53 07       	cpc	r21, r19
    40fc:	44 f4       	brge	.+16     	; 0x410e <fputc+0x38>
    40fe:	a0 81       	ld	r26, Z
    4100:	b1 81       	ldd	r27, Z+1	; 0x01
    4102:	9d 01       	movw	r18, r26
    4104:	2f 5f       	subi	r18, 0xFF	; 255
    4106:	3f 4f       	sbci	r19, 0xFF	; 255
    4108:	31 83       	std	Z+1, r19	; 0x01
    410a:	20 83       	st	Z, r18
    410c:	8c 93       	st	X, r24
    410e:	26 81       	ldd	r18, Z+6	; 0x06
    4110:	37 81       	ldd	r19, Z+7	; 0x07
    4112:	2f 5f       	subi	r18, 0xFF	; 255
    4114:	3f 4f       	sbci	r19, 0xFF	; 255
    4116:	37 83       	std	Z+7, r19	; 0x07
    4118:	26 83       	std	Z+6, r18	; 0x06
    411a:	10 c0       	rjmp	.+32     	; 0x413c <fputc+0x66>
    411c:	eb 01       	movw	r28, r22
    411e:	09 2f       	mov	r16, r25
    4120:	18 2f       	mov	r17, r24
    4122:	00 84       	ldd	r0, Z+8	; 0x08
    4124:	f1 85       	ldd	r31, Z+9	; 0x09
    4126:	e0 2d       	mov	r30, r0
    4128:	19 95       	eicall
    412a:	89 2b       	or	r24, r25
    412c:	e1 f6       	brne	.-72     	; 0x40e6 <fputc+0x10>
    412e:	8e 81       	ldd	r24, Y+6	; 0x06
    4130:	9f 81       	ldd	r25, Y+7	; 0x07
    4132:	01 96       	adiw	r24, 0x01	; 1
    4134:	9f 83       	std	Y+7, r25	; 0x07
    4136:	8e 83       	std	Y+6, r24	; 0x06
    4138:	81 2f       	mov	r24, r17
    413a:	90 2f       	mov	r25, r16
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	08 95       	ret

00004146 <__ultoa_invert>:
    4146:	fa 01       	movw	r30, r20
    4148:	aa 27       	eor	r26, r26
    414a:	28 30       	cpi	r18, 0x08	; 8
    414c:	51 f1       	breq	.+84     	; 0x41a2 <__ultoa_invert+0x5c>
    414e:	20 31       	cpi	r18, 0x10	; 16
    4150:	81 f1       	breq	.+96     	; 0x41b2 <__ultoa_invert+0x6c>
    4152:	e8 94       	clt
    4154:	6f 93       	push	r22
    4156:	6e 7f       	andi	r22, 0xFE	; 254
    4158:	6e 5f       	subi	r22, 0xFE	; 254
    415a:	7f 4f       	sbci	r23, 0xFF	; 255
    415c:	8f 4f       	sbci	r24, 0xFF	; 255
    415e:	9f 4f       	sbci	r25, 0xFF	; 255
    4160:	af 4f       	sbci	r26, 0xFF	; 255
    4162:	b1 e0       	ldi	r27, 0x01	; 1
    4164:	3e d0       	rcall	.+124    	; 0x41e2 <__ultoa_invert+0x9c>
    4166:	b4 e0       	ldi	r27, 0x04	; 4
    4168:	3c d0       	rcall	.+120    	; 0x41e2 <__ultoa_invert+0x9c>
    416a:	67 0f       	add	r22, r23
    416c:	78 1f       	adc	r23, r24
    416e:	89 1f       	adc	r24, r25
    4170:	9a 1f       	adc	r25, r26
    4172:	a1 1d       	adc	r26, r1
    4174:	68 0f       	add	r22, r24
    4176:	79 1f       	adc	r23, r25
    4178:	8a 1f       	adc	r24, r26
    417a:	91 1d       	adc	r25, r1
    417c:	a1 1d       	adc	r26, r1
    417e:	6a 0f       	add	r22, r26
    4180:	71 1d       	adc	r23, r1
    4182:	81 1d       	adc	r24, r1
    4184:	91 1d       	adc	r25, r1
    4186:	a1 1d       	adc	r26, r1
    4188:	20 d0       	rcall	.+64     	; 0x41ca <__ultoa_invert+0x84>
    418a:	09 f4       	brne	.+2      	; 0x418e <__ultoa_invert+0x48>
    418c:	68 94       	set
    418e:	3f 91       	pop	r19
    4190:	2a e0       	ldi	r18, 0x0A	; 10
    4192:	26 9f       	mul	r18, r22
    4194:	11 24       	eor	r1, r1
    4196:	30 19       	sub	r19, r0
    4198:	30 5d       	subi	r19, 0xD0	; 208
    419a:	31 93       	st	Z+, r19
    419c:	de f6       	brtc	.-74     	; 0x4154 <__ultoa_invert+0xe>
    419e:	cf 01       	movw	r24, r30
    41a0:	08 95       	ret
    41a2:	46 2f       	mov	r20, r22
    41a4:	47 70       	andi	r20, 0x07	; 7
    41a6:	40 5d       	subi	r20, 0xD0	; 208
    41a8:	41 93       	st	Z+, r20
    41aa:	b3 e0       	ldi	r27, 0x03	; 3
    41ac:	0f d0       	rcall	.+30     	; 0x41cc <__ultoa_invert+0x86>
    41ae:	c9 f7       	brne	.-14     	; 0x41a2 <__ultoa_invert+0x5c>
    41b0:	f6 cf       	rjmp	.-20     	; 0x419e <__ultoa_invert+0x58>
    41b2:	46 2f       	mov	r20, r22
    41b4:	4f 70       	andi	r20, 0x0F	; 15
    41b6:	40 5d       	subi	r20, 0xD0	; 208
    41b8:	4a 33       	cpi	r20, 0x3A	; 58
    41ba:	18 f0       	brcs	.+6      	; 0x41c2 <__ultoa_invert+0x7c>
    41bc:	49 5d       	subi	r20, 0xD9	; 217
    41be:	31 fd       	sbrc	r19, 1
    41c0:	40 52       	subi	r20, 0x20	; 32
    41c2:	41 93       	st	Z+, r20
    41c4:	02 d0       	rcall	.+4      	; 0x41ca <__ultoa_invert+0x84>
    41c6:	a9 f7       	brne	.-22     	; 0x41b2 <__ultoa_invert+0x6c>
    41c8:	ea cf       	rjmp	.-44     	; 0x419e <__ultoa_invert+0x58>
    41ca:	b4 e0       	ldi	r27, 0x04	; 4
    41cc:	a6 95       	lsr	r26
    41ce:	97 95       	ror	r25
    41d0:	87 95       	ror	r24
    41d2:	77 95       	ror	r23
    41d4:	67 95       	ror	r22
    41d6:	ba 95       	dec	r27
    41d8:	c9 f7       	brne	.-14     	; 0x41cc <__ultoa_invert+0x86>
    41da:	00 97       	sbiw	r24, 0x00	; 0
    41dc:	61 05       	cpc	r22, r1
    41de:	71 05       	cpc	r23, r1
    41e0:	08 95       	ret
    41e2:	9b 01       	movw	r18, r22
    41e4:	ac 01       	movw	r20, r24
    41e6:	0a 2e       	mov	r0, r26
    41e8:	06 94       	lsr	r0
    41ea:	57 95       	ror	r21
    41ec:	47 95       	ror	r20
    41ee:	37 95       	ror	r19
    41f0:	27 95       	ror	r18
    41f2:	ba 95       	dec	r27
    41f4:	c9 f7       	brne	.-14     	; 0x41e8 <__ultoa_invert+0xa2>
    41f6:	62 0f       	add	r22, r18
    41f8:	73 1f       	adc	r23, r19
    41fa:	84 1f       	adc	r24, r20
    41fc:	95 1f       	adc	r25, r21
    41fe:	a0 1d       	adc	r26, r0
    4200:	08 95       	ret

00004202 <_exit>:
    4202:	f8 94       	cli

00004204 <__stop_program>:
    4204:	ff cf       	rjmp	.-2      	; 0x4204 <__stop_program>
