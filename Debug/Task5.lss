
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800200  000023ec  00002480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b0  008003d6  008003d6  00002656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002828  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f71  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bd4  00000000  00000000  00006011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00007be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0e  00000000  00000000  00008168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013de  00000000  00000000  00008c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_5>
      18:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_25>
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5c 09       	sbc	r21, r12
      e6:	a9 09       	sbc	r26, r9
      e8:	6c 09       	sbc	r22, r12
      ea:	78 09       	sbc	r23, r8
      ec:	7b 09       	sbc	r23, r11
      ee:	7e 09       	sbc	r23, r14
      f0:	88 09       	sbc	r24, r8
      f2:	92 09       	sbc	r25, r2
      f4:	98 09       	sbc	r25, r8
      f6:	9b 09       	sbc	r25, r11

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	13 e0       	ldi	r17, 0x03	; 3
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ec ee       	ldi	r30, 0xEC	; 236
     110:	f3 e2       	ldi	r31, 0x23	; 35
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a6 3d       	cpi	r26, 0xD6	; 214
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e0       	ldi	r18, 0x07	; 7
     124:	a6 ed       	ldi	r26, 0xD6	; 214
     126:	b3 e0       	ldi	r27, 0x03	; 3
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a6 38       	cpi	r26, 0x86	; 134
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <main>
     136:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <lcd_port_config>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     13c:	87 b1       	in	r24, 0x07	; 7
     13e:	87 6f       	ori	r24, 0xF7	; 247
     140:	87 b9       	out	0x07, r24	; 7
     142:	88 b1       	in	r24, 0x08	; 8
     144:	80 78       	andi	r24, 0x80	; 128
     146:	88 b9       	out	0x08, r24	; 8
     148:	08 95       	ret

0000014a <lcd_set_4bit>:
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x4>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	ef ef       	ldi	r30, 0xFF	; 255
     160:	f7 e4       	ldi	r31, 0x47	; 71
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x18>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x1e>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	e6 e6       	ldi	r30, 0x66	; 102
     16e:	fe e0       	ldi	r31, 0x0E	; 14
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x26>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	ef ef       	ldi	r30, 0xFF	; 255
     180:	f7 e4       	ldi	r31, 0x47	; 71
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x38>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x3e>
     188:	00 00       	nop
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	e6 e6       	ldi	r30, 0x66	; 102
     18e:	fe e0       	ldi	r31, 0x0E	; 14
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x46>
     194:	00 00       	nop
     196:	40 98       	cbi	0x08, 0	; 8
     198:	41 98       	cbi	0x08, 1	; 8
     19a:	88 b9       	out	0x08, r24	; 8
     19c:	42 9a       	sbi	0x08, 2	; 8
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	97 e4       	ldi	r25, 0x47	; 71
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x58>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x5e>
     1a8:	00 00       	nop
     1aa:	42 98       	cbi	0x08, 2	; 8
     1ac:	e6 e6       	ldi	r30, 0x66	; 102
     1ae:	fe e0       	ldi	r31, 0x0E	; 14
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x66>
     1b4:	00 00       	nop
     1b6:	40 98       	cbi	0x08, 0	; 8
     1b8:	41 98       	cbi	0x08, 1	; 8
     1ba:	80 e2       	ldi	r24, 0x20	; 32
     1bc:	88 b9       	out	0x08, r24	; 8
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	97 e4       	ldi	r25, 0x47	; 71
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x7a>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x80>
     1ca:	00 00       	nop
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	08 95       	ret

000001d0 <lcd_wr_command>:
     1d0:	98 b1       	in	r25, 0x08	; 8
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	98 b9       	out	0x08, r25	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	28 2f       	mov	r18, r24
     1da:	20 7f       	andi	r18, 0xF0	; 240
     1dc:	92 2b       	or	r25, r18
     1de:	98 b9       	out	0x08, r25	; 8
     1e0:	40 98       	cbi	0x08, 0	; 8
     1e2:	41 98       	cbi	0x08, 1	; 8
     1e4:	42 9a       	sbi	0x08, 2	; 8
     1e6:	ef ef       	ldi	r30, 0xFF	; 255
     1e8:	f7 e4       	ldi	r31, 0x47	; 71
     1ea:	31 97       	sbiw	r30, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_wr_command+0x1a>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_wr_command+0x20>
     1f0:	00 00       	nop
     1f2:	42 98       	cbi	0x08, 2	; 8
     1f4:	98 b1       	in	r25, 0x08	; 8
     1f6:	9f 70       	andi	r25, 0x0F	; 15
     1f8:	98 b9       	out	0x08, r25	; 8
     1fa:	98 b1       	in	r25, 0x08	; 8
     1fc:	82 95       	swap	r24
     1fe:	80 7f       	andi	r24, 0xF0	; 240
     200:	89 2b       	or	r24, r25
     202:	88 b9       	out	0x08, r24	; 8
     204:	40 98       	cbi	0x08, 0	; 8
     206:	41 98       	cbi	0x08, 1	; 8
     208:	42 9a       	sbi	0x08, 2	; 8
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	97 e4       	ldi	r25, 0x47	; 71
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <lcd_wr_command+0x3e>
     212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_wr_command+0x44>
     214:	00 00       	nop
     216:	42 98       	cbi	0x08, 2	; 8
     218:	08 95       	ret

0000021a <lcd_wr_char>:
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
     220:	98 b1       	in	r25, 0x08	; 8
     222:	28 2f       	mov	r18, r24
     224:	20 7f       	andi	r18, 0xF0	; 240
     226:	92 2b       	or	r25, r18
     228:	98 b9       	out	0x08, r25	; 8
     22a:	40 9a       	sbi	0x08, 0	; 8
     22c:	41 98       	cbi	0x08, 1	; 8
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	ef ef       	ldi	r30, 0xFF	; 255
     232:	f7 e4       	ldi	r31, 0x47	; 71
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
     238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
     23a:	00 00       	nop
     23c:	42 98       	cbi	0x08, 2	; 8
     23e:	98 b1       	in	r25, 0x08	; 8
     240:	9f 70       	andi	r25, 0x0F	; 15
     242:	98 b9       	out	0x08, r25	; 8
     244:	98 b1       	in	r25, 0x08	; 8
     246:	82 95       	swap	r24
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	89 2b       	or	r24, r25
     24c:	88 b9       	out	0x08, r24	; 8
     24e:	40 9a       	sbi	0x08, 0	; 8
     250:	41 98       	cbi	0x08, 1	; 8
     252:	42 9a       	sbi	0x08, 2	; 8
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	97 e4       	ldi	r25, 0x47	; 71
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
     25e:	00 00       	nop
     260:	42 98       	cbi	0x08, 2	; 8
     262:	08 95       	ret

00000264 <lcd_home>:
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	b4 cf       	rjmp	.-152    	; 0x1d0 <lcd_wr_command>
     268:	08 95       	ret

0000026a <lcd_string>:
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	ec 01       	movw	r28, r24
     270:	88 81       	ld	r24, Y
     272:	88 23       	and	r24, r24
     274:	29 f0       	breq	.+10     	; 0x280 <lcd_string+0x16>
     276:	21 96       	adiw	r28, 0x01	; 1
     278:	d0 df       	rcall	.-96     	; 0x21a <lcd_wr_char>
     27a:	89 91       	ld	r24, Y+
     27c:	81 11       	cpse	r24, r1
     27e:	fc cf       	rjmp	.-8      	; 0x278 <lcd_string+0xe>
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <lcd_init>:
     286:	86 e6       	ldi	r24, 0x66	; 102
     288:	9e e0       	ldi	r25, 0x0E	; 14
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_init+0x4>
     28e:	00 00       	nop
     290:	88 e2       	ldi	r24, 0x28	; 40
     292:	9e df       	rcall	.-196    	; 0x1d0 <lcd_wr_command>
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	9c df       	rcall	.-200    	; 0x1d0 <lcd_wr_command>
     298:	86 e0       	ldi	r24, 0x06	; 6
     29a:	9a df       	rcall	.-204    	; 0x1d0 <lcd_wr_command>
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	98 df       	rcall	.-208    	; 0x1d0 <lcd_wr_command>
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	96 cf       	rjmp	.-212    	; 0x1d0 <lcd_wr_command>
     2a4:	08 95       	ret

000002a6 <lcd_cursor>:
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x1e>
     2aa:	18 f4       	brcc	.+6      	; 0x2b2 <lcd_cursor+0xc>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	31 f0       	breq	.+12     	; 0x2bc <lcd_cursor+0x16>
     2b0:	08 95       	ret
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	59 f0       	breq	.+22     	; 0x2cc <lcd_cursor+0x26>
     2b6:	84 30       	cpi	r24, 0x04	; 4
     2b8:	69 f0       	breq	.+26     	; 0x2d4 <lcd_cursor+0x2e>
     2ba:	08 95       	ret
     2bc:	8f e7       	ldi	r24, 0x7F	; 127
     2be:	86 0f       	add	r24, r22
     2c0:	87 cf       	rjmp	.-242    	; 0x1d0 <lcd_wr_command>
     2c2:	08 95       	ret
     2c4:	8f eb       	ldi	r24, 0xBF	; 191
     2c6:	86 0f       	add	r24, r22
     2c8:	83 cf       	rjmp	.-250    	; 0x1d0 <lcd_wr_command>
     2ca:	08 95       	ret
     2cc:	83 e9       	ldi	r24, 0x93	; 147
     2ce:	86 0f       	add	r24, r22
     2d0:	7f cf       	rjmp	.-258    	; 0x1d0 <lcd_wr_command>
     2d2:	08 95       	ret
     2d4:	83 ed       	ldi	r24, 0xD3	; 211
     2d6:	86 0f       	add	r24, r22
     2d8:	7b cf       	rjmp	.-266    	; 0x1d0 <lcd_wr_command>
     2da:	08 95       	ret

000002dc <lcd_print>:
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	8a 01       	movw	r16, r20
     2e6:	e9 01       	movw	r28, r18
     2e8:	88 23       	and	r24, r24
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <lcd_print+0x14>
     2ec:	61 11       	cpse	r22, r1
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <lcd_print+0x18>
     2f0:	b9 df       	rcall	.-142    	; 0x264 <lcd_home>
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <lcd_print+0x1a>
     2f4:	d8 df       	rcall	.-80     	; 0x2a6 <lcd_cursor>
     2f6:	c5 30       	cpi	r28, 0x05	; 5
     2f8:	d1 05       	cpc	r29, r1
     2fa:	c1 f4       	brne	.+48     	; 0x32c <lcd_print+0x50>
     2fc:	98 01       	movw	r18, r16
     2fe:	32 95       	swap	r19
     300:	22 95       	swap	r18
     302:	2f 70       	andi	r18, 0x0F	; 15
     304:	23 27       	eor	r18, r19
     306:	3f 70       	andi	r19, 0x0F	; 15
     308:	23 27       	eor	r18, r19
     30a:	a7 e4       	ldi	r26, 0x47	; 71
     30c:	b3 e0       	ldi	r27, 0x03	; 3
     30e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     312:	96 95       	lsr	r25
     314:	87 95       	ror	r24
     316:	96 95       	lsr	r25
     318:	87 95       	ror	r24
     31a:	96 95       	lsr	r25
     31c:	87 95       	ror	r24
     31e:	c0 96       	adiw	r24, 0x30	; 48
     320:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <million+0x1>
     324:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <million>
     328:	78 df       	rcall	.-272    	; 0x21a <lcd_wr_char>
     32a:	04 c0       	rjmp	.+8      	; 0x334 <lcd_print+0x58>
     32c:	c4 30       	cpi	r28, 0x04	; 4
     32e:	d1 05       	cpc	r29, r1
     330:	09 f0       	breq	.+2      	; 0x334 <lcd_print+0x58>
     332:	be c0       	rjmp	.+380    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     334:	98 01       	movw	r18, r16
     336:	36 95       	lsr	r19
     338:	27 95       	ror	r18
     33a:	36 95       	lsr	r19
     33c:	27 95       	ror	r18
     33e:	36 95       	lsr	r19
     340:	27 95       	ror	r18
     342:	a5 ec       	ldi	r26, 0xC5	; 197
     344:	b0 e2       	ldi	r27, 0x20	; 32
     346:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     34a:	ac 01       	movw	r20, r24
     34c:	52 95       	swap	r21
     34e:	42 95       	swap	r20
     350:	4f 70       	andi	r20, 0x0F	; 15
     352:	45 27       	eor	r20, r21
     354:	5f 70       	andi	r21, 0x0F	; 15
     356:	45 27       	eor	r20, r21
     358:	50 93 fa 05 	sts	0x05FA, r21	; 0x8005fa <temp+0x1>
     35c:	40 93 f9 05 	sts	0x05F9, r20	; 0x8005f9 <temp>
     360:	9a 01       	movw	r18, r20
     362:	ad ec       	ldi	r26, 0xCD	; 205
     364:	bc ec       	ldi	r27, 0xCC	; 204
     366:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	9c 01       	movw	r18, r24
     378:	22 0f       	add	r18, r18
     37a:	33 1f       	adc	r19, r19
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	9a 01       	movw	r18, r20
     38e:	28 1b       	sub	r18, r24
     390:	39 0b       	sbc	r19, r25
     392:	c9 01       	movw	r24, r18
     394:	c0 96       	adiw	r24, 0x30	; 48
     396:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <thousand+0x1>
     39a:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <thousand>
     39e:	3d df       	rcall	.-390    	; 0x21a <lcd_wr_char>
     3a0:	98 01       	movw	r18, r16
     3a2:	36 95       	lsr	r19
     3a4:	27 95       	ror	r18
     3a6:	36 95       	lsr	r19
     3a8:	27 95       	ror	r18
     3aa:	ab e7       	ldi	r26, 0x7B	; 123
     3ac:	b4 e1       	ldi	r27, 0x14	; 20
     3ae:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     3b2:	ac 01       	movw	r20, r24
     3b4:	56 95       	lsr	r21
     3b6:	47 95       	ror	r20
     3b8:	50 93 fa 05 	sts	0x05FA, r21	; 0x8005fa <temp+0x1>
     3bc:	40 93 f9 05 	sts	0x05F9, r20	; 0x8005f9 <temp>
     3c0:	9a 01       	movw	r18, r20
     3c2:	ad ec       	ldi	r26, 0xCD	; 205
     3c4:	bc ec       	ldi	r27, 0xCC	; 204
     3c6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     3ca:	96 95       	lsr	r25
     3cc:	87 95       	ror	r24
     3ce:	96 95       	lsr	r25
     3d0:	87 95       	ror	r24
     3d2:	96 95       	lsr	r25
     3d4:	87 95       	ror	r24
     3d6:	9c 01       	movw	r18, r24
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	82 0f       	add	r24, r18
     3ea:	93 1f       	adc	r25, r19
     3ec:	9a 01       	movw	r18, r20
     3ee:	28 1b       	sub	r18, r24
     3f0:	39 0b       	sbc	r19, r25
     3f2:	c9 01       	movw	r24, r18
     3f4:	c0 96       	adiw	r24, 0x30	; 48
     3f6:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <hundred+0x1>
     3fa:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <hundred>
     3fe:	0d df       	rcall	.-486    	; 0x21a <lcd_wr_char>
     400:	04 c0       	rjmp	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     402:	c2 30       	cpi	r28, 0x02	; 2
     404:	d1 05       	cpc	r29, r1
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	58 c0       	rjmp	.+176    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     40a:	98 01       	movw	r18, r16
     40c:	ad ec       	ldi	r26, 0xCD	; 205
     40e:	bc ec       	ldi	r27, 0xCC	; 204
     410:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     414:	ac 01       	movw	r20, r24
     416:	56 95       	lsr	r21
     418:	47 95       	ror	r20
     41a:	56 95       	lsr	r21
     41c:	47 95       	ror	r20
     41e:	56 95       	lsr	r21
     420:	47 95       	ror	r20
     422:	50 93 fa 05 	sts	0x05FA, r21	; 0x8005fa <temp+0x1>
     426:	40 93 f9 05 	sts	0x05F9, r20	; 0x8005f9 <temp>
     42a:	9a 01       	movw	r18, r20
     42c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	9c 01       	movw	r18, r24
     43e:	22 0f       	add	r18, r18
     440:	33 1f       	adc	r19, r19
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	82 0f       	add	r24, r18
     450:	93 1f       	adc	r25, r19
     452:	9a 01       	movw	r18, r20
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	c9 01       	movw	r24, r18
     45a:	c0 96       	adiw	r24, 0x30	; 48
     45c:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <tens+0x1>
     460:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <tens>
     464:	da de       	rcall	.-588    	; 0x21a <lcd_wr_char>
     466:	98 01       	movw	r18, r16
     468:	ad ec       	ldi	r26, 0xCD	; 205
     46a:	bc ec       	ldi	r27, 0xCC	; 204
     46c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
     470:	96 95       	lsr	r25
     472:	87 95       	ror	r24
     474:	96 95       	lsr	r25
     476:	87 95       	ror	r24
     478:	96 95       	lsr	r25
     47a:	87 95       	ror	r24
     47c:	9c 01       	movw	r18, r24
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	82 0f       	add	r24, r18
     490:	93 1f       	adc	r25, r19
     492:	98 01       	movw	r18, r16
     494:	28 1b       	sub	r18, r24
     496:	39 0b       	sbc	r19, r25
     498:	c9 01       	movw	r24, r18
     49a:	c0 96       	adiw	r24, 0x30	; 48
     49c:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <unit+0x1>
     4a0:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <unit>
     4a4:	ba de       	rcall	.-652    	; 0x21a <lcd_wr_char>
     4a6:	26 97       	sbiw	r28, 0x06	; 6
     4a8:	64 f0       	brlt	.+24     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4aa:	85 e4       	ldi	r24, 0x45	; 69
     4ac:	b6 de       	rcall	.-660    	; 0x21a <lcd_wr_char>
     4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4b0:	c3 30       	cpi	r28, 0x03	; 3
     4b2:	d1 05       	cpc	r29, r1
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b6:	a5 cf       	rjmp	.-182    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     4b8:	73 cf       	rjmp	.-282    	; 0x3a0 <lcd_print+0xc4>
     4ba:	c1 30       	cpi	r28, 0x01	; 1
     4bc:	d1 05       	cpc	r29, r1
     4be:	99 f7       	brne	.-26     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4c0:	d2 cf       	rjmp	.-92     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <lcd_clear>:
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	80 de       	rcall	.-768    	; 0x1d0 <lcd_wr_command>
     4d0:	88 e9       	ldi	r24, 0x98	; 152
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	ca de       	rcall	.-620    	; 0x26a <lcd_string>
     4d6:	80 ec       	ldi	r24, 0xC0	; 192
     4d8:	7b de       	rcall	.-778    	; 0x1d0 <lcd_wr_command>
     4da:	88 e9       	ldi	r24, 0x98	; 152
     4dc:	93 e0       	ldi	r25, 0x03	; 3
     4de:	c5 de       	rcall	.-630    	; 0x26a <lcd_string>
     4e0:	c1 ce       	rjmp	.-638    	; 0x264 <lcd_home>
     4e2:	08 95       	ret

000004e4 <declare_constants>:
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ee ef       	ldi	r30, 0xFE	; 254
     50a:	f5 e0       	ldi	r31, 0x05	; 5
     50c:	0f 2e       	mov	r0, r31
     50e:	fb e4       	ldi	r31, 0x4B	; 75
     510:	af 2e       	mov	r10, r31
     512:	b1 2c       	mov	r11, r1
     514:	f0 2d       	mov	r31, r0
     516:	b1 82       	std	Z+1, r11	; 0x01
     518:	a0 82       	st	Z, r10
     51a:	0f 2e       	mov	r0, r31
     51c:	fd e1       	ldi	r31, 0x1D	; 29
     51e:	4f 2e       	mov	r4, r31
     520:	55 24       	eor	r5, r5
     522:	53 94       	inc	r5
     524:	f0 2d       	mov	r31, r0
     526:	53 82       	std	Z+3, r5	; 0x03
     528:	42 82       	std	Z+2, r4	; 0x02
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	95 83       	std	Z+5, r25	; 0x05
     530:	84 83       	std	Z+4, r24	; 0x04
     532:	97 83       	std	Z+7, r25	; 0x07
     534:	86 83       	std	Z+6, r24	; 0x06
     536:	cc 24       	eor	r12, r12
     538:	ca 94       	dec	r12
     53a:	d1 2c       	mov	r13, r1
     53c:	d1 86       	std	Z+9, r13	; 0x09
     53e:	c0 86       	std	Z+8, r12	; 0x08
     540:	ac e3       	ldi	r26, 0x3C	; 60
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	b3 87       	std	Z+11, r27	; 0x0b
     546:	a2 87       	std	Z+10, r26	; 0x0a
     548:	95 87       	std	Z+13, r25	; 0x0d
     54a:	84 87       	std	Z+12, r24	; 0x0c
     54c:	97 87       	std	Z+15, r25	; 0x0f
     54e:	86 87       	std	Z+14, r24	; 0x0e
     550:	20 ef       	ldi	r18, 0xF0	; 240
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	31 8b       	std	Z+17, r19	; 0x11
     556:	20 8b       	std	Z+16, r18	; 0x10
     558:	0f 2e       	mov	r0, r31
     55a:	fd e2       	ldi	r31, 0x2D	; 45
     55c:	2f 2e       	mov	r2, r31
     55e:	31 2c       	mov	r3, r1
     560:	f0 2d       	mov	r31, r0
     562:	33 8a       	std	Z+19, r3	; 0x13
     564:	22 8a       	std	Z+18, r2	; 0x12
     566:	15 8a       	std	Z+21, r1	; 0x15
     568:	14 8a       	std	Z+20, r1	; 0x14
     56a:	6c e2       	ldi	r22, 0x2C	; 44
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	77 8b       	std	Z+23, r23	; 0x17
     570:	66 8b       	std	Z+22, r22	; 0x16
     572:	0f 2e       	mov	r0, r31
     574:	f1 ee       	ldi	r31, 0xE1	; 225
     576:	8f 2e       	mov	r8, r31
     578:	91 2c       	mov	r9, r1
     57a:	f0 2d       	mov	r31, r0
     57c:	91 8e       	std	Z+25, r9	; 0x19
     57e:	80 8e       	std	Z+24, r8	; 0x18
     580:	0e e1       	ldi	r16, 0x1E	; 30
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	13 8f       	std	Z+27, r17	; 0x1b
     586:	02 8f       	std	Z+26, r16	; 0x1a
     588:	95 8f       	std	Z+29, r25	; 0x1d
     58a:	84 8f       	std	Z+28, r24	; 0x1c
     58c:	97 8f       	std	Z+31, r25	; 0x1f
     58e:	86 8f       	std	Z+30, r24	; 0x1e
     590:	42 ed       	ldi	r20, 0xD2	; 210
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	51 a3       	std	Z+33, r21	; 0x21
     596:	40 a3       	std	Z+32, r20	; 0x20
     598:	cf e0       	ldi	r28, 0x0F	; 15
     59a:	d0 e0       	ldi	r29, 0x00	; 0
     59c:	d3 a3       	std	Z+35, r29	; 0x23
     59e:	c2 a3       	std	Z+34, r28	; 0x22
     5a0:	95 a3       	std	Z+37, r25	; 0x25
     5a2:	84 a3       	std	Z+36, r24	; 0x24
     5a4:	97 a3       	std	Z+39, r25	; 0x27
     5a6:	86 a3       	std	Z+38, r24	; 0x26
     5a8:	03 ec       	ldi	r16, 0xC3	; 195
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	11 a7       	std	Z+41, r17	; 0x29
     5ae:	00 a7       	std	Z+40, r16	; 0x28
     5b0:	13 a6       	std	Z+43, r1	; 0x2b
     5b2:	12 a6       	std	Z+42, r1	; 0x2a
     5b4:	95 a7       	std	Z+45, r25	; 0x2d
     5b6:	84 a7       	std	Z+44, r24	; 0x2c
     5b8:	97 a7       	std	Z+47, r25	; 0x2f
     5ba:	86 a7       	std	Z+46, r24	; 0x2e
     5bc:	44 eb       	ldi	r20, 0xB4	; 180
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	51 ab       	std	Z+49, r21	; 0x31
     5c2:	40 ab       	std	Z+48, r20	; 0x30
     5c4:	09 e5       	ldi	r16, 0x59	; 89
     5c6:	11 e0       	ldi	r17, 0x01	; 1
     5c8:	13 ab       	std	Z+51, r17	; 0x33
     5ca:	02 ab       	std	Z+50, r16	; 0x32
     5cc:	35 ab       	std	Z+53, r19	; 0x35
     5ce:	24 ab       	std	Z+52, r18	; 0x34
     5d0:	77 ab       	std	Z+55, r23	; 0x37
     5d2:	66 ab       	std	Z+54, r22	; 0x36
     5d4:	05 ea       	ldi	r16, 0xA5	; 165
     5d6:	10 e0       	ldi	r17, 0x00	; 0
     5d8:	11 af       	std	Z+57, r17	; 0x39
     5da:	00 af       	std	Z+56, r16	; 0x38
     5dc:	0a e4       	ldi	r16, 0x4A	; 74
     5de:	11 e0       	ldi	r17, 0x01	; 1
     5e0:	13 af       	std	Z+59, r17	; 0x3b
     5e2:	02 af       	std	Z+58, r16	; 0x3a
     5e4:	95 af       	std	Z+61, r25	; 0x3d
     5e6:	84 af       	std	Z+60, r24	; 0x3c
     5e8:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <angle+0x3f>
     5ec:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <angle+0x3e>
     5f0:	e6 e9       	ldi	r30, 0x96	; 150
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	f0 93 3f 06 	sts	0x063F, r31	; 0x80063f <angle+0x41>
     5f8:	e0 93 3e 06 	sts	0x063E, r30	; 0x80063e <angle+0x40>
     5fc:	0b e3       	ldi	r16, 0x3B	; 59
     5fe:	11 e0       	ldi	r17, 0x01	; 1
     600:	10 93 41 06 	sts	0x0641, r17	; 0x800641 <angle+0x43>
     604:	00 93 40 06 	sts	0x0640, r16	; 0x800640 <angle+0x42>
     608:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <angle+0x45>
     60c:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <angle+0x44>
     610:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <angle+0x47>
     614:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <angle+0x46>
     618:	0f 2e       	mov	r0, r31
     61a:	f7 e8       	ldi	r31, 0x87	; 135
     61c:	6f 2e       	mov	r6, r31
     61e:	71 2c       	mov	r7, r1
     620:	f0 2d       	mov	r31, r0
     622:	70 92 47 06 	sts	0x0647, r7	; 0x800647 <angle+0x49>
     626:	60 92 46 06 	sts	0x0646, r6	; 0x800646 <angle+0x48>
     62a:	70 93 49 06 	sts	0x0649, r23	; 0x800649 <angle+0x4b>
     62e:	60 93 48 06 	sts	0x0648, r22	; 0x800648 <angle+0x4a>
     632:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <angle+0x4d>
     636:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <angle+0x4c>
     63a:	90 93 4d 06 	sts	0x064D, r25	; 0x80064d <angle+0x4f>
     63e:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <angle+0x4e>
     642:	e8 e7       	ldi	r30, 0x78	; 120
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	f0 93 4f 06 	sts	0x064F, r31	; 0x80064f <angle+0x51>
     64a:	e0 93 4e 06 	sts	0x064E, r30	; 0x80064e <angle+0x50>
     64e:	50 92 51 06 	sts	0x0651, r5	; 0x800651 <angle+0x53>
     652:	40 92 50 06 	sts	0x0650, r4	; 0x800650 <angle+0x52>
     656:	50 93 53 06 	sts	0x0653, r21	; 0x800653 <angle+0x55>
     65a:	40 93 52 06 	sts	0x0652, r20	; 0x800652 <angle+0x54>
     65e:	30 93 55 06 	sts	0x0655, r19	; 0x800655 <angle+0x57>
     662:	20 93 54 06 	sts	0x0654, r18	; 0x800654 <angle+0x56>
     666:	0f 2e       	mov	r0, r31
     668:	f9 e6       	ldi	r31, 0x69	; 105
     66a:	ef 2e       	mov	r14, r31
     66c:	f1 2c       	mov	r15, r1
     66e:	f0 2d       	mov	r31, r0
     670:	f0 92 57 06 	sts	0x0657, r15	; 0x800657 <angle+0x59>
     674:	e0 92 56 06 	sts	0x0656, r14	; 0x800656 <angle+0x58>
     678:	0e e0       	ldi	r16, 0x0E	; 14
     67a:	11 e0       	ldi	r17, 0x01	; 1
     67c:	10 93 59 06 	sts	0x0659, r17	; 0x800659 <angle+0x5b>
     680:	00 93 58 06 	sts	0x0658, r16	; 0x800658 <angle+0x5a>
     684:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <angle+0x5d>
     688:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <angle+0x5c>
     68c:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <angle+0x5f>
     690:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <angle+0x5e>
     694:	0a e5       	ldi	r16, 0x5A	; 90
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	10 93 5f 06 	sts	0x065F, r17	; 0x80065f <angle+0x61>
     69c:	00 93 5e 06 	sts	0x065E, r16	; 0x80065e <angle+0x60>
     6a0:	d0 92 61 06 	sts	0x0661, r13	; 0x800661 <angle+0x63>
     6a4:	c0 92 60 06 	sts	0x0660, r12	; 0x800660 <angle+0x62>
     6a8:	90 93 63 06 	sts	0x0663, r25	; 0x800663 <angle+0x65>
     6ac:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <angle+0x64>
     6b0:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <angle+0x67>
     6b4:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <angle+0x66>
     6b8:	b0 92 67 06 	sts	0x0667, r11	; 0x800667 <angle+0x69>
     6bc:	a0 92 66 06 	sts	0x0666, r10	; 0x800666 <angle+0x68>
     6c0:	30 93 69 06 	sts	0x0669, r19	; 0x800669 <angle+0x6b>
     6c4:	20 93 68 06 	sts	0x0668, r18	; 0x800668 <angle+0x6a>
     6c8:	90 93 6b 06 	sts	0x066B, r25	; 0x80066b <angle+0x6d>
     6cc:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <angle+0x6c>
     6d0:	90 93 6d 06 	sts	0x066D, r25	; 0x80066d <angle+0x6f>
     6d4:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <angle+0x6e>
     6d8:	b0 93 6f 06 	sts	0x066F, r27	; 0x80066f <angle+0x71>
     6dc:	a0 93 6e 06 	sts	0x066E, r26	; 0x80066e <angle+0x70>
     6e0:	90 92 71 06 	sts	0x0671, r9	; 0x800671 <angle+0x73>
     6e4:	80 92 70 06 	sts	0x0670, r8	; 0x800670 <angle+0x72>
     6e8:	f0 93 73 06 	sts	0x0673, r31	; 0x800673 <angle+0x75>
     6ec:	e0 93 72 06 	sts	0x0672, r30	; 0x800672 <angle+0x74>
     6f0:	50 93 75 06 	sts	0x0675, r21	; 0x800675 <angle+0x77>
     6f4:	40 93 74 06 	sts	0x0674, r20	; 0x800674 <angle+0x76>
     6f8:	30 92 77 06 	sts	0x0677, r3	; 0x800677 <angle+0x79>
     6fc:	20 92 76 06 	sts	0x0676, r2	; 0x800676 <angle+0x78>
     700:	0f 2e       	mov	r0, r31
     702:	f2 ed       	ldi	r31, 0xD2	; 210
     704:	cf 2e       	mov	r12, r31
     706:	d1 2c       	mov	r13, r1
     708:	f0 2d       	mov	r31, r0
     70a:	d0 92 79 06 	sts	0x0679, r13	; 0x800679 <angle+0x7b>
     70e:	c0 92 78 06 	sts	0x0678, r12	; 0x800678 <angle+0x7a>
     712:	90 93 7b 06 	sts	0x067B, r25	; 0x80067b <angle+0x7d>
     716:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <angle+0x7c>
     71a:	90 93 7d 06 	sts	0x067D, r25	; 0x80067d <angle+0x7f>
     71e:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <angle+0x7e>
     722:	0f 2e       	mov	r0, r31
     724:	fe e1       	ldi	r31, 0x1E	; 30
     726:	cf 2e       	mov	r12, r31
     728:	d1 2c       	mov	r13, r1
     72a:	f0 2d       	mov	r31, r0
     72c:	d0 92 7f 06 	sts	0x067F, r13	; 0x80067f <angle+0x81>
     730:	c0 92 7e 06 	sts	0x067E, r12	; 0x80067e <angle+0x80>
     734:	0f 2e       	mov	r0, r31
     736:	f3 ec       	ldi	r31, 0xC3	; 195
     738:	cf 2e       	mov	r12, r31
     73a:	d1 2c       	mov	r13, r1
     73c:	f0 2d       	mov	r31, r0
     73e:	d0 92 81 06 	sts	0x0681, r13	; 0x800681 <angle+0x83>
     742:	c0 92 80 06 	sts	0x0680, r12	; 0x800680 <angle+0x82>
     746:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <angle+0x85>
     74a:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <angle+0x84>
     74e:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <angle+0x87>
     752:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <angle+0x86>
     756:	d0 93 87 06 	sts	0x0687, r29	; 0x800687 <angle+0x89>
     75a:	c0 93 86 06 	sts	0x0686, r28	; 0x800686 <angle+0x88>
     75e:	50 93 89 06 	sts	0x0689, r21	; 0x800689 <angle+0x8b>
     762:	40 93 88 06 	sts	0x0688, r20	; 0x800688 <angle+0x8a>
     766:	90 93 8b 06 	sts	0x068B, r25	; 0x80068b <angle+0x8d>
     76a:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <angle+0x8c>
     76e:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <angle+0x8f>
     772:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <angle+0x8e>
     776:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <angle+0x91>
     77a:	10 92 8e 06 	sts	0x068E, r1	; 0x80068e <angle+0x90>
     77e:	0f 2e       	mov	r0, r31
     780:	f5 ea       	ldi	r31, 0xA5	; 165
     782:	cf 2e       	mov	r12, r31
     784:	d1 2c       	mov	r13, r1
     786:	f0 2d       	mov	r31, r0
     788:	d0 92 91 06 	sts	0x0691, r13	; 0x800691 <angle+0x93>
     78c:	c0 92 90 06 	sts	0x0690, r12	; 0x800690 <angle+0x92>
     790:	b0 93 93 06 	sts	0x0693, r27	; 0x800693 <angle+0x95>
     794:	a0 93 92 06 	sts	0x0692, r26	; 0x800692 <angle+0x94>
     798:	f0 93 95 06 	sts	0x0695, r31	; 0x800695 <angle+0x97>
     79c:	e0 93 94 06 	sts	0x0694, r30	; 0x800694 <angle+0x96>
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f9 e5       	ldi	r31, 0x59	; 89
     7a4:	cf 2e       	mov	r12, r31
     7a6:	dd 24       	eor	r13, r13
     7a8:	d3 94       	inc	r13
     7aa:	f0 2d       	mov	r31, r0
     7ac:	d0 92 97 06 	sts	0x0697, r13	; 0x800697 <angle+0x99>
     7b0:	c0 92 96 06 	sts	0x0696, r12	; 0x800696 <angle+0x98>
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f6 e9       	ldi	r31, 0x96	; 150
     7b8:	cf 2e       	mov	r12, r31
     7ba:	d1 2c       	mov	r13, r1
     7bc:	f0 2d       	mov	r31, r0
     7be:	d0 92 99 06 	sts	0x0699, r13	; 0x800699 <angle+0x9b>
     7c2:	c0 92 98 06 	sts	0x0698, r12	; 0x800698 <angle+0x9a>
     7c6:	90 93 9b 06 	sts	0x069B, r25	; 0x80069b <angle+0x9d>
     7ca:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <angle+0x9c>
     7ce:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <angle+0x9f>
     7d2:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <angle+0x9e>
     7d6:	0f 2e       	mov	r0, r31
     7d8:	fa e4       	ldi	r31, 0x4A	; 74
     7da:	cf 2e       	mov	r12, r31
     7dc:	dd 24       	eor	r13, r13
     7de:	d3 94       	inc	r13
     7e0:	f0 2d       	mov	r31, r0
     7e2:	d0 92 9f 06 	sts	0x069F, r13	; 0x80069f <angle+0xa1>
     7e6:	c0 92 9e 06 	sts	0x069E, r12	; 0x80069e <angle+0xa0>
     7ea:	70 92 a1 06 	sts	0x06A1, r7	; 0x8006a1 <angle+0xa3>
     7ee:	60 92 a0 06 	sts	0x06A0, r6	; 0x8006a0 <angle+0xa2>
     7f2:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <angle+0xa5>
     7f6:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <angle+0xa4>
     7fa:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <angle+0xa7>
     7fe:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <angle+0xa6>
     802:	0f 2e       	mov	r0, r31
     804:	fb e3       	ldi	r31, 0x3B	; 59
     806:	cf 2e       	mov	r12, r31
     808:	dd 24       	eor	r13, r13
     80a:	d3 94       	inc	r13
     80c:	f0 2d       	mov	r31, r0
     80e:	d0 92 a7 06 	sts	0x06A7, r13	; 0x8006a7 <angle+0xa9>
     812:	c0 92 a6 06 	sts	0x06A6, r12	; 0x8006a6 <angle+0xa8>
     816:	f0 93 a9 06 	sts	0x06A9, r31	; 0x8006a9 <angle+0xab>
     81a:	e0 93 a8 06 	sts	0x06A8, r30	; 0x8006a8 <angle+0xaa>
     81e:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <angle+0xad>
     822:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <angle+0xac>
     826:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <angle+0xaf>
     82a:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <angle+0xae>
     82e:	70 93 af 06 	sts	0x06AF, r23	; 0x8006af <angle+0xb1>
     832:	60 93 ae 06 	sts	0x06AE, r22	; 0x8006ae <angle+0xb0>
     836:	f0 92 b1 06 	sts	0x06B1, r15	; 0x8006b1 <angle+0xb3>
     83a:	e0 92 b0 06 	sts	0x06B0, r14	; 0x8006b0 <angle+0xb2>
     83e:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <angle+0xb5>
     842:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <angle+0xb4>
     846:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <angle+0xb7>
     84a:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <angle+0xb6>
     84e:	10 93 b7 06 	sts	0x06B7, r17	; 0x8006b7 <angle+0xb9>
     852:	00 93 b6 06 	sts	0x06B6, r16	; 0x8006b6 <angle+0xb8>
     856:	50 92 b9 06 	sts	0x06B9, r5	; 0x8006b9 <angle+0xbb>
     85a:	40 92 b8 06 	sts	0x06B8, r4	; 0x8006b8 <angle+0xba>
     85e:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <angle+0xbd>
     862:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <angle+0xbc>
     866:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <angle+0xbf>
     86a:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <angle+0xbe>
     86e:	50 93 bf 06 	sts	0x06BF, r21	; 0x8006bf <angle+0xc1>
     872:	40 93 be 06 	sts	0x06BE, r20	; 0x8006be <angle+0xc0>
     876:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <angle+0xc3>
     87a:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <angle+0xc2>
     87e:	30 93 c3 06 	sts	0x06C3, r19	; 0x8006c3 <angle+0xc5>
     882:	20 93 c2 06 	sts	0x06C2, r18	; 0x8006c2 <angle+0xc4>
     886:	90 93 c5 06 	sts	0x06C5, r25	; 0x8006c5 <angle+0xc7>
     88a:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <angle+0xc6>
     88e:	50 93 c7 06 	sts	0x06C7, r21	; 0x8006c7 <angle+0xc9>
     892:	40 93 c6 06 	sts	0x06C6, r20	; 0x8006c6 <angle+0xc8>
     896:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <angle+0xcb>
     89a:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <angle+0xca>
     89e:	b0 93 cb 06 	sts	0x06CB, r27	; 0x8006cb <angle+0xcd>
     8a2:	a0 93 ca 06 	sts	0x06CA, r26	; 0x8006ca <angle+0xcc>
     8a6:	70 93 cd 06 	sts	0x06CD, r23	; 0x8006cd <angle+0xcf>
     8aa:	60 93 cc 06 	sts	0x06CC, r22	; 0x8006cc <angle+0xce>
     8ae:	50 93 cf 06 	sts	0x06CF, r21	; 0x8006cf <angle+0xd1>
     8b2:	40 93 ce 06 	sts	0x06CE, r20	; 0x8006ce <angle+0xd0>
     8b6:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <angle+0xd3>
     8ba:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <angle+0xd2>
     8be:	f0 93 d3 06 	sts	0x06D3, r31	; 0x8006d3 <angle+0xd5>
     8c2:	e0 93 d2 06 	sts	0x06D2, r30	; 0x8006d2 <angle+0xd4>
     8c6:	30 93 d5 06 	sts	0x06D5, r19	; 0x8006d5 <angle+0xd7>
     8ca:	20 93 d4 06 	sts	0x06D4, r18	; 0x8006d4 <angle+0xd6>
     8ce:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <angle+0xd9>
     8d2:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <angle+0xd8>
     8d6:	50 93 d9 06 	sts	0x06D9, r21	; 0x8006d9 <angle+0xdb>
     8da:	40 93 d8 06 	sts	0x06D8, r20	; 0x8006d8 <angle+0xda>
     8de:	70 93 db 06 	sts	0x06DB, r23	; 0x8006db <angle+0xdd>
     8e2:	60 93 da 06 	sts	0x06DA, r22	; 0x8006da <angle+0xdc>
     8e6:	90 93 dd 06 	sts	0x06DD, r25	; 0x8006dd <angle+0xdf>
     8ea:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <angle+0xde>
     8ee:	b0 93 df 06 	sts	0x06DF, r27	; 0x8006df <angle+0xe1>
     8f2:	a0 93 de 06 	sts	0x06DE, r26	; 0x8006de <angle+0xe0>
     8f6:	f0 93 e1 06 	sts	0x06E1, r31	; 0x8006e1 <angle+0xe3>
     8fa:	e0 93 e0 06 	sts	0x06E0, r30	; 0x8006e0 <angle+0xe2>
     8fe:	30 93 e3 06 	sts	0x06E3, r19	; 0x8006e3 <angle+0xe5>
     902:	20 93 e2 06 	sts	0x06E2, r18	; 0x8006e2 <angle+0xe4>
     906:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <angle+0xe7>
     90a:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <angle+0xe6>
     90e:	b0 93 e7 06 	sts	0x06E7, r27	; 0x8006e7 <angle+0xe9>
     912:	a0 93 e6 06 	sts	0x06E6, r26	; 0x8006e6 <angle+0xe8>
     916:	30 93 e9 06 	sts	0x06E9, r19	; 0x8006e9 <angle+0xeb>
     91a:	20 93 e8 06 	sts	0x06E8, r18	; 0x8006e8 <angle+0xea>
     91e:	70 93 eb 06 	sts	0x06EB, r23	; 0x8006eb <angle+0xed>
     922:	60 93 ea 06 	sts	0x06EA, r22	; 0x8006ea <angle+0xec>
     926:	50 93 ed 06 	sts	0x06ED, r21	; 0x8006ed <angle+0xef>
     92a:	40 93 ec 06 	sts	0x06EC, r20	; 0x8006ec <angle+0xee>
     92e:	b0 93 ef 06 	sts	0x06EF, r27	; 0x8006ef <angle+0xf1>
     932:	a0 93 ee 06 	sts	0x06EE, r26	; 0x8006ee <angle+0xf0>
     936:	30 93 f1 06 	sts	0x06F1, r19	; 0x8006f1 <angle+0xf3>
     93a:	20 93 f0 06 	sts	0x06F0, r18	; 0x8006f0 <angle+0xf2>
     93e:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <angle+0xf5>
     942:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <angle+0xf4>
     946:	f0 93 f5 06 	sts	0x06F5, r31	; 0x8006f5 <angle+0xf7>
     94a:	e0 93 f4 06 	sts	0x06F4, r30	; 0x8006f4 <angle+0xf6>
     94e:	30 93 f7 06 	sts	0x06F7, r19	; 0x8006f7 <angle+0xf9>
     952:	20 93 f6 06 	sts	0x06F6, r18	; 0x8006f6 <angle+0xf8>
     956:	b0 93 f9 06 	sts	0x06F9, r27	; 0x8006f9 <angle+0xfb>
     95a:	a0 93 f8 06 	sts	0x06F8, r26	; 0x8006f8 <angle+0xfa>
     95e:	50 93 fb 06 	sts	0x06FB, r21	; 0x8006fb <angle+0xfd>
     962:	40 93 fa 06 	sts	0x06FA, r20	; 0x8006fa <angle+0xfc>
     966:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <angle+0xff>
     96a:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <angle+0xfe>
     96e:	70 93 ff 06 	sts	0x06FF, r23	; 0x8006ff <angle+0x101>
     972:	60 93 fe 06 	sts	0x06FE, r22	; 0x8006fe <angle+0x100>
     976:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <angle+0x103>
     97a:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <angle+0x102>
     97e:	f0 93 03 07 	sts	0x0703, r31	; 0x800703 <angle+0x105>
     982:	e0 93 02 07 	sts	0x0702, r30	; 0x800702 <angle+0x104>
     986:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <angle+0x107>
     98a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <angle+0x106>
     98e:	70 93 07 07 	sts	0x0707, r23	; 0x800707 <angle+0x109>
     992:	60 93 06 07 	sts	0x0706, r22	; 0x800706 <angle+0x108>
     996:	f0 93 09 07 	sts	0x0709, r31	; 0x800709 <angle+0x10b>
     99a:	e0 93 08 07 	sts	0x0708, r30	; 0x800708 <angle+0x10a>
     99e:	50 93 0b 07 	sts	0x070B, r21	; 0x80070b <angle+0x10d>
     9a2:	40 93 0a 07 	sts	0x070A, r20	; 0x80070a <angle+0x10c>
     9a6:	b0 93 0d 07 	sts	0x070D, r27	; 0x80070d <angle+0x10f>
     9aa:	a0 93 0c 07 	sts	0x070C, r26	; 0x80070c <angle+0x10e>
     9ae:	70 93 0f 07 	sts	0x070F, r23	; 0x80070f <angle+0x111>
     9b2:	60 93 0e 07 	sts	0x070E, r22	; 0x80070e <angle+0x110>
     9b6:	f0 93 11 07 	sts	0x0711, r31	; 0x800711 <angle+0x113>
     9ba:	e0 93 10 07 	sts	0x0710, r30	; 0x800710 <angle+0x112>
     9be:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <angle+0x115>
     9c2:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <angle+0x114>
     9c6:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <angle+0x117>
     9ca:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <angle+0x116>
     9ce:	f0 93 17 07 	sts	0x0717, r31	; 0x800717 <angle+0x119>
     9d2:	e0 93 16 07 	sts	0x0716, r30	; 0x800716 <angle+0x118>
     9d6:	b0 93 19 07 	sts	0x0719, r27	; 0x800719 <angle+0x11b>
     9da:	a0 93 18 07 	sts	0x0718, r26	; 0x800718 <angle+0x11a>
     9de:	70 93 1b 07 	sts	0x071B, r23	; 0x80071b <angle+0x11d>
     9e2:	60 93 1a 07 	sts	0x071A, r22	; 0x80071a <angle+0x11c>
     9e6:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <angle+0x11f>
     9ea:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <angle+0x11e>
     9ee:	b0 93 1f 07 	sts	0x071F, r27	; 0x80071f <angle+0x121>
     9f2:	a0 93 1e 07 	sts	0x071E, r26	; 0x80071e <angle+0x120>
     9f6:	30 93 21 07 	sts	0x0721, r19	; 0x800721 <angle+0x123>
     9fa:	20 93 20 07 	sts	0x0720, r18	; 0x800720 <angle+0x122>
     9fe:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <angle+0x125>
     a02:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <angle+0x124>
     a06:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <angle+0x127>
     a0a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <angle+0x126>
     a0e:	f0 93 27 07 	sts	0x0727, r31	; 0x800727 <angle+0x129>
     a12:	e0 93 26 07 	sts	0x0726, r30	; 0x800726 <angle+0x128>
     a16:	70 93 29 07 	sts	0x0729, r23	; 0x800729 <angle+0x12b>
     a1a:	60 93 28 07 	sts	0x0728, r22	; 0x800728 <angle+0x12a>
     a1e:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <angle+0x12d>
     a22:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <angle+0x12c>
     a26:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <angle+0x12f>
     a2a:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <angle+0x12e>
     a2e:	70 93 2f 07 	sts	0x072F, r23	; 0x80072f <angle+0x131>
     a32:	60 93 2e 07 	sts	0x072E, r22	; 0x80072e <angle+0x130>
     a36:	f0 93 31 07 	sts	0x0731, r31	; 0x800731 <angle+0x133>
     a3a:	e0 93 30 07 	sts	0x0730, r30	; 0x800730 <angle+0x132>
     a3e:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <angle+0x135>
     a42:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <angle+0x134>
     a46:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <angle+0x137>
     a4a:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <angle+0x136>
     a4e:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <angle+0x139>
     a52:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <angle+0x138>
     a56:	50 93 39 07 	sts	0x0739, r21	; 0x800739 <angle+0x13b>
     a5a:	40 93 38 07 	sts	0x0738, r20	; 0x800738 <angle+0x13a>
     a5e:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <angle+0x13d>
     a62:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <angle+0x13c>
     a66:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <angle+0x13f>
     a6a:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <angle+0x13e>
     a6e:	50 93 3f 07 	sts	0x073F, r21	; 0x80073f <angle+0x141>
     a72:	40 93 3e 07 	sts	0x073E, r20	; 0x80073e <angle+0x140>
     a76:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <angle+0x143>
     a7a:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <angle+0x142>
     a7e:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <angle+0x145>
     a82:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <angle+0x144>
     a86:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <angle+0x147>
     a8a:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <angle+0x146>
     a8e:	30 93 47 07 	sts	0x0747, r19	; 0x800747 <angle+0x149>
     a92:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <angle+0x148>
     a96:	b0 93 49 07 	sts	0x0749, r27	; 0x800749 <angle+0x14b>
     a9a:	a0 93 48 07 	sts	0x0748, r26	; 0x800748 <angle+0x14a>
     a9e:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <angle+0x14d>
     aa2:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <angle+0x14c>
     aa6:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <angle+0x14f>
     aaa:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <angle+0x14e>
     aae:	50 93 4f 07 	sts	0x074F, r21	; 0x80074f <angle+0x151>
     ab2:	40 93 4e 07 	sts	0x074E, r20	; 0x80074e <angle+0x150>
     ab6:	b0 93 51 07 	sts	0x0751, r27	; 0x800751 <angle+0x153>
     aba:	a0 93 50 07 	sts	0x0750, r26	; 0x800750 <angle+0x152>
     abe:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <angle+0x155>
     ac2:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <angle+0x154>
     ac6:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <angle+0x157>
     aca:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <angle+0x156>
     ace:	f0 93 57 07 	sts	0x0757, r31	; 0x800757 <angle+0x159>
     ad2:	e0 93 56 07 	sts	0x0756, r30	; 0x800756 <angle+0x158>
     ad6:	30 93 59 07 	sts	0x0759, r19	; 0x800759 <angle+0x15b>
     ada:	20 93 58 07 	sts	0x0758, r18	; 0x800758 <angle+0x15a>
     ade:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <angle+0x15d>
     ae2:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <angle+0x15c>
     ae6:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <angle+0x15f>
     aea:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <angle+0x15e>
     aee:	b0 93 5f 07 	sts	0x075F, r27	; 0x80075f <angle+0x161>
     af2:	a0 93 5e 07 	sts	0x075E, r26	; 0x80075e <angle+0x160>
     af6:	70 93 61 07 	sts	0x0761, r23	; 0x800761 <angle+0x163>
     afa:	60 93 60 07 	sts	0x0760, r22	; 0x800760 <angle+0x162>
     afe:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <angle+0x165>
     b02:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <angle+0x164>
     b06:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <angle+0x167>
     b0a:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <angle+0x166>
     b0e:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <angle+0x169>
     b12:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <angle+0x168>
     b16:	f0 93 69 07 	sts	0x0769, r31	; 0x800769 <angle+0x16b>
     b1a:	e0 93 68 07 	sts	0x0768, r30	; 0x800768 <angle+0x16a>
     b1e:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <angle+0x16d>
     b22:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <angle+0x16c>
     b26:	90 93 6d 07 	sts	0x076D, r25	; 0x80076d <angle+0x16f>
     b2a:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <angle+0x16e>
     b2e:	70 93 6f 07 	sts	0x076F, r23	; 0x80076f <angle+0x171>
     b32:	60 93 6e 07 	sts	0x076E, r22	; 0x80076e <angle+0x170>
     b36:	50 93 71 07 	sts	0x0771, r21	; 0x800771 <angle+0x173>
     b3a:	40 93 70 07 	sts	0x0770, r20	; 0x800770 <angle+0x172>
     b3e:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <angle+0x175>
     b42:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <angle+0x174>
     b46:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <angle+0x177>
     b4a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <angle+0x176>
     b4e:	30 93 77 07 	sts	0x0777, r19	; 0x800777 <angle+0x179>
     b52:	20 93 76 07 	sts	0x0776, r18	; 0x800776 <angle+0x178>
     b56:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <angle+0x17b>
     b5a:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <angle+0x17a>
     b5e:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <angle+0x17d>
     b62:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <angle+0x17c>
     b66:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <angle+0x17f>
     b6a:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <angle+0x17e>
     b6e:	e9 e7       	ldi	r30, 0x79	; 121
     b70:	f4 e0       	ldi	r31, 0x04	; 4
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	91 83       	std	Z+1, r25	; 0x01
     b78:	80 83       	st	Z, r24
     b7a:	28 e1       	ldi	r18, 0x18	; 24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	33 83       	std	Z+3, r19	; 0x03
     b80:	22 83       	std	Z+2, r18	; 0x02
     b82:	15 82       	std	Z+5, r1	; 0x05
     b84:	14 82       	std	Z+4, r1	; 0x04
     b86:	17 82       	std	Z+7, r1	; 0x07
     b88:	16 82       	std	Z+6, r1	; 0x06
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	31 87       	std	Z+9, r19	; 0x09
     b90:	20 87       	std	Z+8, r18	; 0x08
     b92:	23 e0       	ldi	r18, 0x03	; 3
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	33 87       	std	Z+11, r19	; 0x0b
     b98:	22 87       	std	Z+10, r18	; 0x0a
     b9a:	15 86       	std	Z+13, r1	; 0x0d
     b9c:	14 86       	std	Z+12, r1	; 0x0c
     b9e:	17 86       	std	Z+15, r1	; 0x0f
     ba0:	16 86       	std	Z+14, r1	; 0x0e
     ba2:	91 8b       	std	Z+17, r25	; 0x11
     ba4:	80 8b       	std	Z+16, r24	; 0x10
     ba6:	84 e0       	ldi	r24, 0x04	; 4
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	93 8b       	std	Z+19, r25	; 0x13
     bac:	82 8b       	std	Z+18, r24	; 0x12
     bae:	49 e1       	ldi	r20, 0x19	; 25
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	55 8b       	std	Z+21, r21	; 0x15
     bb4:	44 8b       	std	Z+20, r20	; 0x14
     bb6:	44 e2       	ldi	r20, 0x24	; 36
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	57 8b       	std	Z+23, r21	; 0x17
     bbc:	46 8b       	std	Z+22, r20	; 0x16
     bbe:	31 8f       	std	Z+25, r19	; 0x19
     bc0:	20 8f       	std	Z+24, r18	; 0x18
     bc2:	25 e0       	ldi	r18, 0x05	; 5
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	33 8f       	std	Z+27, r19	; 0x1b
     bc8:	22 8f       	std	Z+26, r18	; 0x1a
     bca:	15 8e       	std	Z+29, r1	; 0x1d
     bcc:	14 8e       	std	Z+28, r1	; 0x1c
     bce:	17 8e       	std	Z+31, r1	; 0x1f
     bd0:	16 8e       	std	Z+30, r1	; 0x1e
     bd2:	91 a3       	std	Z+33, r25	; 0x21
     bd4:	80 a3       	std	Z+32, r24	; 0x20
     bd6:	86 e0       	ldi	r24, 0x06	; 6
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	93 a3       	std	Z+35, r25	; 0x23
     bdc:	82 a3       	std	Z+34, r24	; 0x22
     bde:	15 a2       	std	Z+37, r1	; 0x25
     be0:	14 a2       	std	Z+36, r1	; 0x24
     be2:	17 a2       	std	Z+39, r1	; 0x27
     be4:	16 a2       	std	Z+38, r1	; 0x26
     be6:	31 a7       	std	Z+41, r19	; 0x29
     be8:	20 a7       	std	Z+40, r18	; 0x28
     bea:	27 e0       	ldi	r18, 0x07	; 7
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	33 a7       	std	Z+43, r19	; 0x2b
     bf0:	22 a7       	std	Z+42, r18	; 0x2a
     bf2:	15 a6       	std	Z+45, r1	; 0x2d
     bf4:	14 a6       	std	Z+44, r1	; 0x2c
     bf6:	17 a6       	std	Z+47, r1	; 0x2f
     bf8:	16 a6       	std	Z+46, r1	; 0x2e
     bfa:	91 ab       	std	Z+49, r25	; 0x31
     bfc:	80 ab       	std	Z+48, r24	; 0x30
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	93 ab       	std	Z+51, r25	; 0x33
     c04:	82 ab       	std	Z+50, r24	; 0x32
     c06:	45 e2       	ldi	r20, 0x25	; 37
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	55 ab       	std	Z+53, r21	; 0x35
     c0c:	44 ab       	std	Z+52, r20	; 0x34
     c0e:	46 e2       	ldi	r20, 0x26	; 38
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	57 ab       	std	Z+55, r21	; 0x37
     c14:	46 ab       	std	Z+54, r20	; 0x36
     c16:	31 af       	std	Z+57, r19	; 0x39
     c18:	20 af       	std	Z+56, r18	; 0x38
     c1a:	29 e0       	ldi	r18, 0x09	; 9
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	33 af       	std	Z+59, r19	; 0x3b
     c20:	22 af       	std	Z+58, r18	; 0x3a
     c22:	15 ae       	std	Z+61, r1	; 0x3d
     c24:	14 ae       	std	Z+60, r1	; 0x3c
     c26:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <node+0x3f>
     c2a:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <node+0x3e>
     c2e:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <node+0x41>
     c32:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <node+0x40>
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <node+0x43>
     c3e:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <node+0x42>
     c42:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <node+0x45>
     c46:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <node+0x44>
     c4a:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <node+0x47>
     c4e:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <node+0x46>
     c52:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <node+0x49>
     c56:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <node+0x48>
     c5a:	2b e0       	ldi	r18, 0x0B	; 11
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	30 93 c4 04 	sts	0x04C4, r19	; 0x8004c4 <node+0x4b>
     c62:	20 93 c3 04 	sts	0x04C3, r18	; 0x8004c3 <node+0x4a>
     c66:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <node+0x4d>
     c6a:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <node+0x4c>
     c6e:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <node+0x4f>
     c72:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <node+0x4e>
     c76:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <node+0x51>
     c7a:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <node+0x50>
     c7e:	8c e0       	ldi	r24, 0x0C	; 12
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <node+0x53>
     c86:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <node+0x52>
     c8a:	4c e1       	ldi	r20, 0x1C	; 28
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	50 93 ce 04 	sts	0x04CE, r21	; 0x8004ce <node+0x55>
     c92:	40 93 cd 04 	sts	0x04CD, r20	; 0x8004cd <node+0x54>
     c96:	4d e1       	ldi	r20, 0x1D	; 29
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	50 93 d0 04 	sts	0x04D0, r21	; 0x8004d0 <node+0x57>
     c9e:	40 93 cf 04 	sts	0x04CF, r20	; 0x8004cf <node+0x56>
     ca2:	30 93 d2 04 	sts	0x04D2, r19	; 0x8004d2 <node+0x59>
     ca6:	20 93 d1 04 	sts	0x04D1, r18	; 0x8004d1 <node+0x58>
     caa:	2d e0       	ldi	r18, 0x0D	; 13
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	30 93 d4 04 	sts	0x04D4, r19	; 0x8004d4 <node+0x5b>
     cb2:	20 93 d3 04 	sts	0x04D3, r18	; 0x8004d3 <node+0x5a>
     cb6:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <node+0x5d>
     cba:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <node+0x5c>
     cbe:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <node+0x5f>
     cc2:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <node+0x5e>
     cc6:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <node+0x61>
     cca:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <node+0x60>
     cce:	8e e0       	ldi	r24, 0x0E	; 14
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <node+0x63>
     cd6:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <node+0x62>
     cda:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <node+0x65>
     cde:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <node+0x64>
     ce2:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <node+0x67>
     ce6:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <node+0x66>
     cea:	30 93 e2 04 	sts	0x04E2, r19	; 0x8004e2 <node+0x69>
     cee:	20 93 e1 04 	sts	0x04E1, r18	; 0x8004e1 <node+0x68>
     cf2:	d0 93 e4 04 	sts	0x04E4, r29	; 0x8004e4 <node+0x6b>
     cf6:	c0 93 e3 04 	sts	0x04E3, r28	; 0x8004e3 <node+0x6a>
     cfa:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <node+0x6d>
     cfe:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <node+0x6c>
     d02:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <node+0x6f>
     d06:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <node+0x6e>
     d0a:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <node+0x71>
     d0e:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <node+0x70>
     d12:	20 e1       	ldi	r18, 0x10	; 16
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	30 93 ec 04 	sts	0x04EC, r19	; 0x8004ec <node+0x73>
     d1a:	20 93 eb 04 	sts	0x04EB, r18	; 0x8004eb <node+0x72>
     d1e:	87 e2       	ldi	r24, 0x27	; 39
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <node+0x75>
     d26:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <node+0x74>
     d2a:	88 e2       	ldi	r24, 0x28	; 40
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <node+0x77>
     d32:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <node+0x76>
     d36:	d0 93 f2 04 	sts	0x04F2, r29	; 0x8004f2 <node+0x79>
     d3a:	c0 93 f1 04 	sts	0x04F1, r28	; 0x8004f1 <node+0x78>
     d3e:	81 e1       	ldi	r24, 0x11	; 17
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <node+0x7b>
     d46:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <node+0x7a>
     d4a:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <node+0x7d>
     d4e:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <node+0x7c>
     d52:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <node+0x7f>
     d56:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <node+0x7e>
     d5a:	30 93 fa 04 	sts	0x04FA, r19	; 0x8004fa <node+0x81>
     d5e:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <node+0x80>
     d62:	22 e1       	ldi	r18, 0x12	; 18
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <node+0x83>
     d6a:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <node+0x82>
     d6e:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <node+0x85>
     d72:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <node+0x84>
     d76:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <node+0x87>
     d7a:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <node+0x86>
     d7e:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <node+0x89>
     d82:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <node+0x88>
     d86:	83 e1       	ldi	r24, 0x13	; 19
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <node+0x8b>
     d8e:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <node+0x8a>
     d92:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <node+0x8d>
     d96:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <node+0x8c>
     d9a:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <node+0x8f>
     d9e:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <node+0x8e>
     da2:	30 93 0a 05 	sts	0x050A, r19	; 0x80050a <node+0x91>
     da6:	20 93 09 05 	sts	0x0509, r18	; 0x800509 <node+0x90>
     daa:	24 e1       	ldi	r18, 0x14	; 20
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	30 93 0c 05 	sts	0x050C, r19	; 0x80050c <node+0x93>
     db2:	20 93 0b 05 	sts	0x050B, r18	; 0x80050b <node+0x92>
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	50 93 0e 05 	sts	0x050E, r21	; 0x80050e <node+0x95>
     dbe:	40 93 0d 05 	sts	0x050D, r20	; 0x80050d <node+0x94>
     dc2:	41 e2       	ldi	r20, 0x21	; 33
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	50 93 10 05 	sts	0x0510, r21	; 0x800510 <node+0x97>
     dca:	40 93 0f 05 	sts	0x050F, r20	; 0x80050f <node+0x96>
     dce:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <node+0x99>
     dd2:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <node+0x98>
     dd6:	85 e1       	ldi	r24, 0x15	; 21
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <node+0x9b>
     dde:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <node+0x9a>
     de2:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <node+0x9d>
     de6:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <node+0x9c>
     dea:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <node+0x9f>
     dee:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <node+0x9e>
     df2:	30 93 1a 05 	sts	0x051A, r19	; 0x80051a <node+0xa1>
     df6:	20 93 19 05 	sts	0x0519, r18	; 0x800519 <node+0xa0>
     dfa:	26 e1       	ldi	r18, 0x16	; 22
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	30 93 1c 05 	sts	0x051C, r19	; 0x80051c <node+0xa3>
     e02:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <node+0xa2>
     e06:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <node+0xa5>
     e0a:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <node+0xa4>
     e0e:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <node+0xa7>
     e12:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <node+0xa6>
     e16:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <node+0xa9>
     e1a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <node+0xa8>
     e1e:	87 e1       	ldi	r24, 0x17	; 23
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <node+0xab>
     e26:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <node+0xaa>
     e2a:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <node+0xad>
     e2e:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <node+0xac>
     e32:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <node+0xaf>
     e36:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <node+0xae>
     e3a:	86 e1       	ldi	r24, 0x16	; 22
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <node+0xb1>
     e42:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <node+0xb0>
     e46:	88 e1       	ldi	r24, 0x18	; 24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <node+0xb3>
     e4e:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <node+0xb2>
     e52:	c9 e2       	ldi	r28, 0x29	; 41
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	d0 93 2e 05 	sts	0x052E, r29	; 0x80052e <node+0xb5>
     e5a:	c0 93 2d 05 	sts	0x052D, r28	; 0x80052d <node+0xb4>
     e5e:	0f 2e       	mov	r0, r31
     e60:	fa e2       	ldi	r31, 0x2A	; 42
     e62:	af 2e       	mov	r10, r31
     e64:	b1 2c       	mov	r11, r1
     e66:	f0 2d       	mov	r31, r0
     e68:	b0 92 30 05 	sts	0x0530, r11	; 0x800530 <node+0xb7>
     e6c:	a0 92 2f 05 	sts	0x052F, r10	; 0x80052f <node+0xb6>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <node+0xb9>
     e78:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <node+0xb8>
     e7c:	e7 e1       	ldi	r30, 0x17	; 23
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	f0 93 34 05 	sts	0x0534, r31	; 0x800534 <node+0xbb>
     e84:	e0 93 33 05 	sts	0x0533, r30	; 0x800533 <node+0xba>
     e88:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <node+0xbd>
     e8c:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <node+0xbc>
     e90:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <node+0xbf>
     e94:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <node+0xbe>
     e98:	0f 2e       	mov	r0, r31
     e9a:	f3 e0       	ldi	r31, 0x03	; 3
     e9c:	8f 2e       	mov	r8, r31
     e9e:	91 2c       	mov	r9, r1
     ea0:	f0 2d       	mov	r31, r0
     ea2:	90 92 3a 05 	sts	0x053A, r9	; 0x80053a <node+0xc1>
     ea6:	80 92 39 05 	sts	0x0539, r8	; 0x800539 <node+0xc0>
     eaa:	6a e1       	ldi	r22, 0x1A	; 26
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	70 93 3c 05 	sts	0x053C, r23	; 0x80053c <node+0xc3>
     eb2:	60 93 3b 05 	sts	0x053B, r22	; 0x80053b <node+0xc2>
     eb6:	a4 e2       	ldi	r26, 0x24	; 36
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	b0 93 3e 05 	sts	0x053E, r27	; 0x80053e <node+0xc5>
     ebe:	a0 93 3d 05 	sts	0x053D, r26	; 0x80053d <node+0xc4>
     ec2:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <node+0xc7>
     ec6:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <node+0xc6>
     eca:	0f 2e       	mov	r0, r31
     ecc:	f9 e1       	ldi	r31, 0x19	; 25
     ece:	6f 2e       	mov	r6, r31
     ed0:	71 2c       	mov	r7, r1
     ed2:	f0 2d       	mov	r31, r0
     ed4:	70 92 42 05 	sts	0x0542, r7	; 0x800542 <node+0xc9>
     ed8:	60 92 41 05 	sts	0x0541, r6	; 0x800541 <node+0xc8>
     edc:	4b e1       	ldi	r20, 0x1B	; 27
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	50 93 44 05 	sts	0x0544, r21	; 0x800544 <node+0xcb>
     ee4:	40 93 43 05 	sts	0x0543, r20	; 0x800543 <node+0xca>
     ee8:	85 e2       	ldi	r24, 0x25	; 37
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <node+0xcd>
     ef0:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <node+0xcc>
     ef4:	0f 2e       	mov	r0, r31
     ef6:	fc e2       	ldi	r31, 0x2C	; 44
     ef8:	4f 2e       	mov	r4, r31
     efa:	51 2c       	mov	r5, r1
     efc:	f0 2d       	mov	r31, r0
     efe:	50 92 48 05 	sts	0x0548, r5	; 0x800548 <node+0xcf>
     f02:	40 92 47 05 	sts	0x0547, r4	; 0x800547 <node+0xce>
     f06:	70 93 4a 05 	sts	0x054A, r23	; 0x80054a <node+0xd1>
     f0a:	60 93 49 05 	sts	0x0549, r22	; 0x800549 <node+0xd0>
     f0e:	2c e1       	ldi	r18, 0x1C	; 28
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <node+0xd3>
     f16:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <node+0xd2>
     f1a:	86 e2       	ldi	r24, 0x26	; 38
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <node+0xd5>
     f22:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <node+0xd4>
     f26:	0d e2       	ldi	r16, 0x2D	; 45
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	10 93 50 05 	sts	0x0550, r17	; 0x800550 <node+0xd7>
     f2e:	00 93 4f 05 	sts	0x054F, r16	; 0x80054f <node+0xd6>
     f32:	0b e0       	ldi	r16, 0x0B	; 11
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	10 93 52 05 	sts	0x0552, r17	; 0x800552 <node+0xd9>
     f3a:	00 93 51 05 	sts	0x0551, r16	; 0x800551 <node+0xd8>
     f3e:	50 93 54 05 	sts	0x0554, r21	; 0x800554 <node+0xdb>
     f42:	40 93 53 05 	sts	0x0553, r20	; 0x800553 <node+0xda>
     f46:	8d e1       	ldi	r24, 0x1D	; 29
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <node+0xdd>
     f4e:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <node+0xdc>
     f52:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <node+0xdf>
     f56:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <node+0xde>
     f5a:	10 93 5a 05 	sts	0x055A, r17	; 0x80055a <node+0xe1>
     f5e:	00 93 59 05 	sts	0x0559, r16	; 0x800559 <node+0xe0>
     f62:	30 93 5c 05 	sts	0x055C, r19	; 0x80055c <node+0xe3>
     f66:	20 93 5b 05 	sts	0x055B, r18	; 0x80055b <node+0xe2>
     f6a:	2e e1       	ldi	r18, 0x1E	; 30
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	30 93 5e 05 	sts	0x055E, r19	; 0x80055e <node+0xe5>
     f72:	20 93 5d 05 	sts	0x055D, r18	; 0x80055d <node+0xe4>
     f76:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <node+0xe7>
     f7a:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <node+0xe6>
     f7e:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <node+0xe9>
     f82:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <node+0xe8>
     f86:	8f e1       	ldi	r24, 0x1F	; 31
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <node+0xeb>
     f8e:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <node+0xea>
     f92:	07 e2       	ldi	r16, 0x27	; 39
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	10 93 66 05 	sts	0x0566, r17	; 0x800566 <node+0xed>
     f9a:	00 93 65 05 	sts	0x0565, r16	; 0x800565 <node+0xec>
     f9e:	0f 2e       	mov	r0, r31
     fa0:	fe e2       	ldi	r31, 0x2E	; 46
     fa2:	2f 2e       	mov	r2, r31
     fa4:	31 2c       	mov	r3, r1
     fa6:	f0 2d       	mov	r31, r0
     fa8:	30 92 68 05 	sts	0x0568, r3	; 0x800568 <node+0xef>
     fac:	20 92 67 05 	sts	0x0567, r2	; 0x800567 <node+0xee>
     fb0:	30 93 6a 05 	sts	0x056A, r19	; 0x80056a <node+0xf1>
     fb4:	20 93 69 05 	sts	0x0569, r18	; 0x800569 <node+0xf0>
     fb8:	68 94       	set
     fba:	ee 24       	eor	r14, r14
     fbc:	e5 f8       	bld	r14, 5
     fbe:	f1 2c       	mov	r15, r1
     fc0:	f0 92 6c 05 	sts	0x056C, r15	; 0x80056c <node+0xf3>
     fc4:	e0 92 6b 05 	sts	0x056B, r14	; 0x80056b <node+0xf2>
     fc8:	08 e2       	ldi	r16, 0x28	; 40
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	10 93 6e 05 	sts	0x056E, r17	; 0x80056e <node+0xf5>
     fd0:	00 93 6d 05 	sts	0x056D, r16	; 0x80056d <node+0xf4>
     fd4:	0f 2e       	mov	r0, r31
     fd6:	ff e2       	ldi	r31, 0x2F	; 47
     fd8:	cf 2e       	mov	r12, r31
     fda:	d1 2c       	mov	r13, r1
     fdc:	f0 2d       	mov	r31, r0
     fde:	d0 92 70 05 	sts	0x0570, r13	; 0x800570 <node+0xf7>
     fe2:	c0 92 6f 05 	sts	0x056F, r12	; 0x80056f <node+0xf6>
     fe6:	0f 2e       	mov	r0, r31
     fe8:	f3 e1       	ldi	r31, 0x13	; 19
     fea:	cf 2e       	mov	r12, r31
     fec:	d1 2c       	mov	r13, r1
     fee:	f0 2d       	mov	r31, r0
     ff0:	d0 92 72 05 	sts	0x0572, r13	; 0x800572 <node+0xf9>
     ff4:	c0 92 71 05 	sts	0x0571, r12	; 0x800571 <node+0xf8>
     ff8:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <node+0xfb>
     ffc:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <node+0xfa>
    1000:	01 e2       	ldi	r16, 0x21	; 33
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	10 93 76 05 	sts	0x0576, r17	; 0x800576 <node+0xfd>
    1008:	00 93 75 05 	sts	0x0575, r16	; 0x800575 <node+0xfc>
    100c:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <node+0xff>
    1010:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <node+0xfe>
    1014:	d0 92 7a 05 	sts	0x057A, r13	; 0x80057a <node+0x101>
    1018:	c0 92 79 05 	sts	0x0579, r12	; 0x800579 <node+0x100>
    101c:	f0 92 7c 05 	sts	0x057C, r15	; 0x80057c <node+0x103>
    1020:	e0 92 7b 05 	sts	0x057B, r14	; 0x80057b <node+0x102>
    1024:	0f 2e       	mov	r0, r31
    1026:	f2 e2       	ldi	r31, 0x22	; 34
    1028:	ef 2e       	mov	r14, r31
    102a:	f1 2c       	mov	r15, r1
    102c:	f0 2d       	mov	r31, r0
    102e:	f0 92 7e 05 	sts	0x057E, r15	; 0x80057e <node+0x105>
    1032:	e0 92 7d 05 	sts	0x057D, r14	; 0x80057d <node+0x104>
    1036:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <node+0x107>
    103a:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <node+0x106>
    103e:	10 93 82 05 	sts	0x0582, r17	; 0x800582 <node+0x109>
    1042:	00 93 81 05 	sts	0x0581, r16	; 0x800581 <node+0x108>
    1046:	03 e2       	ldi	r16, 0x23	; 35
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	10 93 84 05 	sts	0x0584, r17	; 0x800584 <node+0x10b>
    104e:	00 93 83 05 	sts	0x0583, r16	; 0x800583 <node+0x10a>
    1052:	d0 93 86 05 	sts	0x0586, r29	; 0x800586 <node+0x10d>
    1056:	c0 93 85 05 	sts	0x0585, r28	; 0x800585 <node+0x10c>
    105a:	c0 e3       	ldi	r28, 0x30	; 48
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	d0 93 88 05 	sts	0x0588, r29	; 0x800588 <node+0x10f>
    1062:	c0 93 87 05 	sts	0x0587, r28	; 0x800587 <node+0x10e>
    1066:	f0 92 8a 05 	sts	0x058A, r15	; 0x80058a <node+0x111>
    106a:	e0 92 89 05 	sts	0x0589, r14	; 0x800589 <node+0x110>
    106e:	b0 93 8c 05 	sts	0x058C, r27	; 0x80058c <node+0x113>
    1072:	a0 93 8b 05 	sts	0x058B, r26	; 0x80058b <node+0x112>
    1076:	b0 92 8e 05 	sts	0x058E, r11	; 0x80058e <node+0x115>
    107a:	a0 92 8d 05 	sts	0x058D, r10	; 0x80058d <node+0x114>
    107e:	ab e2       	ldi	r26, 0x2B	; 43
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	b0 93 90 05 	sts	0x0590, r27	; 0x800590 <node+0x117>
    1086:	a0 93 8f 05 	sts	0x058F, r26	; 0x80058f <node+0x116>
    108a:	90 92 92 05 	sts	0x0592, r9	; 0x800592 <node+0x119>
    108e:	80 92 91 05 	sts	0x0591, r8	; 0x800591 <node+0x118>
    1092:	70 92 94 05 	sts	0x0594, r7	; 0x800594 <node+0x11b>
    1096:	60 92 93 05 	sts	0x0593, r6	; 0x800593 <node+0x11a>
    109a:	10 93 96 05 	sts	0x0596, r17	; 0x800596 <node+0x11d>
    109e:	00 93 95 05 	sts	0x0595, r16	; 0x800595 <node+0x11c>
    10a2:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <node+0x11f>
    10a6:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <node+0x11e>
    10aa:	0f 2e       	mov	r0, r31
    10ac:	f7 e0       	ldi	r31, 0x07	; 7
    10ae:	cf 2e       	mov	r12, r31
    10b0:	d1 2c       	mov	r13, r1
    10b2:	f0 2d       	mov	r31, r0
    10b4:	d0 92 9a 05 	sts	0x059A, r13	; 0x80059a <node+0x121>
    10b8:	c0 92 99 05 	sts	0x0599, r12	; 0x800599 <node+0x120>
    10bc:	70 93 9c 05 	sts	0x059C, r23	; 0x80059c <node+0x123>
    10c0:	60 93 9b 05 	sts	0x059B, r22	; 0x80059b <node+0x122>
    10c4:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <node+0x125>
    10c8:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <node+0x124>
    10cc:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <node+0x127>
    10d0:	10 92 9f 05 	sts	0x059F, r1	; 0x80059f <node+0x126>
    10d4:	d0 92 a2 05 	sts	0x05A2, r13	; 0x8005a2 <node+0x129>
    10d8:	c0 92 a1 05 	sts	0x05A1, r12	; 0x8005a1 <node+0x128>
    10dc:	50 93 a4 05 	sts	0x05A4, r21	; 0x8005a4 <node+0x12b>
    10e0:	40 93 a3 05 	sts	0x05A3, r20	; 0x8005a3 <node+0x12a>
    10e4:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <node+0x12d>
    10e8:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <node+0x12c>
    10ec:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <node+0x12f>
    10f0:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <node+0x12e>
    10f4:	0f 2e       	mov	r0, r31
    10f6:	ff e0       	ldi	r31, 0x0F	; 15
    10f8:	cf 2e       	mov	r12, r31
    10fa:	d1 2c       	mov	r13, r1
    10fc:	f0 2d       	mov	r31, r0
    10fe:	d0 92 aa 05 	sts	0x05AA, r13	; 0x8005aa <node+0x131>
    1102:	c0 92 a9 05 	sts	0x05A9, r12	; 0x8005a9 <node+0x130>
    1106:	30 93 ac 05 	sts	0x05AC, r19	; 0x8005ac <node+0x133>
    110a:	20 93 ab 05 	sts	0x05AB, r18	; 0x8005ab <node+0x132>
    110e:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <node+0x135>
    1112:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <node+0x134>
    1116:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <node+0x137>
    111a:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <node+0x136>
    111e:	d0 92 b2 05 	sts	0x05B2, r13	; 0x8005b2 <node+0x139>
    1122:	c0 92 b1 05 	sts	0x05B1, r12	; 0x8005b1 <node+0x138>
    1126:	90 93 b4 05 	sts	0x05B4, r25	; 0x8005b4 <node+0x13b>
    112a:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <node+0x13a>
    112e:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <node+0x13d>
    1132:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <node+0x13c>
    1136:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <node+0x13f>
    113a:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <node+0x13e>
    113e:	f0 93 ba 05 	sts	0x05BA, r31	; 0x8005ba <node+0x141>
    1142:	e0 93 b9 05 	sts	0x05B9, r30	; 0x8005b9 <node+0x140>
    1146:	f0 92 bc 05 	sts	0x05BC, r15	; 0x8005bc <node+0x143>
    114a:	e0 92 bb 05 	sts	0x05BB, r14	; 0x8005bb <node+0x142>
    114e:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <node+0x145>
    1152:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <node+0x144>
    1156:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <node+0x147>
    115a:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <node+0x146>
    115e:	f0 93 c2 05 	sts	0x05C2, r31	; 0x8005c2 <node+0x149>
    1162:	e0 93 c1 05 	sts	0x05C1, r30	; 0x8005c1 <node+0x148>
    1166:	10 93 c4 05 	sts	0x05C4, r17	; 0x8005c4 <node+0x14b>
    116a:	00 93 c3 05 	sts	0x05C3, r16	; 0x8005c3 <node+0x14a>
    116e:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <node+0x14d>
    1172:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <node+0x14c>
    1176:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <node+0x14f>
    117a:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <node+0x14e>
    117e:	10 93 ca 05 	sts	0x05CA, r17	; 0x8005ca <node+0x151>
    1182:	00 93 c9 05 	sts	0x05C9, r16	; 0x8005c9 <node+0x150>
    1186:	50 92 cc 05 	sts	0x05CC, r5	; 0x8005cc <node+0x153>
    118a:	40 92 cb 05 	sts	0x05CB, r4	; 0x8005cb <node+0x152>
    118e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <node+0x155>
    1192:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <node+0x154>
    1196:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <node+0x157>
    119a:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <node+0x156>
    119e:	70 93 d2 05 	sts	0x05D2, r23	; 0x8005d2 <node+0x159>
    11a2:	60 93 d1 05 	sts	0x05D1, r22	; 0x8005d1 <node+0x158>
    11a6:	b0 93 d4 05 	sts	0x05D4, r27	; 0x8005d4 <node+0x15b>
    11aa:	a0 93 d3 05 	sts	0x05D3, r26	; 0x8005d3 <node+0x15a>
    11ae:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <node+0x15d>
    11b2:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <node+0x15c>
    11b6:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <node+0x15f>
    11ba:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <node+0x15e>
    11be:	50 93 da 05 	sts	0x05DA, r21	; 0x8005da <node+0x161>
    11c2:	40 93 d9 05 	sts	0x05D9, r20	; 0x8005d9 <node+0x160>
    11c6:	30 92 dc 05 	sts	0x05DC, r3	; 0x8005dc <node+0x163>
    11ca:	20 92 db 05 	sts	0x05DB, r2	; 0x8005db <node+0x162>
    11ce:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <node+0x165>
    11d2:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <node+0x164>
    11d6:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <node+0x167>
    11da:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <node+0x166>
    11de:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <node+0x169>
    11e2:	20 93 e1 05 	sts	0x05E1, r18	; 0x8005e1 <node+0x168>
    11e6:	0d e2       	ldi	r16, 0x2D	; 45
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	10 93 e4 05 	sts	0x05E4, r17	; 0x8005e4 <node+0x16b>
    11ee:	00 93 e3 05 	sts	0x05E3, r16	; 0x8005e3 <node+0x16a>
    11f2:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <node+0x16d>
    11f6:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <node+0x16c>
    11fa:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <node+0x16f>
    11fe:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <node+0x16e>
    1202:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <node+0x171>
    1206:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <node+0x170>
    120a:	d0 93 ec 05 	sts	0x05EC, r29	; 0x8005ec <node+0x173>
    120e:	c0 93 eb 05 	sts	0x05EB, r28	; 0x8005eb <node+0x172>
    1212:	10 92 ee 05 	sts	0x05EE, r1	; 0x8005ee <node+0x175>
    1216:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <node+0x174>
    121a:	10 92 f0 05 	sts	0x05F0, r1	; 0x8005f0 <node+0x177>
    121e:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <node+0x176>
    1222:	f0 92 f2 05 	sts	0x05F2, r15	; 0x8005f2 <node+0x179>
    1226:	e0 92 f1 05 	sts	0x05F1, r14	; 0x8005f1 <node+0x178>
    122a:	2f e2       	ldi	r18, 0x2F	; 47
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	30 93 f4 05 	sts	0x05F4, r19	; 0x8005f4 <node+0x17b>
    1232:	20 93 f3 05 	sts	0x05F3, r18	; 0x8005f3 <node+0x17a>
    1236:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <node+0x17d>
    123a:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <node+0x17c>
    123e:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <node+0x17f>
    1242:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <node+0x17e>
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	6f 90       	pop	r6
    1262:	5f 90       	pop	r5
    1264:	4f 90       	pop	r4
    1266:	3f 90       	pop	r3
    1268:	2f 90       	pop	r2
    126a:	08 95       	ret

0000126c <__vector_25>:
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	0b b6       	in	r0, 0x3b	; 59
    1278:	0f 92       	push	r0
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    128a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    128e:	88 23       	and	r24, r24
    1290:	0c f0       	brlt	.+2      	; 0x1294 <__vector_25+0x28>
    1292:	58 c0       	rjmp	.+176    	; 0x1344 <__vector_25+0xd8>
    1294:	98 2f       	mov	r25, r24
    1296:	9f 77       	andi	r25, 0x7F	; 127
    1298:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <lastCommand>
    129c:	4e 2f       	mov	r20, r30
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	fa 01       	movw	r30, r20
    12a2:	31 97       	sbiw	r30, 0x01	; 1
    12a4:	ea 30       	cpi	r30, 0x0A	; 10
    12a6:	f1 05       	cpc	r31, r1
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <__vector_25+0x40>
    12aa:	53 c0       	rjmp	.+166    	; 0x1352 <__vector_25+0xe6>
    12ac:	88 27       	eor	r24, r24
    12ae:	ee 58       	subi	r30, 0x8E	; 142
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	8f 4f       	sbci	r24, 0xFF	; 255
    12b4:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__tablejump2__>
    12b8:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <noteCount>
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ed 5f       	subi	r30, 0xFD	; 253
    12c0:	fb 4f       	sbci	r31, 0xFB	; 251
    12c2:	90 83       	st	Z, r25
    12c4:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <noteCount>
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <noteCount>
    12ce:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <noteCount>
    12d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    12d6:	3d c0       	rjmp	.+122    	; 0x1352 <__vector_25+0xe6>
    12d8:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <taskCount>
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	e3 51       	subi	r30, 0x13	; 19
    12e0:	fc 4f       	sbci	r31, 0xFC	; 252
    12e2:	90 83       	st	Z, r25
    12e4:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <taskCount>
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <taskCount>
    12ee:	31 c0       	rjmp	.+98     	; 0x1352 <__vector_25+0xe6>
    12f0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <otherBotLocation>
    12f4:	2e c0       	rjmp	.+92     	; 0x1352 <__vector_25+0xe6>
    12f6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotMovingTo>
    12fa:	2b c0       	rjmp	.+86     	; 0x1352 <__vector_25+0xe6>
    12fc:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <noteToStrike>
    1300:	89 13       	cpse	r24, r25
    1302:	27 c0       	rjmp	.+78     	; 0x1352 <__vector_25+0xe6>
    1304:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <noteToStrike>
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <noteToStrike>
    130e:	21 c0       	rjmp	.+66     	; 0x1352 <__vector_25+0xe6>
    1310:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <noteToProcess>
    1314:	89 13       	cpse	r24, r25
    1316:	1d c0       	rjmp	.+58     	; 0x1352 <__vector_25+0xe6>
    1318:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <noteToProcess>
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <noteToProcess>
    1322:	17 c0       	rjmp	.+46     	; 0x1352 <__vector_25+0xe6>
    1324:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <taskCost>
    1328:	89 0f       	add	r24, r25
    132a:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <taskCost>
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <__vector_25+0xe6>
    1330:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <otherBotLastTaskIndex>
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <__vector_25+0xe6>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <botEnd+0x1>
    133e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <botEnd>
    1342:	07 c0       	rjmp	.+14     	; 0x1352 <__vector_25+0xe6>
    1344:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <lastCommand>
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	19 f4       	brne	.+6      	; 0x1352 <__vector_25+0xe6>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <notesReceived>
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	7f 91       	pop	r23
    135c:	6f 91       	pop	r22
    135e:	5f 91       	pop	r21
    1360:	4f 91       	pop	r20
    1362:	0f 90       	pop	r0
    1364:	0b be       	out	0x3b, r0	; 59
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <buzzer_pin_config>:
    1370:	3b 9a       	sbi	0x07, 3	; 7
    1372:	43 98       	cbi	0x08, 3	; 8
    1374:	08 95       	ret

00001376 <buzzer_on>:
    1376:	86 b1       	in	r24, 0x06	; 6
    1378:	88 60       	ori	r24, 0x08	; 8
    137a:	88 b9       	out	0x08, r24	; 8
    137c:	08 95       	ret

0000137e <buzzer_off>:
    137e:	86 b1       	in	r24, 0x06	; 6
    1380:	87 7f       	andi	r24, 0xF7	; 247
    1382:	88 b9       	out	0x08, r24	; 8
    1384:	08 95       	ret

00001386 <adc_pin_config>:
    1386:	10 ba       	out	0x10, r1	; 16
    1388:	11 ba       	out	0x11, r1	; 17
    138a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    138e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    1392:	08 95       	ret

00001394 <motion_pin_config>:
    1394:	81 b1       	in	r24, 0x01	; 1
    1396:	8f 60       	ori	r24, 0x0F	; 15
    1398:	81 b9       	out	0x01, r24	; 1
    139a:	82 b1       	in	r24, 0x02	; 2
    139c:	80 7f       	andi	r24, 0xF0	; 240
    139e:	82 b9       	out	0x02, r24	; 2
    13a0:	ea e0       	ldi	r30, 0x0A	; 10
    13a2:	f1 e0       	ldi	r31, 0x01	; 1
    13a4:	80 81       	ld	r24, Z
    13a6:	88 61       	ori	r24, 0x18	; 24
    13a8:	80 83       	st	Z, r24
    13aa:	eb e0       	ldi	r30, 0x0B	; 11
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	80 81       	ld	r24, Z
    13b0:	88 61       	ori	r24, 0x18	; 24
    13b2:	80 83       	st	Z, r24
    13b4:	08 95       	ret

000013b6 <left_encoder_pin_config>:
    13b6:	6c 98       	cbi	0x0d, 4	; 13
    13b8:	74 9a       	sbi	0x0e, 4	; 14
    13ba:	08 95       	ret

000013bc <right_encoder_pin_config>:
    13bc:	6d 98       	cbi	0x0d, 5	; 13
    13be:	75 9a       	sbi	0x0e, 5	; 14
    13c0:	08 95       	ret

000013c2 <port_init>:
    13c2:	e8 df       	rcall	.-48     	; 0x1394 <motion_pin_config>
    13c4:	f8 df       	rcall	.-16     	; 0x13b6 <left_encoder_pin_config>
    13c6:	fa df       	rcall	.-12     	; 0x13bc <right_encoder_pin_config>
    13c8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_port_config>
    13cc:	dc df       	rcall	.-72     	; 0x1386 <adc_pin_config>
    13ce:	d0 cf       	rjmp	.-96     	; 0x1370 <buzzer_pin_config>
    13d0:	08 95       	ret

000013d2 <timer5_init>:
    13d2:	e1 e2       	ldi	r30, 0x21	; 33
    13d4:	f1 e0       	ldi	r31, 0x01	; 1
    13d6:	10 82       	st	Z, r1
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    13e4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    13e8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    13ec:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    13f0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    13f4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    13f8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    13fc:	89 ea       	ldi	r24, 0xA9	; 169
    13fe:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1402:	8b e0       	ldi	r24, 0x0B	; 11
    1404:	80 83       	st	Z, r24
    1406:	08 95       	ret

00001408 <adc_init>:
    1408:	ea e7       	ldi	r30, 0x7A	; 122
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	10 82       	st	Z, r1
    140e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1418:	80 e8       	ldi	r24, 0x80	; 128
    141a:	80 bf       	out	0x30, r24	; 48
    141c:	86 e8       	ldi	r24, 0x86	; 134
    141e:	80 83       	st	Z, r24
    1420:	08 95       	ret

00001422 <ADC_Conversion>:
    1422:	88 30       	cpi	r24, 0x08	; 8
    1424:	18 f0       	brcs	.+6      	; 0x142c <ADC_Conversion+0xa>
    1426:	98 e0       	ldi	r25, 0x08	; 8
    1428:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    142c:	87 70       	andi	r24, 0x07	; 7
    142e:	80 62       	ori	r24, 0x20	; 32
    1430:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1434:	ea e7       	ldi	r30, 0x7A	; 122
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 64       	ori	r24, 0x40	; 64
    143c:	80 83       	st	Z, r24
    143e:	80 81       	ld	r24, Z
    1440:	84 ff       	sbrs	r24, 4
    1442:	fd cf       	rjmp	.-6      	; 0x143e <ADC_Conversion+0x1c>
    1444:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1448:	ea e7       	ldi	r30, 0x7A	; 122
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	90 81       	ld	r25, Z
    144e:	90 61       	ori	r25, 0x10	; 16
    1450:	90 83       	st	Z, r25
    1452:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1456:	08 95       	ret

00001458 <print_sensor>:
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	c8 2f       	mov	r28, r24
    145e:	d6 2f       	mov	r29, r22
    1460:	84 2f       	mov	r24, r20
    1462:	df df       	rcall	.-66     	; 0x1422 <ADC_Conversion>
    1464:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <ADC_Value>
    1468:	48 2f       	mov	r20, r24
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	23 e0       	ldi	r18, 0x03	; 3
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	6d 2f       	mov	r22, r29
    1472:	8c 2f       	mov	r24, r28
    1474:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <left_position_encoder_interrupt_init>:
    147e:	f8 94       	cli
    1480:	ea e6       	ldi	r30, 0x6A	; 106
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	80 83       	st	Z, r24
    148a:	ec 9a       	sbi	0x1d, 4	; 29
    148c:	78 94       	sei
    148e:	08 95       	ret

00001490 <right_position_encoder_interrupt_init>:
    1490:	f8 94       	cli
    1492:	ea e6       	ldi	r30, 0x6A	; 106
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 60       	ori	r24, 0x08	; 8
    149a:	80 83       	st	Z, r24
    149c:	ed 9a       	sbi	0x1d, 5	; 29
    149e:	78 94       	sei
    14a0:	08 95       	ret

000014a2 <__vector_6>:
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	af 93       	push	r26
    14b2:	bf 93       	push	r27
    14b4:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ShaftCountRight>
    14b8:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <ShaftCountRight+0x1>
    14bc:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <ShaftCountRight+0x2>
    14c0:	b0 91 dd 03 	lds	r27, 0x03DD	; 0x8003dd <ShaftCountRight+0x3>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	a1 1d       	adc	r26, r1
    14c8:	b1 1d       	adc	r27, r1
    14ca:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <ShaftCountRight>
    14ce:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <ShaftCountRight+0x1>
    14d2:	a0 93 dc 03 	sts	0x03DC, r26	; 0x8003dc <ShaftCountRight+0x2>
    14d6:	b0 93 dd 03 	sts	0x03DD, r27	; 0x8003dd <ShaftCountRight+0x3>
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_5>:
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <ShaftCountLeft>
    1502:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <ShaftCountLeft+0x1>
    1506:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <ShaftCountLeft+0x2>
    150a:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <ShaftCountLeft+0x3>
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	a1 1d       	adc	r26, r1
    1512:	b1 1d       	adc	r27, r1
    1514:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <ShaftCountLeft>
    1518:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <ShaftCountLeft+0x1>
    151c:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <ShaftCountLeft+0x2>
    1520:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <ShaftCountLeft+0x3>
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <motion_set>:
    1536:	92 b1       	in	r25, 0x02	; 2
    1538:	90 7f       	andi	r25, 0xF0	; 240
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	98 2b       	or	r25, r24
    153e:	92 b9       	out	0x02, r25	; 2
    1540:	08 95       	ret

00001542 <forward>:
    1542:	86 e0       	ldi	r24, 0x06	; 6
    1544:	f8 cf       	rjmp	.-16     	; 0x1536 <motion_set>
    1546:	08 95       	ret

00001548 <left>:
    1548:	85 e0       	ldi	r24, 0x05	; 5
    154a:	f5 cf       	rjmp	.-22     	; 0x1536 <motion_set>
    154c:	08 95       	ret

0000154e <right>:
    154e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <thresh>
    1552:	f1 cf       	rjmp	.-30     	; 0x1536 <motion_set>
    1554:	08 95       	ret

00001556 <stop>:
}

void stop (void)
{
	motion_set(0x00);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	ee cf       	rjmp	.-36     	; 0x1536 <motion_set>
    155a:	08 95       	ret

0000155c <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1568:	bc 01       	movw	r22, r24
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	6f d6       	rcall	.+3294   	; 0x224e <__floatunsisf>
    1570:	28 e4       	ldi	r18, 0x48	; 72
    1572:	31 ee       	ldi	r19, 0xE1	; 225
    1574:	42 e8       	ldi	r20, 0x82	; 130
    1576:	50 e4       	ldi	r21, 0x40	; 64
    1578:	d6 d5       	rcall	.+2988   	; 0x2126 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    157a:	3d d6       	rcall	.+3194   	; 0x21f6 <__fixunssfsi>
    157c:	ab 01       	movw	r20, r22
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	70 e0       	ldi	r23, 0x00	; 0
	ShaftCountRight = 0;
    1582:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <ShaftCountRight>
    1586:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <ShaftCountRight+0x1>
    158a:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <ShaftCountRight+0x2>
    158e:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
    1592:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <ShaftCountLeft>
    1596:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <ShaftCountLeft+0x1>
    159a:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <ShaftCountLeft+0x2>
    159e:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <ShaftCountLeft+0x3>

	while (1)
	{
		//lcd_print(1,5,ShaftCountRight,3);
		//lcd_print(2,10,ShaftCountRight,2);
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	e0 e0       	ldi	r30, 0x00	; 0
    15a6:	c0 90 da 03 	lds	r12, 0x03DA	; 0x8003da <ShaftCountRight>
    15aa:	d0 90 db 03 	lds	r13, 0x03DB	; 0x8003db <ShaftCountRight+0x1>
    15ae:	e0 90 dc 03 	lds	r14, 0x03DC	; 0x8003dc <ShaftCountRight+0x2>
    15b2:	f0 90 dd 03 	lds	r15, 0x03DD	; 0x8003dd <ShaftCountRight+0x3>
    15b6:	00 91 de 03 	lds	r16, 0x03DE	; 0x8003de <ShaftCountLeft>
    15ba:	10 91 df 03 	lds	r17, 0x03DF	; 0x8003df <ShaftCountLeft+0x1>
    15be:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <ShaftCountLeft+0x2>
    15c2:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <ShaftCountLeft+0x3>
    15c6:	89 2f       	mov	r24, r25
    15c8:	04 17       	cp	r16, r20
    15ca:	15 07       	cpc	r17, r21
    15cc:	26 07       	cpc	r18, r22
    15ce:	37 07       	cpc	r19, r23
    15d0:	08 f4       	brcc	.+2      	; 0x15d4 <angle_rotate+0x78>
    15d2:	8e 2f       	mov	r24, r30
    15d4:	81 11       	cpse	r24, r1
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <angle_rotate+0x8e>
    15d8:	89 2f       	mov	r24, r25
    15da:	c4 16       	cp	r12, r20
    15dc:	d5 06       	cpc	r13, r21
    15de:	e6 06       	cpc	r14, r22
    15e0:	f7 06       	cpc	r15, r23
    15e2:	08 f4       	brcc	.+2      	; 0x15e6 <angle_rotate+0x8a>
    15e4:	8e 2f       	mov	r24, r30
    15e6:	88 23       	and	r24, r24
    15e8:	f1 f2       	breq	.-68     	; 0x15a6 <angle_rotate+0x4a>
		break;
	}
	//stop(); //Stop robot
}
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	08 95       	ret

000015f8 <left_degrees>:



void left_degrees(unsigned int Degrees)
{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    15fe:	a4 df       	rcall	.-184    	; 0x1548 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1606:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	velocity(255,255);
	angle_rotate(Degrees);
    160a:	ce 01       	movw	r24, r28
    160c:	a7 df       	rcall	.-178    	; 0x155c <angle_rotate>
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    161a:	99 df       	rcall	.-206    	; 0x154e <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    161c:	9f ef       	ldi	r25, 0xFF	; 255
    161e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1622:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	velocity(255,255);
	angle_rotate(Degrees);
    1626:	ce 01       	movw	r24, r28
    1628:	99 df       	rcall	.-206    	; 0x155c <angle_rotate>
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    1636:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    163a:	08 95       	ret

0000163c <init_devices>:
}

void init_devices()
{
	cli(); //Clears the global interrupt
    163c:	f8 94       	cli
	port_init();  //Initializes all the ports
    163e:	c1 de       	rcall	.-638    	; 0x13c2 <port_init>
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    1640:	e1 ec       	ldi	r30, 0xC1	; 193
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    1646:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    164a:	26 e0       	ldi	r18, 0x06	; 6
    164c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    1650:	9f e5       	ldi	r25, 0x5F	; 95
    1652:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    1656:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    165a:	88 e9       	ldi	r24, 0x98	; 152
    165c:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    165e:	e1 ed       	ldi	r30, 0xD1	; 209
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    1664:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    1668:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    166c:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    1670:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    1674:	80 83       	st	Z, r24
{
	cli(); //Clears the global interrupt
	port_init();  //Initializes all the ports
	uart0_init();	//init Zigbee comm
	uart2_init();	//init PC - USB comm
	left_position_encoder_interrupt_init();
    1676:	03 df       	rcall	.-506    	; 0x147e <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1678:	0b df       	rcall	.-490    	; 0x1490 <right_position_encoder_interrupt_init>
	adc_init();
    167a:	c6 de       	rcall	.-628    	; 0x1408 <adc_init>
	timer5_init();
    167c:	aa de       	rcall	.-684    	; 0x13d2 <timer5_init>
	lcd_set_4bit();
    167e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_set_4bit>
	lcd_init();
    1682:	0e 94 43 01 	call	0x286	; 0x286 <lcd_init>
	LED_bargraph_config();
    1686:	d4 df       	rcall	.-88     	; 0x1630 <LED_bargraph_config>
	sei();   // Enables the global interrupt
    1688:	78 94       	sei
    168a:	08 95       	ret

0000168c <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    168c:	bc 01       	movw	r22, r24
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	dd d5       	rcall	.+3002   	; 0x224e <__floatunsisf>
    1694:	25 ee       	ldi	r18, 0xE5	; 229
    1696:	30 ed       	ldi	r19, 0xD0	; 208
    1698:	4a ea       	ldi	r20, 0xAA	; 170
    169a:	50 e4       	ldi	r21, 0x40	; 64
    169c:	44 d5       	rcall	.+2696   	; 0x2126 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    169e:	ab d5       	rcall	.+2902   	; 0x21f6 <__fixunssfsi>
    16a0:	ab 01       	movw	r20, r22
    16a2:	bc 01       	movw	r22, r24
	ShaftCountRight = 0;
    16a4:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <ShaftCountRight>
    16a8:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <ShaftCountRight+0x1>
    16ac:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <ShaftCountRight+0x2>
    16b0:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <ShaftCountRight+0x3>
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    16b4:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ShaftCountRight>
    16b8:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <ShaftCountRight+0x1>
    16bc:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <ShaftCountRight+0x2>
    16c0:	b0 91 dd 03 	lds	r27, 0x03DD	; 0x8003dd <ShaftCountRight+0x3>
    16c4:	48 17       	cp	r20, r24
    16c6:	59 07       	cpc	r21, r25
    16c8:	6a 07       	cpc	r22, r26
    16ca:	7b 07       	cpc	r23, r27
    16cc:	98 f7       	brcc	.-26     	; 0x16b4 <linear_distance_mm+0x28>
		{
			break;
		}
	}
	stop(); //Stop robot
    16ce:	43 cf       	rjmp	.-378    	; 0x1556 <stop>
    16d0:	08 95       	ret

000016d2 <forward_mm>:
}


void forward_mm(unsigned int DistanceInMM)
{
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	ec 01       	movw	r28, r24
	forward();
    16d8:	34 df       	rcall	.-408    	; 0x1542 <forward>
	velocity(speed,speed);
    16da:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16de:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    16e2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(speed,speed);
	linear_distance_mm(DistanceInMM);
    16e6:	ce 01       	movw	r24, r28
    16e8:	d1 df       	rcall	.-94     	; 0x168c <linear_distance_mm>
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    16f0:	4f 92       	push	r4
    16f2:	5f 92       	push	r5
    16f4:	6f 92       	push	r6
    16f6:	7f 92       	push	r7
    16f8:	8f 92       	push	r8
    16fa:	9f 92       	push	r9
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	c0 5c       	subi	r28, 0xC0	; 192
    1716:	d1 09       	sbc	r29, r1
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
    1722:	de 01       	movw	r26, r28
    1724:	af 59       	subi	r26, 0x9F	; 159
    1726:	bf 4f       	sbci	r27, 0xFF	; 255
    1728:	20 e6       	ldi	r18, 0x60	; 96
    172a:	fd 01       	movw	r30, r26
    172c:	11 92       	st	Z+, r1
    172e:	2a 95       	dec	r18
    1730:	e9 f7       	brne	.-6      	; 0x172c <costplan+0x3c>
    1732:	e9 e1       	ldi	r30, 0x19	; 25
    1734:	f4 e0       	ldi	r31, 0x04	; 4
    1736:	8e 01       	movw	r16, r28
    1738:	0f 5f       	subi	r16, 0xFF	; 255
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	78 01       	movw	r14, r16
    173e:	6d 01       	movw	r12, r26
    1740:	09 e7       	ldi	r16, 0x79	; 121
    1742:	14 e0       	ldi	r17, 0x04	; 4
    1744:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    1746:	63 e6       	ldi	r22, 0x63	; 99
    1748:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    174a:	4f ef       	ldi	r20, 0xFF	; 255
    174c:	5f ef       	ldi	r21, 0xFF	; 255
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    174e:	61 93       	st	Z+, r22
    1750:	71 93       	st	Z+, r23
		list[j]=-1;
    1752:	d9 01       	movw	r26, r18
    1754:	4d 93       	st	X+, r20
    1756:	5d 93       	st	X+, r21
    1758:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    175a:	d6 01       	movw	r26, r12
    175c:	1d 92       	st	X+, r1
    175e:	1d 92       	st	X+, r1
    1760:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    1762:	e0 17       	cp	r30, r16
    1764:	f1 07       	cpc	r31, r17
    1766:	99 f7       	brne	.-26     	; 0x174e <costplan+0x5e>
    1768:	fc 01       	movw	r30, r24
    176a:	ac 01       	movw	r20, r24
    176c:	44 5f       	subi	r20, 0xF4	; 244
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{
			cost[note_loc[j]-1]=0;
			k=k+1;
			list[k]=note_loc[j];   // It is the list of nodes to explore
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    1778:	20 81       	ld	r18, Z
    177a:	31 81       	ldd	r19, Z+1	; 0x01
    177c:	21 15       	cp	r18, r1
    177e:	31 05       	cpc	r19, r1
    1780:	09 f1       	breq	.+66     	; 0x17c4 <costplan+0xd4>
		{
			cost[note_loc[j]-1]=0;
    1782:	22 0f       	add	r18, r18
    1784:	33 1f       	adc	r19, r19
    1786:	d9 01       	movw	r26, r18
    1788:	a9 5e       	subi	r26, 0xE9	; 233
    178a:	bb 4f       	sbci	r27, 0xFB	; 251
    178c:	1d 92       	st	X+, r1
    178e:	1c 92       	st	X, r1
			k=k+1;
    1790:	01 96       	adiw	r24, 0x01	; 1
			list[k]=note_loc[j];   // It is the list of nodes to explore
    1792:	20 81       	ld	r18, Z
    1794:	31 81       	ldd	r19, Z+1	; 0x01
    1796:	dc 01       	movw	r26, r24
    1798:	aa 0f       	add	r26, r26
    179a:	bb 1f       	adc	r27, r27
    179c:	01 e0       	ldi	r16, 0x01	; 1
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	0c 0f       	add	r16, r28
    17a2:	1d 1f       	adc	r17, r29
    17a4:	a0 0f       	add	r26, r16
    17a6:	b1 1f       	adc	r27, r17
    17a8:	2d 93       	st	X+, r18
    17aa:	3c 93       	st	X, r19
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    17ac:	d9 01       	movw	r26, r18
    17ae:	11 97       	sbiw	r26, 0x01	; 1
    17b0:	aa 0f       	add	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	21 e6       	ldi	r18, 0x61	; 97
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	2c 0f       	add	r18, r28
    17ba:	3d 1f       	adc	r19, r29
    17bc:	a2 0f       	add	r26, r18
    17be:	b3 1f       	adc	r27, r19
    17c0:	6d 93       	st	X+, r22
    17c2:	7c 93       	st	X, r23
    17c4:	32 96       	adiw	r30, 0x02	; 2
	{
		cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    17c6:	e4 17       	cp	r30, r20
    17c8:	f5 07       	cpc	r31, r21
    17ca:	b1 f6       	brne	.-84     	; 0x1778 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    17cc:	ae 2c       	mov	r10, r14
    17ce:	9f 2c       	mov	r9, r15
    17d0:	81 2c       	mov	r8, r1
    17d2:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}
		k=k-1;
    17d4:	68 94       	set
    17d6:	bb 24       	eor	r11, r11
    17d8:	b2 f8       	bld	r11, 2
    17da:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
				cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    17dc:	cc 24       	eor	r12, r12
    17de:	c3 94       	inc	r12
    17e0:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    17e2:	a9 81       	ldd	r26, Y+1	; 0x01
    17e4:	ba 81       	ldd	r27, Y+2	; 0x02
    17e6:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    17e8:	99 23       	and	r25, r25
    17ea:	6c f0       	brlt	.+26     	; 0x1806 <costplan+0x116>
    17ec:	ea 2d       	mov	r30, r10
    17ee:	f9 2d       	mov	r31, r9
    17f0:	28 2d       	mov	r18, r8
    17f2:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	42 81       	ldd	r20, Z+2	; 0x02
    17fa:	53 81       	ldd	r21, Z+3	; 0x03
    17fc:	41 93       	st	Z+, r20
    17fe:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1800:	82 17       	cp	r24, r18
    1802:	93 07       	cpc	r25, r19
    1804:	bc f7       	brge	.-18     	; 0x17f4 <costplan+0x104>
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	fd 01       	movw	r30, r26
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	ee 0f       	add	r30, r30
    1810:	ff 1f       	adc	r31, r31
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	e7 58       	subi	r30, 0x87	; 135
    1818:	fb 4f       	sbci	r31, 0xFB	; 251
    181a:	2b 2d       	mov	r18, r11
    181c:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    181e:	aa 0f       	add	r26, r26
    1820:	bb 1f       	adc	r27, r27
    1822:	ad 01       	movw	r20, r26
    1824:	47 5e       	subi	r20, 0xE7	; 231
    1826:	5b 4f       	sbci	r21, 0xFB	; 251
    1828:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    182a:	61 91       	ld	r22, Z+
    182c:	71 91       	ld	r23, Z+
    182e:	61 15       	cp	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	d1 f1       	breq	.+116    	; 0x18a8 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1834:	d2 01       	movw	r26, r4
    1836:	0d 91       	ld	r16, X+
    1838:	1c 91       	ld	r17, X
    183a:	0f 5f       	subi	r16, 0xFF	; 255
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	ab 01       	movw	r20, r22
    1840:	41 50       	subi	r20, 0x01	; 1
    1842:	51 09       	sbc	r21, r1
    1844:	7a 01       	movw	r14, r20
    1846:	ee 0c       	add	r14, r14
    1848:	ff 1c       	adc	r15, r15
    184a:	d7 01       	movw	r26, r14
    184c:	a7 5e       	subi	r26, 0xE7	; 231
    184e:	bb 4f       	sbci	r27, 0xFB	; 251
    1850:	ed 90       	ld	r14, X+
    1852:	fc 90       	ld	r15, X
    1854:	e0 16       	cp	r14, r16
    1856:	f1 06       	cpc	r15, r17
    1858:	44 f0       	brlt	.+16     	; 0x186a <costplan+0x17a>
				cost[node[s][i]-1]=(cost[s]+1);
    185a:	7a 01       	movw	r14, r20
    185c:	ee 0c       	add	r14, r14
    185e:	ff 1c       	adc	r15, r15
    1860:	d7 01       	movw	r26, r14
    1862:	a7 5e       	subi	r26, 0xE7	; 231
    1864:	bb 4f       	sbci	r27, 0xFB	; 251
    1866:	0d 93       	st	X+, r16
    1868:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    186a:	8a 01       	movw	r16, r20
    186c:	00 0f       	add	r16, r16
    186e:	11 1f       	adc	r17, r17
    1870:	a1 e6       	ldi	r26, 0x61	; 97
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ac 0f       	add	r26, r28
    1876:	bd 1f       	adc	r27, r29
    1878:	0a 0f       	add	r16, r26
    187a:	1b 1f       	adc	r17, r27
    187c:	d8 01       	movw	r26, r16
    187e:	0d 91       	ld	r16, X+
    1880:	1c 91       	ld	r17, X
    1882:	11 97       	sbiw	r26, 0x01	; 1
    1884:	01 30       	cpi	r16, 0x01	; 1
    1886:	11 05       	cpc	r17, r1
    1888:	79 f0       	breq	.+30     	; 0x18a8 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    188a:	cd 92       	st	X+, r12
    188c:	dc 92       	st	X, r13
					k=k+1;
    188e:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    1890:	ac 01       	movw	r20, r24
    1892:	44 0f       	add	r20, r20
    1894:	55 1f       	adc	r21, r21
    1896:	01 e0       	ldi	r16, 0x01	; 1
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	0c 0f       	add	r16, r28
    189c:	1d 1f       	adc	r17, r29
    189e:	40 0f       	add	r20, r16
    18a0:	51 1f       	adc	r21, r17
    18a2:	da 01       	movw	r26, r20
    18a4:	6d 93       	st	X+, r22
    18a6:	7c 93       	st	X, r23
    18a8:	21 50       	subi	r18, 0x01	; 1
    18aa:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
		{
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <costplan+0x1c0>
    18ae:	bd cf       	rjmp	.-134    	; 0x182a <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 || k!=-1);
    18b0:	29 81       	ldd	r18, Y+1	; 0x01
    18b2:	3a 81       	ldd	r19, Y+2	; 0x02
    18b4:	2f 3f       	cpi	r18, 0xFF	; 255
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	09 f0       	breq	.+2      	; 0x18bc <costplan+0x1cc>
    18ba:	93 cf       	rjmp	.-218    	; 0x17e2 <costplan+0xf2>
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	ef ef       	ldi	r30, 0xFF	; 255
    18c0:	9e 07       	cpc	r25, r30
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <costplan+0x1d6>
    18c4:	8e cf       	rjmp	.-228    	; 0x17e2 <costplan+0xf2>
}
    18c6:	c0 54       	subi	r28, 0x40	; 64
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	8f 90       	pop	r8
    18ec:	7f 90       	pop	r7
    18ee:	6f 90       	pop	r6
    18f0:	5f 90       	pop	r5
    18f2:	4f 90       	pop	r4
    18f4:	08 95       	ret

000018f6 <rotate>:

void rotate(int turnang)
{
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
	if(turnang<0)
    1900:	99 23       	and	r25, r25
    1902:	44 f4       	brge	.+16     	; 0x1914 <rotate+0x1e>
	{
		turnang=-turnang;
		right_degrees(turnang-20);
    1904:	2c ee       	ldi	r18, 0xEC	; 236
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	a9 01       	movw	r20, r18
    190a:	48 1b       	sub	r20, r24
    190c:	59 0b       	sbc	r21, r25
    190e:	ca 01       	movw	r24, r20
    1910:	81 de       	rcall	.-766    	; 0x1614 <right_degrees>
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <rotate+0x22>
	}
	else
	{
		left_degrees(turnang-20);
    1914:	44 97       	sbiw	r24, 0x14	; 20
    1916:	70 de       	rcall	.-800    	; 0x15f8 <left_degrees>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1918:	0f 2e       	mov	r0, r31
    191a:	f8 e2       	ldi	r31, 0x28	; 40
    191c:	ef 2e       	mov	r14, r31
    191e:	ff 24       	eor	r15, r15
    1920:	f3 94       	inc	r15
    1922:	f0 2d       	mov	r31, r0
    1924:	c6 e9       	ldi	r28, 0x96	; 150
	OCR5BL = (unsigned char)right_motor;
    1926:	0a e2       	ldi	r16, 0x2A	; 42
    1928:	11 e0       	ldi	r17, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    192a:	f7 01       	movw	r30, r14
    192c:	c0 83       	st	Z, r28
	OCR5BL = (unsigned char)right_motor;
    192e:	f8 01       	movw	r30, r16
    1930:	c0 83       	st	Z, r28
		left_degrees(turnang-20);
	}
	while(1)
	{
		velocity(150,150);
		Center_white_line = ADC_Conversion(2);
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	76 dd       	rcall	.-1300   	; 0x1422 <ADC_Conversion>
    1936:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <Center_white_line>
		print_sensor(1,5,2);
    193a:	42 e0       	ldi	r20, 0x02	; 2
    193c:	65 e0       	ldi	r22, 0x05	; 5
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	8b dd       	rcall	.-1258   	; 0x1458 <print_sensor>
		if(Center_white_line>thresh)
    1942:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <Center_white_line>
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <thresh>
    194c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <thresh+0x1>
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	54 f7       	brge	.-44     	; 0x192a <rotate+0x34>
			break;
	}
	stop();
    1956:	ff dd       	rcall	.-1026   	; 0x1556 <stop>
}
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	08 95       	ret

00001964 <move>:

int move(int n)
{
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	ec 01       	movw	r28, r24
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    1972:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <botloc>
    1976:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <botloc+0x1>
    197a:	31 97       	sbiw	r30, 0x01	; 1
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	e8 0f       	add	r30, r24
    1986:	f9 1f       	adc	r31, r25
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	e2 50       	subi	r30, 0x02	; 2
    198e:	fa 4f       	sbci	r31, 0xFA	; 250
    1990:	00 81       	ld	r16, Z
    1992:	11 81       	ldd	r17, Z+1	; 0x01
    1994:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <botang>
    1998:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <botang+0x1>
    199c:	08 1b       	sub	r16, r24
    199e:	19 0b       	sbc	r17, r25
	if(fabs(turnang)>45)
    19a0:	b8 01       	movw	r22, r16
    19a2:	01 2e       	mov	r0, r17
    19a4:	00 0c       	add	r0, r0
    19a6:	88 0b       	sbc	r24, r24
    19a8:	99 0b       	sbc	r25, r25
    19aa:	53 d4       	rcall	.+2214   	; 0x2252 <__floatsisf>
    19ac:	9f 77       	andi	r25, 0x7F	; 127
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	44 e3       	ldi	r20, 0x34	; 52
    19b4:	52 e4       	ldi	r21, 0x42	; 66
    19b6:	d9 d4       	rcall	.+2482   	; 0x236a <__gesf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <move+0x62>
	{
		forward_mm(70);
    19bc:	86 e4       	ldi	r24, 0x46	; 70
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	88 de       	rcall	.-752    	; 0x16d2 <forward_mm>
		rotate(turnang);
    19c2:	c8 01       	movw	r24, r16
    19c4:	98 df       	rcall	.-208    	; 0x18f6 <rotate>
	}
	botang=angle[botloc-1][n];
    19c6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <botloc>
    19ca:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <botloc+0x1>
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	c8 0f       	add	r28, r24
    19da:	d9 1f       	adc	r29, r25
    19dc:	cc 0f       	add	r28, r28
    19de:	dd 1f       	adc	r29, r29
    19e0:	c2 50       	subi	r28, 0x02	; 2
    19e2:	da 4f       	sbci	r29, 0xFA	; 250
    19e4:	88 81       	ld	r24, Y
    19e6:	99 81       	ldd	r25, Y+1	; 0x01
    19e8:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <botang+0x1>
    19ec:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <botang>
	forward();
    19f0:	a8 dd       	rcall	.-1200   	; 0x1542 <forward>
	int flag=0;
	ShaftCountRight=0;
    19f2:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <ShaftCountRight>
    19f6:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <ShaftCountRight+0x1>
    19fa:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <ShaftCountRight+0x2>
    19fe:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <ShaftCountRight+0x3>
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(speed,0);
    1a02:	0f 2e       	mov	r0, r31
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	ef 2e       	mov	r14, r31
    1a08:	f2 e0       	ldi	r31, 0x02	; 2
    1a0a:	ff 2e       	mov	r15, r31
    1a0c:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1a0e:	08 e2       	ldi	r16, 0x28	; 40
    1a10:	11 e0       	ldi	r17, 0x01	; 1
	OCR5BL = (unsigned char)right_motor;
    1a12:	ca e2       	ldi	r28, 0x2A	; 42
    1a14:	d1 e0       	ldi	r29, 0x01	; 1
	int flag=0;
	ShaftCountRight=0;
	while(1)
	{
		flag=0;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	04 dd       	rcall	.-1528   	; 0x1422 <ADC_Conversion>
    1a1a:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	00 dd       	rcall	.-1536   	; 0x1422 <ADC_Conversion>
    1a22:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	fc dc       	rcall	.-1544   	; 0x1422 <ADC_Conversion>
    1a2a:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    1a2e:	86 e0       	ldi	r24, 0x06	; 6
    1a30:	f8 dc       	rcall	.-1552   	; 0x1422 <ADC_Conversion>
    1a32:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <__data_end>
		
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    1a36:	43 e0       	ldi	r20, 0x03	; 3
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	0d dd       	rcall	.-1510   	; 0x1458 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    1a3e:	42 e0       	ldi	r20, 0x02	; 2
    1a40:	65 e0       	ldi	r22, 0x05	; 5
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	09 dd       	rcall	.-1518   	; 0x1458 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	69 e0       	ldi	r22, 0x09	; 9
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	05 dd       	rcall	.-1526   	; 0x1458 <print_sensor>
		print_sensor(1,13,6);	//Front ir sensor Value
    1a4e:	46 e0       	ldi	r20, 0x06	; 6
    1a50:	6d e0       	ldi	r22, 0x0D	; 13
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	01 dd       	rcall	.-1534   	; 0x1458 <print_sensor>
			if(botang<0)
			botang+=360;
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
    1a56:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <thresh>
    1a5a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <thresh+0x1>
    1a5e:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <Center_white_line>
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	82 17       	cp	r24, r18
    1a66:	93 07       	cpc	r25, r19
    1a68:	6c f4       	brge	.+26     	; 0x1a84 <move+0x120>
    1a6a:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <Left_white_line>
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	82 17       	cp	r24, r18
    1a72:	93 07       	cpc	r25, r19
    1a74:	94 f1       	brlt	.+100    	; 0x1ada <move+0x176>
    1a76:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <Right_white_line>
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	82 17       	cp	r24, r18
    1a7e:	93 07       	cpc	r25, r19
    1a80:	cc f1       	brlt	.+114    	; 0x1af4 <move+0x190>
    1a82:	45 c0       	rjmp	.+138    	; 0x1b0e <move+0x1aa>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1a84:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <Left_white_line>
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	82 17       	cp	r24, r18
    1a8c:	93 07       	cpc	r25, r19
    1a8e:	0c f0       	brlt	.+2      	; 0x1a92 <move+0x12e>
    1a90:	4d c0       	rjmp	.+154    	; 0x1b2c <move+0x1c8>
		{
			//flag=1;
			forward();
    1a92:	57 dd       	rcall	.-1362   	; 0x1542 <forward>
			lcd_print(2,1,1,3);
    1a94:	23 e0       	ldi	r18, 0x03	; 3
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
			velocity(0,speed);
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1aac:	88 83       	st	Y, r24
    1aae:	b3 cf       	rjmp	.-154    	; 0x1a16 <move+0xb2>
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
    1ab0:	48 dd       	rcall	.-1392   	; 0x1542 <forward>
			lcd_print(2,1,2,3);
    1ab2:	23 e0       	ldi	r18, 0x03	; 3
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	42 e0       	ldi	r20, 0x02	; 2
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
			velocity(speed,0);
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1aca:	18 82       	st	Y, r1
    1acc:	a4 cf       	rjmp	.-184    	; 0x1a16 <move+0xb2>
			lcd_print(2,1,0,3);
			//flag=1;
		}
		else
		{
			velocity(speed,speed);
    1ace:	f7 01       	movw	r30, r14
    1ad0:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1ad6:	88 83       	st	Y, r24
    1ad8:	9e cf       	rjmp	.-196    	; 0x1a16 <move+0xb2>
			if(botang<0)
			botang+=360;
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
    1ada:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ShaftCountRight>
    1ade:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <ShaftCountRight+0x1>
    1ae2:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <ShaftCountRight+0x2>
    1ae6:	b0 91 dd 03 	lds	r27, 0x03DD	; 0x8003dd <ShaftCountRight+0x3>
    1aea:	0b 97       	sbiw	r24, 0x0b	; 11
    1aec:	a1 05       	cpc	r26, r1
    1aee:	b1 05       	cpc	r27, r1
    1af0:	80 f2       	brcs	.-96     	; 0x1a92 <move+0x12e>
    1af2:	23 c0       	rjmp	.+70     	; 0x1b3a <move+0x1d6>
    1af4:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <ShaftCountRight>
    1af8:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <ShaftCountRight+0x1>
    1afc:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <ShaftCountRight+0x2>
    1b00:	b0 91 dd 03 	lds	r27, 0x03DD	; 0x8003dd <ShaftCountRight+0x3>
    1b04:	0b 97       	sbiw	r24, 0x0b	; 11
    1b06:	a1 05       	cpc	r26, r1
    1b08:	b1 05       	cpc	r27, r1
    1b0a:	90 f2       	brcs	.-92     	; 0x1ab0 <move+0x14c>
    1b0c:	16 c0       	rjmp	.+44     	; 0x1b3a <move+0x1d6>
			lcd_print(2,1,2,3);
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
		{
			forward();
    1b0e:	19 dd       	rcall	.-1486   	; 0x1542 <forward>
			velocity(speed,speed);
    1b10:	f7 01       	movw	r30, r14
    1b12:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b14:	f8 01       	movw	r30, r16
    1b16:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1b18:	88 83       	st	Y, r24
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
    1b1a:	23 e0       	ldi	r18, 0x03	; 3
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
    1b2a:	75 cf       	rjmp	.-278    	; 0x1a16 <move+0xb2>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
    1b2c:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <Right_white_line>
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	82 17       	cp	r24, r18
    1b34:	93 07       	cpc	r25, r19
    1b36:	5c f6       	brge	.-106    	; 0x1ace <move+0x16a>
    1b38:	bb cf       	rjmp	.-138    	; 0x1ab0 <move+0x14c>
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
		{
			forward();
    1b3a:	03 dd       	rcall	.-1530   	; 0x1542 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b3c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1b40:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10 && flag==0)
		{
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
    1b44:	23 e0       	ldi	r18, 0x03	; 3
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	44 e6       	ldi	r20, 0x64	; 100
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
		{
			velocity(speed,speed);
		}
	}
	return suc;
}
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	08 95       	ret

00001b66 <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	9c 01       	movw	r18, r24
	int i;
	if(cost[loc-1]==0)
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	61 50       	subi	r22, 0x01	; 1
    1b70:	71 09       	sbc	r23, r1
    1b72:	db 01       	movw	r26, r22
    1b74:	aa 0f       	add	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	a7 5e       	subi	r26, 0xE7	; 231
    1b7a:	bb 4f       	sbci	r27, 0xFB	; 251
    1b7c:	8d 91       	ld	r24, X+
    1b7e:	9c 91       	ld	r25, X
    1b80:	89 2b       	or	r24, r25
    1b82:	39 f4       	brne	.+14     	; 0x1b92 <BotEndLocation+0x2c>
	{
		LastLocation=loc;
    1b84:	30 93 85 07 	sts	0x0785, r19	; 0x800785 <LastLocation+0x1>
    1b88:	20 93 84 07 	sts	0x0784, r18	; 0x800784 <LastLocation>
		return LastLocation;
    1b8c:	82 2f       	mov	r24, r18
    1b8e:	93 2f       	mov	r25, r19
    1b90:	38 c0       	rjmp	.+112    	; 0x1c02 <BotEndLocation+0x9c>
	}
	int mCost=cost[node[loc-1][0]];
    1b92:	db 01       	movw	r26, r22
    1b94:	aa 0f       	add	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	aa 0f       	add	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	aa 0f       	add	r26, r26
    1b9e:	bb 1f       	adc	r27, r27
    1ba0:	fd 01       	movw	r30, r26
    1ba2:	e7 58       	subi	r30, 0x87	; 135
    1ba4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ba6:	01 90       	ld	r0, Z+
    1ba8:	f0 81       	ld	r31, Z
    1baa:	e0 2d       	mov	r30, r0
    1bac:	ee 0f       	add	r30, r30
    1bae:	ff 1f       	adc	r31, r31
    1bb0:	e7 5e       	subi	r30, 0xE7	; 231
    1bb2:	fb 4f       	sbci	r31, 0xFB	; 251
    1bb4:	c0 81       	ld	r28, Z
    1bb6:	d1 81       	ldd	r29, Z+1	; 0x01
    1bb8:	a5 58       	subi	r26, 0x85	; 133
    1bba:	bb 4f       	sbci	r27, 0xFB	; 251
	int pos=0;
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
	for(i=1;i<4;i++)
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(cost[node[loc-1][i]]<mCost)
    1bc4:	ed 91       	ld	r30, X+
    1bc6:	fd 91       	ld	r31, X+
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	e7 5e       	subi	r30, 0xE7	; 231
    1bce:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd0:	40 81       	ld	r20, Z
    1bd2:	51 81       	ldd	r21, Z+1	; 0x01
    1bd4:	4c 17       	cp	r20, r28
    1bd6:	5d 07       	cpc	r21, r29
    1bd8:	14 f4       	brge	.+4      	; 0x1bde <BotEndLocation+0x78>
    1bda:	9c 01       	movw	r18, r24
		{
			mCost=cost[node[loc-1][i]];
    1bdc:	ea 01       	movw	r28, r20
		LastLocation=loc;
		return LastLocation;
	}
	int mCost=cost[node[loc-1][0]];
	int pos=0;
	for(i=1;i<4;i++)
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	91 05       	cpc	r25, r1
    1be4:	79 f7       	brne	.-34     	; 0x1bc4 <BotEndLocation+0x5e>
		{
			mCost=cost[node[loc-1][i]];
			pos=i;
		}
	}
	return BotEndLocation(node[loc-1][pos]);
    1be6:	fb 01       	movw	r30, r22
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	ee 0f       	add	r30, r30
    1bee:	ff 1f       	adc	r31, r31
    1bf0:	e2 0f       	add	r30, r18
    1bf2:	f3 1f       	adc	r31, r19
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	e7 58       	subi	r30, 0x87	; 135
    1bfa:	fb 4f       	sbci	r31, 0xFB	; 251
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	b2 df       	rcall	.-156    	; 0x1b66 <BotEndLocation>
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <main>:

int main()
{
    1c08:	2f 92       	push	r2
    1c0a:	3f 92       	push	r3
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
	declare_constants();
    1c2c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <declare_constants>
	init_devices();
    1c30:	05 dd       	rcall	.-1526   	; 0x163c <init_devices>
	PORTJ = 0x00;
    1c32:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    1c36:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <notesReceived>
	lcd_string("Waiting...");
    1c3a:	81 ec       	ldi	r24, 0xC1	; 193
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_string>
	while(!notesReceived);
    1c42:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <notesReceived>
    1c46:	88 23       	and	r24, r24
    1c48:	e1 f3       	breq	.-8      	; 0x1c42 <main+0x3a>
	lcd_clear();
    1c4a:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_clear>
	lcd_string("Received!");
    1c4e:	8c ec       	ldi	r24, 0xCC	; 204
    1c50:	93 e0       	ldi	r25, 0x03	; 3
    1c52:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_string>
	PORTJ = 0xFF;
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTJ = 0x0F;
	lcd_clear();
	lcd_string("Sent!");
	#endif
	int i=0;
	for(i=0;i<noteCount;i++)
    1c5c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <noteCount>
    1c60:	88 23       	and	r24, r24
    1c62:	e9 f0       	breq	.+58     	; 0x1c9e <main+0x96>
    1c64:	c0 e0       	ldi	r28, 0x00	; 0
    1c66:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcd_print(2,1,(int)notes[i],2);
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ed 5f       	subi	r30, 0xFD	; 253
    1c6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c6e:	40 81       	ld	r20, Z
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	22 e0       	ldi	r18, 0x02	; 2
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c7e:	2f ef       	ldi	r18, 0xFF	; 255
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	8c e2       	ldi	r24, 0x2C	; 44
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	30 40       	sbci	r19, 0x00	; 0
    1c88:	80 40       	sbci	r24, 0x00	; 0
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <main+0x7c>
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <main+0x86>
    1c8e:	00 00       	nop
	PORTJ = 0x0F;
	lcd_clear();
	lcd_string("Sent!");
	#endif
	int i=0;
	for(i=0;i<noteCount;i++)
    1c90:	21 96       	adiw	r28, 0x01	; 1
    1c92:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <noteCount>
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	c8 17       	cp	r28, r24
    1c9a:	d9 07       	cpc	r29, r25
    1c9c:	2c f3       	brlt	.-54     	; 0x1c68 <main+0x60>
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
    1c9e:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_clear>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1ca2:	c0 ec       	ldi	r28, 0xC0	; 192
    1ca4:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
    1ca6:	0f 2e       	mov	r0, r31
    1ca8:	f6 ec       	ldi	r31, 0xC6	; 198
    1caa:	af 2e       	mov	r10, r31
    1cac:	b1 2c       	mov	r11, r1
    1cae:	f0 2d       	mov	r31, r0
    1cb0:	68 94       	set
    1cb2:	66 24       	eor	r6, r6
    1cb4:	62 f8       	bld	r6, 2
			while(cost[botloc-1]!=0)
			{
				lcd_print(2,5,botloc,2);
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
    1cb6:	51 2c       	mov	r5, r1
    1cb8:	41 2c       	mov	r4, r1
				for(i=1;i<4;i++)
    1cba:	77 24       	eor	r7, r7
    1cbc:	73 94       	inc	r7
    1cbe:	31 2c       	mov	r3, r1
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    1cc0:	0f 2e       	mov	r0, r31
    1cc2:	f6 e0       	ldi	r31, 0x06	; 6
    1cc4:	2f 2e       	mov	r2, r31
    1cc6:	f0 2d       	mov	r31, r0
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	while(notes[(int)noteToStrike]!=0)
    1cc8:	ed c1       	rjmp	.+986    	; 0x20a4 <main+0x49c>
	{
		if(taskCount==taskitr)	// If the bot has traversed all Tasks in the list
    1cca:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <taskCount>
    1cce:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <taskitr>
    1cd2:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <taskitr+0x1>
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	28 17       	cp	r18, r24
    1cda:	39 07       	cpc	r19, r25
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <main+0xd8>
    1cde:	a0 c0       	rjmp	.+320    	; 0x1e20 <main+0x218>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
    1ce0:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <noteToProcess>
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	ed 5f       	subi	r30, 0xFD	; 253
    1ce8:	fb 4f       	sbci	r31, 0xFB	; 251
    1cea:	80 81       	ld	r24, Z
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	82 0f       	add	r24, r18
    1cf8:	93 1f       	adc	r25, r19
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	84 5f       	subi	r24, 0xF4	; 244
    1d04:	9d 4f       	sbci	r25, 0xFD	; 253
    1d06:	f4 dc       	rcall	.-1560   	; 0x16f0 <costplan>
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
    1d08:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <botloc>
    1d0c:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <botloc+0x1>
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	e9 5e       	subi	r30, 0xE9	; 233
    1d16:	fb 4f       	sbci	r31, 0xFB	; 251
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	40 91 e7 03 	lds	r20, 0x03E7	; 0x8003e7 <otherBotTaskCost>
    1d20:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <otherBotLastTaskIndex>
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	ee 0f       	add	r30, r30
    1d28:	ff 1f       	adc	r31, r31
    1d2a:	e7 5e       	subi	r30, 0xE7	; 231
    1d2c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d2e:	20 81       	ld	r18, Z
    1d30:	31 81       	ldd	r19, Z+1	; 0x01
    1d32:	24 0f       	add	r18, r20
    1d34:	31 1d       	adc	r19, r1
    1d36:	28 17       	cp	r18, r24
    1d38:	39 07       	cpc	r19, r25
    1d3a:	64 f5       	brge	.+88     	; 0x1d94 <main+0x18c>
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
    1d3c:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d40:	88 81       	ld	r24, Y
    1d42:	85 ff       	sbrs	r24, 5
    1d44:	fd cf       	rjmp	.-6      	; 0x1d40 <main+0x138>
	UDR0 = data;
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	f5 01       	movw	r30, r10
    1d4a:	80 83       	st	Z, r24

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    1d4c:	29 2f       	mov	r18, r25
    1d4e:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d50:	88 81       	ld	r24, Y
    1d52:	85 ff       	sbrs	r24, 5
    1d54:	fd cf       	rjmp	.-6      	; 0x1d50 <main+0x148>
	UDR0 = data;
    1d56:	f5 01       	movw	r30, r10
    1d58:	20 83       	st	Z, r18
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    1d5a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <otherBotLastTaskIndex>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
    1d5e:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <otherBotLastTaskIndex>
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	ee 0f       	add	r30, r30
    1d66:	ff 1f       	adc	r31, r31
    1d68:	e7 5e       	subi	r30, 0xE7	; 231
    1d6a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d6c:	90 81       	ld	r25, Z

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d6e:	88 81       	ld	r24, Y
    1d70:	85 ff       	sbrs	r24, 5
    1d72:	fd cf       	rjmp	.-6      	; 0x1d6e <main+0x166>
	UDR0 = data;
    1d74:	88 e0       	ldi	r24, 0x08	; 8
    1d76:	f5 01       	movw	r30, r10
    1d78:	80 83       	st	Z, r24

// To Send the Cost of the task for the other robot.
void inline SendTaskCost(char taskcost)
{
	SendByteToSlave(ADD_COST);
	SendByteToSlave(DATA(taskcost));
    1d7a:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d7c:	88 81       	ld	r24, Y
    1d7e:	85 ff       	sbrs	r24, 5
    1d80:	fd cf       	rjmp	.-6      	; 0x1d7c <main+0x174>
	UDR0 = data;
    1d82:	f5 01       	movw	r30, r10
    1d84:	90 83       	st	Z, r25
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
				otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);	// Update the other bot last index
    1d86:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <otherBotLastTaskIndex>
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	ec de       	rcall	.-552    	; 0x1b66 <BotEndLocation>
    1d8e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <otherBotLastTaskIndex>
    1d92:	32 c0       	rjmp	.+100    	; 0x1df8 <main+0x1f0>
			}
			else
			{
				tasks[(int)taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
    1d94:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <taskCount>
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <noteToProcess>
    1d9e:	e3 51       	subi	r30, 0x13	; 19
    1da0:	fc 4f       	sbci	r31, 0xFC	; 252
    1da2:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
    1da4:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <taskCost>
    1da8:	89 0f       	add	r24, r25
    1daa:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <taskCost>
				taskCount++;
    1dae:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <taskCount>
    1db2:	8f 5f       	subi	r24, 0xFF	; 255
    1db4:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <taskCount>
				SendLastIndex((int)noteToProcess);
    1db8:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dbc:	88 81       	ld	r24, Y
    1dbe:	85 ff       	sbrs	r24, 5
    1dc0:	fd cf       	rjmp	.-6      	; 0x1dbc <main+0x1b4>
	UDR0 = data;
    1dc2:	89 e0       	ldi	r24, 0x09	; 9
    1dc4:	f5 01       	movw	r30, r10
    1dc6:	80 83       	st	Z, r24

// Inform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1dc8:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dca:	88 81       	ld	r24, Y
    1dcc:	85 ff       	sbrs	r24, 5
    1dce:	fd cf       	rjmp	.-6      	; 0x1dca <main+0x1c2>
	UDR0 = data;
    1dd0:	f5 01       	movw	r30, r10
    1dd2:	90 83       	st	Z, r25
			{
				tasks[(int)taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
    1dd4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <botloc>
    1dd8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <botloc+0x1>
    1ddc:	c4 de       	rcall	.-632    	; 0x1b66 <BotEndLocation>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dde:	98 81       	ld	r25, Y
    1de0:	95 ff       	sbrs	r25, 5
    1de2:	fd cf       	rjmp	.-6      	; 0x1dde <main+0x1d6>
	UDR0 = data;
    1de4:	99 e0       	ldi	r25, 0x09	; 9
    1de6:	f5 01       	movw	r30, r10
    1de8:	90 83       	st	Z, r25

// Inform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1dea:	98 2f       	mov	r25, r24
    1dec:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dee:	88 81       	ld	r24, Y
    1df0:	85 ff       	sbrs	r24, 5
    1df2:	fd cf       	rjmp	.-6      	; 0x1dee <main+0x1e6>
	UDR0 = data;
    1df4:	f5 01       	movw	r30, r10
    1df6:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
			}
			NoteProcessed(noteToProcess);
    1df8:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dfc:	88 81       	ld	r24, Y
    1dfe:	85 ff       	sbrs	r24, 5
    1e00:	fd cf       	rjmp	.-6      	; 0x1dfc <main+0x1f4>
	UDR0 = data;
    1e02:	27 e0       	ldi	r18, 0x07	; 7
    1e04:	f5 01       	movw	r30, r10
    1e06:	20 83       	st	Z, r18

//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
    1e08:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e0a:	88 81       	ld	r24, Y
    1e0c:	85 ff       	sbrs	r24, 5
    1e0e:	fd cf       	rjmp	.-6      	; 0x1e0a <main+0x202>
	UDR0 = data;
    1e10:	f5 01       	movw	r30, r10
    1e12:	90 83       	st	Z, r25
//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
	noteToProcess++;
    1e14:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <noteToProcess>
    1e18:	8f 5f       	subi	r24, 0xFF	; 255
    1e1a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <noteToProcess>
    1e1e:	42 c1       	rjmp	.+644    	; 0x20a4 <main+0x49c>
			NoteProcessed(noteToProcess);
		}
		else
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    1e20:	fc 01       	movw	r30, r24
    1e22:	e3 51       	subi	r30, 0x13	; 19
    1e24:	fc 4f       	sbci	r31, 0xFC	; 252
    1e26:	e0 81       	ld	r30, Z
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	ed 5f       	subi	r30, 0xFD	; 253
    1e2c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e2e:	80 81       	ld	r24, Z
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9c 01       	movw	r18, r24
    1e36:	22 0f       	add	r18, r18
    1e38:	33 1f       	adc	r19, r19
    1e3a:	82 0f       	add	r24, r18
    1e3c:	93 1f       	adc	r25, r19
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	84 5f       	subi	r24, 0xF4	; 244
    1e48:	9d 4f       	sbci	r25, 0xFD	; 253
    1e4a:	52 dc       	rcall	.-1884   	; 0x16f0 <costplan>
			lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
    1e4c:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <taskitr>
    1e50:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <taskitr+0x1>
    1e54:	e3 51       	subi	r30, 0x13	; 19
    1e56:	fc 4f       	sbci	r31, 0xFC	; 252
    1e58:	e0 81       	ld	r30, Z
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	ed 5f       	subi	r30, 0xFD	; 253
    1e5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e60:	40 81       	ld	r20, Z
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	22 e0       	ldi	r18, 0x02	; 2
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	6c e0       	ldi	r22, 0x0C	; 12
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
			
			while(cost[botloc-1]!=0)
    1e70:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <botloc>
    1e74:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <botloc+0x1>
    1e78:	fa 01       	movw	r30, r20
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	e9 5e       	subi	r30, 0xE9	; 233
    1e80:	fb 4f       	sbci	r31, 0xFB	; 251
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	89 2b       	or	r24, r25
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <main+0x284>
    1e8a:	db c0       	rjmp	.+438    	; 0x2042 <main+0x43a>
			{
				lcd_print(2,5,botloc,2);
    1e8c:	22 e0       	ldi	r18, 0x02	; 2
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	65 e0       	ldi	r22, 0x05	; 5
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
				minCost=cost[node[botloc-1][0]];
    1e98:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <botloc>
    1e9c:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <botloc+0x1>
    1ea0:	31 97       	sbiw	r30, 0x01	; 1
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	df 01       	movw	r26, r30
    1eb0:	a7 58       	subi	r26, 0x87	; 135
    1eb2:	bb 4f       	sbci	r27, 0xFB	; 251
    1eb4:	cd 90       	ld	r12, X+
    1eb6:	dc 90       	ld	r13, X
    1eb8:	d6 01       	movw	r26, r12
    1eba:	aa 0f       	add	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	a7 5e       	subi	r26, 0xE7	; 231
    1ec0:	bb 4f       	sbci	r27, 0xFB	; 251
    1ec2:	4d 91       	ld	r20, X+
    1ec4:	5c 91       	ld	r21, X
    1ec6:	e5 58       	subi	r30, 0x85	; 133
    1ec8:	fb 4f       	sbci	r31, 0xFB	; 251
				nxtNode=node[botloc-1][0];
				pos=0;
    1eca:	e5 2c       	mov	r14, r5
    1ecc:	f4 2c       	mov	r15, r4
				for(i=1;i<4;i++)
    1ece:	87 2d       	mov	r24, r7
    1ed0:	93 2d       	mov	r25, r3
				{
					if(node[botloc-1][i]!=0)
    1ed2:	21 91       	ld	r18, Z+
    1ed4:	31 91       	ld	r19, Z+
    1ed6:	21 15       	cp	r18, r1
    1ed8:	31 05       	cpc	r19, r1
    1eda:	69 f0       	breq	.+26     	; 0x1ef6 <main+0x2ee>
						if(cost[node[botloc-1][i]]<minCost)
    1edc:	d9 01       	movw	r26, r18
    1ede:	aa 0f       	add	r26, r26
    1ee0:	bb 1f       	adc	r27, r27
    1ee2:	a7 5e       	subi	r26, 0xE7	; 231
    1ee4:	bb 4f       	sbci	r27, 0xFB	; 251
    1ee6:	6d 91       	ld	r22, X+
    1ee8:	7c 91       	ld	r23, X
    1eea:	64 17       	cp	r22, r20
    1eec:	75 07       	cpc	r23, r21
    1eee:	1c f4       	brge	.+6      	; 0x1ef6 <main+0x2ee>
    1ef0:	7c 01       	movw	r14, r24
						{
							minCost=cost[node[botloc-1][i]];
							nxtNode=node[botloc-1][i];
    1ef2:	69 01       	movw	r12, r18
				for(i=1;i<4;i++)
				{
					if(node[botloc-1][i]!=0)
						if(cost[node[botloc-1][i]]<minCost)
						{
							minCost=cost[node[botloc-1][i]];
    1ef4:	ab 01       	movw	r20, r22
			{
				lcd_print(2,5,botloc,2);
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
				for(i=1;i<4;i++)
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	91 05       	cpc	r25, r1
    1efc:	51 f7       	brne	.-44     	; 0x1ed2 <main+0x2ca>
    1efe:	47 01       	movw	r8, r14
    1f00:	86 01       	movw	r16, r12
							minCost=cost[node[botloc-1][i]];
							nxtNode=node[botloc-1][i];
							pos=i;
						}
				}
				lcd_print(2,8,nxtNode,2);
    1f02:	22 e0       	ldi	r18, 0x02	; 2
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	a6 01       	movw	r20, r12
    1f08:	68 e0       	ldi	r22, 0x08	; 8
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <lcd_print>
				while(otherBotMovingTo==nxtNode);
    1f10:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <otherBotMovingTo>
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	08 17       	cp	r16, r24
    1f18:	19 07       	cpc	r17, r25
    1f1a:	d1 f3       	breq	.-12     	; 0x1f10 <main+0x308>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1f1c:	88 81       	ld	r24, Y
    1f1e:	85 ff       	sbrs	r24, 5
    1f20:	fd cf       	rjmp	.-6      	; 0x1f1c <main+0x314>
	UDR0 = data;
    1f22:	85 e0       	ldi	r24, 0x05	; 5
    1f24:	f5 01       	movw	r30, r10
    1f26:	80 83       	st	Z, r24

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    1f28:	00 68       	ori	r16, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1f2a:	88 81       	ld	r24, Y
    1f2c:	85 ff       	sbrs	r24, 5
    1f2e:	fd cf       	rjmp	.-6      	; 0x1f2a <main+0x322>
	UDR0 = data;
    1f30:	f5 01       	movw	r30, r10
    1f32:	00 83       	st	Z, r16
				}
				lcd_print(2,8,nxtNode,2);
				while(otherBotMovingTo==nxtNode);
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
    1f34:	c4 01       	movw	r24, r8
    1f36:	16 dd       	rcall	.-1492   	; 0x1964 <move>
				if(taskDone==0)
    1f38:	89 2b       	or	r24, r25
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <main+0x336>
    1f3c:	54 c0       	rjmp	.+168    	; 0x1fe6 <main+0x3de>
				{
					for(i=0;i<4;i++)
						if(node[node[botloc-1][pos]-1][i]==nxtNode)
    1f3e:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <botloc>
    1f42:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <botloc+0x1>
    1f46:	11 97       	sbiw	r26, 0x01	; 1
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	aa 0f       	add	r26, r26
    1f4e:	bb 1f       	adc	r27, r27
    1f50:	aa 0f       	add	r26, r26
    1f52:	bb 1f       	adc	r27, r27
    1f54:	ae 0d       	add	r26, r14
    1f56:	bf 1d       	adc	r27, r15
    1f58:	aa 0f       	add	r26, r26
    1f5a:	bb 1f       	adc	r27, r27
    1f5c:	a7 58       	subi	r26, 0x87	; 135
    1f5e:	bb 4f       	sbci	r27, 0xFB	; 251
    1f60:	8d 91       	ld	r24, X+
    1f62:	9c 91       	ld	r25, X
    1f64:	11 97       	sbiw	r26, 0x01	; 1
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	fc 01       	movw	r30, r24
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	ee 0f       	add	r30, r30
    1f70:	ff 1f       	adc	r31, r31
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	e7 58       	subi	r30, 0x87	; 135
    1f7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f7e:	40 81       	ld	r20, Z
    1f80:	51 81       	ldd	r21, Z+1	; 0x01
    1f82:	4c 15       	cp	r20, r12
    1f84:	5d 05       	cpc	r21, r13
    1f86:	69 f4       	brne	.+26     	; 0x1fa2 <main+0x39a>
							node[node[botloc-1][pos]-1][i]=0;
    1f88:	fc 01       	movw	r30, r24
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e7 58       	subi	r30, 0x87	; 135
    1f9c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f9e:	11 82       	std	Z+1, r1	; 0x01
    1fa0:	10 82       	st	Z, r1
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
				if(taskDone==0)
				{
					for(i=0;i<4;i++)
    1fa2:	2f 5f       	subi	r18, 0xFF	; 255
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	24 30       	cpi	r18, 0x04	; 4
    1fa8:	31 05       	cpc	r19, r1
    1faa:	d1 f6       	brne	.-76     	; 0x1f60 <main+0x358>
						if(node[node[botloc-1][pos]-1][i]==nxtNode)
							node[node[botloc-1][pos]-1][i]=0;
					node[botloc-1][pos]=0;
    1fac:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <botloc>
    1fb0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <botloc+0x1>
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	ee 0d       	add	r30, r14
    1fc2:	ff 1d       	adc	r31, r15
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	e7 58       	subi	r30, 0x87	; 135
    1fca:	fb 4f       	sbci	r31, 0xFB	; 251
    1fcc:	11 82       	std	Z+1, r1	; 0x01
    1fce:	10 82       	st	Z, r1
					botloc=node[botloc-1][pos];
					SendNodeReached(botloc);
				}
			}
			
			if(cost[botloc-1]==0)
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e7 5e       	subi	r30, 0xE7	; 231
    1fd8:	fb 4f       	sbci	r31, 0xFB	; 251
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	89 2b       	or	r24, r25
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <main+0x3dc>
    1fe2:	60 c0       	rjmp	.+192    	; 0x20a4 <main+0x49c>
    1fe4:	2e c0       	rjmp	.+92     	; 0x2042 <main+0x43a>
					node[botloc-1][pos]=0;
					break;
				}
				else
				{
					botloc=node[botloc-1][pos];
    1fe6:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <botloc>
    1fea:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <botloc+0x1>
    1fee:	31 97       	sbiw	r30, 0x01	; 1
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	e8 0d       	add	r30, r8
    1ffa:	f9 1d       	adc	r31, r9
    1ffc:	ee 0f       	add	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	e7 58       	subi	r30, 0x87	; 135
    2002:	fb 4f       	sbci	r31, 0xFB	; 251
    2004:	90 81       	ld	r25, Z
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <botloc>
    200c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2010:	88 81       	ld	r24, Y
    2012:	85 ff       	sbrs	r24, 5
    2014:	fd cf       	rjmp	.-6      	; 0x2010 <main+0x408>
	UDR0 = data;
    2016:	f5 01       	movw	r30, r10
    2018:	60 82       	st	Z, r6

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    201a:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    201c:	88 81       	ld	r24, Y
    201e:	85 ff       	sbrs	r24, 5
    2020:	fd cf       	rjmp	.-6      	; 0x201c <main+0x414>
	UDR0 = data;
    2022:	f5 01       	movw	r30, r10
    2024:	90 83       	st	Z, r25
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
			lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
			
			while(cost[botloc-1]!=0)
    2026:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <botloc>
    202a:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <botloc+0x1>
    202e:	fa 01       	movw	r30, r20
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	e9 5e       	subi	r30, 0xE9	; 233
    2036:	fb 4f       	sbci	r31, 0xFB	; 251
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	89 2b       	or	r24, r25
    203e:	09 f0       	breq	.+2      	; 0x2042 <main+0x43a>
    2040:	25 cf       	rjmp	.-438    	; 0x1e8c <main+0x284>
				}
			}
			
			if(cost[botloc-1]==0)
			{
				while(noteToStrike!=tasks[taskitr]);
    2042:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <taskitr>
    2046:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <taskitr+0x1>
    204a:	e3 51       	subi	r30, 0x13	; 19
    204c:	fc 4f       	sbci	r31, 0xFC	; 252
    204e:	90 81       	ld	r25, Z
    2050:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <noteToStrike>
    2054:	98 13       	cpse	r25, r24
    2056:	fb cf       	rjmp	.-10     	; 0x204e <main+0x446>
				// Servo Motor Control
				// Strike the Note
				buzzer_on();
    2058:	8e d9       	rcall	.-3300   	; 0x1376 <buzzer_on>
    205a:	ff ef       	ldi	r31, 0xFF	; 255
    205c:	2f e7       	ldi	r18, 0x7F	; 127
    205e:	36 e1       	ldi	r19, 0x16	; 22
    2060:	f1 50       	subi	r31, 0x01	; 1
    2062:	20 40       	sbci	r18, 0x00	; 0
    2064:	30 40       	sbci	r19, 0x00	; 0
    2066:	e1 f7       	brne	.-8      	; 0x2060 <main+0x458>
    2068:	00 c0       	rjmp	.+0      	; 0x206a <main+0x462>
    206a:	00 00       	nop
				_delay_ms(500);
				buzzer_off();
    206c:	88 d9       	rcall	.-3312   	; 0x137e <buzzer_off>
				taskitr++;
    206e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <taskitr>
    2072:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <taskitr+0x1>
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <taskitr+0x1>
    207c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <taskitr>
				SendNoteStruck(noteToStrike);
    2080:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <noteToStrike>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2084:	88 81       	ld	r24, Y
    2086:	85 ff       	sbrs	r24, 5
    2088:	fd cf       	rjmp	.-6      	; 0x2084 <main+0x47c>
	UDR0 = data;
    208a:	f5 01       	movw	r30, r10
    208c:	20 82       	st	Z, r2

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    208e:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2090:	88 81       	ld	r24, Y
    2092:	85 ff       	sbrs	r24, 5
    2094:	fd cf       	rjmp	.-6      	; 0x2090 <main+0x488>
	UDR0 = data;
    2096:	f5 01       	movw	r30, r10
    2098:	90 83       	st	Z, r25
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    209a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <noteToStrike>
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <noteToStrike>
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	while(notes[(int)noteToStrike]!=0)
    20a4:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <noteToStrike>
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	ed 5f       	subi	r30, 0xFD	; 253
    20ac:	fb 4f       	sbci	r31, 0xFB	; 251
    20ae:	80 81       	ld	r24, Z
    20b0:	81 11       	cpse	r24, r1
    20b2:	0b ce       	rjmp	.-1002   	; 0x1cca <main+0xc2>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    20b4:	e0 ec       	ldi	r30, 0xC0	; 192
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	85 ff       	sbrs	r24, 5
    20bc:	fd cf       	rjmp	.-6      	; 0x20b8 <main+0x4b0>
	UDR0 = data;
    20be:	8a e0       	ldi	r24, 0x0A	; 10
    20c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    20c4:	e0 ec       	ldi	r30, 0xC0	; 192
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	85 ff       	sbrs	r24, 5
    20cc:	fd cf       	rjmp	.-6      	; 0x20c8 <main+0x4c0>
	UDR0 = data;
    20ce:	80 e8       	ldi	r24, 0x80	; 128
    20d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
				SendNoteStruck(noteToStrike);
			}
		}
	}
	BotEnded();
	while(botEnd!=1);
    20d4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <botEnd>
    20d8:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <botEnd+0x1>
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	91 05       	cpc	r25, r1
    20e0:	e9 f7       	brne	.-6      	; 0x20dc <main+0x4d4>
	buzzer_on();
    20e2:	49 d9       	rcall	.-3438   	; 0x1376 <buzzer_on>
    20e4:	ff ef       	ldi	r31, 0xFF	; 255
    20e6:	2f ef       	ldi	r18, 0xFF	; 255
    20e8:	30 ee       	ldi	r19, 0xE0	; 224
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	f1 50       	subi	r31, 0x01	; 1
    20ee:	20 40       	sbci	r18, 0x00	; 0
    20f0:	30 40       	sbci	r19, 0x00	; 0
    20f2:	80 40       	sbci	r24, 0x00	; 0
    20f4:	d9 f7       	brne	.-10     	; 0x20ec <main+0x4e4>
    20f6:	00 c0       	rjmp	.+0      	; 0x20f8 <main+0x4f0>
    20f8:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    20fa:	41 d9       	rcall	.-3454   	; 0x137e <buzzer_off>
	return 0;
}
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	9f 90       	pop	r9
    2116:	8f 90       	pop	r8
    2118:	7f 90       	pop	r7
    211a:	6f 90       	pop	r6
    211c:	5f 90       	pop	r5
    211e:	4f 90       	pop	r4
    2120:	3f 90       	pop	r3
    2122:	2f 90       	pop	r2
    2124:	08 95       	ret

00002126 <__divsf3>:
    2126:	0c d0       	rcall	.+24     	; 0x2140 <__divsf3x>
    2128:	e6 c0       	rjmp	.+460    	; 0x22f6 <__fp_round>
    212a:	de d0       	rcall	.+444    	; 0x22e8 <__fp_pscB>
    212c:	40 f0       	brcs	.+16     	; 0x213e <__divsf3+0x18>
    212e:	d5 d0       	rcall	.+426    	; 0x22da <__fp_pscA>
    2130:	30 f0       	brcs	.+12     	; 0x213e <__divsf3+0x18>
    2132:	21 f4       	brne	.+8      	; 0x213c <__divsf3+0x16>
    2134:	5f 3f       	cpi	r21, 0xFF	; 255
    2136:	19 f0       	breq	.+6      	; 0x213e <__divsf3+0x18>
    2138:	c7 c0       	rjmp	.+398    	; 0x22c8 <__fp_inf>
    213a:	51 11       	cpse	r21, r1
    213c:	10 c1       	rjmp	.+544    	; 0x235e <__fp_szero>
    213e:	ca c0       	rjmp	.+404    	; 0x22d4 <__fp_nan>

00002140 <__divsf3x>:
    2140:	eb d0       	rcall	.+470    	; 0x2318 <__fp_split3>
    2142:	98 f3       	brcs	.-26     	; 0x212a <__divsf3+0x4>

00002144 <__divsf3_pse>:
    2144:	99 23       	and	r25, r25
    2146:	c9 f3       	breq	.-14     	; 0x213a <__divsf3+0x14>
    2148:	55 23       	and	r21, r21
    214a:	b1 f3       	breq	.-20     	; 0x2138 <__divsf3+0x12>
    214c:	95 1b       	sub	r25, r21
    214e:	55 0b       	sbc	r21, r21
    2150:	bb 27       	eor	r27, r27
    2152:	aa 27       	eor	r26, r26
    2154:	62 17       	cp	r22, r18
    2156:	73 07       	cpc	r23, r19
    2158:	84 07       	cpc	r24, r20
    215a:	38 f0       	brcs	.+14     	; 0x216a <__divsf3_pse+0x26>
    215c:	9f 5f       	subi	r25, 0xFF	; 255
    215e:	5f 4f       	sbci	r21, 0xFF	; 255
    2160:	22 0f       	add	r18, r18
    2162:	33 1f       	adc	r19, r19
    2164:	44 1f       	adc	r20, r20
    2166:	aa 1f       	adc	r26, r26
    2168:	a9 f3       	breq	.-22     	; 0x2154 <__divsf3_pse+0x10>
    216a:	33 d0       	rcall	.+102    	; 0x21d2 <__divsf3_pse+0x8e>
    216c:	0e 2e       	mov	r0, r30
    216e:	3a f0       	brmi	.+14     	; 0x217e <__divsf3_pse+0x3a>
    2170:	e0 e8       	ldi	r30, 0x80	; 128
    2172:	30 d0       	rcall	.+96     	; 0x21d4 <__divsf3_pse+0x90>
    2174:	91 50       	subi	r25, 0x01	; 1
    2176:	50 40       	sbci	r21, 0x00	; 0
    2178:	e6 95       	lsr	r30
    217a:	00 1c       	adc	r0, r0
    217c:	ca f7       	brpl	.-14     	; 0x2170 <__divsf3_pse+0x2c>
    217e:	29 d0       	rcall	.+82     	; 0x21d2 <__divsf3_pse+0x8e>
    2180:	fe 2f       	mov	r31, r30
    2182:	27 d0       	rcall	.+78     	; 0x21d2 <__divsf3_pse+0x8e>
    2184:	66 0f       	add	r22, r22
    2186:	77 1f       	adc	r23, r23
    2188:	88 1f       	adc	r24, r24
    218a:	bb 1f       	adc	r27, r27
    218c:	26 17       	cp	r18, r22
    218e:	37 07       	cpc	r19, r23
    2190:	48 07       	cpc	r20, r24
    2192:	ab 07       	cpc	r26, r27
    2194:	b0 e8       	ldi	r27, 0x80	; 128
    2196:	09 f0       	breq	.+2      	; 0x219a <__divsf3_pse+0x56>
    2198:	bb 0b       	sbc	r27, r27
    219a:	80 2d       	mov	r24, r0
    219c:	bf 01       	movw	r22, r30
    219e:	ff 27       	eor	r31, r31
    21a0:	93 58       	subi	r25, 0x83	; 131
    21a2:	5f 4f       	sbci	r21, 0xFF	; 255
    21a4:	2a f0       	brmi	.+10     	; 0x21b0 <__divsf3_pse+0x6c>
    21a6:	9e 3f       	cpi	r25, 0xFE	; 254
    21a8:	51 05       	cpc	r21, r1
    21aa:	68 f0       	brcs	.+26     	; 0x21c6 <__divsf3_pse+0x82>
    21ac:	8d c0       	rjmp	.+282    	; 0x22c8 <__fp_inf>
    21ae:	d7 c0       	rjmp	.+430    	; 0x235e <__fp_szero>
    21b0:	5f 3f       	cpi	r21, 0xFF	; 255
    21b2:	ec f3       	brlt	.-6      	; 0x21ae <__divsf3_pse+0x6a>
    21b4:	98 3e       	cpi	r25, 0xE8	; 232
    21b6:	dc f3       	brlt	.-10     	; 0x21ae <__divsf3_pse+0x6a>
    21b8:	86 95       	lsr	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	b7 95       	ror	r27
    21c0:	f7 95       	ror	r31
    21c2:	9f 5f       	subi	r25, 0xFF	; 255
    21c4:	c9 f7       	brne	.-14     	; 0x21b8 <__divsf3_pse+0x74>
    21c6:	88 0f       	add	r24, r24
    21c8:	91 1d       	adc	r25, r1
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	97 f9       	bld	r25, 7
    21d0:	08 95       	ret
    21d2:	e1 e0       	ldi	r30, 0x01	; 1
    21d4:	66 0f       	add	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 1f       	adc	r24, r24
    21da:	bb 1f       	adc	r27, r27
    21dc:	62 17       	cp	r22, r18
    21de:	73 07       	cpc	r23, r19
    21e0:	84 07       	cpc	r24, r20
    21e2:	ba 07       	cpc	r27, r26
    21e4:	20 f0       	brcs	.+8      	; 0x21ee <__divsf3_pse+0xaa>
    21e6:	62 1b       	sub	r22, r18
    21e8:	73 0b       	sbc	r23, r19
    21ea:	84 0b       	sbc	r24, r20
    21ec:	ba 0b       	sbc	r27, r26
    21ee:	ee 1f       	adc	r30, r30
    21f0:	88 f7       	brcc	.-30     	; 0x21d4 <__divsf3_pse+0x90>
    21f2:	e0 95       	com	r30
    21f4:	08 95       	ret

000021f6 <__fixunssfsi>:
    21f6:	98 d0       	rcall	.+304    	; 0x2328 <__fp_splitA>
    21f8:	88 f0       	brcs	.+34     	; 0x221c <__stack+0x1d>
    21fa:	9f 57       	subi	r25, 0x7F	; 127
    21fc:	90 f0       	brcs	.+36     	; 0x2222 <__stack+0x23>
    21fe:	b9 2f       	mov	r27, r25
    2200:	99 27       	eor	r25, r25
    2202:	b7 51       	subi	r27, 0x17	; 23
    2204:	a0 f0       	brcs	.+40     	; 0x222e <__stack+0x2f>
    2206:	d1 f0       	breq	.+52     	; 0x223c <__stack+0x3d>
    2208:	66 0f       	add	r22, r22
    220a:	77 1f       	adc	r23, r23
    220c:	88 1f       	adc	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	1a f0       	brmi	.+6      	; 0x2218 <__stack+0x19>
    2212:	ba 95       	dec	r27
    2214:	c9 f7       	brne	.-14     	; 0x2208 <__stack+0x9>
    2216:	12 c0       	rjmp	.+36     	; 0x223c <__stack+0x3d>
    2218:	b1 30       	cpi	r27, 0x01	; 1
    221a:	81 f0       	breq	.+32     	; 0x223c <__stack+0x3d>
    221c:	9f d0       	rcall	.+318    	; 0x235c <__fp_zero>
    221e:	b1 e0       	ldi	r27, 0x01	; 1
    2220:	08 95       	ret
    2222:	9c c0       	rjmp	.+312    	; 0x235c <__fp_zero>
    2224:	67 2f       	mov	r22, r23
    2226:	78 2f       	mov	r23, r24
    2228:	88 27       	eor	r24, r24
    222a:	b8 5f       	subi	r27, 0xF8	; 248
    222c:	39 f0       	breq	.+14     	; 0x223c <__stack+0x3d>
    222e:	b9 3f       	cpi	r27, 0xF9	; 249
    2230:	cc f3       	brlt	.-14     	; 0x2224 <__stack+0x25>
    2232:	86 95       	lsr	r24
    2234:	77 95       	ror	r23
    2236:	67 95       	ror	r22
    2238:	b3 95       	inc	r27
    223a:	d9 f7       	brne	.-10     	; 0x2232 <__stack+0x33>
    223c:	3e f4       	brtc	.+14     	; 0x224c <__stack+0x4d>
    223e:	90 95       	com	r25
    2240:	80 95       	com	r24
    2242:	70 95       	com	r23
    2244:	61 95       	neg	r22
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8f 4f       	sbci	r24, 0xFF	; 255
    224a:	9f 4f       	sbci	r25, 0xFF	; 255
    224c:	08 95       	ret

0000224e <__floatunsisf>:
    224e:	e8 94       	clt
    2250:	09 c0       	rjmp	.+18     	; 0x2264 <__floatsisf+0x12>

00002252 <__floatsisf>:
    2252:	97 fb       	bst	r25, 7
    2254:	3e f4       	brtc	.+14     	; 0x2264 <__floatsisf+0x12>
    2256:	90 95       	com	r25
    2258:	80 95       	com	r24
    225a:	70 95       	com	r23
    225c:	61 95       	neg	r22
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	8f 4f       	sbci	r24, 0xFF	; 255
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	99 23       	and	r25, r25
    2266:	a9 f0       	breq	.+42     	; 0x2292 <__floatsisf+0x40>
    2268:	f9 2f       	mov	r31, r25
    226a:	96 e9       	ldi	r25, 0x96	; 150
    226c:	bb 27       	eor	r27, r27
    226e:	93 95       	inc	r25
    2270:	f6 95       	lsr	r31
    2272:	87 95       	ror	r24
    2274:	77 95       	ror	r23
    2276:	67 95       	ror	r22
    2278:	b7 95       	ror	r27
    227a:	f1 11       	cpse	r31, r1
    227c:	f8 cf       	rjmp	.-16     	; 0x226e <__floatsisf+0x1c>
    227e:	fa f4       	brpl	.+62     	; 0x22be <__floatsisf+0x6c>
    2280:	bb 0f       	add	r27, r27
    2282:	11 f4       	brne	.+4      	; 0x2288 <__floatsisf+0x36>
    2284:	60 ff       	sbrs	r22, 0
    2286:	1b c0       	rjmp	.+54     	; 0x22be <__floatsisf+0x6c>
    2288:	6f 5f       	subi	r22, 0xFF	; 255
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	8f 4f       	sbci	r24, 0xFF	; 255
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	16 c0       	rjmp	.+44     	; 0x22be <__floatsisf+0x6c>
    2292:	88 23       	and	r24, r24
    2294:	11 f0       	breq	.+4      	; 0x229a <__floatsisf+0x48>
    2296:	96 e9       	ldi	r25, 0x96	; 150
    2298:	11 c0       	rjmp	.+34     	; 0x22bc <__floatsisf+0x6a>
    229a:	77 23       	and	r23, r23
    229c:	21 f0       	breq	.+8      	; 0x22a6 <__floatsisf+0x54>
    229e:	9e e8       	ldi	r25, 0x8E	; 142
    22a0:	87 2f       	mov	r24, r23
    22a2:	76 2f       	mov	r23, r22
    22a4:	05 c0       	rjmp	.+10     	; 0x22b0 <__floatsisf+0x5e>
    22a6:	66 23       	and	r22, r22
    22a8:	71 f0       	breq	.+28     	; 0x22c6 <__floatsisf+0x74>
    22aa:	96 e8       	ldi	r25, 0x86	; 134
    22ac:	86 2f       	mov	r24, r22
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	2a f0       	brmi	.+10     	; 0x22be <__floatsisf+0x6c>
    22b4:	9a 95       	dec	r25
    22b6:	66 0f       	add	r22, r22
    22b8:	77 1f       	adc	r23, r23
    22ba:	88 1f       	adc	r24, r24
    22bc:	da f7       	brpl	.-10     	; 0x22b4 <__floatsisf+0x62>
    22be:	88 0f       	add	r24, r24
    22c0:	96 95       	lsr	r25
    22c2:	87 95       	ror	r24
    22c4:	97 f9       	bld	r25, 7
    22c6:	08 95       	ret

000022c8 <__fp_inf>:
    22c8:	97 f9       	bld	r25, 7
    22ca:	9f 67       	ori	r25, 0x7F	; 127
    22cc:	80 e8       	ldi	r24, 0x80	; 128
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	08 95       	ret

000022d4 <__fp_nan>:
    22d4:	9f ef       	ldi	r25, 0xFF	; 255
    22d6:	80 ec       	ldi	r24, 0xC0	; 192
    22d8:	08 95       	ret

000022da <__fp_pscA>:
    22da:	00 24       	eor	r0, r0
    22dc:	0a 94       	dec	r0
    22de:	16 16       	cp	r1, r22
    22e0:	17 06       	cpc	r1, r23
    22e2:	18 06       	cpc	r1, r24
    22e4:	09 06       	cpc	r0, r25
    22e6:	08 95       	ret

000022e8 <__fp_pscB>:
    22e8:	00 24       	eor	r0, r0
    22ea:	0a 94       	dec	r0
    22ec:	12 16       	cp	r1, r18
    22ee:	13 06       	cpc	r1, r19
    22f0:	14 06       	cpc	r1, r20
    22f2:	05 06       	cpc	r0, r21
    22f4:	08 95       	ret

000022f6 <__fp_round>:
    22f6:	09 2e       	mov	r0, r25
    22f8:	03 94       	inc	r0
    22fa:	00 0c       	add	r0, r0
    22fc:	11 f4       	brne	.+4      	; 0x2302 <__fp_round+0xc>
    22fe:	88 23       	and	r24, r24
    2300:	52 f0       	brmi	.+20     	; 0x2316 <__fp_round+0x20>
    2302:	bb 0f       	add	r27, r27
    2304:	40 f4       	brcc	.+16     	; 0x2316 <__fp_round+0x20>
    2306:	bf 2b       	or	r27, r31
    2308:	11 f4       	brne	.+4      	; 0x230e <__fp_round+0x18>
    230a:	60 ff       	sbrs	r22, 0
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <__fp_round+0x20>
    230e:	6f 5f       	subi	r22, 0xFF	; 255
    2310:	7f 4f       	sbci	r23, 0xFF	; 255
    2312:	8f 4f       	sbci	r24, 0xFF	; 255
    2314:	9f 4f       	sbci	r25, 0xFF	; 255
    2316:	08 95       	ret

00002318 <__fp_split3>:
    2318:	57 fd       	sbrc	r21, 7
    231a:	90 58       	subi	r25, 0x80	; 128
    231c:	44 0f       	add	r20, r20
    231e:	55 1f       	adc	r21, r21
    2320:	59 f0       	breq	.+22     	; 0x2338 <__fp_splitA+0x10>
    2322:	5f 3f       	cpi	r21, 0xFF	; 255
    2324:	71 f0       	breq	.+28     	; 0x2342 <__fp_splitA+0x1a>
    2326:	47 95       	ror	r20

00002328 <__fp_splitA>:
    2328:	88 0f       	add	r24, r24
    232a:	97 fb       	bst	r25, 7
    232c:	99 1f       	adc	r25, r25
    232e:	61 f0       	breq	.+24     	; 0x2348 <__fp_splitA+0x20>
    2330:	9f 3f       	cpi	r25, 0xFF	; 255
    2332:	79 f0       	breq	.+30     	; 0x2352 <__fp_splitA+0x2a>
    2334:	87 95       	ror	r24
    2336:	08 95       	ret
    2338:	12 16       	cp	r1, r18
    233a:	13 06       	cpc	r1, r19
    233c:	14 06       	cpc	r1, r20
    233e:	55 1f       	adc	r21, r21
    2340:	f2 cf       	rjmp	.-28     	; 0x2326 <__fp_split3+0xe>
    2342:	46 95       	lsr	r20
    2344:	f1 df       	rcall	.-30     	; 0x2328 <__fp_splitA>
    2346:	08 c0       	rjmp	.+16     	; 0x2358 <__fp_splitA+0x30>
    2348:	16 16       	cp	r1, r22
    234a:	17 06       	cpc	r1, r23
    234c:	18 06       	cpc	r1, r24
    234e:	99 1f       	adc	r25, r25
    2350:	f1 cf       	rjmp	.-30     	; 0x2334 <__fp_splitA+0xc>
    2352:	86 95       	lsr	r24
    2354:	71 05       	cpc	r23, r1
    2356:	61 05       	cpc	r22, r1
    2358:	08 94       	sec
    235a:	08 95       	ret

0000235c <__fp_zero>:
    235c:	e8 94       	clt

0000235e <__fp_szero>:
    235e:	bb 27       	eor	r27, r27
    2360:	66 27       	eor	r22, r22
    2362:	77 27       	eor	r23, r23
    2364:	cb 01       	movw	r24, r22
    2366:	97 f9       	bld	r25, 7
    2368:	08 95       	ret

0000236a <__gesf2>:
    236a:	03 d0       	rcall	.+6      	; 0x2372 <__fp_cmp>
    236c:	08 f4       	brcc	.+2      	; 0x2370 <__gesf2+0x6>
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	08 95       	ret

00002372 <__fp_cmp>:
    2372:	99 0f       	add	r25, r25
    2374:	00 08       	sbc	r0, r0
    2376:	55 0f       	add	r21, r21
    2378:	aa 0b       	sbc	r26, r26
    237a:	e0 e8       	ldi	r30, 0x80	; 128
    237c:	fe ef       	ldi	r31, 0xFE	; 254
    237e:	16 16       	cp	r1, r22
    2380:	17 06       	cpc	r1, r23
    2382:	e8 07       	cpc	r30, r24
    2384:	f9 07       	cpc	r31, r25
    2386:	c0 f0       	brcs	.+48     	; 0x23b8 <__fp_cmp+0x46>
    2388:	12 16       	cp	r1, r18
    238a:	13 06       	cpc	r1, r19
    238c:	e4 07       	cpc	r30, r20
    238e:	f5 07       	cpc	r31, r21
    2390:	98 f0       	brcs	.+38     	; 0x23b8 <__fp_cmp+0x46>
    2392:	62 1b       	sub	r22, r18
    2394:	73 0b       	sbc	r23, r19
    2396:	84 0b       	sbc	r24, r20
    2398:	95 0b       	sbc	r25, r21
    239a:	39 f4       	brne	.+14     	; 0x23aa <__fp_cmp+0x38>
    239c:	0a 26       	eor	r0, r26
    239e:	61 f0       	breq	.+24     	; 0x23b8 <__fp_cmp+0x46>
    23a0:	23 2b       	or	r18, r19
    23a2:	24 2b       	or	r18, r20
    23a4:	25 2b       	or	r18, r21
    23a6:	21 f4       	brne	.+8      	; 0x23b0 <__fp_cmp+0x3e>
    23a8:	08 95       	ret
    23aa:	0a 26       	eor	r0, r26
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <__fp_cmp+0x3e>
    23ae:	a1 40       	sbci	r26, 0x01	; 1
    23b0:	a6 95       	lsr	r26
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	81 1d       	adc	r24, r1
    23b6:	81 1d       	adc	r24, r1
    23b8:	08 95       	ret

000023ba <__tablejump2__>:
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	88 1f       	adc	r24, r24
    23c0:	8b bf       	out	0x3b, r24	; 59
    23c2:	07 90       	elpm	r0, Z+
    23c4:	f6 91       	elpm	r31, Z
    23c6:	e0 2d       	mov	r30, r0
    23c8:	19 94       	eijmp

000023ca <__umulhisi3>:
    23ca:	a2 9f       	mul	r26, r18
    23cc:	b0 01       	movw	r22, r0
    23ce:	b3 9f       	mul	r27, r19
    23d0:	c0 01       	movw	r24, r0
    23d2:	a3 9f       	mul	r26, r19
    23d4:	70 0d       	add	r23, r0
    23d6:	81 1d       	adc	r24, r1
    23d8:	11 24       	eor	r1, r1
    23da:	91 1d       	adc	r25, r1
    23dc:	b2 9f       	mul	r27, r18
    23de:	70 0d       	add	r23, r0
    23e0:	81 1d       	adc	r24, r1
    23e2:	11 24       	eor	r1, r1
    23e4:	91 1d       	adc	r25, r1
    23e6:	08 95       	ret

000023e8 <_exit>:
    23e8:	f8 94       	cli

000023ea <__stop_program>:
    23ea:	ff cf       	rjmp	.-2      	; 0x23ea <__stop_program>
