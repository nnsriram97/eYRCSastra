
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800200  0000202c  000020c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000202c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a2  00800398  00800398  00002258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f3  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec4  00000000  00000000  00004523  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001881  00000000  00000000  000053e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00006c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a74  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011c7  00000000  00000000  00007bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00008d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_5>
      18:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c7       	rjmp	.+3678   	; 0xec4 <__vector_25>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7d c7       	rjmp	.+3834   	; 0xfc8 <__vector_51>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 07       	cpc	r24, r24
      e6:	d5 07       	cpc	r29, r21
      e8:	98 07       	cpc	r25, r24
      ea:	a4 07       	cpc	r26, r20
      ec:	a7 07       	cpc	r26, r23
      ee:	aa 07       	cpc	r26, r26
      f0:	b4 07       	cpc	r27, r20
      f2:	be 07       	cpc	r27, r30
      f4:	c4 07       	cpc	r28, r20
      f6:	c7 07       	cpc	r28, r23

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	13 e0       	ldi	r17, 0x03	; 3
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ec e2       	ldi	r30, 0x2C	; 44
     110:	f0 e2       	ldi	r31, 0x20	; 32
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a8 39       	cpi	r26, 0x98	; 152
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e0       	ldi	r18, 0x07	; 7
     124:	a8 e9       	ldi	r26, 0x98	; 152
     126:	b3 e0       	ldi	r27, 0x03	; 3
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	aa 33       	cpi	r26, 0x3A	; 58
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 37 0c 	call	0x186e	; 0x186e <main>
     136:	0c 94 14 10 	jmp	0x2028	; 0x2028 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <declare_constants>:
 motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	e8 eb       	ldi	r30, 0xB8	; 184
     162:	f5 e0       	ldi	r31, 0x05	; 5
     164:	0f 2e       	mov	r0, r31
     166:	fb e4       	ldi	r31, 0x4B	; 75
     168:	af 2e       	mov	r10, r31
     16a:	b1 2c       	mov	r11, r1
     16c:	f0 2d       	mov	r31, r0
     16e:	b1 82       	std	Z+1, r11	; 0x01
     170:	a0 82       	st	Z, r10
     172:	0f 2e       	mov	r0, r31
     174:	fd e1       	ldi	r31, 0x1D	; 29
     176:	4f 2e       	mov	r4, r31
     178:	55 24       	eor	r5, r5
     17a:	53 94       	inc	r5
     17c:	f0 2d       	mov	r31, r0
     17e:	53 82       	std	Z+3, r5	; 0x03
     180:	42 82       	std	Z+2, r4	; 0x02
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	9f ef       	ldi	r25, 0xFF	; 255
     186:	95 83       	std	Z+5, r25	; 0x05
     188:	84 83       	std	Z+4, r24	; 0x04
     18a:	97 83       	std	Z+7, r25	; 0x07
     18c:	86 83       	std	Z+6, r24	; 0x06
     18e:	cc 24       	eor	r12, r12
     190:	ca 94       	dec	r12
     192:	d1 2c       	mov	r13, r1
     194:	d1 86       	std	Z+9, r13	; 0x09
     196:	c0 86       	std	Z+8, r12	; 0x08
     198:	ac e3       	ldi	r26, 0x3C	; 60
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	b3 87       	std	Z+11, r27	; 0x0b
     19e:	a2 87       	std	Z+10, r26	; 0x0a
     1a0:	95 87       	std	Z+13, r25	; 0x0d
     1a2:	84 87       	std	Z+12, r24	; 0x0c
     1a4:	97 87       	std	Z+15, r25	; 0x0f
     1a6:	86 87       	std	Z+14, r24	; 0x0e
     1a8:	20 ef       	ldi	r18, 0xF0	; 240
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	31 8b       	std	Z+17, r19	; 0x11
     1ae:	20 8b       	std	Z+16, r18	; 0x10
     1b0:	0f 2e       	mov	r0, r31
     1b2:	fd e2       	ldi	r31, 0x2D	; 45
     1b4:	2f 2e       	mov	r2, r31
     1b6:	31 2c       	mov	r3, r1
     1b8:	f0 2d       	mov	r31, r0
     1ba:	33 8a       	std	Z+19, r3	; 0x13
     1bc:	22 8a       	std	Z+18, r2	; 0x12
     1be:	15 8a       	std	Z+21, r1	; 0x15
     1c0:	14 8a       	std	Z+20, r1	; 0x14
     1c2:	6c e2       	ldi	r22, 0x2C	; 44
     1c4:	71 e0       	ldi	r23, 0x01	; 1
     1c6:	77 8b       	std	Z+23, r23	; 0x17
     1c8:	66 8b       	std	Z+22, r22	; 0x16
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f1 ee       	ldi	r31, 0xE1	; 225
     1ce:	8f 2e       	mov	r8, r31
     1d0:	91 2c       	mov	r9, r1
     1d2:	f0 2d       	mov	r31, r0
     1d4:	91 8e       	std	Z+25, r9	; 0x19
     1d6:	80 8e       	std	Z+24, r8	; 0x18
     1d8:	0e e1       	ldi	r16, 0x1E	; 30
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	13 8f       	std	Z+27, r17	; 0x1b
     1de:	02 8f       	std	Z+26, r16	; 0x1a
     1e0:	95 8f       	std	Z+29, r25	; 0x1d
     1e2:	84 8f       	std	Z+28, r24	; 0x1c
     1e4:	97 8f       	std	Z+31, r25	; 0x1f
     1e6:	86 8f       	std	Z+30, r24	; 0x1e
     1e8:	42 ed       	ldi	r20, 0xD2	; 210
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	51 a3       	std	Z+33, r21	; 0x21
     1ee:	40 a3       	std	Z+32, r20	; 0x20
     1f0:	cf e0       	ldi	r28, 0x0F	; 15
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	d3 a3       	std	Z+35, r29	; 0x23
     1f6:	c2 a3       	std	Z+34, r28	; 0x22
     1f8:	95 a3       	std	Z+37, r25	; 0x25
     1fa:	84 a3       	std	Z+36, r24	; 0x24
     1fc:	97 a3       	std	Z+39, r25	; 0x27
     1fe:	86 a3       	std	Z+38, r24	; 0x26
     200:	03 ec       	ldi	r16, 0xC3	; 195
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	11 a7       	std	Z+41, r17	; 0x29
     206:	00 a7       	std	Z+40, r16	; 0x28
     208:	13 a6       	std	Z+43, r1	; 0x2b
     20a:	12 a6       	std	Z+42, r1	; 0x2a
     20c:	95 a7       	std	Z+45, r25	; 0x2d
     20e:	84 a7       	std	Z+44, r24	; 0x2c
     210:	97 a7       	std	Z+47, r25	; 0x2f
     212:	86 a7       	std	Z+46, r24	; 0x2e
     214:	44 eb       	ldi	r20, 0xB4	; 180
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	51 ab       	std	Z+49, r21	; 0x31
     21a:	40 ab       	std	Z+48, r20	; 0x30
     21c:	09 e5       	ldi	r16, 0x59	; 89
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	13 ab       	std	Z+51, r17	; 0x33
     222:	02 ab       	std	Z+50, r16	; 0x32
     224:	35 ab       	std	Z+53, r19	; 0x35
     226:	24 ab       	std	Z+52, r18	; 0x34
     228:	77 ab       	std	Z+55, r23	; 0x37
     22a:	66 ab       	std	Z+54, r22	; 0x36
     22c:	05 ea       	ldi	r16, 0xA5	; 165
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	11 af       	std	Z+57, r17	; 0x39
     232:	00 af       	std	Z+56, r16	; 0x38
     234:	0a e4       	ldi	r16, 0x4A	; 74
     236:	11 e0       	ldi	r17, 0x01	; 1
     238:	13 af       	std	Z+59, r17	; 0x3b
     23a:	02 af       	std	Z+58, r16	; 0x3a
     23c:	95 af       	std	Z+61, r25	; 0x3d
     23e:	84 af       	std	Z+60, r24	; 0x3c
     240:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <angle+0x3f>
     244:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <angle+0x3e>
     248:	e6 e9       	ldi	r30, 0x96	; 150
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	f0 93 f9 05 	sts	0x05F9, r31	; 0x8005f9 <angle+0x41>
     250:	e0 93 f8 05 	sts	0x05F8, r30	; 0x8005f8 <angle+0x40>
     254:	0b e3       	ldi	r16, 0x3B	; 59
     256:	11 e0       	ldi	r17, 0x01	; 1
     258:	10 93 fb 05 	sts	0x05FB, r17	; 0x8005fb <angle+0x43>
     25c:	00 93 fa 05 	sts	0x05FA, r16	; 0x8005fa <angle+0x42>
     260:	90 93 fd 05 	sts	0x05FD, r25	; 0x8005fd <angle+0x45>
     264:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <angle+0x44>
     268:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <angle+0x47>
     26c:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <angle+0x46>
     270:	0f 2e       	mov	r0, r31
     272:	f7 e8       	ldi	r31, 0x87	; 135
     274:	6f 2e       	mov	r6, r31
     276:	71 2c       	mov	r7, r1
     278:	f0 2d       	mov	r31, r0
     27a:	70 92 01 06 	sts	0x0601, r7	; 0x800601 <angle+0x49>
     27e:	60 92 00 06 	sts	0x0600, r6	; 0x800600 <angle+0x48>
     282:	70 93 03 06 	sts	0x0603, r23	; 0x800603 <angle+0x4b>
     286:	60 93 02 06 	sts	0x0602, r22	; 0x800602 <angle+0x4a>
     28a:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <angle+0x4d>
     28e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <angle+0x4c>
     292:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <angle+0x4f>
     296:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <angle+0x4e>
     29a:	e8 e7       	ldi	r30, 0x78	; 120
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	f0 93 09 06 	sts	0x0609, r31	; 0x800609 <angle+0x51>
     2a2:	e0 93 08 06 	sts	0x0608, r30	; 0x800608 <angle+0x50>
     2a6:	50 92 0b 06 	sts	0x060B, r5	; 0x80060b <angle+0x53>
     2aa:	40 92 0a 06 	sts	0x060A, r4	; 0x80060a <angle+0x52>
     2ae:	50 93 0d 06 	sts	0x060D, r21	; 0x80060d <angle+0x55>
     2b2:	40 93 0c 06 	sts	0x060C, r20	; 0x80060c <angle+0x54>
     2b6:	30 93 0f 06 	sts	0x060F, r19	; 0x80060f <angle+0x57>
     2ba:	20 93 0e 06 	sts	0x060E, r18	; 0x80060e <angle+0x56>
     2be:	0f 2e       	mov	r0, r31
     2c0:	f9 e6       	ldi	r31, 0x69	; 105
     2c2:	ef 2e       	mov	r14, r31
     2c4:	f1 2c       	mov	r15, r1
     2c6:	f0 2d       	mov	r31, r0
     2c8:	f0 92 11 06 	sts	0x0611, r15	; 0x800611 <angle+0x59>
     2cc:	e0 92 10 06 	sts	0x0610, r14	; 0x800610 <angle+0x58>
     2d0:	0e e0       	ldi	r16, 0x0E	; 14
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	10 93 13 06 	sts	0x0613, r17	; 0x800613 <angle+0x5b>
     2d8:	00 93 12 06 	sts	0x0612, r16	; 0x800612 <angle+0x5a>
     2dc:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <angle+0x5d>
     2e0:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <angle+0x5c>
     2e4:	90 93 17 06 	sts	0x0617, r25	; 0x800617 <angle+0x5f>
     2e8:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <angle+0x5e>
     2ec:	0a e5       	ldi	r16, 0x5A	; 90
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	10 93 19 06 	sts	0x0619, r17	; 0x800619 <angle+0x61>
     2f4:	00 93 18 06 	sts	0x0618, r16	; 0x800618 <angle+0x60>
     2f8:	d0 92 1b 06 	sts	0x061B, r13	; 0x80061b <angle+0x63>
     2fc:	c0 92 1a 06 	sts	0x061A, r12	; 0x80061a <angle+0x62>
     300:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <angle+0x65>
     304:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <angle+0x64>
     308:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <angle+0x67>
     30c:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <angle+0x66>
     310:	b0 92 21 06 	sts	0x0621, r11	; 0x800621 <angle+0x69>
     314:	a0 92 20 06 	sts	0x0620, r10	; 0x800620 <angle+0x68>
     318:	30 93 23 06 	sts	0x0623, r19	; 0x800623 <angle+0x6b>
     31c:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <angle+0x6a>
     320:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <angle+0x6d>
     324:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <angle+0x6c>
     328:	90 93 27 06 	sts	0x0627, r25	; 0x800627 <angle+0x6f>
     32c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <angle+0x6e>
     330:	b0 93 29 06 	sts	0x0629, r27	; 0x800629 <angle+0x71>
     334:	a0 93 28 06 	sts	0x0628, r26	; 0x800628 <angle+0x70>
     338:	90 92 2b 06 	sts	0x062B, r9	; 0x80062b <angle+0x73>
     33c:	80 92 2a 06 	sts	0x062A, r8	; 0x80062a <angle+0x72>
     340:	f0 93 2d 06 	sts	0x062D, r31	; 0x80062d <angle+0x75>
     344:	e0 93 2c 06 	sts	0x062C, r30	; 0x80062c <angle+0x74>
     348:	50 93 2f 06 	sts	0x062F, r21	; 0x80062f <angle+0x77>
     34c:	40 93 2e 06 	sts	0x062E, r20	; 0x80062e <angle+0x76>
     350:	30 92 31 06 	sts	0x0631, r3	; 0x800631 <angle+0x79>
     354:	20 92 30 06 	sts	0x0630, r2	; 0x800630 <angle+0x78>
     358:	0f 2e       	mov	r0, r31
     35a:	f2 ed       	ldi	r31, 0xD2	; 210
     35c:	cf 2e       	mov	r12, r31
     35e:	d1 2c       	mov	r13, r1
     360:	f0 2d       	mov	r31, r0
     362:	d0 92 33 06 	sts	0x0633, r13	; 0x800633 <angle+0x7b>
     366:	c0 92 32 06 	sts	0x0632, r12	; 0x800632 <angle+0x7a>
     36a:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <angle+0x7d>
     36e:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <angle+0x7c>
     372:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <angle+0x7f>
     376:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <angle+0x7e>
     37a:	0f 2e       	mov	r0, r31
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	cf 2e       	mov	r12, r31
     380:	d1 2c       	mov	r13, r1
     382:	f0 2d       	mov	r31, r0
     384:	d0 92 39 06 	sts	0x0639, r13	; 0x800639 <angle+0x81>
     388:	c0 92 38 06 	sts	0x0638, r12	; 0x800638 <angle+0x80>
     38c:	0f 2e       	mov	r0, r31
     38e:	f3 ec       	ldi	r31, 0xC3	; 195
     390:	cf 2e       	mov	r12, r31
     392:	d1 2c       	mov	r13, r1
     394:	f0 2d       	mov	r31, r0
     396:	d0 92 3b 06 	sts	0x063B, r13	; 0x80063b <angle+0x83>
     39a:	c0 92 3a 06 	sts	0x063A, r12	; 0x80063a <angle+0x82>
     39e:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <angle+0x85>
     3a2:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <angle+0x84>
     3a6:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <angle+0x87>
     3aa:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <angle+0x86>
     3ae:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <angle+0x89>
     3b2:	c0 93 40 06 	sts	0x0640, r28	; 0x800640 <angle+0x88>
     3b6:	50 93 43 06 	sts	0x0643, r21	; 0x800643 <angle+0x8b>
     3ba:	40 93 42 06 	sts	0x0642, r20	; 0x800642 <angle+0x8a>
     3be:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <angle+0x8d>
     3c2:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <angle+0x8c>
     3c6:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <angle+0x8f>
     3ca:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <angle+0x8e>
     3ce:	10 92 49 06 	sts	0x0649, r1	; 0x800649 <angle+0x91>
     3d2:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <angle+0x90>
     3d6:	0f 2e       	mov	r0, r31
     3d8:	f5 ea       	ldi	r31, 0xA5	; 165
     3da:	cf 2e       	mov	r12, r31
     3dc:	d1 2c       	mov	r13, r1
     3de:	f0 2d       	mov	r31, r0
     3e0:	d0 92 4b 06 	sts	0x064B, r13	; 0x80064b <angle+0x93>
     3e4:	c0 92 4a 06 	sts	0x064A, r12	; 0x80064a <angle+0x92>
     3e8:	b0 93 4d 06 	sts	0x064D, r27	; 0x80064d <angle+0x95>
     3ec:	a0 93 4c 06 	sts	0x064C, r26	; 0x80064c <angle+0x94>
     3f0:	f0 93 4f 06 	sts	0x064F, r31	; 0x80064f <angle+0x97>
     3f4:	e0 93 4e 06 	sts	0x064E, r30	; 0x80064e <angle+0x96>
     3f8:	0f 2e       	mov	r0, r31
     3fa:	f9 e5       	ldi	r31, 0x59	; 89
     3fc:	cf 2e       	mov	r12, r31
     3fe:	dd 24       	eor	r13, r13
     400:	d3 94       	inc	r13
     402:	f0 2d       	mov	r31, r0
     404:	d0 92 51 06 	sts	0x0651, r13	; 0x800651 <angle+0x99>
     408:	c0 92 50 06 	sts	0x0650, r12	; 0x800650 <angle+0x98>
     40c:	0f 2e       	mov	r0, r31
     40e:	f6 e9       	ldi	r31, 0x96	; 150
     410:	cf 2e       	mov	r12, r31
     412:	d1 2c       	mov	r13, r1
     414:	f0 2d       	mov	r31, r0
     416:	d0 92 53 06 	sts	0x0653, r13	; 0x800653 <angle+0x9b>
     41a:	c0 92 52 06 	sts	0x0652, r12	; 0x800652 <angle+0x9a>
     41e:	90 93 55 06 	sts	0x0655, r25	; 0x800655 <angle+0x9d>
     422:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <angle+0x9c>
     426:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <angle+0x9f>
     42a:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <angle+0x9e>
     42e:	0f 2e       	mov	r0, r31
     430:	fa e4       	ldi	r31, 0x4A	; 74
     432:	cf 2e       	mov	r12, r31
     434:	dd 24       	eor	r13, r13
     436:	d3 94       	inc	r13
     438:	f0 2d       	mov	r31, r0
     43a:	d0 92 59 06 	sts	0x0659, r13	; 0x800659 <angle+0xa1>
     43e:	c0 92 58 06 	sts	0x0658, r12	; 0x800658 <angle+0xa0>
     442:	70 92 5b 06 	sts	0x065B, r7	; 0x80065b <angle+0xa3>
     446:	60 92 5a 06 	sts	0x065A, r6	; 0x80065a <angle+0xa2>
     44a:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <angle+0xa5>
     44e:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <angle+0xa4>
     452:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <angle+0xa7>
     456:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <angle+0xa6>
     45a:	0f 2e       	mov	r0, r31
     45c:	fb e3       	ldi	r31, 0x3B	; 59
     45e:	cf 2e       	mov	r12, r31
     460:	dd 24       	eor	r13, r13
     462:	d3 94       	inc	r13
     464:	f0 2d       	mov	r31, r0
     466:	d0 92 61 06 	sts	0x0661, r13	; 0x800661 <angle+0xa9>
     46a:	c0 92 60 06 	sts	0x0660, r12	; 0x800660 <angle+0xa8>
     46e:	f0 93 63 06 	sts	0x0663, r31	; 0x800663 <angle+0xab>
     472:	e0 93 62 06 	sts	0x0662, r30	; 0x800662 <angle+0xaa>
     476:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <angle+0xad>
     47a:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <angle+0xac>
     47e:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <angle+0xaf>
     482:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <angle+0xae>
     486:	70 93 69 06 	sts	0x0669, r23	; 0x800669 <angle+0xb1>
     48a:	60 93 68 06 	sts	0x0668, r22	; 0x800668 <angle+0xb0>
     48e:	f0 92 6b 06 	sts	0x066B, r15	; 0x80066b <angle+0xb3>
     492:	e0 92 6a 06 	sts	0x066A, r14	; 0x80066a <angle+0xb2>
     496:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <angle+0xb5>
     49a:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <angle+0xb4>
     49e:	b0 93 6f 06 	sts	0x066F, r27	; 0x80066f <angle+0xb7>
     4a2:	a0 93 6e 06 	sts	0x066E, r26	; 0x80066e <angle+0xb6>
     4a6:	10 93 71 06 	sts	0x0671, r17	; 0x800671 <angle+0xb9>
     4aa:	00 93 70 06 	sts	0x0670, r16	; 0x800670 <angle+0xb8>
     4ae:	50 92 73 06 	sts	0x0673, r5	; 0x800673 <angle+0xbb>
     4b2:	40 92 72 06 	sts	0x0672, r4	; 0x800672 <angle+0xba>
     4b6:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <angle+0xbd>
     4ba:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <angle+0xbc>
     4be:	90 93 77 06 	sts	0x0677, r25	; 0x800677 <angle+0xbf>
     4c2:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <angle+0xbe>
     4c6:	50 93 79 06 	sts	0x0679, r21	; 0x800679 <angle+0xc1>
     4ca:	40 93 78 06 	sts	0x0678, r20	; 0x800678 <angle+0xc0>
     4ce:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <angle+0xc3>
     4d2:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <angle+0xc2>
     4d6:	30 93 7d 06 	sts	0x067D, r19	; 0x80067d <angle+0xc5>
     4da:	20 93 7c 06 	sts	0x067C, r18	; 0x80067c <angle+0xc4>
     4de:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <angle+0xc7>
     4e2:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <angle+0xc6>
     4e6:	50 93 81 06 	sts	0x0681, r21	; 0x800681 <angle+0xc9>
     4ea:	40 93 80 06 	sts	0x0680, r20	; 0x800680 <angle+0xc8>
     4ee:	10 92 83 06 	sts	0x0683, r1	; 0x800683 <angle+0xcb>
     4f2:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <angle+0xca>
     4f6:	b0 93 85 06 	sts	0x0685, r27	; 0x800685 <angle+0xcd>
     4fa:	a0 93 84 06 	sts	0x0684, r26	; 0x800684 <angle+0xcc>
     4fe:	70 93 87 06 	sts	0x0687, r23	; 0x800687 <angle+0xcf>
     502:	60 93 86 06 	sts	0x0686, r22	; 0x800686 <angle+0xce>
     506:	50 93 89 06 	sts	0x0689, r21	; 0x800689 <angle+0xd1>
     50a:	40 93 88 06 	sts	0x0688, r20	; 0x800688 <angle+0xd0>
     50e:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <angle+0xd3>
     512:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <angle+0xd2>
     516:	f0 93 8d 06 	sts	0x068D, r31	; 0x80068d <angle+0xd5>
     51a:	e0 93 8c 06 	sts	0x068C, r30	; 0x80068c <angle+0xd4>
     51e:	30 93 8f 06 	sts	0x068F, r19	; 0x80068f <angle+0xd7>
     522:	20 93 8e 06 	sts	0x068E, r18	; 0x80068e <angle+0xd6>
     526:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <angle+0xd9>
     52a:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <angle+0xd8>
     52e:	50 93 93 06 	sts	0x0693, r21	; 0x800693 <angle+0xdb>
     532:	40 93 92 06 	sts	0x0692, r20	; 0x800692 <angle+0xda>
     536:	70 93 95 06 	sts	0x0695, r23	; 0x800695 <angle+0xdd>
     53a:	60 93 94 06 	sts	0x0694, r22	; 0x800694 <angle+0xdc>
     53e:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <angle+0xdf>
     542:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <angle+0xde>
     546:	b0 93 99 06 	sts	0x0699, r27	; 0x800699 <angle+0xe1>
     54a:	a0 93 98 06 	sts	0x0698, r26	; 0x800698 <angle+0xe0>
     54e:	f0 93 9b 06 	sts	0x069B, r31	; 0x80069b <angle+0xe3>
     552:	e0 93 9a 06 	sts	0x069A, r30	; 0x80069a <angle+0xe2>
     556:	30 93 9d 06 	sts	0x069D, r19	; 0x80069d <angle+0xe5>
     55a:	20 93 9c 06 	sts	0x069C, r18	; 0x80069c <angle+0xe4>
     55e:	90 93 9f 06 	sts	0x069F, r25	; 0x80069f <angle+0xe7>
     562:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <angle+0xe6>
     566:	b0 93 a1 06 	sts	0x06A1, r27	; 0x8006a1 <angle+0xe9>
     56a:	a0 93 a0 06 	sts	0x06A0, r26	; 0x8006a0 <angle+0xe8>
     56e:	30 93 a3 06 	sts	0x06A3, r19	; 0x8006a3 <angle+0xeb>
     572:	20 93 a2 06 	sts	0x06A2, r18	; 0x8006a2 <angle+0xea>
     576:	70 93 a5 06 	sts	0x06A5, r23	; 0x8006a5 <angle+0xed>
     57a:	60 93 a4 06 	sts	0x06A4, r22	; 0x8006a4 <angle+0xec>
     57e:	50 93 a7 06 	sts	0x06A7, r21	; 0x8006a7 <angle+0xef>
     582:	40 93 a6 06 	sts	0x06A6, r20	; 0x8006a6 <angle+0xee>
     586:	b0 93 a9 06 	sts	0x06A9, r27	; 0x8006a9 <angle+0xf1>
     58a:	a0 93 a8 06 	sts	0x06A8, r26	; 0x8006a8 <angle+0xf0>
     58e:	30 93 ab 06 	sts	0x06AB, r19	; 0x8006ab <angle+0xf3>
     592:	20 93 aa 06 	sts	0x06AA, r18	; 0x8006aa <angle+0xf2>
     596:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <angle+0xf5>
     59a:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <angle+0xf4>
     59e:	f0 93 af 06 	sts	0x06AF, r31	; 0x8006af <angle+0xf7>
     5a2:	e0 93 ae 06 	sts	0x06AE, r30	; 0x8006ae <angle+0xf6>
     5a6:	30 93 b1 06 	sts	0x06B1, r19	; 0x8006b1 <angle+0xf9>
     5aa:	20 93 b0 06 	sts	0x06B0, r18	; 0x8006b0 <angle+0xf8>
     5ae:	b0 93 b3 06 	sts	0x06B3, r27	; 0x8006b3 <angle+0xfb>
     5b2:	a0 93 b2 06 	sts	0x06B2, r26	; 0x8006b2 <angle+0xfa>
     5b6:	50 93 b5 06 	sts	0x06B5, r21	; 0x8006b5 <angle+0xfd>
     5ba:	40 93 b4 06 	sts	0x06B4, r20	; 0x8006b4 <angle+0xfc>
     5be:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <angle+0xff>
     5c2:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <angle+0xfe>
     5c6:	70 93 b9 06 	sts	0x06B9, r23	; 0x8006b9 <angle+0x101>
     5ca:	60 93 b8 06 	sts	0x06B8, r22	; 0x8006b8 <angle+0x100>
     5ce:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <angle+0x103>
     5d2:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <angle+0x102>
     5d6:	f0 93 bd 06 	sts	0x06BD, r31	; 0x8006bd <angle+0x105>
     5da:	e0 93 bc 06 	sts	0x06BC, r30	; 0x8006bc <angle+0x104>
     5de:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <angle+0x107>
     5e2:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <angle+0x106>
     5e6:	70 93 c1 06 	sts	0x06C1, r23	; 0x8006c1 <angle+0x109>
     5ea:	60 93 c0 06 	sts	0x06C0, r22	; 0x8006c0 <angle+0x108>
     5ee:	f0 93 c3 06 	sts	0x06C3, r31	; 0x8006c3 <angle+0x10b>
     5f2:	e0 93 c2 06 	sts	0x06C2, r30	; 0x8006c2 <angle+0x10a>
     5f6:	50 93 c5 06 	sts	0x06C5, r21	; 0x8006c5 <angle+0x10d>
     5fa:	40 93 c4 06 	sts	0x06C4, r20	; 0x8006c4 <angle+0x10c>
     5fe:	b0 93 c7 06 	sts	0x06C7, r27	; 0x8006c7 <angle+0x10f>
     602:	a0 93 c6 06 	sts	0x06C6, r26	; 0x8006c6 <angle+0x10e>
     606:	70 93 c9 06 	sts	0x06C9, r23	; 0x8006c9 <angle+0x111>
     60a:	60 93 c8 06 	sts	0x06C8, r22	; 0x8006c8 <angle+0x110>
     60e:	f0 93 cb 06 	sts	0x06CB, r31	; 0x8006cb <angle+0x113>
     612:	e0 93 ca 06 	sts	0x06CA, r30	; 0x8006ca <angle+0x112>
     616:	30 93 cd 06 	sts	0x06CD, r19	; 0x8006cd <angle+0x115>
     61a:	20 93 cc 06 	sts	0x06CC, r18	; 0x8006cc <angle+0x114>
     61e:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <angle+0x117>
     622:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <angle+0x116>
     626:	f0 93 d1 06 	sts	0x06D1, r31	; 0x8006d1 <angle+0x119>
     62a:	e0 93 d0 06 	sts	0x06D0, r30	; 0x8006d0 <angle+0x118>
     62e:	b0 93 d3 06 	sts	0x06D3, r27	; 0x8006d3 <angle+0x11b>
     632:	a0 93 d2 06 	sts	0x06D2, r26	; 0x8006d2 <angle+0x11a>
     636:	70 93 d5 06 	sts	0x06D5, r23	; 0x8006d5 <angle+0x11d>
     63a:	60 93 d4 06 	sts	0x06D4, r22	; 0x8006d4 <angle+0x11c>
     63e:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <angle+0x11f>
     642:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <angle+0x11e>
     646:	b0 93 d9 06 	sts	0x06D9, r27	; 0x8006d9 <angle+0x121>
     64a:	a0 93 d8 06 	sts	0x06D8, r26	; 0x8006d8 <angle+0x120>
     64e:	30 93 db 06 	sts	0x06DB, r19	; 0x8006db <angle+0x123>
     652:	20 93 da 06 	sts	0x06DA, r18	; 0x8006da <angle+0x122>
     656:	90 93 dd 06 	sts	0x06DD, r25	; 0x8006dd <angle+0x125>
     65a:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <angle+0x124>
     65e:	90 93 df 06 	sts	0x06DF, r25	; 0x8006df <angle+0x127>
     662:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <angle+0x126>
     666:	f0 93 e1 06 	sts	0x06E1, r31	; 0x8006e1 <angle+0x129>
     66a:	e0 93 e0 06 	sts	0x06E0, r30	; 0x8006e0 <angle+0x128>
     66e:	70 93 e3 06 	sts	0x06E3, r23	; 0x8006e3 <angle+0x12b>
     672:	60 93 e2 06 	sts	0x06E2, r22	; 0x8006e2 <angle+0x12a>
     676:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <angle+0x12d>
     67a:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <angle+0x12c>
     67e:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <angle+0x12f>
     682:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <angle+0x12e>
     686:	70 93 e9 06 	sts	0x06E9, r23	; 0x8006e9 <angle+0x131>
     68a:	60 93 e8 06 	sts	0x06E8, r22	; 0x8006e8 <angle+0x130>
     68e:	f0 93 eb 06 	sts	0x06EB, r31	; 0x8006eb <angle+0x133>
     692:	e0 93 ea 06 	sts	0x06EA, r30	; 0x8006ea <angle+0x132>
     696:	90 93 ed 06 	sts	0x06ED, r25	; 0x8006ed <angle+0x135>
     69a:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <angle+0x134>
     69e:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <angle+0x137>
     6a2:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <angle+0x136>
     6a6:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <angle+0x139>
     6aa:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <angle+0x138>
     6ae:	50 93 f3 06 	sts	0x06F3, r21	; 0x8006f3 <angle+0x13b>
     6b2:	40 93 f2 06 	sts	0x06F2, r20	; 0x8006f2 <angle+0x13a>
     6b6:	90 93 f5 06 	sts	0x06F5, r25	; 0x8006f5 <angle+0x13d>
     6ba:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <angle+0x13c>
     6be:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <angle+0x13f>
     6c2:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <angle+0x13e>
     6c6:	50 93 f9 06 	sts	0x06F9, r21	; 0x8006f9 <angle+0x141>
     6ca:	40 93 f8 06 	sts	0x06F8, r20	; 0x8006f8 <angle+0x140>
     6ce:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <angle+0x143>
     6d2:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <angle+0x142>
     6d6:	90 93 fd 06 	sts	0x06FD, r25	; 0x8006fd <angle+0x145>
     6da:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <angle+0x144>
     6de:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <angle+0x147>
     6e2:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <angle+0x146>
     6e6:	30 93 01 07 	sts	0x0701, r19	; 0x800701 <angle+0x149>
     6ea:	20 93 00 07 	sts	0x0700, r18	; 0x800700 <angle+0x148>
     6ee:	b0 93 03 07 	sts	0x0703, r27	; 0x800703 <angle+0x14b>
     6f2:	a0 93 02 07 	sts	0x0702, r26	; 0x800702 <angle+0x14a>
     6f6:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <angle+0x14d>
     6fa:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <angle+0x14c>
     6fe:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <angle+0x14f>
     702:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <angle+0x14e>
     706:	50 93 09 07 	sts	0x0709, r21	; 0x800709 <angle+0x151>
     70a:	40 93 08 07 	sts	0x0708, r20	; 0x800708 <angle+0x150>
     70e:	b0 93 0b 07 	sts	0x070B, r27	; 0x80070b <angle+0x153>
     712:	a0 93 0a 07 	sts	0x070A, r26	; 0x80070a <angle+0x152>
     716:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <angle+0x155>
     71a:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <angle+0x154>
     71e:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <angle+0x157>
     722:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <angle+0x156>
     726:	f0 93 11 07 	sts	0x0711, r31	; 0x800711 <angle+0x159>
     72a:	e0 93 10 07 	sts	0x0710, r30	; 0x800710 <angle+0x158>
     72e:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <angle+0x15b>
     732:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <angle+0x15a>
     736:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <angle+0x15d>
     73a:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <angle+0x15c>
     73e:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <angle+0x15f>
     742:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <angle+0x15e>
     746:	b0 93 19 07 	sts	0x0719, r27	; 0x800719 <angle+0x161>
     74a:	a0 93 18 07 	sts	0x0718, r26	; 0x800718 <angle+0x160>
     74e:	70 93 1b 07 	sts	0x071B, r23	; 0x80071b <angle+0x163>
     752:	60 93 1a 07 	sts	0x071A, r22	; 0x80071a <angle+0x162>
     756:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <angle+0x165>
     75a:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <angle+0x164>
     75e:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <angle+0x167>
     762:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <angle+0x166>
     766:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <angle+0x169>
     76a:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <angle+0x168>
     76e:	f0 93 23 07 	sts	0x0723, r31	; 0x800723 <angle+0x16b>
     772:	e0 93 22 07 	sts	0x0722, r30	; 0x800722 <angle+0x16a>
     776:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <angle+0x16d>
     77a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <angle+0x16c>
     77e:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <angle+0x16f>
     782:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <angle+0x16e>
     786:	70 93 29 07 	sts	0x0729, r23	; 0x800729 <angle+0x171>
     78a:	60 93 28 07 	sts	0x0728, r22	; 0x800728 <angle+0x170>
     78e:	50 93 2b 07 	sts	0x072B, r21	; 0x80072b <angle+0x173>
     792:	40 93 2a 07 	sts	0x072A, r20	; 0x80072a <angle+0x172>
     796:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <angle+0x175>
     79a:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <angle+0x174>
     79e:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <angle+0x177>
     7a2:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <angle+0x176>
     7a6:	30 93 31 07 	sts	0x0731, r19	; 0x800731 <angle+0x179>
     7aa:	20 93 30 07 	sts	0x0730, r18	; 0x800730 <angle+0x178>
     7ae:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <angle+0x17b>
     7b2:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <angle+0x17a>
     7b6:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <angle+0x17d>
     7ba:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <angle+0x17c>
     7be:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <angle+0x17f>
     7c2:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <angle+0x17e>
     7c6:	e7 e3       	ldi	r30, 0x37	; 55
     7c8:	f4 e0       	ldi	r31, 0x04	; 4
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
     7d2:	28 e1       	ldi	r18, 0x18	; 24
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	33 83       	std	Z+3, r19	; 0x03
     7d8:	22 83       	std	Z+2, r18	; 0x02
     7da:	15 82       	std	Z+5, r1	; 0x05
     7dc:	14 82       	std	Z+4, r1	; 0x04
     7de:	17 82       	std	Z+7, r1	; 0x07
     7e0:	16 82       	std	Z+6, r1	; 0x06
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	31 87       	std	Z+9, r19	; 0x09
     7e8:	20 87       	std	Z+8, r18	; 0x08
     7ea:	23 e0       	ldi	r18, 0x03	; 3
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	33 87       	std	Z+11, r19	; 0x0b
     7f0:	22 87       	std	Z+10, r18	; 0x0a
     7f2:	15 86       	std	Z+13, r1	; 0x0d
     7f4:	14 86       	std	Z+12, r1	; 0x0c
     7f6:	17 86       	std	Z+15, r1	; 0x0f
     7f8:	16 86       	std	Z+14, r1	; 0x0e
     7fa:	91 8b       	std	Z+17, r25	; 0x11
     7fc:	80 8b       	std	Z+16, r24	; 0x10
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	93 8b       	std	Z+19, r25	; 0x13
     804:	82 8b       	std	Z+18, r24	; 0x12
     806:	49 e1       	ldi	r20, 0x19	; 25
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	55 8b       	std	Z+21, r21	; 0x15
     80c:	44 8b       	std	Z+20, r20	; 0x14
     80e:	44 e2       	ldi	r20, 0x24	; 36
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	57 8b       	std	Z+23, r21	; 0x17
     814:	46 8b       	std	Z+22, r20	; 0x16
     816:	31 8f       	std	Z+25, r19	; 0x19
     818:	20 8f       	std	Z+24, r18	; 0x18
     81a:	25 e0       	ldi	r18, 0x05	; 5
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	33 8f       	std	Z+27, r19	; 0x1b
     820:	22 8f       	std	Z+26, r18	; 0x1a
     822:	15 8e       	std	Z+29, r1	; 0x1d
     824:	14 8e       	std	Z+28, r1	; 0x1c
     826:	17 8e       	std	Z+31, r1	; 0x1f
     828:	16 8e       	std	Z+30, r1	; 0x1e
     82a:	91 a3       	std	Z+33, r25	; 0x21
     82c:	80 a3       	std	Z+32, r24	; 0x20
     82e:	86 e0       	ldi	r24, 0x06	; 6
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	93 a3       	std	Z+35, r25	; 0x23
     834:	82 a3       	std	Z+34, r24	; 0x22
     836:	15 a2       	std	Z+37, r1	; 0x25
     838:	14 a2       	std	Z+36, r1	; 0x24
     83a:	17 a2       	std	Z+39, r1	; 0x27
     83c:	16 a2       	std	Z+38, r1	; 0x26
     83e:	31 a7       	std	Z+41, r19	; 0x29
     840:	20 a7       	std	Z+40, r18	; 0x28
     842:	27 e0       	ldi	r18, 0x07	; 7
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	33 a7       	std	Z+43, r19	; 0x2b
     848:	22 a7       	std	Z+42, r18	; 0x2a
     84a:	15 a6       	std	Z+45, r1	; 0x2d
     84c:	14 a6       	std	Z+44, r1	; 0x2c
     84e:	17 a6       	std	Z+47, r1	; 0x2f
     850:	16 a6       	std	Z+46, r1	; 0x2e
     852:	91 ab       	std	Z+49, r25	; 0x31
     854:	80 ab       	std	Z+48, r24	; 0x30
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	93 ab       	std	Z+51, r25	; 0x33
     85c:	82 ab       	std	Z+50, r24	; 0x32
     85e:	45 e2       	ldi	r20, 0x25	; 37
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	55 ab       	std	Z+53, r21	; 0x35
     864:	44 ab       	std	Z+52, r20	; 0x34
     866:	46 e2       	ldi	r20, 0x26	; 38
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	57 ab       	std	Z+55, r21	; 0x37
     86c:	46 ab       	std	Z+54, r20	; 0x36
     86e:	31 af       	std	Z+57, r19	; 0x39
     870:	20 af       	std	Z+56, r18	; 0x38
     872:	29 e0       	ldi	r18, 0x09	; 9
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	33 af       	std	Z+59, r19	; 0x3b
     878:	22 af       	std	Z+58, r18	; 0x3a
     87a:	15 ae       	std	Z+61, r1	; 0x3d
     87c:	14 ae       	std	Z+60, r1	; 0x3c
     87e:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <node+0x3f>
     882:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <node+0x3e>
     886:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <node+0x41>
     88a:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <node+0x40>
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <node+0x43>
     896:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <node+0x42>
     89a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <node+0x45>
     89e:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <node+0x44>
     8a2:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <node+0x47>
     8a6:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <node+0x46>
     8aa:	30 93 80 04 	sts	0x0480, r19	; 0x800480 <node+0x49>
     8ae:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <node+0x48>
     8b2:	2b e0       	ldi	r18, 0x0B	; 11
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	30 93 82 04 	sts	0x0482, r19	; 0x800482 <node+0x4b>
     8ba:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <node+0x4a>
     8be:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <node+0x4d>
     8c2:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <node+0x4c>
     8c6:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <node+0x4f>
     8ca:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <node+0x4e>
     8ce:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <node+0x51>
     8d2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <node+0x50>
     8d6:	8c e0       	ldi	r24, 0x0C	; 12
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <node+0x53>
     8de:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <node+0x52>
     8e2:	4c e1       	ldi	r20, 0x1C	; 28
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	50 93 8c 04 	sts	0x048C, r21	; 0x80048c <node+0x55>
     8ea:	40 93 8b 04 	sts	0x048B, r20	; 0x80048b <node+0x54>
     8ee:	4d e1       	ldi	r20, 0x1D	; 29
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	50 93 8e 04 	sts	0x048E, r21	; 0x80048e <node+0x57>
     8f6:	40 93 8d 04 	sts	0x048D, r20	; 0x80048d <node+0x56>
     8fa:	30 93 90 04 	sts	0x0490, r19	; 0x800490 <node+0x59>
     8fe:	20 93 8f 04 	sts	0x048F, r18	; 0x80048f <node+0x58>
     902:	2d e0       	ldi	r18, 0x0D	; 13
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	30 93 92 04 	sts	0x0492, r19	; 0x800492 <node+0x5b>
     90a:	20 93 91 04 	sts	0x0491, r18	; 0x800491 <node+0x5a>
     90e:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <node+0x5d>
     912:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <node+0x5c>
     916:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <node+0x5f>
     91a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <node+0x5e>
     91e:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <node+0x61>
     922:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <node+0x60>
     926:	8e e0       	ldi	r24, 0x0E	; 14
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <node+0x63>
     92e:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <node+0x62>
     932:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <node+0x65>
     936:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <node+0x64>
     93a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <node+0x67>
     93e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <node+0x66>
     942:	30 93 a0 04 	sts	0x04A0, r19	; 0x8004a0 <node+0x69>
     946:	20 93 9f 04 	sts	0x049F, r18	; 0x80049f <node+0x68>
     94a:	d0 93 a2 04 	sts	0x04A2, r29	; 0x8004a2 <node+0x6b>
     94e:	c0 93 a1 04 	sts	0x04A1, r28	; 0x8004a1 <node+0x6a>
     952:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <node+0x6d>
     956:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <node+0x6c>
     95a:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <node+0x6f>
     95e:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <node+0x6e>
     962:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <node+0x71>
     966:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <node+0x70>
     96a:	20 e1       	ldi	r18, 0x10	; 16
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	30 93 aa 04 	sts	0x04AA, r19	; 0x8004aa <node+0x73>
     972:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <node+0x72>
     976:	87 e2       	ldi	r24, 0x27	; 39
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <node+0x75>
     97e:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <node+0x74>
     982:	88 e2       	ldi	r24, 0x28	; 40
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <node+0x77>
     98a:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <node+0x76>
     98e:	d0 93 b0 04 	sts	0x04B0, r29	; 0x8004b0 <node+0x79>
     992:	c0 93 af 04 	sts	0x04AF, r28	; 0x8004af <node+0x78>
     996:	81 e1       	ldi	r24, 0x11	; 17
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <node+0x7b>
     99e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <node+0x7a>
     9a2:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <node+0x7d>
     9a6:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <node+0x7c>
     9aa:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <node+0x7f>
     9ae:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <node+0x7e>
     9b2:	30 93 b8 04 	sts	0x04B8, r19	; 0x8004b8 <node+0x81>
     9b6:	20 93 b7 04 	sts	0x04B7, r18	; 0x8004b7 <node+0x80>
     9ba:	22 e1       	ldi	r18, 0x12	; 18
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	30 93 ba 04 	sts	0x04BA, r19	; 0x8004ba <node+0x83>
     9c2:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <node+0x82>
     9c6:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <node+0x85>
     9ca:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <node+0x84>
     9ce:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <node+0x87>
     9d2:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <node+0x86>
     9d6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <node+0x89>
     9da:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <node+0x88>
     9de:	83 e1       	ldi	r24, 0x13	; 19
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <node+0x8b>
     9e6:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <node+0x8a>
     9ea:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <node+0x8d>
     9ee:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <node+0x8c>
     9f2:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <node+0x8f>
     9f6:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <node+0x8e>
     9fa:	30 93 c8 04 	sts	0x04C8, r19	; 0x8004c8 <node+0x91>
     9fe:	20 93 c7 04 	sts	0x04C7, r18	; 0x8004c7 <node+0x90>
     a02:	24 e1       	ldi	r18, 0x14	; 20
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	30 93 ca 04 	sts	0x04CA, r19	; 0x8004ca <node+0x93>
     a0a:	20 93 c9 04 	sts	0x04C9, r18	; 0x8004c9 <node+0x92>
     a0e:	40 e2       	ldi	r20, 0x20	; 32
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	50 93 cc 04 	sts	0x04CC, r21	; 0x8004cc <node+0x95>
     a16:	40 93 cb 04 	sts	0x04CB, r20	; 0x8004cb <node+0x94>
     a1a:	41 e2       	ldi	r20, 0x21	; 33
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	50 93 ce 04 	sts	0x04CE, r21	; 0x8004ce <node+0x97>
     a22:	40 93 cd 04 	sts	0x04CD, r20	; 0x8004cd <node+0x96>
     a26:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <node+0x99>
     a2a:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <node+0x98>
     a2e:	85 e1       	ldi	r24, 0x15	; 21
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <node+0x9b>
     a36:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <node+0x9a>
     a3a:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <node+0x9d>
     a3e:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <node+0x9c>
     a42:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <node+0x9f>
     a46:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <node+0x9e>
     a4a:	30 93 d8 04 	sts	0x04D8, r19	; 0x8004d8 <node+0xa1>
     a4e:	20 93 d7 04 	sts	0x04D7, r18	; 0x8004d7 <node+0xa0>
     a52:	26 e1       	ldi	r18, 0x16	; 22
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	30 93 da 04 	sts	0x04DA, r19	; 0x8004da <node+0xa3>
     a5a:	20 93 d9 04 	sts	0x04D9, r18	; 0x8004d9 <node+0xa2>
     a5e:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <node+0xa5>
     a62:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <node+0xa4>
     a66:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <node+0xa7>
     a6a:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <node+0xa6>
     a6e:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <node+0xa9>
     a72:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <node+0xa8>
     a76:	87 e1       	ldi	r24, 0x17	; 23
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <node+0xab>
     a7e:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <node+0xaa>
     a82:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <node+0xad>
     a86:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <node+0xac>
     a8a:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <node+0xaf>
     a8e:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <node+0xae>
     a92:	86 e1       	ldi	r24, 0x16	; 22
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <node+0xb1>
     a9a:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <node+0xb0>
     a9e:	88 e1       	ldi	r24, 0x18	; 24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <node+0xb3>
     aa6:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <node+0xb2>
     aaa:	c9 e2       	ldi	r28, 0x29	; 41
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	d0 93 ec 04 	sts	0x04EC, r29	; 0x8004ec <node+0xb5>
     ab2:	c0 93 eb 04 	sts	0x04EB, r28	; 0x8004eb <node+0xb4>
     ab6:	0f 2e       	mov	r0, r31
     ab8:	fa e2       	ldi	r31, 0x2A	; 42
     aba:	af 2e       	mov	r10, r31
     abc:	b1 2c       	mov	r11, r1
     abe:	f0 2d       	mov	r31, r0
     ac0:	b0 92 ee 04 	sts	0x04EE, r11	; 0x8004ee <node+0xb7>
     ac4:	a0 92 ed 04 	sts	0x04ED, r10	; 0x8004ed <node+0xb6>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <node+0xb9>
     ad0:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <node+0xb8>
     ad4:	e7 e1       	ldi	r30, 0x17	; 23
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	f0 93 f2 04 	sts	0x04F2, r31	; 0x8004f2 <node+0xbb>
     adc:	e0 93 f1 04 	sts	0x04F1, r30	; 0x8004f1 <node+0xba>
     ae0:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <node+0xbd>
     ae4:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <node+0xbc>
     ae8:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <node+0xbf>
     aec:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <node+0xbe>
     af0:	0f 2e       	mov	r0, r31
     af2:	f3 e0       	ldi	r31, 0x03	; 3
     af4:	8f 2e       	mov	r8, r31
     af6:	91 2c       	mov	r9, r1
     af8:	f0 2d       	mov	r31, r0
     afa:	90 92 f8 04 	sts	0x04F8, r9	; 0x8004f8 <node+0xc1>
     afe:	80 92 f7 04 	sts	0x04F7, r8	; 0x8004f7 <node+0xc0>
     b02:	6a e1       	ldi	r22, 0x1A	; 26
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	70 93 fa 04 	sts	0x04FA, r23	; 0x8004fa <node+0xc3>
     b0a:	60 93 f9 04 	sts	0x04F9, r22	; 0x8004f9 <node+0xc2>
     b0e:	a4 e2       	ldi	r26, 0x24	; 36
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <node+0xc5>
     b16:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <node+0xc4>
     b1a:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <node+0xc7>
     b1e:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <node+0xc6>
     b22:	0f 2e       	mov	r0, r31
     b24:	f9 e1       	ldi	r31, 0x19	; 25
     b26:	6f 2e       	mov	r6, r31
     b28:	71 2c       	mov	r7, r1
     b2a:	f0 2d       	mov	r31, r0
     b2c:	70 92 00 05 	sts	0x0500, r7	; 0x800500 <node+0xc9>
     b30:	60 92 ff 04 	sts	0x04FF, r6	; 0x8004ff <node+0xc8>
     b34:	4b e1       	ldi	r20, 0x1B	; 27
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	50 93 02 05 	sts	0x0502, r21	; 0x800502 <node+0xcb>
     b3c:	40 93 01 05 	sts	0x0501, r20	; 0x800501 <node+0xca>
     b40:	85 e2       	ldi	r24, 0x25	; 37
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <node+0xcd>
     b48:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <node+0xcc>
     b4c:	0f 2e       	mov	r0, r31
     b4e:	fc e2       	ldi	r31, 0x2C	; 44
     b50:	4f 2e       	mov	r4, r31
     b52:	51 2c       	mov	r5, r1
     b54:	f0 2d       	mov	r31, r0
     b56:	50 92 06 05 	sts	0x0506, r5	; 0x800506 <node+0xcf>
     b5a:	40 92 05 05 	sts	0x0505, r4	; 0x800505 <node+0xce>
     b5e:	70 93 08 05 	sts	0x0508, r23	; 0x800508 <node+0xd1>
     b62:	60 93 07 05 	sts	0x0507, r22	; 0x800507 <node+0xd0>
     b66:	2c e1       	ldi	r18, 0x1C	; 28
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	30 93 0a 05 	sts	0x050A, r19	; 0x80050a <node+0xd3>
     b6e:	20 93 09 05 	sts	0x0509, r18	; 0x800509 <node+0xd2>
     b72:	86 e2       	ldi	r24, 0x26	; 38
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <node+0xd5>
     b7a:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <node+0xd4>
     b7e:	0d e2       	ldi	r16, 0x2D	; 45
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	10 93 0e 05 	sts	0x050E, r17	; 0x80050e <node+0xd7>
     b86:	00 93 0d 05 	sts	0x050D, r16	; 0x80050d <node+0xd6>
     b8a:	0b e0       	ldi	r16, 0x0B	; 11
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	10 93 10 05 	sts	0x0510, r17	; 0x800510 <node+0xd9>
     b92:	00 93 0f 05 	sts	0x050F, r16	; 0x80050f <node+0xd8>
     b96:	50 93 12 05 	sts	0x0512, r21	; 0x800512 <node+0xdb>
     b9a:	40 93 11 05 	sts	0x0511, r20	; 0x800511 <node+0xda>
     b9e:	8d e1       	ldi	r24, 0x1D	; 29
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <node+0xdd>
     ba6:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <node+0xdc>
     baa:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <node+0xdf>
     bae:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <node+0xde>
     bb2:	10 93 18 05 	sts	0x0518, r17	; 0x800518 <node+0xe1>
     bb6:	00 93 17 05 	sts	0x0517, r16	; 0x800517 <node+0xe0>
     bba:	30 93 1a 05 	sts	0x051A, r19	; 0x80051a <node+0xe3>
     bbe:	20 93 19 05 	sts	0x0519, r18	; 0x800519 <node+0xe2>
     bc2:	2e e1       	ldi	r18, 0x1E	; 30
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	30 93 1c 05 	sts	0x051C, r19	; 0x80051c <node+0xe5>
     bca:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <node+0xe4>
     bce:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <node+0xe7>
     bd2:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <node+0xe6>
     bd6:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <node+0xe9>
     bda:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <node+0xe8>
     bde:	8f e1       	ldi	r24, 0x1F	; 31
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <node+0xeb>
     be6:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <node+0xea>
     bea:	07 e2       	ldi	r16, 0x27	; 39
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	10 93 24 05 	sts	0x0524, r17	; 0x800524 <node+0xed>
     bf2:	00 93 23 05 	sts	0x0523, r16	; 0x800523 <node+0xec>
     bf6:	0f 2e       	mov	r0, r31
     bf8:	fe e2       	ldi	r31, 0x2E	; 46
     bfa:	2f 2e       	mov	r2, r31
     bfc:	31 2c       	mov	r3, r1
     bfe:	f0 2d       	mov	r31, r0
     c00:	30 92 26 05 	sts	0x0526, r3	; 0x800526 <node+0xef>
     c04:	20 92 25 05 	sts	0x0525, r2	; 0x800525 <node+0xee>
     c08:	30 93 28 05 	sts	0x0528, r19	; 0x800528 <node+0xf1>
     c0c:	20 93 27 05 	sts	0x0527, r18	; 0x800527 <node+0xf0>
     c10:	68 94       	set
     c12:	ee 24       	eor	r14, r14
     c14:	e5 f8       	bld	r14, 5
     c16:	f1 2c       	mov	r15, r1
     c18:	f0 92 2a 05 	sts	0x052A, r15	; 0x80052a <node+0xf3>
     c1c:	e0 92 29 05 	sts	0x0529, r14	; 0x800529 <node+0xf2>
     c20:	08 e2       	ldi	r16, 0x28	; 40
     c22:	10 e0       	ldi	r17, 0x00	; 0
     c24:	10 93 2c 05 	sts	0x052C, r17	; 0x80052c <node+0xf5>
     c28:	00 93 2b 05 	sts	0x052B, r16	; 0x80052b <node+0xf4>
     c2c:	0f 2e       	mov	r0, r31
     c2e:	ff e2       	ldi	r31, 0x2F	; 47
     c30:	cf 2e       	mov	r12, r31
     c32:	d1 2c       	mov	r13, r1
     c34:	f0 2d       	mov	r31, r0
     c36:	d0 92 2e 05 	sts	0x052E, r13	; 0x80052e <node+0xf7>
     c3a:	c0 92 2d 05 	sts	0x052D, r12	; 0x80052d <node+0xf6>
     c3e:	0f 2e       	mov	r0, r31
     c40:	f3 e1       	ldi	r31, 0x13	; 19
     c42:	cf 2e       	mov	r12, r31
     c44:	d1 2c       	mov	r13, r1
     c46:	f0 2d       	mov	r31, r0
     c48:	d0 92 30 05 	sts	0x0530, r13	; 0x800530 <node+0xf9>
     c4c:	c0 92 2f 05 	sts	0x052F, r12	; 0x80052f <node+0xf8>
     c50:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <node+0xfb>
     c54:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <node+0xfa>
     c58:	01 e2       	ldi	r16, 0x21	; 33
     c5a:	10 e0       	ldi	r17, 0x00	; 0
     c5c:	10 93 34 05 	sts	0x0534, r17	; 0x800534 <node+0xfd>
     c60:	00 93 33 05 	sts	0x0533, r16	; 0x800533 <node+0xfc>
     c64:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <node+0xff>
     c68:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <node+0xfe>
     c6c:	d0 92 38 05 	sts	0x0538, r13	; 0x800538 <node+0x101>
     c70:	c0 92 37 05 	sts	0x0537, r12	; 0x800537 <node+0x100>
     c74:	f0 92 3a 05 	sts	0x053A, r15	; 0x80053a <node+0x103>
     c78:	e0 92 39 05 	sts	0x0539, r14	; 0x800539 <node+0x102>
     c7c:	0f 2e       	mov	r0, r31
     c7e:	f2 e2       	ldi	r31, 0x22	; 34
     c80:	ef 2e       	mov	r14, r31
     c82:	f1 2c       	mov	r15, r1
     c84:	f0 2d       	mov	r31, r0
     c86:	f0 92 3c 05 	sts	0x053C, r15	; 0x80053c <node+0x105>
     c8a:	e0 92 3b 05 	sts	0x053B, r14	; 0x80053b <node+0x104>
     c8e:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <node+0x107>
     c92:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <node+0x106>
     c96:	10 93 40 05 	sts	0x0540, r17	; 0x800540 <node+0x109>
     c9a:	00 93 3f 05 	sts	0x053F, r16	; 0x80053f <node+0x108>
     c9e:	03 e2       	ldi	r16, 0x23	; 35
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	10 93 42 05 	sts	0x0542, r17	; 0x800542 <node+0x10b>
     ca6:	00 93 41 05 	sts	0x0541, r16	; 0x800541 <node+0x10a>
     caa:	d0 93 44 05 	sts	0x0544, r29	; 0x800544 <node+0x10d>
     cae:	c0 93 43 05 	sts	0x0543, r28	; 0x800543 <node+0x10c>
     cb2:	c0 e3       	ldi	r28, 0x30	; 48
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
     cb6:	d0 93 46 05 	sts	0x0546, r29	; 0x800546 <node+0x10f>
     cba:	c0 93 45 05 	sts	0x0545, r28	; 0x800545 <node+0x10e>
     cbe:	f0 92 48 05 	sts	0x0548, r15	; 0x800548 <node+0x111>
     cc2:	e0 92 47 05 	sts	0x0547, r14	; 0x800547 <node+0x110>
     cc6:	b0 93 4a 05 	sts	0x054A, r27	; 0x80054a <node+0x113>
     cca:	a0 93 49 05 	sts	0x0549, r26	; 0x800549 <node+0x112>
     cce:	b0 92 4c 05 	sts	0x054C, r11	; 0x80054c <node+0x115>
     cd2:	a0 92 4b 05 	sts	0x054B, r10	; 0x80054b <node+0x114>
     cd6:	ab e2       	ldi	r26, 0x2B	; 43
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	b0 93 4e 05 	sts	0x054E, r27	; 0x80054e <node+0x117>
     cde:	a0 93 4d 05 	sts	0x054D, r26	; 0x80054d <node+0x116>
     ce2:	90 92 50 05 	sts	0x0550, r9	; 0x800550 <node+0x119>
     ce6:	80 92 4f 05 	sts	0x054F, r8	; 0x80054f <node+0x118>
     cea:	70 92 52 05 	sts	0x0552, r7	; 0x800552 <node+0x11b>
     cee:	60 92 51 05 	sts	0x0551, r6	; 0x800551 <node+0x11a>
     cf2:	10 93 54 05 	sts	0x0554, r17	; 0x800554 <node+0x11d>
     cf6:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <node+0x11c>
     cfa:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <node+0x11f>
     cfe:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <node+0x11e>
     d02:	0f 2e       	mov	r0, r31
     d04:	f7 e0       	ldi	r31, 0x07	; 7
     d06:	cf 2e       	mov	r12, r31
     d08:	d1 2c       	mov	r13, r1
     d0a:	f0 2d       	mov	r31, r0
     d0c:	d0 92 58 05 	sts	0x0558, r13	; 0x800558 <node+0x121>
     d10:	c0 92 57 05 	sts	0x0557, r12	; 0x800557 <node+0x120>
     d14:	70 93 5a 05 	sts	0x055A, r23	; 0x80055a <node+0x123>
     d18:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <node+0x122>
     d1c:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <node+0x125>
     d20:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <node+0x124>
     d24:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <node+0x127>
     d28:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <node+0x126>
     d2c:	d0 92 60 05 	sts	0x0560, r13	; 0x800560 <node+0x129>
     d30:	c0 92 5f 05 	sts	0x055F, r12	; 0x80055f <node+0x128>
     d34:	50 93 62 05 	sts	0x0562, r21	; 0x800562 <node+0x12b>
     d38:	40 93 61 05 	sts	0x0561, r20	; 0x800561 <node+0x12a>
     d3c:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <node+0x12d>
     d40:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <node+0x12c>
     d44:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <node+0x12f>
     d48:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <node+0x12e>
     d4c:	0f 2e       	mov	r0, r31
     d4e:	ff e0       	ldi	r31, 0x0F	; 15
     d50:	cf 2e       	mov	r12, r31
     d52:	d1 2c       	mov	r13, r1
     d54:	f0 2d       	mov	r31, r0
     d56:	d0 92 68 05 	sts	0x0568, r13	; 0x800568 <node+0x131>
     d5a:	c0 92 67 05 	sts	0x0567, r12	; 0x800567 <node+0x130>
     d5e:	30 93 6a 05 	sts	0x056A, r19	; 0x80056a <node+0x133>
     d62:	20 93 69 05 	sts	0x0569, r18	; 0x800569 <node+0x132>
     d66:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <node+0x135>
     d6a:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <node+0x134>
     d6e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <node+0x137>
     d72:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <node+0x136>
     d76:	d0 92 70 05 	sts	0x0570, r13	; 0x800570 <node+0x139>
     d7a:	c0 92 6f 05 	sts	0x056F, r12	; 0x80056f <node+0x138>
     d7e:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <node+0x13b>
     d82:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <node+0x13a>
     d86:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <node+0x13d>
     d8a:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <node+0x13c>
     d8e:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <node+0x13f>
     d92:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <node+0x13e>
     d96:	f0 93 78 05 	sts	0x0578, r31	; 0x800578 <node+0x141>
     d9a:	e0 93 77 05 	sts	0x0577, r30	; 0x800577 <node+0x140>
     d9e:	f0 92 7a 05 	sts	0x057A, r15	; 0x80057a <node+0x143>
     da2:	e0 92 79 05 	sts	0x0579, r14	; 0x800579 <node+0x142>
     da6:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <node+0x145>
     daa:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <node+0x144>
     dae:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <node+0x147>
     db2:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <node+0x146>
     db6:	f0 93 80 05 	sts	0x0580, r31	; 0x800580 <node+0x149>
     dba:	e0 93 7f 05 	sts	0x057F, r30	; 0x80057f <node+0x148>
     dbe:	10 93 82 05 	sts	0x0582, r17	; 0x800582 <node+0x14b>
     dc2:	00 93 81 05 	sts	0x0581, r16	; 0x800581 <node+0x14a>
     dc6:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <node+0x14d>
     dca:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <node+0x14c>
     dce:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <node+0x14f>
     dd2:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <node+0x14e>
     dd6:	10 93 88 05 	sts	0x0588, r17	; 0x800588 <node+0x151>
     dda:	00 93 87 05 	sts	0x0587, r16	; 0x800587 <node+0x150>
     dde:	50 92 8a 05 	sts	0x058A, r5	; 0x80058a <node+0x153>
     de2:	40 92 89 05 	sts	0x0589, r4	; 0x800589 <node+0x152>
     de6:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <node+0x155>
     dea:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <node+0x154>
     dee:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <node+0x157>
     df2:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <node+0x156>
     df6:	70 93 90 05 	sts	0x0590, r23	; 0x800590 <node+0x159>
     dfa:	60 93 8f 05 	sts	0x058F, r22	; 0x80058f <node+0x158>
     dfe:	b0 93 92 05 	sts	0x0592, r27	; 0x800592 <node+0x15b>
     e02:	a0 93 91 05 	sts	0x0591, r26	; 0x800591 <node+0x15a>
     e06:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <node+0x15d>
     e0a:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <node+0x15c>
     e0e:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <node+0x15f>
     e12:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <node+0x15e>
     e16:	50 93 98 05 	sts	0x0598, r21	; 0x800598 <node+0x161>
     e1a:	40 93 97 05 	sts	0x0597, r20	; 0x800597 <node+0x160>
     e1e:	30 92 9a 05 	sts	0x059A, r3	; 0x80059a <node+0x163>
     e22:	20 92 99 05 	sts	0x0599, r2	; 0x800599 <node+0x162>
     e26:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <node+0x165>
     e2a:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <node+0x164>
     e2e:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <node+0x167>
     e32:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <node+0x166>
     e36:	30 93 a0 05 	sts	0x05A0, r19	; 0x8005a0 <node+0x169>
     e3a:	20 93 9f 05 	sts	0x059F, r18	; 0x80059f <node+0x168>
     e3e:	0d e2       	ldi	r16, 0x2D	; 45
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	10 93 a2 05 	sts	0x05A2, r17	; 0x8005a2 <node+0x16b>
     e46:	00 93 a1 05 	sts	0x05A1, r16	; 0x8005a1 <node+0x16a>
     e4a:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <node+0x16d>
     e4e:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <node+0x16c>
     e52:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <node+0x16f>
     e56:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <node+0x16e>
     e5a:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <node+0x171>
     e5e:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <node+0x170>
     e62:	d0 93 aa 05 	sts	0x05AA, r29	; 0x8005aa <node+0x173>
     e66:	c0 93 a9 05 	sts	0x05A9, r28	; 0x8005a9 <node+0x172>
     e6a:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <node+0x175>
     e6e:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <node+0x174>
     e72:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <node+0x177>
     e76:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <node+0x176>
     e7a:	f0 92 b0 05 	sts	0x05B0, r15	; 0x8005b0 <node+0x179>
     e7e:	e0 92 af 05 	sts	0x05AF, r14	; 0x8005af <node+0x178>
     e82:	2f e2       	ldi	r18, 0x2F	; 47
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	30 93 b2 05 	sts	0x05B2, r19	; 0x8005b2 <node+0x17b>
     e8a:	20 93 b1 05 	sts	0x05B1, r18	; 0x8005b1 <node+0x17a>
     e8e:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <node+0x17d>
     e92:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <node+0x17c>
     e96:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <node+0x17f>
     e9a:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <node+0x17e>
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	af 90       	pop	r10
     eb2:	9f 90       	pop	r9
     eb4:	8f 90       	pop	r8
     eb6:	7f 90       	pop	r7
     eb8:	6f 90       	pop	r6
     eba:	5f 90       	pop	r5
     ebc:	4f 90       	pop	r4
     ebe:	3f 90       	pop	r3
     ec0:	2f 90       	pop	r2
     ec2:	08 95       	ret

00000ec4 <__vector_25>:
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	0b b6       	in	r0, 0x3b	; 59
     ed0:	0f 92       	push	r0
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
     ee2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     ee6:	88 23       	and	r24, r24
     ee8:	0c f0       	brlt	.+2      	; 0xeec <__vector_25+0x28>
     eea:	58 c0       	rjmp	.+176    	; 0xf9c <__vector_25+0xd8>
     eec:	98 2f       	mov	r25, r24
     eee:	9f 77       	andi	r25, 0x7F	; 127
     ef0:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <lastCommand>
     ef4:	4e 2f       	mov	r20, r30
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	fa 01       	movw	r30, r20
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	ea 30       	cpi	r30, 0x0A	; 10
     efe:	f1 05       	cpc	r31, r1
     f00:	08 f0       	brcs	.+2      	; 0xf04 <__vector_25+0x40>
     f02:	53 c0       	rjmp	.+166    	; 0xfaa <__vector_25+0xe6>
     f04:	88 27       	eor	r24, r24
     f06:	ee 58       	subi	r30, 0x8E	; 142
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__tablejump2__>
     f10:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <noteCount>
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	ed 53       	subi	r30, 0x3D	; 61
     f18:	fc 4f       	sbci	r31, 0xFC	; 252
     f1a:	90 83       	st	Z, r25
     f1c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <noteCount>
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <noteCount>
     f26:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <noteCount>
     f2a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     f2e:	3d c0       	rjmp	.+122    	; 0xfaa <__vector_25+0xe6>
     f30:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <taskCount>
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	e3 55       	subi	r30, 0x53	; 83
     f38:	fc 4f       	sbci	r31, 0xFC	; 252
     f3a:	90 83       	st	Z, r25
     f3c:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <taskCount>
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <taskCount>
     f46:	31 c0       	rjmp	.+98     	; 0xfaa <__vector_25+0xe6>
     f48:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <otherBotLocation>
     f4c:	2e c0       	rjmp	.+92     	; 0xfaa <__vector_25+0xe6>
     f4e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <otherBotMovingTo>
     f52:	2b c0       	rjmp	.+86     	; 0xfaa <__vector_25+0xe6>
     f54:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
     f58:	89 13       	cpse	r24, r25
     f5a:	27 c0       	rjmp	.+78     	; 0xfaa <__vector_25+0xe6>
     f5c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <noteToStrike>
     f66:	21 c0       	rjmp	.+66     	; 0xfaa <__vector_25+0xe6>
     f68:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
     f6c:	89 13       	cpse	r24, r25
     f6e:	1d c0       	rjmp	.+58     	; 0xfaa <__vector_25+0xe6>
     f70:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <noteToProcess>
     f7a:	17 c0       	rjmp	.+46     	; 0xfaa <__vector_25+0xe6>
     f7c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <taskCost>
     f80:	89 0f       	add	r24, r25
     f82:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <taskCost>
     f86:	11 c0       	rjmp	.+34     	; 0xfaa <__vector_25+0xe6>
     f88:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotLastTaskIndex>
     f8c:	0e c0       	rjmp	.+28     	; 0xfaa <__vector_25+0xe6>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <botEnd+0x1>
     f96:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <botEnd>
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <__vector_25+0xe6>
     f9c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <lastCommand>
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	19 f4       	brne	.+6      	; 0xfaa <__vector_25+0xe6>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <notesReceived>
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	0f 90       	pop	r0
     fbc:	0b be       	out	0x3b, r0	; 59
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_51>:
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0b b6       	in	r0, 0x3b	; 59
     fd4:	0f 92       	push	r0
     fd6:	8f 93       	push	r24
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     fe0:	8f 3f       	cpi	r24, 0xFF	; 255
     fe2:	81 f0       	breq	.+32     	; 0x1004 <__vector_51+0x3c>
     fe4:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <noteCount>
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ed 53       	subi	r30, 0x3D	; 61
     fec:	fc 4f       	sbci	r31, 0xFC	; 252
     fee:	80 83       	st	Z, r24
     ff0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <noteCount>
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <noteCount>
     ffa:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <noteCount>
     ffe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1002:	05 c0       	rjmp	.+10     	; 0x100e <__vector_51+0x46>
    1004:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <notesReceived>
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	8f 91       	pop	r24
    1014:	0f 90       	pop	r0
    1016:	0b be       	out	0x3b, r0	; 59
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <buzzer_pin_config>:
    1022:	3b 9a       	sbi	0x07, 3	; 7
    1024:	43 98       	cbi	0x08, 3	; 8
    1026:	08 95       	ret

00001028 <buzzer_on>:
    1028:	86 b1       	in	r24, 0x06	; 6
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	88 b9       	out	0x08, r24	; 8
    102e:	08 95       	ret

00001030 <buzzer_off>:
    1030:	86 b1       	in	r24, 0x06	; 6
    1032:	87 7f       	andi	r24, 0xF7	; 247
    1034:	88 b9       	out	0x08, r24	; 8
    1036:	08 95       	ret

00001038 <adc_pin_config>:
    1038:	10 ba       	out	0x10, r1	; 16
    103a:	11 ba       	out	0x11, r1	; 17
    103c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    1040:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    1044:	08 95       	ret

00001046 <motion_pin_config>:
    1046:	81 b1       	in	r24, 0x01	; 1
    1048:	8f 60       	ori	r24, 0x0F	; 15
    104a:	81 b9       	out	0x01, r24	; 1
    104c:	82 b1       	in	r24, 0x02	; 2
    104e:	80 7f       	andi	r24, 0xF0	; 240
    1050:	82 b9       	out	0x02, r24	; 2
    1052:	ea e0       	ldi	r30, 0x0A	; 10
    1054:	f1 e0       	ldi	r31, 0x01	; 1
    1056:	80 81       	ld	r24, Z
    1058:	88 61       	ori	r24, 0x18	; 24
    105a:	80 83       	st	Z, r24
    105c:	eb e0       	ldi	r30, 0x0B	; 11
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	80 81       	ld	r24, Z
    1062:	88 61       	ori	r24, 0x18	; 24
    1064:	80 83       	st	Z, r24
    1066:	08 95       	ret

00001068 <left_encoder_pin_config>:
    1068:	6c 98       	cbi	0x0d, 4	; 13
    106a:	74 9a       	sbi	0x0e, 4	; 14
    106c:	08 95       	ret

0000106e <right_encoder_pin_config>:
    106e:	6d 98       	cbi	0x0d, 5	; 13
    1070:	75 9a       	sbi	0x0e, 5	; 14
    1072:	08 95       	ret

00001074 <port_init>:
    1074:	e8 df       	rcall	.-48     	; 0x1046 <motion_pin_config>
    1076:	f8 df       	rcall	.-16     	; 0x1068 <left_encoder_pin_config>
    1078:	fa df       	rcall	.-12     	; 0x106e <right_encoder_pin_config>
    107a:	de df       	rcall	.-68     	; 0x1038 <adc_pin_config>
    107c:	d2 cf       	rjmp	.-92     	; 0x1022 <buzzer_pin_config>
    107e:	08 95       	ret

00001080 <timer5_init>:
    1080:	e1 e2       	ldi	r30, 0x21	; 33
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	10 82       	st	Z, r1
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1092:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1096:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    109a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    109e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    10a2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    10a6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    10aa:	89 ea       	ldi	r24, 0xA9	; 169
    10ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    10b0:	8b e0       	ldi	r24, 0x0B	; 11
    10b2:	80 83       	st	Z, r24
    10b4:	08 95       	ret

000010b6 <adc_init>:
    10b6:	ea e7       	ldi	r30, 0x7A	; 122
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	10 82       	st	Z, r1
    10bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    10c0:	80 e2       	ldi	r24, 0x20	; 32
    10c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    10c6:	80 e8       	ldi	r24, 0x80	; 128
    10c8:	80 bf       	out	0x30, r24	; 48
    10ca:	86 e8       	ldi	r24, 0x86	; 134
    10cc:	80 83       	st	Z, r24
    10ce:	08 95       	ret

000010d0 <ADC_Conversion>:
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	18 f0       	brcs	.+6      	; 0x10da <ADC_Conversion+0xa>
    10d4:	98 e0       	ldi	r25, 0x08	; 8
    10d6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    10da:	87 70       	andi	r24, 0x07	; 7
    10dc:	80 62       	ori	r24, 0x20	; 32
    10de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    10e2:	ea e7       	ldi	r30, 0x7A	; 122
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	80 83       	st	Z, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	84 ff       	sbrs	r24, 4
    10f0:	fd cf       	rjmp	.-6      	; 0x10ec <ADC_Conversion+0x1c>
    10f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    10f6:	ea e7       	ldi	r30, 0x7A	; 122
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	90 81       	ld	r25, Z
    10fc:	90 61       	ori	r25, 0x10	; 16
    10fe:	90 83       	st	Z, r25
    1100:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1104:	08 95       	ret

00001106 <left_position_encoder_interrupt_init>:
    1106:	f8 94       	cli
    1108:	ea e6       	ldi	r30, 0x6A	; 106
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	82 60       	ori	r24, 0x02	; 2
    1110:	80 83       	st	Z, r24
    1112:	ec 9a       	sbi	0x1d, 4	; 29
    1114:	78 94       	sei
    1116:	08 95       	ret

00001118 <right_position_encoder_interrupt_init>:
    1118:	f8 94       	cli
    111a:	ea e6       	ldi	r30, 0x6A	; 106
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	80 83       	st	Z, r24
    1124:	ed 9a       	sbi	0x1d, 5	; 29
    1126:	78 94       	sei
    1128:	08 95       	ret

0000112a <__vector_6>:
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
    113c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ShaftCountRight>
    1140:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    1144:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    1148:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	a1 1d       	adc	r26, r1
    1150:	b1 1d       	adc	r27, r1
    1152:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <ShaftCountRight>
    1156:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <ShaftCountRight+0x1>
    115a:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <ShaftCountRight+0x2>
    115e:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <ShaftCountRight+0x3>
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_5>:
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <ShaftCountLeft>
    118a:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <ShaftCountLeft+0x1>
    118e:	a0 91 a2 03 	lds	r26, 0x03A2	; 0x8003a2 <ShaftCountLeft+0x2>
    1192:	b0 91 a3 03 	lds	r27, 0x03A3	; 0x8003a3 <ShaftCountLeft+0x3>
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	a1 1d       	adc	r26, r1
    119a:	b1 1d       	adc	r27, r1
    119c:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <ShaftCountLeft>
    11a0:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <ShaftCountLeft+0x1>
    11a4:	a0 93 a2 03 	sts	0x03A2, r26	; 0x8003a2 <ShaftCountLeft+0x2>
    11a8:	b0 93 a3 03 	sts	0x03A3, r27	; 0x8003a3 <ShaftCountLeft+0x3>
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <motion_set>:
    11be:	92 b1       	in	r25, 0x02	; 2
    11c0:	90 7f       	andi	r25, 0xF0	; 240
    11c2:	8f 70       	andi	r24, 0x0F	; 15
    11c4:	98 2b       	or	r25, r24
    11c6:	92 b9       	out	0x02, r25	; 2
    11c8:	08 95       	ret

000011ca <forward>:
    11ca:	86 e0       	ldi	r24, 0x06	; 6
    11cc:	f8 cf       	rjmp	.-16     	; 0x11be <motion_set>
    11ce:	08 95       	ret

000011d0 <left>:
    11d0:	85 e0       	ldi	r24, 0x05	; 5
    11d2:	f5 cf       	rjmp	.-22     	; 0x11be <motion_set>
    11d4:	08 95       	ret

000011d6 <right>:
    11d6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <thresh>
    11da:	f1 cf       	rjmp	.-30     	; 0x11be <motion_set>
    11dc:	08 95       	ret

000011de <stop>:
}

void stop (void)
{
  motion_set(0x00);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	ee cf       	rjmp	.-36     	; 0x11be <motion_set>
    11e2:	08 95       	ret

000011e4 <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    11f0:	bc 01       	movw	r22, r24
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	5a d6       	rcall	.+3252   	; 0x1eac <__floatunsisf>
    11f8:	28 e4       	ldi	r18, 0x48	; 72
    11fa:	31 ee       	ldi	r19, 0xE1	; 225
    11fc:	42 e8       	ldi	r20, 0x82	; 130
    11fe:	50 e4       	ldi	r21, 0x40	; 64
    1200:	c1 d5       	rcall	.+2946   	; 0x1d84 <__divsf3>
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1202:	28 d6       	rcall	.+3152   	; 0x1e54 <__fixunssfsi>
    1204:	ab 01       	movw	r20, r22
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
 ShaftCountRight = 0; 
    120a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ShaftCountRight>
    120e:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ShaftCountRight+0x1>
    1212:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <ShaftCountRight+0x2>
    1216:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <ShaftCountRight+0x3>
 ShaftCountLeft = 0; 
    121a:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <ShaftCountLeft>
    121e:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <ShaftCountLeft+0x1>
    1222:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <ShaftCountLeft+0x2>
    1226:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <ShaftCountLeft+0x3>

 while (1)
 {
  //lcd_print(1,5,ShaftCountRight,3);
  //lcd_print(2,10,ShaftCountRight,2);
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	e0 e0       	ldi	r30, 0x00	; 0
    122e:	c0 90 9c 03 	lds	r12, 0x039C	; 0x80039c <ShaftCountRight>
    1232:	d0 90 9d 03 	lds	r13, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    1236:	e0 90 9e 03 	lds	r14, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    123a:	f0 90 9f 03 	lds	r15, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    123e:	00 91 a0 03 	lds	r16, 0x03A0	; 0x8003a0 <ShaftCountLeft>
    1242:	10 91 a1 03 	lds	r17, 0x03A1	; 0x8003a1 <ShaftCountLeft+0x1>
    1246:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <ShaftCountLeft+0x2>
    124a:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <ShaftCountLeft+0x3>
    124e:	89 2f       	mov	r24, r25
    1250:	04 17       	cp	r16, r20
    1252:	15 07       	cpc	r17, r21
    1254:	26 07       	cpc	r18, r22
    1256:	37 07       	cpc	r19, r23
    1258:	08 f4       	brcc	.+2      	; 0x125c <angle_rotate+0x78>
    125a:	8e 2f       	mov	r24, r30
    125c:	81 11       	cpse	r24, r1
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <angle_rotate+0x8e>
    1260:	89 2f       	mov	r24, r25
    1262:	c4 16       	cp	r12, r20
    1264:	d5 06       	cpc	r13, r21
    1266:	e6 06       	cpc	r14, r22
    1268:	f7 06       	cpc	r15, r23
    126a:	08 f4       	brcc	.+2      	; 0x126e <angle_rotate+0x8a>
    126c:	8e 2f       	mov	r24, r30
    126e:	88 23       	and	r24, r24
    1270:	f1 f2       	breq	.-68     	; 0x122e <angle_rotate+0x4a>
  break;
 }
 stop(); //Stop robot
    1272:	b5 df       	rcall	.-150    	; 0x11de <stop>
}
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	08 95       	ret

00001282 <left_degrees>:



void left_degrees(unsigned int Degrees) 
{
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	ec 01       	movw	r28, r24
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1288:	a3 df       	rcall	.-186    	; 0x11d0 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    128a:	9f ef       	ldi	r25, 0xFF	; 255
    128c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1290:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 velocity(255,255);
 angle_rotate(Degrees);
    1294:	ce 01       	movw	r24, r28
    1296:	a6 df       	rcall	.-180    	; 0x11e4 <angle_rotate>
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    12a4:	98 df       	rcall	.-208    	; 0x11d6 <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12a6:	9f ef       	ldi	r25, 0xFF	; 255
    12a8:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    12ac:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 velocity(255,255);
 angle_rotate(Degrees);
    12b0:	ce 01       	movw	r24, r28
    12b2:	98 df       	rcall	.-208    	; 0x11e4 <angle_rotate>
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    12c0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    12c4:	08 95       	ret

000012c6 <init_devices>:
}

void init_devices()
{
 cli(); //Clears the global interrupt
    12c6:	f8 94       	cli
 port_init();  //Initializes all the ports
    12c8:	d5 de       	rcall	.-598    	; 0x1074 <port_init>
 actual baud rate:9600 (error 0.0%)
 char size: 8 bit
 parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    12ca:	e1 ec       	ldi	r30, 0xC1	; 193
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    12d0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    12d4:	26 e0       	ldi	r18, 0x06	; 6
    12d6:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    12da:	9f e5       	ldi	r25, 0x5F	; 95
    12dc:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    12e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    12e4:	88 e9       	ldi	r24, 0x98	; 152
    12e6:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    12e8:	e1 ed       	ldi	r30, 0xD1	; 209
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    12ee:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    12f2:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    12f6:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    12fa:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    12fe:	80 83       	st	Z, r24
{
 cli(); //Clears the global interrupt
 port_init();  //Initializes all the ports
 uart0_init();	//init Zigbee comm
 uart2_init();	//init PC - USB comm
 left_position_encoder_interrupt_init();
    1300:	02 df       	rcall	.-508    	; 0x1106 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    1302:	0a df       	rcall	.-492    	; 0x1118 <right_position_encoder_interrupt_init>
 adc_init();
    1304:	d8 de       	rcall	.-592    	; 0x10b6 <adc_init>
 timer5_init();
    1306:	bc de       	rcall	.-648    	; 0x1080 <timer5_init>
 //lcd_set_4bit();
 //lcd_init();
 LED_bargraph_config();
    1308:	d8 df       	rcall	.-80     	; 0x12ba <LED_bargraph_config>
 sei();   // Enables the global interrupt 
    130a:	78 94       	sei
    130c:	08 95       	ret

0000130e <linear_distance_mm>:
//Function used for moving robot forward by specified distance 
void linear_distance_mm(unsigned int DistanceInMM) 
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count 
    130e:	bc 01       	movw	r22, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	cb d5       	rcall	.+2966   	; 0x1eac <__floatunsisf>
    1316:	25 ee       	ldi	r18, 0xE5	; 229
    1318:	30 ed       	ldi	r19, 0xD0	; 208
    131a:	4a ea       	ldi	r20, 0xAA	; 170
    131c:	50 e4       	ldi	r21, 0x40	; 64
    131e:	32 d5       	rcall	.+2660   	; 0x1d84 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;   
    1320:	99 d5       	rcall	.+2866   	; 0x1e54 <__fixunssfsi>
    1322:	ab 01       	movw	r20, r22
    1324:	bc 01       	movw	r22, r24
	ShaftCountRight = 0; 
    1326:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ShaftCountRight>
    132a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ShaftCountRight+0x1>
    132e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <ShaftCountRight+0x2>
    1332:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <ShaftCountRight+0x3>
	while(1) 
	{
		if(ShaftCountRight > ReqdShaftCountInt)  
    1336:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ShaftCountRight>
    133a:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    133e:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    1342:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    1346:	48 17       	cp	r20, r24
    1348:	59 07       	cpc	r21, r25
    134a:	6a 07       	cpc	r22, r26
    134c:	7b 07       	cpc	r23, r27
    134e:	98 f7       	brcc	.-26     	; 0x1336 <linear_distance_mm+0x28>
		{ 
			break;  
		} 
	}  
	stop(); //Stop robot 
    1350:	46 cf       	rjmp	.-372    	; 0x11de <stop>
    1352:	08 95       	ret

00001354 <forward_mm>:
} 


void forward_mm(unsigned int DistanceInMM)
{
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
	forward();
    135a:	37 df       	rcall	.-402    	; 0x11ca <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    135c:	9a e5       	ldi	r25, 0x5A	; 90
    135e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1362:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(90,90);
	linear_distance_mm(DistanceInMM);
    1366:	ce 01       	movw	r24, r28
    1368:	d2 df       	rcall	.-92     	; 0x130e <linear_distance_mm>
} 
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    1370:	4f 92       	push	r4
    1372:	5f 92       	push	r5
    1374:	6f 92       	push	r6
    1376:	7f 92       	push	r7
    1378:	8f 92       	push	r8
    137a:	9f 92       	push	r9
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	c0 5c       	subi	r28, 0xC0	; 192
    1396:	d1 09       	sbc	r29, r1
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    int j=0,k=-1;
    int list[48];
	int tmploc[48]={0};
    13a2:	de 01       	movw	r26, r28
    13a4:	af 59       	subi	r26, 0x9F	; 159
    13a6:	bf 4f       	sbci	r27, 0xFF	; 255
    13a8:	20 e6       	ldi	r18, 0x60	; 96
    13aa:	fd 01       	movw	r30, r26
    13ac:	11 92       	st	Z+, r1
    13ae:	2a 95       	dec	r18
    13b0:	e9 f7       	brne	.-6      	; 0x13ac <costplan+0x3c>
    13b2:	e7 ed       	ldi	r30, 0xD7	; 215
    13b4:	f3 e0       	ldi	r31, 0x03	; 3
    13b6:	8e 01       	movw	r16, r28
    13b8:	0f 5f       	subi	r16, 0xFF	; 255
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	78 01       	movw	r14, r16
    13be:	6d 01       	movw	r12, r26
    13c0:	07 e3       	ldi	r16, 0x37	; 55
    13c2:	14 e0       	ldi	r17, 0x04	; 4
    13c4:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
    {
	    cost[j]=99;
    13c6:	63 e6       	ldi	r22, 0x63	; 99
    13c8:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    13ca:	4f ef       	ldi	r20, 0xFF	; 255
    13cc:	5f ef       	ldi	r21, 0xFF	; 255
    int j=0,k=-1;
    int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    {
	    cost[j]=99;
    13ce:	61 93       	st	Z+, r22
    13d0:	71 93       	st	Z+, r23
		list[j]=-1;
    13d2:	d9 01       	movw	r26, r18
    13d4:	4d 93       	st	X+, r20
    13d6:	5d 93       	st	X+, r21
    13d8:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    13da:	d6 01       	movw	r26, r12
    13dc:	1d 92       	st	X+, r1
    13de:	1d 92       	st	X+, r1
    13e0:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    int j=0,k=-1;
    int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    13e2:	e0 17       	cp	r30, r16
    13e4:	f1 07       	cpc	r31, r17
    13e6:	99 f7       	brne	.-26     	; 0x13ce <costplan+0x5e>
    13e8:	fc 01       	movw	r30, r24
    13ea:	ac 01       	movw	r20, r24
    13ec:	44 5f       	subi	r20, 0xF4	; 244
    13ee:	5f 4f       	sbci	r21, 0xFF	; 255
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{  
		    cost[note_loc[j]-1]=0;
		    k=k+1;
	        list[k]=note_loc[j];   // It is the list of nodes to explore 
	        tmploc[note_loc[j]-1]=1;  // each node which is added to the list is marked with 1
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    13f8:	20 81       	ld	r18, Z
    13fa:	31 81       	ldd	r19, Z+1	; 0x01
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	09 f1       	breq	.+66     	; 0x1444 <costplan+0xd4>
		{  
		    cost[note_loc[j]-1]=0;
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	d9 01       	movw	r26, r18
    1408:	ab 52       	subi	r26, 0x2B	; 43
    140a:	bc 4f       	sbci	r27, 0xFC	; 252
    140c:	1d 92       	st	X+, r1
    140e:	1c 92       	st	X, r1
		    k=k+1;
    1410:	01 96       	adiw	r24, 0x01	; 1
	        list[k]=note_loc[j];   // It is the list of nodes to explore 
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01
    1416:	dc 01       	movw	r26, r24
    1418:	aa 0f       	add	r26, r26
    141a:	bb 1f       	adc	r27, r27
    141c:	01 e0       	ldi	r16, 0x01	; 1
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	0c 0f       	add	r16, r28
    1422:	1d 1f       	adc	r17, r29
    1424:	a0 0f       	add	r26, r16
    1426:	b1 1f       	adc	r27, r17
    1428:	2d 93       	st	X+, r18
    142a:	3c 93       	st	X, r19
	        tmploc[note_loc[j]-1]=1;  // each node which is added to the list is marked with 1
    142c:	d9 01       	movw	r26, r18
    142e:	11 97       	sbiw	r26, 0x01	; 1
    1430:	aa 0f       	add	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	21 e6       	ldi	r18, 0x61	; 97
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	2c 0f       	add	r18, r28
    143a:	3d 1f       	adc	r19, r29
    143c:	a2 0f       	add	r26, r18
    143e:	b3 1f       	adc	r27, r19
    1440:	6d 93       	st	X+, r22
    1442:	7c 93       	st	X, r23
    1444:	32 96       	adiw	r30, 0x02	; 2
    {
	    cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    1446:	e4 17       	cp	r30, r20
    1448:	f5 07       	cpc	r31, r21
    144a:	b1 f6       	brne	.-84     	; 0x13f8 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
    144c:	ae 2c       	mov	r10, r14
    144e:	9f 2c       	mov	r9, r15
    1450:	81 2c       	mov	r8, r1
    1452:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}  
		k=k-1;
    1454:	68 94       	set
    1456:	bb 24       	eor	r11, r11
    1458:	b2 f8       	bld	r11, 2
    145a:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
					cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    145c:	cc 24       	eor	r12, r12
    145e:	c3 94       	inc	r12
    1460:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    1462:	a9 81       	ldd	r26, Y+1	; 0x01
    1464:	ba 81       	ldd	r27, Y+2	; 0x02
    1466:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
    1468:	99 23       	and	r25, r25
    146a:	6c f0       	brlt	.+26     	; 0x1486 <costplan+0x116>
    146c:	ea 2d       	mov	r30, r10
    146e:	f9 2d       	mov	r31, r9
    1470:	28 2d       	mov	r18, r8
    1472:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    1474:	2f 5f       	subi	r18, 0xFF	; 255
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	42 81       	ldd	r20, Z+2	; 0x02
    147a:	53 81       	ldd	r21, Z+3	; 0x03
    147c:	41 93       	st	Z+, r20
    147e:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
    1480:	82 17       	cp	r24, r18
    1482:	93 07       	cpc	r25, r19
    1484:	bc f7       	brge	.-18     	; 0x1474 <costplan+0x104>
		{
			list[i]=list[i+1];
		}  
		k=k-1;
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	fd 01       	movw	r30, r26
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	e9 5c       	subi	r30, 0xC9	; 201
    1498:	fb 4f       	sbci	r31, 0xFB	; 251
    149a:	2b 2d       	mov	r18, r11
    149c:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    149e:	aa 0f       	add	r26, r26
    14a0:	bb 1f       	adc	r27, r27
    14a2:	ad 01       	movw	r20, r26
    14a4:	49 52       	subi	r20, 0x29	; 41
    14a6:	5c 4f       	sbci	r21, 0xFC	; 252
    14a8:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}  
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    14aa:	61 91       	ld	r22, Z+
    14ac:	71 91       	ld	r23, Z+
    14ae:	61 15       	cp	r22, r1
    14b0:	71 05       	cpc	r23, r1
    14b2:	d1 f1       	breq	.+116    	; 0x1528 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    14b4:	d2 01       	movw	r26, r4
    14b6:	0d 91       	ld	r16, X+
    14b8:	1c 91       	ld	r17, X
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	ab 01       	movw	r20, r22
    14c0:	41 50       	subi	r20, 0x01	; 1
    14c2:	51 09       	sbc	r21, r1
    14c4:	7a 01       	movw	r14, r20
    14c6:	ee 0c       	add	r14, r14
    14c8:	ff 1c       	adc	r15, r15
    14ca:	d7 01       	movw	r26, r14
    14cc:	a9 52       	subi	r26, 0x29	; 41
    14ce:	bc 4f       	sbci	r27, 0xFC	; 252
    14d0:	ed 90       	ld	r14, X+
    14d2:	fc 90       	ld	r15, X
    14d4:	e0 16       	cp	r14, r16
    14d6:	f1 06       	cpc	r15, r17
    14d8:	44 f0       	brlt	.+16     	; 0x14ea <costplan+0x17a>
					cost[node[s][i]-1]=(cost[s]+1);
    14da:	7a 01       	movw	r14, r20
    14dc:	ee 0c       	add	r14, r14
    14de:	ff 1c       	adc	r15, r15
    14e0:	d7 01       	movw	r26, r14
    14e2:	a9 52       	subi	r26, 0x29	; 41
    14e4:	bc 4f       	sbci	r27, 0xFC	; 252
    14e6:	0d 93       	st	X+, r16
    14e8:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    14ea:	8a 01       	movw	r16, r20
    14ec:	00 0f       	add	r16, r16
    14ee:	11 1f       	adc	r17, r17
    14f0:	a1 e6       	ldi	r26, 0x61	; 97
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ac 0f       	add	r26, r28
    14f6:	bd 1f       	adc	r27, r29
    14f8:	0a 0f       	add	r16, r26
    14fa:	1b 1f       	adc	r17, r27
    14fc:	d8 01       	movw	r26, r16
    14fe:	0d 91       	ld	r16, X+
    1500:	1c 91       	ld	r17, X
    1502:	11 97       	sbiw	r26, 0x01	; 1
    1504:	01 30       	cpi	r16, 0x01	; 1
    1506:	11 05       	cpc	r17, r1
    1508:	79 f0       	breq	.+30     	; 0x1528 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    150a:	cd 92       	st	X+, r12
    150c:	dc 92       	st	X, r13
					k=k+1;
    150e:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    1510:	ac 01       	movw	r20, r24
    1512:	44 0f       	add	r20, r20
    1514:	55 1f       	adc	r21, r21
    1516:	01 e0       	ldi	r16, 0x01	; 1
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	0c 0f       	add	r16, r28
    151c:	1d 1f       	adc	r17, r29
    151e:	40 0f       	add	r20, r16
    1520:	51 1f       	adc	r21, r17
    1522:	da 01       	movw	r26, r20
    1524:	6d 93       	st	X+, r22
    1526:	7c 93       	st	X, r23
    1528:	21 50       	subi	r18, 0x01	; 1
    152a:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1 
		{
			list[i]=list[i+1];
		}  
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    152c:	09 f0       	breq	.+2      	; 0x1530 <costplan+0x1c0>
    152e:	bd cf       	rjmp	.-134    	; 0x14aa <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 && k!=-1);
    1530:	49 81       	ldd	r20, Y+1	; 0x01
    1532:	5a 81       	ldd	r21, Y+2	; 0x02
    1534:	4f 3f       	cpi	r20, 0xFF	; 255
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	29 f0       	breq	.+10     	; 0x1544 <costplan+0x1d4>
    153a:	8f 3f       	cpi	r24, 0xFF	; 255
    153c:	ef ef       	ldi	r30, 0xFF	; 255
    153e:	9e 07       	cpc	r25, r30
    1540:	09 f0       	breq	.+2      	; 0x1544 <costplan+0x1d4>
    1542:	8f cf       	rjmp	.-226    	; 0x1462 <costplan+0xf2>
}
    1544:	c0 54       	subi	r28, 0x40	; 64
    1546:	df 4f       	sbci	r29, 0xFF	; 255
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	08 95       	ret

00001574 <rotate>:

void rotate(int turnang)
{
	if(turnang<0)
    1574:	99 23       	and	r25, r25
    1576:	44 f4       	brge	.+16     	; 0x1588 <rotate+0x14>
	{
		turnang=-turnang;
		right_degrees(turnang-25);
    1578:	27 ee       	ldi	r18, 0xE7	; 231
    157a:	3f ef       	ldi	r19, 0xFF	; 255
    157c:	a9 01       	movw	r20, r18
    157e:	48 1b       	sub	r20, r24
    1580:	59 0b       	sbc	r21, r25
    1582:	ca 01       	movw	r24, r20
    1584:	8c de       	rcall	.-744    	; 0x129e <right_degrees>
    1586:	02 c0       	rjmp	.+4      	; 0x158c <rotate+0x18>
	}
	else
	{
		left_degrees(turnang-25);
    1588:	49 97       	sbiw	r24, 0x19	; 25
    158a:	7b de       	rcall	.-778    	; 0x1282 <left_degrees>
	}
	while(1)
	{
		Center_white_line = ADC_Conversion(2);
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	a0 dd       	rcall	.-1216   	; 0x10d0 <ADC_Conversion>
    1590:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <Center_white_line>
		if(Center_white_line>0x78)
    1594:	89 37       	cpi	r24, 0x79	; 121
    1596:	d0 f3       	brcs	.-12     	; 0x158c <rotate+0x18>
			break;
	}
}
    1598:	08 95       	ret

0000159a <move>:

int move(int n)
{
    159a:	8f 92       	push	r8
    159c:	9f 92       	push	r9
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    15b4:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    15b8:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	e8 0f       	add	r30, r24
    15c8:	f9 1f       	adc	r31, r25
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	e8 54       	subi	r30, 0x48	; 72
    15d0:	fa 4f       	sbci	r31, 0xFA	; 250
    15d2:	e0 80       	ld	r14, Z
    15d4:	f1 80       	ldd	r15, Z+1	; 0x01
    15d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    15da:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    15de:	e8 1a       	sub	r14, r24
    15e0:	f9 0a       	sbc	r15, r25
	if(fabs(turnang)>45)
    15e2:	b7 01       	movw	r22, r14
    15e4:	0f 2c       	mov	r0, r15
    15e6:	00 0c       	add	r0, r0
    15e8:	88 0b       	sbc	r24, r24
    15ea:	99 0b       	sbc	r25, r25
    15ec:	61 d4       	rcall	.+2242   	; 0x1eb0 <__floatsisf>
    15ee:	9f 77       	andi	r25, 0x7F	; 127
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	44 e3       	ldi	r20, 0x34	; 52
    15f6:	52 e4       	ldi	r21, 0x42	; 66
    15f8:	e7 d4       	rcall	.+2510   	; 0x1fc8 <__gesf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <move+0x6e>
	{
		forward_mm(70);
    15fe:	86 e4       	ldi	r24, 0x46	; 70
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a8 de       	rcall	.-688    	; 0x1354 <forward_mm>
		rotate(turnang);
    1604:	c7 01       	movw	r24, r14
    1606:	b6 df       	rcall	.-148    	; 0x1574 <rotate>
	}
	botang=angle[botloc-1][n];
    1608:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    160c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	c8 0f       	add	r28, r24
    161c:	d9 1f       	adc	r29, r25
    161e:	cc 0f       	add	r28, r28
    1620:	dd 1f       	adc	r29, r29
    1622:	c8 54       	subi	r28, 0x48	; 72
    1624:	da 4f       	sbci	r29, 0xFA	; 250
    1626:	88 81       	ld	r24, Y
    1628:	99 81       	ldd	r25, Y+1	; 0x01
    162a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    162e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	forward();
    1632:	cb dd       	rcall	.-1130   	; 0x11ca <forward>
	}
}

int move(int n)
{
	int suc=1,turnang;
    1634:	bb 24       	eor	r11, r11
    1636:	b3 94       	inc	r11
    1638:	c1 2c       	mov	r12, r1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    163a:	08 e2       	ldi	r16, 0x28	; 40
    163c:	11 e0       	ldi	r17, 0x01	; 1
    163e:	0f 2e       	mov	r0, r31
    1640:	fa e5       	ldi	r31, 0x5A	; 90
    1642:	df 2e       	mov	r13, r31
    1644:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1646:	ca e2       	ldi	r28, 0x2A	; 42
    1648:	d1 e0       	ldi	r29, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    164a:	0f 2e       	mov	r0, r31
    164c:	f2 e8       	ldi	r31, 0x82	; 130
    164e:	9f 2e       	mov	r9, r31
    1650:	f0 2d       	mov	r31, r0
		{
			rotate(180);
			botang=botang-180-turnang;
			if(botang<0)
				botang+=360;
			suc=0;
    1652:	a1 2c       	mov	r10, r1
    1654:	81 2c       	mov	r8, r1
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <move+0xca>
		ShaftCountRight=0;
		
		if(Front_IR_Sensor>0xf0)
		{
			rotate(180);
			botang=botang-180-turnang;
    1658:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    165c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			if(botang<0)
				botang+=360;
			suc=0;
    1660:	ba 2c       	mov	r11, r10
    1662:	c8 2c       	mov	r12, r8
	}
	botang=angle[botloc-1][n];
	forward();
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	34 dd       	rcall	.-1432   	; 0x10d0 <ADC_Conversion>
    1668:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	30 dd       	rcall	.-1440   	; 0x10d0 <ADC_Conversion>
    1670:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	2c dd       	rcall	.-1448   	; 0x10d0 <ADC_Conversion>
    1678:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    167c:	86 e0       	ldi	r24, 0x06	; 6
    167e:	28 dd       	rcall	.-1456   	; 0x10d0 <ADC_Conversion>
    1680:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <__data_end>

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	24 dd       	rcall	.-1464   	; 0x10d0 <ADC_Conversion>
    1688:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <ADC_Value>
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	20 dd       	rcall	.-1472   	; 0x10d0 <ADC_Conversion>
    1690:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <ADC_Value>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	1c dd       	rcall	.-1480   	; 0x10d0 <ADC_Conversion>
    1698:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <ADC_Value>
		
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		ShaftCountRight=0;
    169c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ShaftCountRight>
    16a0:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ShaftCountRight+0x1>
    16a4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <ShaftCountRight+0x2>
    16a8:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <ShaftCountRight+0x3>
		
		if(Front_IR_Sensor>0xf0)
    16ac:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__data_end>
    16b0:	81 3f       	cpi	r24, 0xF1	; 241
    16b2:	b0 f0       	brcs	.+44     	; 0x16e0 <move+0x146>
		{
			rotate(180);
    16b4:	84 eb       	ldi	r24, 0xB4	; 180
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	5d df       	rcall	.-326    	; 0x1574 <rotate>
			botang=botang-180-turnang;
    16ba:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    16be:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    16c2:	84 5b       	subi	r24, 0xB4	; 180
    16c4:	91 09       	sbc	r25, r1
    16c6:	8e 19       	sub	r24, r14
    16c8:	9f 09       	sbc	r25, r15
			if(botang<0)
    16ca:	0a f0       	brmi	.+2      	; 0x16ce <move+0x134>
    16cc:	c5 cf       	rjmp	.-118    	; 0x1658 <move+0xbe>
				botang+=360;
    16ce:	88 59       	subi	r24, 0x98	; 152
    16d0:	9e 4f       	sbci	r25, 0xFE	; 254
    16d2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    16d6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			suc=0;
    16da:	ba 2c       	mov	r11, r10
    16dc:	c8 2c       	mov	r12, r8
    16de:	c2 cf       	rjmp	.-124    	; 0x1664 <move+0xca>
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
    16e0:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <Center_white_line>
    16e4:	8e 2f       	mov	r24, r30
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <thresh>
    16ec:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <thresh+0x1>
    16f0:	48 17       	cp	r20, r24
    16f2:	59 07       	cpc	r21, r25
    16f4:	6c f4       	brge	.+26     	; 0x1710 <move+0x176>
    16f6:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <Left_white_line>
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	42 17       	cp	r20, r18
    16fe:	53 07       	cpc	r21, r19
    1700:	9c f1       	brlt	.+102    	; 0x1768 <move+0x1ce>
    1702:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <Right_white_line>
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	46 17       	cp	r20, r22
    170a:	57 07       	cpc	r21, r23
    170c:	d4 f1       	brlt	.+116    	; 0x1782 <move+0x1e8>
    170e:	46 c0       	rjmp	.+140    	; 0x179c <move+0x202>
			forward();
			velocity(0,0);
			//lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1710:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <Left_white_line>
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	42 17       	cp	r20, r18
    1718:	53 07       	cpc	r21, r19
    171a:	2c f4       	brge	.+10     	; 0x1726 <move+0x18c>
		{
			//flag=1;
			forward();
    171c:	56 dd       	rcall	.-1364   	; 0x11ca <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    171e:	f8 01       	movw	r30, r16
    1720:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1722:	d8 82       	st	Y, r13
    1724:	9f cf       	rjmp	.-194    	; 0x1664 <move+0xca>
			//flag=1;
			forward();
			//lcd_print(2,1,1,3);
			velocity(0,90);
		}
		else if(Right_white_line>thresh)
    1726:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <Right_white_line>
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	46 17       	cp	r20, r22
    172e:	57 07       	cpc	r21, r23
    1730:	2c f4       	brge	.+10     	; 0x173c <move+0x1a2>
		{
			//flag=1;
			forward();
    1732:	4b dd       	rcall	.-1386   	; 0x11ca <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1734:	f8 01       	movw	r30, r16
    1736:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1738:	18 82       	st	Y, r1
    173a:	94 cf       	rjmp	.-216    	; 0x1664 <move+0xca>
			//flag=1;
			forward();
			//lcd_print(2,1,2,3);
			velocity(90,0);
		}
		else if(Center_white_line>0x78)
    173c:	e9 37       	cpi	r30, 0x79	; 121
    173e:	20 f0       	brcs	.+8      	; 0x1748 <move+0x1ae>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1740:	f8 01       	movw	r30, r16
    1742:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
    1744:	98 82       	st	Y, r9
    1746:	8e cf       	rjmp	.-228    	; 0x1664 <move+0xca>
		{
			velocity(130,130);
			//lcd_print(2,1,0,3);
			//flag=1;
		}
		else if(Center_white_line<thresh && Left_white_line<thresh && Right_white_line<thresh)
    1748:	84 17       	cp	r24, r20
    174a:	95 07       	cpc	r25, r21
    174c:	0c f0       	brlt	.+2      	; 0x1750 <move+0x1b6>
    174e:	8a cf       	rjmp	.-236    	; 0x1664 <move+0xca>
    1750:	24 17       	cp	r18, r20
    1752:	35 07       	cpc	r19, r21
    1754:	0c f0       	brlt	.+2      	; 0x1758 <move+0x1be>
    1756:	86 cf       	rjmp	.-244    	; 0x1664 <move+0xca>
    1758:	64 17       	cp	r22, r20
    175a:	75 07       	cpc	r23, r21
    175c:	0c f0       	brlt	.+2      	; 0x1760 <move+0x1c6>
    175e:	82 cf       	rjmp	.-252    	; 0x1664 <move+0xca>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1760:	f8 01       	movw	r30, r16
    1762:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1764:	d8 82       	st	Y, r13
    1766:	7e cf       	rjmp	.-260    	; 0x1664 <move+0xca>
			botang=botang-180-turnang;
			if(botang<0)
				botang+=360;
			suc=0;
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
    1768:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ShaftCountRight>
    176c:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    1770:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    1774:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    1778:	0b 97       	sbiw	r24, 0x0b	; 11
    177a:	a1 05       	cpc	r26, r1
    177c:	b1 05       	cpc	r27, r1
    177e:	70 f2       	brcs	.-100    	; 0x171c <move+0x182>
    1780:	11 c0       	rjmp	.+34     	; 0x17a4 <move+0x20a>
    1782:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ShaftCountRight>
    1786:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ShaftCountRight+0x1>
    178a:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <ShaftCountRight+0x2>
    178e:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <ShaftCountRight+0x3>
    1792:	0b 97       	sbiw	r24, 0x0b	; 11
    1794:	a1 05       	cpc	r26, r1
    1796:	b1 05       	cpc	r27, r1
    1798:	60 f2       	brcs	.-104    	; 0x1732 <move+0x198>
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <move+0x20a>
			//flag=1;
			forward();
			//lcd_print(2,1,1,3);
			velocity(0,90);
		}
		else if(Right_white_line>thresh)
    179c:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <Right_white_line>
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	cc cf       	rjmp	.-104    	; 0x173c <move+0x1a2>
				botang+=360;
			suc=0;
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
		{
			forward();
    17a4:	12 dd       	rcall	.-1500   	; 0x11ca <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17a6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    17aa:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		{
			velocity(90,90);
		}
	}
	return suc;
}
    17ae:	8b 2d       	mov	r24, r11
    17b0:	9c 2d       	mov	r25, r12
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	08 95       	ret

000017cc <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	9c 01       	movw	r18, r24
	int i;
	if(cost[loc-1]==0)
    17d2:	bc 01       	movw	r22, r24
    17d4:	61 50       	subi	r22, 0x01	; 1
    17d6:	71 09       	sbc	r23, r1
    17d8:	db 01       	movw	r26, r22
    17da:	aa 0f       	add	r26, r26
    17dc:	bb 1f       	adc	r27, r27
    17de:	a9 52       	subi	r26, 0x29	; 41
    17e0:	bc 4f       	sbci	r27, 0xFC	; 252
    17e2:	8d 91       	ld	r24, X+
    17e4:	9c 91       	ld	r25, X
    17e6:	89 2b       	or	r24, r25
    17e8:	39 f4       	brne	.+14     	; 0x17f8 <BotEndLocation+0x2c>
	{
		LastLocation=loc;
    17ea:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <LastLocation+0x1>
    17ee:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <LastLocation>
		return LastLocation;
    17f2:	82 2f       	mov	r24, r18
    17f4:	93 2f       	mov	r25, r19
    17f6:	38 c0       	rjmp	.+112    	; 0x1868 <BotEndLocation+0x9c>
	}
	int mCost=cost[node[loc-1][0]];
    17f8:	db 01       	movw	r26, r22
    17fa:	aa 0f       	add	r26, r26
    17fc:	bb 1f       	adc	r27, r27
    17fe:	aa 0f       	add	r26, r26
    1800:	bb 1f       	adc	r27, r27
    1802:	aa 0f       	add	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	fd 01       	movw	r30, r26
    1808:	e9 5c       	subi	r30, 0xC9	; 201
    180a:	fb 4f       	sbci	r31, 0xFB	; 251
    180c:	01 90       	ld	r0, Z+
    180e:	f0 81       	ld	r31, Z
    1810:	e0 2d       	mov	r30, r0
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	e9 52       	subi	r30, 0x29	; 41
    1818:	fc 4f       	sbci	r31, 0xFC	; 252
    181a:	c0 81       	ld	r28, Z
    181c:	d1 81       	ldd	r29, Z+1	; 0x01
    181e:	a7 5c       	subi	r26, 0xC7	; 199
    1820:	bb 4f       	sbci	r27, 0xFB	; 251
	int pos=0;
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
	for(i=1;i<4;i++)
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(cost[node[loc-1][i]]<mCost)
    182a:	ed 91       	ld	r30, X+
    182c:	fd 91       	ld	r31, X+
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	e9 52       	subi	r30, 0x29	; 41
    1834:	fc 4f       	sbci	r31, 0xFC	; 252
    1836:	40 81       	ld	r20, Z
    1838:	51 81       	ldd	r21, Z+1	; 0x01
    183a:	4c 17       	cp	r20, r28
    183c:	5d 07       	cpc	r21, r29
    183e:	14 f4       	brge	.+4      	; 0x1844 <BotEndLocation+0x78>
    1840:	9c 01       	movw	r18, r24
		{
			mCost=cost[node[loc-1][i]];
    1842:	ea 01       	movw	r28, r20
		LastLocation=loc;
		return LastLocation;
	}
	int mCost=cost[node[loc-1][0]];
	int pos=0;
	for(i=1;i<4;i++)
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	91 05       	cpc	r25, r1
    184a:	79 f7       	brne	.-34     	; 0x182a <BotEndLocation+0x5e>
		{
			mCost=cost[node[loc-1][i]];
			pos=i;
		}
	}
	return BotEndLocation(node[loc-1][pos]);
    184c:	fb 01       	movw	r30, r22
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	e2 0f       	add	r30, r18
    1858:	f3 1f       	adc	r31, r19
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	e9 5c       	subi	r30, 0xC9	; 201
    1860:	fb 4f       	sbci	r31, 0xFB	; 251
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	b2 df       	rcall	.-156    	; 0x17cc <BotEndLocation>
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <main>:

int main()
{
    186e:	2f 92       	push	r2
    1870:	3f 92       	push	r3
    1872:	4f 92       	push	r4
    1874:	5f 92       	push	r5
    1876:	6f 92       	push	r6
    1878:	7f 92       	push	r7
    187a:	8f 92       	push	r8
    187c:	9f 92       	push	r9
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
	declare_constants();
    1892:	0e 94 9e 00 	call	0x13c	; 0x13c <declare_constants>
	init_devices();
    1896:	17 dd       	rcall	.-1490   	; 0x12c6 <init_devices>
	//lcd_init(LCD_DISP_ON_CURSOR_BLINK);
	PORTJ = 0x00;
    1898:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    189c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <notesReceived>
	while(!notesReceived);
    18a0:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <notesReceived>
    18a4:	88 23       	and	r24, r24
    18a6:	e1 f3       	breq	.-8      	; 0x18a0 <main+0x32>
	PORTJ = 0xFF;
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    18ae:	e0 ec       	ldi	r30, 0xC0	; 192
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	85 ff       	sbrs	r24, 5
    18b6:	fd cf       	rjmp	.-6      	; 0x18b2 <main+0x44>
	UDR0 = data;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18be:	2f ef       	ldi	r18, 0xFF	; 255
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4c e2       	ldi	r20, 0x2C	; 44
    18c4:	21 50       	subi	r18, 0x01	; 1
    18c6:	30 40       	sbci	r19, 0x00	; 0
    18c8:	40 40       	sbci	r20, 0x00	; 0
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <main+0x56>
    18cc:	00 c0       	rjmp	.+0      	; 0x18ce <main+0x60>
    18ce:	00 00       	nop
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	_delay_ms(1000);
	int i;
	for(i = 0; i<noteCount; i++)
    18d0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <noteCount>
    18d4:	88 23       	and	r24, r24
    18d6:	01 f1       	breq	.+64     	; 0x1918 <main+0xaa>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    18dc:	e0 ec       	ldi	r30, 0xC0	; 192
    18de:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    18e0:	c6 ec       	ldi	r28, 0xC6	; 198
    18e2:	d0 e0       	ldi	r29, 0x00	; 0
	//lcd_string("Start");
	_delay_ms(1000);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    18e4:	d9 01       	movw	r26, r18
    18e6:	ad 53       	subi	r26, 0x3D	; 61
    18e8:	bc 4f       	sbci	r27, 0xFC	; 252
    18ea:	9c 91       	ld	r25, X
    18ec:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    18ee:	80 81       	ld	r24, Z
    18f0:	85 ff       	sbrs	r24, 5
    18f2:	fd cf       	rjmp	.-6      	; 0x18ee <main+0x80>
	UDR0 = data;
    18f4:	98 83       	st	Y, r25
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	9f ef       	ldi	r25, 0xFF	; 255
    18fa:	4c e2       	ldi	r20, 0x2C	; 44
    18fc:	81 50       	subi	r24, 0x01	; 1
    18fe:	90 40       	sbci	r25, 0x00	; 0
    1900:	40 40       	sbci	r20, 0x00	; 0
    1902:	e1 f7       	brne	.-8      	; 0x18fc <main+0x8e>
    1904:	00 c0       	rjmp	.+0      	; 0x1906 <main+0x98>
    1906:	00 00       	nop
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	_delay_ms(1000);
	int i;
	for(i = 0; i<noteCount; i++)
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <noteCount>
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	28 17       	cp	r18, r24
    1914:	39 07       	cpc	r19, r25
    1916:	34 f3       	brlt	.-52     	; 0x18e4 <main+0x76>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1918:	e0 ec       	ldi	r30, 0xC0	; 192
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	85 ff       	sbrs	r24, 5
    1920:	fd cf       	rjmp	.-6      	; 0x191c <main+0xae>
	UDR0 = data;
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	9f ef       	ldi	r25, 0xFF	; 255
    192c:	ec e2       	ldi	r30, 0x2C	; 44
    192e:	81 50       	subi	r24, 0x01	; 1
    1930:	90 40       	sbci	r25, 0x00	; 0
    1932:	e0 40       	sbci	r30, 0x00	; 0
    1934:	e1 f7       	brne	.-8      	; 0x192e <main+0xc0>
    1936:	00 c0       	rjmp	.+0      	; 0x1938 <main+0xca>
    1938:	00 00       	nop
	PORTJ = 0xFF;
	//lcd_puts("Rec");
	//send the notes to slave if this is the master
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    193a:	8f e0       	ldi	r24, 0x0F	; 15
    193c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
				taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
    1940:	31 2c       	mov	r3, r1
    1942:	21 2c       	mov	r2, r1

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1944:	c0 ec       	ldi	r28, 0xC0	; 192
    1946:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
    1948:	0f 2e       	mov	r0, r31
    194a:	f6 ec       	ldi	r31, 0xC6	; 198
    194c:	cf 2e       	mov	r12, r31
    194e:	d1 2c       	mov	r13, r1
    1950:	f0 2d       	mov	r31, r0
    1952:	0f 2e       	mov	r0, r31
    1954:	f5 e0       	ldi	r31, 0x05	; 5
    1956:	9f 2e       	mov	r9, r31
    1958:	f0 2d       	mov	r31, r0
    195a:	68 94       	set
    195c:	88 24       	eor	r8, r8
    195e:	82 f8       	bld	r8, 2
				taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
    1960:	63 2c       	mov	r6, r3
    1962:	52 2c       	mov	r5, r2
				for(i=1;i<4;i++)
    1964:	77 24       	eor	r7, r7
    1966:	73 94       	inc	r7
    1968:	41 2c       	mov	r4, r1
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
	#endif
	
	while(notes[(int)noteToStrike]!=0)
    196a:	cb c1       	rjmp	.+918    	; 0x1d02 <main+0x494>
	{
		if(taskCount==taskitr)	// If the bot has traversed all Tasks in the list
    196c:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <taskCount>
    1970:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <taskitr>
    1974:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <taskitr+0x1>
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	28 17       	cp	r18, r24
    197c:	39 07       	cpc	r19, r25
    197e:	09 f0       	breq	.+2      	; 0x1982 <main+0x114>
    1980:	a0 c0       	rjmp	.+320    	; 0x1ac2 <main+0x254>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
    1982:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <noteToProcess>
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	ed 53       	subi	r30, 0x3D	; 61
    198a:	fc 4f       	sbci	r31, 0xFC	; 252
    198c:	80 81       	ld	r24, Z
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9c 01       	movw	r18, r24
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	84 5f       	subi	r24, 0xF4	; 244
    19a6:	9d 4f       	sbci	r25, 0xFD	; 253
    19a8:	e3 dc       	rcall	.-1594   	; 0x1370 <costplan>
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
    19aa:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    19ae:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    19b2:	ee 0f       	add	r30, r30
    19b4:	ff 1f       	adc	r31, r31
    19b6:	eb 52       	subi	r30, 0x2B	; 43
    19b8:	fc 4f       	sbci	r31, 0xFC	; 252
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <otherBotTaskCost>
    19c2:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	e9 52       	subi	r30, 0x29	; 41
    19ce:	fc 4f       	sbci	r31, 0xFC	; 252
    19d0:	20 81       	ld	r18, Z
    19d2:	31 81       	ldd	r19, Z+1	; 0x01
    19d4:	24 0f       	add	r18, r20
    19d6:	31 1d       	adc	r19, r1
    19d8:	28 17       	cp	r18, r24
    19da:	39 07       	cpc	r19, r25
    19dc:	64 f5       	brge	.+88     	; 0x1a36 <main+0x1c8>
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
    19de:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    19e2:	88 81       	ld	r24, Y
    19e4:	85 ff       	sbrs	r24, 5
    19e6:	fd cf       	rjmp	.-6      	; 0x19e2 <main+0x174>
	UDR0 = data;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	f6 01       	movw	r30, r12
    19ec:	80 83       	st	Z, r24

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    19ee:	29 2f       	mov	r18, r25
    19f0:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    19f2:	88 81       	ld	r24, Y
    19f4:	85 ff       	sbrs	r24, 5
    19f6:	fd cf       	rjmp	.-6      	; 0x19f2 <main+0x184>
	UDR0 = data;
    19f8:	f6 01       	movw	r30, r12
    19fa:	20 83       	st	Z, r18
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    19fc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotLastTaskIndex>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
    1a00:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	e9 52       	subi	r30, 0x29	; 41
    1a0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0e:	90 81       	ld	r25, Z

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a10:	88 81       	ld	r24, Y
    1a12:	85 ff       	sbrs	r24, 5
    1a14:	fd cf       	rjmp	.-6      	; 0x1a10 <main+0x1a2>
	UDR0 = data;
    1a16:	88 e0       	ldi	r24, 0x08	; 8
    1a18:	f6 01       	movw	r30, r12
    1a1a:	80 83       	st	Z, r24

// To Send the Cost of the task for the other robot.
void inline SendTaskCost(char taskcost)
{
	SendByteToSlave(ADD_COST);
	SendByteToSlave(DATA(taskcost));
    1a1c:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a1e:	88 81       	ld	r24, Y
    1a20:	85 ff       	sbrs	r24, 5
    1a22:	fd cf       	rjmp	.-6      	; 0x1a1e <main+0x1b0>
	UDR0 = data;
    1a24:	f6 01       	movw	r30, r12
    1a26:	90 83       	st	Z, r25
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
				otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);	// Update the other bot last index
    1a28:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	ce de       	rcall	.-612    	; 0x17cc <BotEndLocation>
    1a30:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <otherBotLastTaskIndex>
    1a34:	32 c0       	rjmp	.+100    	; 0x1a9a <main+0x22c>
			}
			else
			{
				tasks[(int)taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
    1a36:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <taskCount>
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>
    1a40:	e3 55       	subi	r30, 0x53	; 83
    1a42:	fc 4f       	sbci	r31, 0xFC	; 252
    1a44:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
    1a46:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <taskCost>
    1a4a:	89 0f       	add	r24, r25
    1a4c:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <taskCost>
				taskCount++;
    1a50:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <taskCount>
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <taskCount>
				SendLastIndex((int)noteToProcess);
    1a5a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a5e:	88 81       	ld	r24, Y
    1a60:	85 ff       	sbrs	r24, 5
    1a62:	fd cf       	rjmp	.-6      	; 0x1a5e <main+0x1f0>
	UDR0 = data;
    1a64:	89 e0       	ldi	r24, 0x09	; 9
    1a66:	f6 01       	movw	r30, r12
    1a68:	80 83       	st	Z, r24

// Inform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1a6a:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a6c:	88 81       	ld	r24, Y
    1a6e:	85 ff       	sbrs	r24, 5
    1a70:	fd cf       	rjmp	.-6      	; 0x1a6c <main+0x1fe>
	UDR0 = data;
    1a72:	f6 01       	movw	r30, r12
    1a74:	90 83       	st	Z, r25
			{
				tasks[(int)taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
    1a76:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    1a7a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1a7e:	a6 de       	rcall	.-692    	; 0x17cc <BotEndLocation>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a80:	98 81       	ld	r25, Y
    1a82:	95 ff       	sbrs	r25, 5
    1a84:	fd cf       	rjmp	.-6      	; 0x1a80 <main+0x212>
	UDR0 = data;
    1a86:	99 e0       	ldi	r25, 0x09	; 9
    1a88:	f6 01       	movw	r30, r12
    1a8a:	90 83       	st	Z, r25

// Inform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a90:	88 81       	ld	r24, Y
    1a92:	85 ff       	sbrs	r24, 5
    1a94:	fd cf       	rjmp	.-6      	; 0x1a90 <main+0x222>
	UDR0 = data;
    1a96:	f6 01       	movw	r30, r12
    1a98:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
			}
			NoteProcessed(noteToProcess);
    1a9a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a9e:	88 81       	ld	r24, Y
    1aa0:	85 ff       	sbrs	r24, 5
    1aa2:	fd cf       	rjmp	.-6      	; 0x1a9e <main+0x230>
	UDR0 = data;
    1aa4:	87 e0       	ldi	r24, 0x07	; 7
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	80 83       	st	Z, r24

//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
    1aaa:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1aac:	88 81       	ld	r24, Y
    1aae:	85 ff       	sbrs	r24, 5
    1ab0:	fd cf       	rjmp	.-6      	; 0x1aac <main+0x23e>
	UDR0 = data;
    1ab2:	f6 01       	movw	r30, r12
    1ab4:	90 83       	st	Z, r25
//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
	noteToProcess++;
    1ab6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <noteToProcess>
    1ac0:	20 c1       	rjmp	.+576    	; 0x1d02 <main+0x494>
			NoteProcessed(noteToProcess);
		}
		else
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e3 55       	subi	r30, 0x53	; 83
    1ac6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ac8:	e0 81       	ld	r30, Z
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	ed 53       	subi	r30, 0x3D	; 61
    1ace:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad0:	80 81       	ld	r24, Z
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9c 01       	movw	r18, r24
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	84 5f       	subi	r24, 0xF4	; 244
    1aea:	9d 4f       	sbci	r25, 0xFD	; 253
    1aec:	41 dc       	rcall	.-1918   	; 0x1370 <costplan>
			if(cost[botloc-1]==0)
				taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
    1aee:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1af2:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1af6:	31 97       	sbiw	r30, 0x01	; 1
    1af8:	df 01       	movw	r26, r30
    1afa:	aa 0f       	add	r26, r26
    1afc:	bb 1f       	adc	r27, r27
    1afe:	a9 52       	subi	r26, 0x29	; 41
    1b00:	bc 4f       	sbci	r27, 0xFC	; 252
    1b02:	8d 91       	ld	r24, X+
    1b04:	9c 91       	ld	r25, X
    1b06:	89 2b       	or	r24, r25
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <main+0x29e>
    1b0a:	c9 c0       	rjmp	.+402    	; 0x1c9e <main+0x430>
			{
				minCost=cost[node[botloc-1][0]];
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	df 01       	movw	r26, r30
    1b1a:	a9 5c       	subi	r26, 0xC9	; 201
    1b1c:	bb 4f       	sbci	r27, 0xFB	; 251
    1b1e:	ed 90       	ld	r14, X+
    1b20:	fc 90       	ld	r15, X
    1b22:	d7 01       	movw	r26, r14
    1b24:	aa 0f       	add	r26, r26
    1b26:	bb 1f       	adc	r27, r27
    1b28:	a9 52       	subi	r26, 0x29	; 41
    1b2a:	bc 4f       	sbci	r27, 0xFC	; 252
    1b2c:	4d 91       	ld	r20, X+
    1b2e:	5c 91       	ld	r21, X
    1b30:	e7 5c       	subi	r30, 0xC7	; 199
    1b32:	fb 4f       	sbci	r31, 0xFB	; 251
				nxtNode=node[botloc-1][0];
				pos=0;
    1b34:	06 2d       	mov	r16, r6
    1b36:	15 2d       	mov	r17, r5
				for(i=1;i<4;i++)
    1b38:	87 2d       	mov	r24, r7
    1b3a:	94 2d       	mov	r25, r4
				{
					if(node[botloc-1][i]!=0)
    1b3c:	21 91       	ld	r18, Z+
    1b3e:	31 91       	ld	r19, Z+
    1b40:	21 15       	cp	r18, r1
    1b42:	31 05       	cpc	r19, r1
    1b44:	69 f0       	breq	.+26     	; 0x1b60 <main+0x2f2>
						if(cost[node[botloc-1][i]]<minCost)
    1b46:	d9 01       	movw	r26, r18
    1b48:	aa 0f       	add	r26, r26
    1b4a:	bb 1f       	adc	r27, r27
    1b4c:	a9 52       	subi	r26, 0x29	; 41
    1b4e:	bc 4f       	sbci	r27, 0xFC	; 252
    1b50:	6d 91       	ld	r22, X+
    1b52:	7c 91       	ld	r23, X
    1b54:	64 17       	cp	r22, r20
    1b56:	75 07       	cpc	r23, r21
    1b58:	1c f4       	brge	.+6      	; 0x1b60 <main+0x2f2>
    1b5a:	8c 01       	movw	r16, r24
						{
							minCost=cost[node[botloc-1][i]];
							nxtNode=node[botloc-1][i];
    1b5c:	79 01       	movw	r14, r18
				for(i=1;i<4;i++)
				{
					if(node[botloc-1][i]!=0)
						if(cost[node[botloc-1][i]]<minCost)
						{
							minCost=cost[node[botloc-1][i]];
    1b5e:	ab 01       	movw	r20, r22
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
				for(i=1;i<4;i++)
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	91 05       	cpc	r25, r1
    1b66:	51 f7       	brne	.-44     	; 0x1b3c <main+0x2ce>
    1b68:	58 01       	movw	r10, r16
    1b6a:	97 01       	movw	r18, r14
							minCost=cost[node[botloc-1][i]];
							nxtNode=node[botloc-1][i];
							pos=i;
						}
				}
				while(otherBotMovingTo==nxtNode);
    1b6c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <otherBotMovingTo>
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	28 17       	cp	r18, r24
    1b74:	39 07       	cpc	r19, r25
    1b76:	d1 f3       	breq	.-12     	; 0x1b6c <main+0x2fe>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b78:	88 81       	ld	r24, Y
    1b7a:	85 ff       	sbrs	r24, 5
    1b7c:	fd cf       	rjmp	.-6      	; 0x1b78 <main+0x30a>
	UDR0 = data;
    1b7e:	f6 01       	movw	r30, r12
    1b80:	90 82       	st	Z, r9

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    1b82:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b84:	88 81       	ld	r24, Y
    1b86:	85 ff       	sbrs	r24, 5
    1b88:	fd cf       	rjmp	.-6      	; 0x1b84 <main+0x316>
	UDR0 = data;
    1b8a:	f6 01       	movw	r30, r12
    1b8c:	20 83       	st	Z, r18
						}
				}
				while(otherBotMovingTo==nxtNode);
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
    1b8e:	c5 01       	movw	r24, r10
    1b90:	04 dd       	rcall	.-1528   	; 0x159a <move>
				if(taskDone==0)
    1b92:	89 2b       	or	r24, r25
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <main+0x32a>
    1b96:	54 c0       	rjmp	.+168    	; 0x1c40 <main+0x3d2>
				{
					for(i=0;i<4;i++)
						if(node[node[botloc-1][pos]-1][i]==nxtNode)
    1b98:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <botloc>
    1b9c:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <botloc+0x1>
    1ba0:	11 97       	sbiw	r26, 0x01	; 1
    1ba2:	23 2d       	mov	r18, r3
    1ba4:	32 2d       	mov	r19, r2
    1ba6:	aa 0f       	add	r26, r26
    1ba8:	bb 1f       	adc	r27, r27
    1baa:	aa 0f       	add	r26, r26
    1bac:	bb 1f       	adc	r27, r27
    1bae:	a0 0f       	add	r26, r16
    1bb0:	b1 1f       	adc	r27, r17
    1bb2:	aa 0f       	add	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	a9 5c       	subi	r26, 0xC9	; 201
    1bb8:	bb 4f       	sbci	r27, 0xFB	; 251
    1bba:	8d 91       	ld	r24, X+
    1bbc:	9c 91       	ld	r25, X
    1bbe:	11 97       	sbiw	r26, 0x01	; 1
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	e9 5c       	subi	r30, 0xC9	; 201
    1bd6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd8:	40 81       	ld	r20, Z
    1bda:	51 81       	ldd	r21, Z+1	; 0x01
    1bdc:	4e 15       	cp	r20, r14
    1bde:	5f 05       	cpc	r21, r15
    1be0:	69 f4       	brne	.+26     	; 0x1bfc <main+0x38e>
							node[node[botloc-1][pos]-1][i]=0;
    1be2:	fc 01       	movw	r30, r24
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	e2 0f       	add	r30, r18
    1bee:	f3 1f       	adc	r31, r19
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	e9 5c       	subi	r30, 0xC9	; 201
    1bf6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf8:	11 82       	std	Z+1, r1	; 0x01
    1bfa:	10 82       	st	Z, r1
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
				if(taskDone==0)
				{
					for(i=0;i<4;i++)
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	24 30       	cpi	r18, 0x04	; 4
    1c02:	31 05       	cpc	r19, r1
    1c04:	d1 f6       	brne	.-76     	; 0x1bba <main+0x34c>
						if(node[node[botloc-1][pos]-1][i]==nxtNode)
							node[node[botloc-1][pos]-1][i]=0;
					node[botloc-1][pos]=0;
    1c06:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    1c0a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	fc 01       	movw	r30, r24
    1c12:	ee 0f       	add	r30, r30
    1c14:	ff 1f       	adc	r31, r31
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	e0 0f       	add	r30, r16
    1c1c:	f1 1f       	adc	r31, r17
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	e9 5c       	subi	r30, 0xC9	; 201
    1c24:	fb 4f       	sbci	r31, 0xFB	; 251
    1c26:	11 82       	std	Z+1, r1	; 0x01
    1c28:	10 82       	st	Z, r1
				{
					botloc=node[botloc-1][pos];
					SendNodeReached(botloc);
				}
			}
			if(cost[botloc-1]==0)
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e9 52       	subi	r30, 0x29	; 41
    1c32:	fc 4f       	sbci	r31, 0xFC	; 252
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	89 2b       	or	r24, r25
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <main+0x3d0>
    1c3c:	62 c0       	rjmp	.+196    	; 0x1d02 <main+0x494>
    1c3e:	2f c0       	rjmp	.+94     	; 0x1c9e <main+0x430>
					node[botloc-1][pos]=0;
					break;
				}
				else
				{
					botloc=node[botloc-1][pos];
    1c40:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1c44:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1c48:	31 97       	sbiw	r30, 0x01	; 1
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	ea 0d       	add	r30, r10
    1c54:	fb 1d       	adc	r31, r11
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	e9 5c       	subi	r30, 0xC9	; 201
    1c5c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5e:	90 81       	ld	r25, Z
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
    1c62:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <botloc>
    1c66:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1c6a:	88 81       	ld	r24, Y
    1c6c:	85 ff       	sbrs	r24, 5
    1c6e:	fd cf       	rjmp	.-6      	; 0x1c6a <main+0x3fc>
	UDR0 = data;
    1c70:	f6 01       	movw	r30, r12
    1c72:	80 82       	st	Z, r8

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    1c74:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1c76:	88 81       	ld	r24, Y
    1c78:	85 ff       	sbrs	r24, 5
    1c7a:	fd cf       	rjmp	.-6      	; 0x1c76 <main+0x408>
	UDR0 = data;
    1c7c:	f6 01       	movw	r30, r12
    1c7e:	90 83       	st	Z, r25
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
			if(cost[botloc-1]==0)
				taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
    1c80:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1c84:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1c88:	31 97       	sbiw	r30, 0x01	; 1
    1c8a:	df 01       	movw	r26, r30
    1c8c:	aa 0f       	add	r26, r26
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	a9 52       	subi	r26, 0x29	; 41
    1c92:	bc 4f       	sbci	r27, 0xFC	; 252
    1c94:	8d 91       	ld	r24, X+
    1c96:	9c 91       	ld	r25, X
    1c98:	89 2b       	or	r24, r25
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <main+0x430>
    1c9c:	37 cf       	rjmp	.-402    	; 0x1b0c <main+0x29e>
					SendNodeReached(botloc);
				}
			}
			if(cost[botloc-1]==0)
			{
				while(noteToStrike!=tasks[taskitr]);
    1c9e:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <taskitr>
    1ca2:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <taskitr+0x1>
    1ca6:	e3 55       	subi	r30, 0x53	; 83
    1ca8:	fc 4f       	sbci	r31, 0xFC	; 252
    1caa:	90 81       	ld	r25, Z
    1cac:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1cb0:	98 13       	cpse	r25, r24
    1cb2:	fb cf       	rjmp	.-10     	; 0x1caa <main+0x43c>
				// Servo Motor Control
				// Strike the Note
				buzzer_on();
    1cb4:	b9 d9       	rcall	.-3214   	; 0x1028 <buzzer_on>
    1cb6:	ff ef       	ldi	r31, 0xFF	; 255
    1cb8:	2f e7       	ldi	r18, 0x7F	; 127
    1cba:	36 e1       	ldi	r19, 0x16	; 22
    1cbc:	f1 50       	subi	r31, 0x01	; 1
    1cbe:	20 40       	sbci	r18, 0x00	; 0
    1cc0:	30 40       	sbci	r19, 0x00	; 0
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <main+0x44e>
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <main+0x458>
    1cc6:	00 00       	nop
				_delay_ms(500);
				buzzer_off();
    1cc8:	b3 d9       	rcall	.-3226   	; 0x1030 <buzzer_off>
				taskitr++;
    1cca:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <taskitr>
    1cce:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <taskitr+0x1>
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <taskitr+0x1>
    1cd8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <taskitr>
				SendNoteStruck(noteToStrike);
    1cdc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <noteToStrike>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1ce0:	88 81       	ld	r24, Y
    1ce2:	85 ff       	sbrs	r24, 5
    1ce4:	fd cf       	rjmp	.-6      	; 0x1ce0 <main+0x472>
	UDR0 = data;
    1ce6:	86 e0       	ldi	r24, 0x06	; 6
    1ce8:	f6 01       	movw	r30, r12
    1cea:	80 83       	st	Z, r24

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    1cec:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1cee:	88 81       	ld	r24, Y
    1cf0:	85 ff       	sbrs	r24, 5
    1cf2:	fd cf       	rjmp	.-6      	; 0x1cee <main+0x480>
	UDR0 = data;
    1cf4:	f6 01       	movw	r30, r12
    1cf6:	90 83       	st	Z, r25
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    1cf8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <noteToStrike>
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
	#endif
	
	while(notes[(int)noteToStrike]!=0)
    1d02:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <noteToStrike>
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	ed 53       	subi	r30, 0x3D	; 61
    1d0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0c:	80 81       	ld	r24, Z
    1d0e:	81 11       	cpse	r24, r1
    1d10:	2d ce       	rjmp	.-934    	; 0x196c <main+0xfe>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d12:	e0 ec       	ldi	r30, 0xC0	; 192
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	85 ff       	sbrs	r24, 5
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <main+0x4a8>
	UDR0 = data;
    1d1c:	8a e0       	ldi	r24, 0x0A	; 10
    1d1e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d22:	e0 ec       	ldi	r30, 0xC0	; 192
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	85 ff       	sbrs	r24, 5
    1d2a:	fd cf       	rjmp	.-6      	; 0x1d26 <main+0x4b8>
	UDR0 = data;
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			}
		}
		
	}
	BotEnded();
	while(botEnd!=1);
    1d32:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <botEnd>
    1d36:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <botEnd+0x1>
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	e9 f7       	brne	.-6      	; 0x1d3a <main+0x4cc>
	buzzer_on();
    1d40:	73 d9       	rcall	.-3354   	; 0x1028 <buzzer_on>
    1d42:	ff ef       	ldi	r31, 0xFF	; 255
    1d44:	2f ef       	ldi	r18, 0xFF	; 255
    1d46:	30 ee       	ldi	r19, 0xE0	; 224
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	f1 50       	subi	r31, 0x01	; 1
    1d4c:	20 40       	sbci	r18, 0x00	; 0
    1d4e:	30 40       	sbci	r19, 0x00	; 0
    1d50:	40 40       	sbci	r20, 0x00	; 0
    1d52:	d9 f7       	brne	.-10     	; 0x1d4a <main+0x4dc>
    1d54:	00 c0       	rjmp	.+0      	; 0x1d56 <main+0x4e8>
    1d56:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    1d58:	6b d9       	rcall	.-3370   	; 0x1030 <buzzer_off>
	return 0;
}
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	8f 90       	pop	r8
    1d76:	7f 90       	pop	r7
    1d78:	6f 90       	pop	r6
    1d7a:	5f 90       	pop	r5
    1d7c:	4f 90       	pop	r4
    1d7e:	3f 90       	pop	r3
    1d80:	2f 90       	pop	r2
    1d82:	08 95       	ret

00001d84 <__divsf3>:
    1d84:	0c d0       	rcall	.+24     	; 0x1d9e <__divsf3x>
    1d86:	e6 c0       	rjmp	.+460    	; 0x1f54 <__fp_round>
    1d88:	de d0       	rcall	.+444    	; 0x1f46 <__fp_pscB>
    1d8a:	40 f0       	brcs	.+16     	; 0x1d9c <__divsf3+0x18>
    1d8c:	d5 d0       	rcall	.+426    	; 0x1f38 <__fp_pscA>
    1d8e:	30 f0       	brcs	.+12     	; 0x1d9c <__divsf3+0x18>
    1d90:	21 f4       	brne	.+8      	; 0x1d9a <__divsf3+0x16>
    1d92:	5f 3f       	cpi	r21, 0xFF	; 255
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <__divsf3+0x18>
    1d96:	c7 c0       	rjmp	.+398    	; 0x1f26 <__fp_inf>
    1d98:	51 11       	cpse	r21, r1
    1d9a:	10 c1       	rjmp	.+544    	; 0x1fbc <__fp_szero>
    1d9c:	ca c0       	rjmp	.+404    	; 0x1f32 <__fp_nan>

00001d9e <__divsf3x>:
    1d9e:	eb d0       	rcall	.+470    	; 0x1f76 <__fp_split3>
    1da0:	98 f3       	brcs	.-26     	; 0x1d88 <__divsf3+0x4>

00001da2 <__divsf3_pse>:
    1da2:	99 23       	and	r25, r25
    1da4:	c9 f3       	breq	.-14     	; 0x1d98 <__divsf3+0x14>
    1da6:	55 23       	and	r21, r21
    1da8:	b1 f3       	breq	.-20     	; 0x1d96 <__divsf3+0x12>
    1daa:	95 1b       	sub	r25, r21
    1dac:	55 0b       	sbc	r21, r21
    1dae:	bb 27       	eor	r27, r27
    1db0:	aa 27       	eor	r26, r26
    1db2:	62 17       	cp	r22, r18
    1db4:	73 07       	cpc	r23, r19
    1db6:	84 07       	cpc	r24, r20
    1db8:	38 f0       	brcs	.+14     	; 0x1dc8 <__divsf3_pse+0x26>
    1dba:	9f 5f       	subi	r25, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
    1dc2:	44 1f       	adc	r20, r20
    1dc4:	aa 1f       	adc	r26, r26
    1dc6:	a9 f3       	breq	.-22     	; 0x1db2 <__divsf3_pse+0x10>
    1dc8:	33 d0       	rcall	.+102    	; 0x1e30 <__divsf3_pse+0x8e>
    1dca:	0e 2e       	mov	r0, r30
    1dcc:	3a f0       	brmi	.+14     	; 0x1ddc <__divsf3_pse+0x3a>
    1dce:	e0 e8       	ldi	r30, 0x80	; 128
    1dd0:	30 d0       	rcall	.+96     	; 0x1e32 <__divsf3_pse+0x90>
    1dd2:	91 50       	subi	r25, 0x01	; 1
    1dd4:	50 40       	sbci	r21, 0x00	; 0
    1dd6:	e6 95       	lsr	r30
    1dd8:	00 1c       	adc	r0, r0
    1dda:	ca f7       	brpl	.-14     	; 0x1dce <__divsf3_pse+0x2c>
    1ddc:	29 d0       	rcall	.+82     	; 0x1e30 <__divsf3_pse+0x8e>
    1dde:	fe 2f       	mov	r31, r30
    1de0:	27 d0       	rcall	.+78     	; 0x1e30 <__divsf3_pse+0x8e>
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	bb 1f       	adc	r27, r27
    1dea:	26 17       	cp	r18, r22
    1dec:	37 07       	cpc	r19, r23
    1dee:	48 07       	cpc	r20, r24
    1df0:	ab 07       	cpc	r26, r27
    1df2:	b0 e8       	ldi	r27, 0x80	; 128
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <__divsf3_pse+0x56>
    1df6:	bb 0b       	sbc	r27, r27
    1df8:	80 2d       	mov	r24, r0
    1dfa:	bf 01       	movw	r22, r30
    1dfc:	ff 27       	eor	r31, r31
    1dfe:	93 58       	subi	r25, 0x83	; 131
    1e00:	5f 4f       	sbci	r21, 0xFF	; 255
    1e02:	2a f0       	brmi	.+10     	; 0x1e0e <__divsf3_pse+0x6c>
    1e04:	9e 3f       	cpi	r25, 0xFE	; 254
    1e06:	51 05       	cpc	r21, r1
    1e08:	68 f0       	brcs	.+26     	; 0x1e24 <__divsf3_pse+0x82>
    1e0a:	8d c0       	rjmp	.+282    	; 0x1f26 <__fp_inf>
    1e0c:	d7 c0       	rjmp	.+430    	; 0x1fbc <__fp_szero>
    1e0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e10:	ec f3       	brlt	.-6      	; 0x1e0c <__divsf3_pse+0x6a>
    1e12:	98 3e       	cpi	r25, 0xE8	; 232
    1e14:	dc f3       	brlt	.-10     	; 0x1e0c <__divsf3_pse+0x6a>
    1e16:	86 95       	lsr	r24
    1e18:	77 95       	ror	r23
    1e1a:	67 95       	ror	r22
    1e1c:	b7 95       	ror	r27
    1e1e:	f7 95       	ror	r31
    1e20:	9f 5f       	subi	r25, 0xFF	; 255
    1e22:	c9 f7       	brne	.-14     	; 0x1e16 <__divsf3_pse+0x74>
    1e24:	88 0f       	add	r24, r24
    1e26:	91 1d       	adc	r25, r1
    1e28:	96 95       	lsr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	97 f9       	bld	r25, 7
    1e2e:	08 95       	ret
    1e30:	e1 e0       	ldi	r30, 0x01	; 1
    1e32:	66 0f       	add	r22, r22
    1e34:	77 1f       	adc	r23, r23
    1e36:	88 1f       	adc	r24, r24
    1e38:	bb 1f       	adc	r27, r27
    1e3a:	62 17       	cp	r22, r18
    1e3c:	73 07       	cpc	r23, r19
    1e3e:	84 07       	cpc	r24, r20
    1e40:	ba 07       	cpc	r27, r26
    1e42:	20 f0       	brcs	.+8      	; 0x1e4c <__divsf3_pse+0xaa>
    1e44:	62 1b       	sub	r22, r18
    1e46:	73 0b       	sbc	r23, r19
    1e48:	84 0b       	sbc	r24, r20
    1e4a:	ba 0b       	sbc	r27, r26
    1e4c:	ee 1f       	adc	r30, r30
    1e4e:	88 f7       	brcc	.-30     	; 0x1e32 <__divsf3_pse+0x90>
    1e50:	e0 95       	com	r30
    1e52:	08 95       	ret

00001e54 <__fixunssfsi>:
    1e54:	98 d0       	rcall	.+304    	; 0x1f86 <__fp_splitA>
    1e56:	88 f0       	brcs	.+34     	; 0x1e7a <__fixunssfsi+0x26>
    1e58:	9f 57       	subi	r25, 0x7F	; 127
    1e5a:	90 f0       	brcs	.+36     	; 0x1e80 <__fixunssfsi+0x2c>
    1e5c:	b9 2f       	mov	r27, r25
    1e5e:	99 27       	eor	r25, r25
    1e60:	b7 51       	subi	r27, 0x17	; 23
    1e62:	a0 f0       	brcs	.+40     	; 0x1e8c <__fixunssfsi+0x38>
    1e64:	d1 f0       	breq	.+52     	; 0x1e9a <__fixunssfsi+0x46>
    1e66:	66 0f       	add	r22, r22
    1e68:	77 1f       	adc	r23, r23
    1e6a:	88 1f       	adc	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	1a f0       	brmi	.+6      	; 0x1e76 <__fixunssfsi+0x22>
    1e70:	ba 95       	dec	r27
    1e72:	c9 f7       	brne	.-14     	; 0x1e66 <__fixunssfsi+0x12>
    1e74:	12 c0       	rjmp	.+36     	; 0x1e9a <__fixunssfsi+0x46>
    1e76:	b1 30       	cpi	r27, 0x01	; 1
    1e78:	81 f0       	breq	.+32     	; 0x1e9a <__fixunssfsi+0x46>
    1e7a:	9f d0       	rcall	.+318    	; 0x1fba <__fp_zero>
    1e7c:	b1 e0       	ldi	r27, 0x01	; 1
    1e7e:	08 95       	ret
    1e80:	9c c0       	rjmp	.+312    	; 0x1fba <__fp_zero>
    1e82:	67 2f       	mov	r22, r23
    1e84:	78 2f       	mov	r23, r24
    1e86:	88 27       	eor	r24, r24
    1e88:	b8 5f       	subi	r27, 0xF8	; 248
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <__fixunssfsi+0x46>
    1e8c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e8e:	cc f3       	brlt	.-14     	; 0x1e82 <__fixunssfsi+0x2e>
    1e90:	86 95       	lsr	r24
    1e92:	77 95       	ror	r23
    1e94:	67 95       	ror	r22
    1e96:	b3 95       	inc	r27
    1e98:	d9 f7       	brne	.-10     	; 0x1e90 <__fixunssfsi+0x3c>
    1e9a:	3e f4       	brtc	.+14     	; 0x1eaa <__fixunssfsi+0x56>
    1e9c:	90 95       	com	r25
    1e9e:	80 95       	com	r24
    1ea0:	70 95       	com	r23
    1ea2:	61 95       	neg	r22
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	08 95       	ret

00001eac <__floatunsisf>:
    1eac:	e8 94       	clt
    1eae:	09 c0       	rjmp	.+18     	; 0x1ec2 <__floatsisf+0x12>

00001eb0 <__floatsisf>:
    1eb0:	97 fb       	bst	r25, 7
    1eb2:	3e f4       	brtc	.+14     	; 0x1ec2 <__floatsisf+0x12>
    1eb4:	90 95       	com	r25
    1eb6:	80 95       	com	r24
    1eb8:	70 95       	com	r23
    1eba:	61 95       	neg	r22
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	99 23       	and	r25, r25
    1ec4:	a9 f0       	breq	.+42     	; 0x1ef0 <__floatsisf+0x40>
    1ec6:	f9 2f       	mov	r31, r25
    1ec8:	96 e9       	ldi	r25, 0x96	; 150
    1eca:	bb 27       	eor	r27, r27
    1ecc:	93 95       	inc	r25
    1ece:	f6 95       	lsr	r31
    1ed0:	87 95       	ror	r24
    1ed2:	77 95       	ror	r23
    1ed4:	67 95       	ror	r22
    1ed6:	b7 95       	ror	r27
    1ed8:	f1 11       	cpse	r31, r1
    1eda:	f8 cf       	rjmp	.-16     	; 0x1ecc <__floatsisf+0x1c>
    1edc:	fa f4       	brpl	.+62     	; 0x1f1c <__floatsisf+0x6c>
    1ede:	bb 0f       	add	r27, r27
    1ee0:	11 f4       	brne	.+4      	; 0x1ee6 <__floatsisf+0x36>
    1ee2:	60 ff       	sbrs	r22, 0
    1ee4:	1b c0       	rjmp	.+54     	; 0x1f1c <__floatsisf+0x6c>
    1ee6:	6f 5f       	subi	r22, 0xFF	; 255
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	8f 4f       	sbci	r24, 0xFF	; 255
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	16 c0       	rjmp	.+44     	; 0x1f1c <__floatsisf+0x6c>
    1ef0:	88 23       	and	r24, r24
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <__floatsisf+0x48>
    1ef4:	96 e9       	ldi	r25, 0x96	; 150
    1ef6:	11 c0       	rjmp	.+34     	; 0x1f1a <__floatsisf+0x6a>
    1ef8:	77 23       	and	r23, r23
    1efa:	21 f0       	breq	.+8      	; 0x1f04 <__floatsisf+0x54>
    1efc:	9e e8       	ldi	r25, 0x8E	; 142
    1efe:	87 2f       	mov	r24, r23
    1f00:	76 2f       	mov	r23, r22
    1f02:	05 c0       	rjmp	.+10     	; 0x1f0e <__floatsisf+0x5e>
    1f04:	66 23       	and	r22, r22
    1f06:	71 f0       	breq	.+28     	; 0x1f24 <__floatsisf+0x74>
    1f08:	96 e8       	ldi	r25, 0x86	; 134
    1f0a:	86 2f       	mov	r24, r22
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	2a f0       	brmi	.+10     	; 0x1f1c <__floatsisf+0x6c>
    1f12:	9a 95       	dec	r25
    1f14:	66 0f       	add	r22, r22
    1f16:	77 1f       	adc	r23, r23
    1f18:	88 1f       	adc	r24, r24
    1f1a:	da f7       	brpl	.-10     	; 0x1f12 <__floatsisf+0x62>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	96 95       	lsr	r25
    1f20:	87 95       	ror	r24
    1f22:	97 f9       	bld	r25, 7
    1f24:	08 95       	ret

00001f26 <__fp_inf>:
    1f26:	97 f9       	bld	r25, 7
    1f28:	9f 67       	ori	r25, 0x7F	; 127
    1f2a:	80 e8       	ldi	r24, 0x80	; 128
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	08 95       	ret

00001f32 <__fp_nan>:
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	80 ec       	ldi	r24, 0xC0	; 192
    1f36:	08 95       	ret

00001f38 <__fp_pscA>:
    1f38:	00 24       	eor	r0, r0
    1f3a:	0a 94       	dec	r0
    1f3c:	16 16       	cp	r1, r22
    1f3e:	17 06       	cpc	r1, r23
    1f40:	18 06       	cpc	r1, r24
    1f42:	09 06       	cpc	r0, r25
    1f44:	08 95       	ret

00001f46 <__fp_pscB>:
    1f46:	00 24       	eor	r0, r0
    1f48:	0a 94       	dec	r0
    1f4a:	12 16       	cp	r1, r18
    1f4c:	13 06       	cpc	r1, r19
    1f4e:	14 06       	cpc	r1, r20
    1f50:	05 06       	cpc	r0, r21
    1f52:	08 95       	ret

00001f54 <__fp_round>:
    1f54:	09 2e       	mov	r0, r25
    1f56:	03 94       	inc	r0
    1f58:	00 0c       	add	r0, r0
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <__fp_round+0xc>
    1f5c:	88 23       	and	r24, r24
    1f5e:	52 f0       	brmi	.+20     	; 0x1f74 <__fp_round+0x20>
    1f60:	bb 0f       	add	r27, r27
    1f62:	40 f4       	brcc	.+16     	; 0x1f74 <__fp_round+0x20>
    1f64:	bf 2b       	or	r27, r31
    1f66:	11 f4       	brne	.+4      	; 0x1f6c <__fp_round+0x18>
    1f68:	60 ff       	sbrs	r22, 0
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <__fp_round+0x20>
    1f6c:	6f 5f       	subi	r22, 0xFF	; 255
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	8f 4f       	sbci	r24, 0xFF	; 255
    1f72:	9f 4f       	sbci	r25, 0xFF	; 255
    1f74:	08 95       	ret

00001f76 <__fp_split3>:
    1f76:	57 fd       	sbrc	r21, 7
    1f78:	90 58       	subi	r25, 0x80	; 128
    1f7a:	44 0f       	add	r20, r20
    1f7c:	55 1f       	adc	r21, r21
    1f7e:	59 f0       	breq	.+22     	; 0x1f96 <__fp_splitA+0x10>
    1f80:	5f 3f       	cpi	r21, 0xFF	; 255
    1f82:	71 f0       	breq	.+28     	; 0x1fa0 <__fp_splitA+0x1a>
    1f84:	47 95       	ror	r20

00001f86 <__fp_splitA>:
    1f86:	88 0f       	add	r24, r24
    1f88:	97 fb       	bst	r25, 7
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <__fp_splitA+0x20>
    1f8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f90:	79 f0       	breq	.+30     	; 0x1fb0 <__fp_splitA+0x2a>
    1f92:	87 95       	ror	r24
    1f94:	08 95       	ret
    1f96:	12 16       	cp	r1, r18
    1f98:	13 06       	cpc	r1, r19
    1f9a:	14 06       	cpc	r1, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	f2 cf       	rjmp	.-28     	; 0x1f84 <__fp_split3+0xe>
    1fa0:	46 95       	lsr	r20
    1fa2:	f1 df       	rcall	.-30     	; 0x1f86 <__fp_splitA>
    1fa4:	08 c0       	rjmp	.+16     	; 0x1fb6 <__fp_splitA+0x30>
    1fa6:	16 16       	cp	r1, r22
    1fa8:	17 06       	cpc	r1, r23
    1faa:	18 06       	cpc	r1, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	f1 cf       	rjmp	.-30     	; 0x1f92 <__fp_splitA+0xc>
    1fb0:	86 95       	lsr	r24
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	61 05       	cpc	r22, r1
    1fb6:	08 94       	sec
    1fb8:	08 95       	ret

00001fba <__fp_zero>:
    1fba:	e8 94       	clt

00001fbc <__fp_szero>:
    1fbc:	bb 27       	eor	r27, r27
    1fbe:	66 27       	eor	r22, r22
    1fc0:	77 27       	eor	r23, r23
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	97 f9       	bld	r25, 7
    1fc6:	08 95       	ret

00001fc8 <__gesf2>:
    1fc8:	03 d0       	rcall	.+6      	; 0x1fd0 <__fp_cmp>
    1fca:	08 f4       	brcc	.+2      	; 0x1fce <__gesf2+0x6>
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	08 95       	ret

00001fd0 <__fp_cmp>:
    1fd0:	99 0f       	add	r25, r25
    1fd2:	00 08       	sbc	r0, r0
    1fd4:	55 0f       	add	r21, r21
    1fd6:	aa 0b       	sbc	r26, r26
    1fd8:	e0 e8       	ldi	r30, 0x80	; 128
    1fda:	fe ef       	ldi	r31, 0xFE	; 254
    1fdc:	16 16       	cp	r1, r22
    1fde:	17 06       	cpc	r1, r23
    1fe0:	e8 07       	cpc	r30, r24
    1fe2:	f9 07       	cpc	r31, r25
    1fe4:	c0 f0       	brcs	.+48     	; 0x2016 <__fp_cmp+0x46>
    1fe6:	12 16       	cp	r1, r18
    1fe8:	13 06       	cpc	r1, r19
    1fea:	e4 07       	cpc	r30, r20
    1fec:	f5 07       	cpc	r31, r21
    1fee:	98 f0       	brcs	.+38     	; 0x2016 <__fp_cmp+0x46>
    1ff0:	62 1b       	sub	r22, r18
    1ff2:	73 0b       	sbc	r23, r19
    1ff4:	84 0b       	sbc	r24, r20
    1ff6:	95 0b       	sbc	r25, r21
    1ff8:	39 f4       	brne	.+14     	; 0x2008 <__fp_cmp+0x38>
    1ffa:	0a 26       	eor	r0, r26
    1ffc:	61 f0       	breq	.+24     	; 0x2016 <__fp_cmp+0x46>
    1ffe:	23 2b       	or	r18, r19
    2000:	24 2b       	or	r18, r20
    2002:	25 2b       	or	r18, r21
    2004:	21 f4       	brne	.+8      	; 0x200e <__fp_cmp+0x3e>
    2006:	08 95       	ret
    2008:	0a 26       	eor	r0, r26
    200a:	09 f4       	brne	.+2      	; 0x200e <__fp_cmp+0x3e>
    200c:	a1 40       	sbci	r26, 0x01	; 1
    200e:	a6 95       	lsr	r26
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	81 1d       	adc	r24, r1
    2014:	81 1d       	adc	r24, r1
    2016:	08 95       	ret

00002018 <__tablejump2__>:
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	88 1f       	adc	r24, r24
    201e:	8b bf       	out	0x3b, r24	; 59
    2020:	07 90       	elpm	r0, Z+
    2022:	f6 91       	elpm	r31, Z
    2024:	e0 2d       	mov	r30, r0
    2026:	19 94       	eijmp

00002028 <_exit>:
    2028:	f8 94       	cli

0000202a <__stop_program>:
    202a:	ff cf       	rjmp	.-2      	; 0x202a <__stop_program>
