
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800200  000021b4  00002248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ae  008003dc  008003dc  00002424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002800  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7e  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c3e  00000000  00000000  00005dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  00007a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2b  00000000  00000000  00007fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000155f  00000000  00000000  00008ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_5>
      18:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c7       	rjmp	.+4034   	; 0x1028 <__vector_25>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_51>
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3a 08       	sbc	r3, r10
      e6:	87 08       	sbc	r8, r7
      e8:	4a 08       	sbc	r4, r10
      ea:	56 08       	sbc	r5, r6
      ec:	59 08       	sbc	r5, r9
      ee:	5c 08       	sbc	r5, r12
      f0:	66 08       	sbc	r6, r6
      f2:	70 08       	sbc	r7, r0
      f4:	76 08       	sbc	r7, r6
      f6:	79 08       	sbc	r7, r9

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	13 e0       	ldi	r17, 0x03	; 3
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e4 eb       	ldi	r30, 0xB4	; 180
     110:	f1 e2       	ldi	r31, 0x21	; 33
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	ac 3d       	cpi	r26, 0xDC	; 220
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e0       	ldi	r18, 0x07	; 7
     124:	ac ed       	ldi	r26, 0xDC	; 220
     126:	b3 e0       	ldi	r27, 0x03	; 3
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	aa 38       	cpi	r26, 0x8A	; 138
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 ef 0c 	call	0x19de	; 0x19de <main>
     136:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <lcd_port_config>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     13c:	87 b1       	in	r24, 0x07	; 7
     13e:	87 6f       	ori	r24, 0xF7	; 247
     140:	87 b9       	out	0x07, r24	; 7
     142:	88 b1       	in	r24, 0x08	; 8
     144:	80 78       	andi	r24, 0x80	; 128
     146:	88 b9       	out	0x08, r24	; 8
     148:	08 95       	ret

0000014a <lcd_set_4bit>:
     14a:	86 e6       	ldi	r24, 0x66	; 102
     14c:	9e e0       	ldi	r25, 0x0E	; 14
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcd_set_4bit+0x4>
     152:	00 00       	nop
     154:	40 98       	cbi	0x08, 0	; 8
     156:	41 98       	cbi	0x08, 1	; 8
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	88 b9       	out	0x08, r24	; 8
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	ef ef       	ldi	r30, 0xFF	; 255
     160:	f7 e4       	ldi	r31, 0x47	; 71
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x18>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x1e>
     168:	00 00       	nop
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	e6 e6       	ldi	r30, 0x66	; 102
     16e:	fe e0       	ldi	r31, 0x0E	; 14
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x26>
     174:	00 00       	nop
     176:	40 98       	cbi	0x08, 0	; 8
     178:	41 98       	cbi	0x08, 1	; 8
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	ef ef       	ldi	r30, 0xFF	; 255
     180:	f7 e4       	ldi	r31, 0x47	; 71
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x38>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x3e>
     188:	00 00       	nop
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	e6 e6       	ldi	r30, 0x66	; 102
     18e:	fe e0       	ldi	r31, 0x0E	; 14
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x46>
     194:	00 00       	nop
     196:	40 98       	cbi	0x08, 0	; 8
     198:	41 98       	cbi	0x08, 1	; 8
     19a:	88 b9       	out	0x08, r24	; 8
     19c:	42 9a       	sbi	0x08, 2	; 8
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	97 e4       	ldi	r25, 0x47	; 71
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x58>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_set_4bit+0x5e>
     1a8:	00 00       	nop
     1aa:	42 98       	cbi	0x08, 2	; 8
     1ac:	e6 e6       	ldi	r30, 0x66	; 102
     1ae:	fe e0       	ldi	r31, 0x0E	; 14
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x66>
     1b4:	00 00       	nop
     1b6:	40 98       	cbi	0x08, 0	; 8
     1b8:	41 98       	cbi	0x08, 1	; 8
     1ba:	80 e2       	ldi	r24, 0x20	; 32
     1bc:	88 b9       	out	0x08, r24	; 8
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	97 e4       	ldi	r25, 0x47	; 71
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x7a>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x80>
     1ca:	00 00       	nop
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	08 95       	ret

000001d0 <lcd_wr_command>:
     1d0:	98 b1       	in	r25, 0x08	; 8
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	98 b9       	out	0x08, r25	; 8
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	28 2f       	mov	r18, r24
     1da:	20 7f       	andi	r18, 0xF0	; 240
     1dc:	92 2b       	or	r25, r18
     1de:	98 b9       	out	0x08, r25	; 8
     1e0:	40 98       	cbi	0x08, 0	; 8
     1e2:	41 98       	cbi	0x08, 1	; 8
     1e4:	42 9a       	sbi	0x08, 2	; 8
     1e6:	ef ef       	ldi	r30, 0xFF	; 255
     1e8:	f7 e4       	ldi	r31, 0x47	; 71
     1ea:	31 97       	sbiw	r30, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_wr_command+0x1a>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_wr_command+0x20>
     1f0:	00 00       	nop
     1f2:	42 98       	cbi	0x08, 2	; 8
     1f4:	98 b1       	in	r25, 0x08	; 8
     1f6:	9f 70       	andi	r25, 0x0F	; 15
     1f8:	98 b9       	out	0x08, r25	; 8
     1fa:	98 b1       	in	r25, 0x08	; 8
     1fc:	82 95       	swap	r24
     1fe:	80 7f       	andi	r24, 0xF0	; 240
     200:	89 2b       	or	r24, r25
     202:	88 b9       	out	0x08, r24	; 8
     204:	40 98       	cbi	0x08, 0	; 8
     206:	41 98       	cbi	0x08, 1	; 8
     208:	42 9a       	sbi	0x08, 2	; 8
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	97 e4       	ldi	r25, 0x47	; 71
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <lcd_wr_command+0x3e>
     212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_wr_command+0x44>
     214:	00 00       	nop
     216:	42 98       	cbi	0x08, 2	; 8
     218:	08 95       	ret

0000021a <lcd_wr_char>:
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
     220:	98 b1       	in	r25, 0x08	; 8
     222:	28 2f       	mov	r18, r24
     224:	20 7f       	andi	r18, 0xF0	; 240
     226:	92 2b       	or	r25, r18
     228:	98 b9       	out	0x08, r25	; 8
     22a:	40 9a       	sbi	0x08, 0	; 8
     22c:	41 98       	cbi	0x08, 1	; 8
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	ef ef       	ldi	r30, 0xFF	; 255
     232:	f7 e4       	ldi	r31, 0x47	; 71
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_char+0x1a>
     238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_char+0x20>
     23a:	00 00       	nop
     23c:	42 98       	cbi	0x08, 2	; 8
     23e:	98 b1       	in	r25, 0x08	; 8
     240:	9f 70       	andi	r25, 0x0F	; 15
     242:	98 b9       	out	0x08, r25	; 8
     244:	98 b1       	in	r25, 0x08	; 8
     246:	82 95       	swap	r24
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	89 2b       	or	r24, r25
     24c:	88 b9       	out	0x08, r24	; 8
     24e:	40 9a       	sbi	0x08, 0	; 8
     250:	41 98       	cbi	0x08, 1	; 8
     252:	42 9a       	sbi	0x08, 2	; 8
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	97 e4       	ldi	r25, 0x47	; 71
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_wr_char+0x3e>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_wr_char+0x44>
     25e:	00 00       	nop
     260:	42 98       	cbi	0x08, 2	; 8
     262:	08 95       	ret

00000264 <lcd_string>:
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
     26a:	88 81       	ld	r24, Y
     26c:	88 23       	and	r24, r24
     26e:	29 f0       	breq	.+10     	; 0x27a <lcd_string+0x16>
     270:	21 96       	adiw	r28, 0x01	; 1
     272:	d3 df       	rcall	.-90     	; 0x21a <lcd_wr_char>
     274:	89 91       	ld	r24, Y+
     276:	81 11       	cpse	r24, r1
     278:	fc cf       	rjmp	.-8      	; 0x272 <lcd_string+0xe>
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <lcd_init>:
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x4>
     288:	00 00       	nop
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	a1 df       	rcall	.-190    	; 0x1d0 <lcd_wr_command>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	9f df       	rcall	.-194    	; 0x1d0 <lcd_wr_command>
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	9d df       	rcall	.-198    	; 0x1d0 <lcd_wr_command>
     296:	8e e0       	ldi	r24, 0x0E	; 14
     298:	9b df       	rcall	.-202    	; 0x1d0 <lcd_wr_command>
     29a:	80 e8       	ldi	r24, 0x80	; 128
     29c:	99 cf       	rjmp	.-206    	; 0x1d0 <lcd_wr_command>
     29e:	08 95       	ret

000002a0 <declare_constants>:
     2a0:	2f 92       	push	r2
     2a2:	3f 92       	push	r3
     2a4:	4f 92       	push	r4
     2a6:	5f 92       	push	r5
     2a8:	6f 92       	push	r6
     2aa:	7f 92       	push	r7
     2ac:	8f 92       	push	r8
     2ae:	9f 92       	push	r9
     2b0:	af 92       	push	r10
     2b2:	bf 92       	push	r11
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	e2 e0       	ldi	r30, 0x02	; 2
     2c6:	f6 e0       	ldi	r31, 0x06	; 6
     2c8:	0f 2e       	mov	r0, r31
     2ca:	fb e4       	ldi	r31, 0x4B	; 75
     2cc:	af 2e       	mov	r10, r31
     2ce:	b1 2c       	mov	r11, r1
     2d0:	f0 2d       	mov	r31, r0
     2d2:	b1 82       	std	Z+1, r11	; 0x01
     2d4:	a0 82       	st	Z, r10
     2d6:	0f 2e       	mov	r0, r31
     2d8:	fd e1       	ldi	r31, 0x1D	; 29
     2da:	4f 2e       	mov	r4, r31
     2dc:	55 24       	eor	r5, r5
     2de:	53 94       	inc	r5
     2e0:	f0 2d       	mov	r31, r0
     2e2:	53 82       	std	Z+3, r5	; 0x03
     2e4:	42 82       	std	Z+2, r4	; 0x02
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	9f ef       	ldi	r25, 0xFF	; 255
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	84 83       	std	Z+4, r24	; 0x04
     2ee:	97 83       	std	Z+7, r25	; 0x07
     2f0:	86 83       	std	Z+6, r24	; 0x06
     2f2:	cc 24       	eor	r12, r12
     2f4:	ca 94       	dec	r12
     2f6:	d1 2c       	mov	r13, r1
     2f8:	d1 86       	std	Z+9, r13	; 0x09
     2fa:	c0 86       	std	Z+8, r12	; 0x08
     2fc:	ac e3       	ldi	r26, 0x3C	; 60
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	b3 87       	std	Z+11, r27	; 0x0b
     302:	a2 87       	std	Z+10, r26	; 0x0a
     304:	95 87       	std	Z+13, r25	; 0x0d
     306:	84 87       	std	Z+12, r24	; 0x0c
     308:	97 87       	std	Z+15, r25	; 0x0f
     30a:	86 87       	std	Z+14, r24	; 0x0e
     30c:	20 ef       	ldi	r18, 0xF0	; 240
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	31 8b       	std	Z+17, r19	; 0x11
     312:	20 8b       	std	Z+16, r18	; 0x10
     314:	0f 2e       	mov	r0, r31
     316:	fd e2       	ldi	r31, 0x2D	; 45
     318:	2f 2e       	mov	r2, r31
     31a:	31 2c       	mov	r3, r1
     31c:	f0 2d       	mov	r31, r0
     31e:	33 8a       	std	Z+19, r3	; 0x13
     320:	22 8a       	std	Z+18, r2	; 0x12
     322:	15 8a       	std	Z+21, r1	; 0x15
     324:	14 8a       	std	Z+20, r1	; 0x14
     326:	6c e2       	ldi	r22, 0x2C	; 44
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	77 8b       	std	Z+23, r23	; 0x17
     32c:	66 8b       	std	Z+22, r22	; 0x16
     32e:	0f 2e       	mov	r0, r31
     330:	f1 ee       	ldi	r31, 0xE1	; 225
     332:	8f 2e       	mov	r8, r31
     334:	91 2c       	mov	r9, r1
     336:	f0 2d       	mov	r31, r0
     338:	91 8e       	std	Z+25, r9	; 0x19
     33a:	80 8e       	std	Z+24, r8	; 0x18
     33c:	0e e1       	ldi	r16, 0x1E	; 30
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	13 8f       	std	Z+27, r17	; 0x1b
     342:	02 8f       	std	Z+26, r16	; 0x1a
     344:	95 8f       	std	Z+29, r25	; 0x1d
     346:	84 8f       	std	Z+28, r24	; 0x1c
     348:	97 8f       	std	Z+31, r25	; 0x1f
     34a:	86 8f       	std	Z+30, r24	; 0x1e
     34c:	42 ed       	ldi	r20, 0xD2	; 210
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	51 a3       	std	Z+33, r21	; 0x21
     352:	40 a3       	std	Z+32, r20	; 0x20
     354:	cf e0       	ldi	r28, 0x0F	; 15
     356:	d0 e0       	ldi	r29, 0x00	; 0
     358:	d3 a3       	std	Z+35, r29	; 0x23
     35a:	c2 a3       	std	Z+34, r28	; 0x22
     35c:	95 a3       	std	Z+37, r25	; 0x25
     35e:	84 a3       	std	Z+36, r24	; 0x24
     360:	97 a3       	std	Z+39, r25	; 0x27
     362:	86 a3       	std	Z+38, r24	; 0x26
     364:	03 ec       	ldi	r16, 0xC3	; 195
     366:	10 e0       	ldi	r17, 0x00	; 0
     368:	11 a7       	std	Z+41, r17	; 0x29
     36a:	00 a7       	std	Z+40, r16	; 0x28
     36c:	13 a6       	std	Z+43, r1	; 0x2b
     36e:	12 a6       	std	Z+42, r1	; 0x2a
     370:	95 a7       	std	Z+45, r25	; 0x2d
     372:	84 a7       	std	Z+44, r24	; 0x2c
     374:	97 a7       	std	Z+47, r25	; 0x2f
     376:	86 a7       	std	Z+46, r24	; 0x2e
     378:	44 eb       	ldi	r20, 0xB4	; 180
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	51 ab       	std	Z+49, r21	; 0x31
     37e:	40 ab       	std	Z+48, r20	; 0x30
     380:	09 e5       	ldi	r16, 0x59	; 89
     382:	11 e0       	ldi	r17, 0x01	; 1
     384:	13 ab       	std	Z+51, r17	; 0x33
     386:	02 ab       	std	Z+50, r16	; 0x32
     388:	35 ab       	std	Z+53, r19	; 0x35
     38a:	24 ab       	std	Z+52, r18	; 0x34
     38c:	77 ab       	std	Z+55, r23	; 0x37
     38e:	66 ab       	std	Z+54, r22	; 0x36
     390:	05 ea       	ldi	r16, 0xA5	; 165
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	11 af       	std	Z+57, r17	; 0x39
     396:	00 af       	std	Z+56, r16	; 0x38
     398:	0a e4       	ldi	r16, 0x4A	; 74
     39a:	11 e0       	ldi	r17, 0x01	; 1
     39c:	13 af       	std	Z+59, r17	; 0x3b
     39e:	02 af       	std	Z+58, r16	; 0x3a
     3a0:	95 af       	std	Z+61, r25	; 0x3d
     3a2:	84 af       	std	Z+60, r24	; 0x3c
     3a4:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <angle+0x3f>
     3a8:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <angle+0x3e>
     3ac:	e6 e9       	ldi	r30, 0x96	; 150
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	f0 93 43 06 	sts	0x0643, r31	; 0x800643 <angle+0x41>
     3b4:	e0 93 42 06 	sts	0x0642, r30	; 0x800642 <angle+0x40>
     3b8:	0b e3       	ldi	r16, 0x3B	; 59
     3ba:	11 e0       	ldi	r17, 0x01	; 1
     3bc:	10 93 45 06 	sts	0x0645, r17	; 0x800645 <angle+0x43>
     3c0:	00 93 44 06 	sts	0x0644, r16	; 0x800644 <angle+0x42>
     3c4:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <angle+0x45>
     3c8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <angle+0x44>
     3cc:	90 93 49 06 	sts	0x0649, r25	; 0x800649 <angle+0x47>
     3d0:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <angle+0x46>
     3d4:	0f 2e       	mov	r0, r31
     3d6:	f7 e8       	ldi	r31, 0x87	; 135
     3d8:	6f 2e       	mov	r6, r31
     3da:	71 2c       	mov	r7, r1
     3dc:	f0 2d       	mov	r31, r0
     3de:	70 92 4b 06 	sts	0x064B, r7	; 0x80064b <angle+0x49>
     3e2:	60 92 4a 06 	sts	0x064A, r6	; 0x80064a <angle+0x48>
     3e6:	70 93 4d 06 	sts	0x064D, r23	; 0x80064d <angle+0x4b>
     3ea:	60 93 4c 06 	sts	0x064C, r22	; 0x80064c <angle+0x4a>
     3ee:	90 93 4f 06 	sts	0x064F, r25	; 0x80064f <angle+0x4d>
     3f2:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <angle+0x4c>
     3f6:	90 93 51 06 	sts	0x0651, r25	; 0x800651 <angle+0x4f>
     3fa:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <angle+0x4e>
     3fe:	e8 e7       	ldi	r30, 0x78	; 120
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	f0 93 53 06 	sts	0x0653, r31	; 0x800653 <angle+0x51>
     406:	e0 93 52 06 	sts	0x0652, r30	; 0x800652 <angle+0x50>
     40a:	50 92 55 06 	sts	0x0655, r5	; 0x800655 <angle+0x53>
     40e:	40 92 54 06 	sts	0x0654, r4	; 0x800654 <angle+0x52>
     412:	50 93 57 06 	sts	0x0657, r21	; 0x800657 <angle+0x55>
     416:	40 93 56 06 	sts	0x0656, r20	; 0x800656 <angle+0x54>
     41a:	30 93 59 06 	sts	0x0659, r19	; 0x800659 <angle+0x57>
     41e:	20 93 58 06 	sts	0x0658, r18	; 0x800658 <angle+0x56>
     422:	0f 2e       	mov	r0, r31
     424:	f9 e6       	ldi	r31, 0x69	; 105
     426:	ef 2e       	mov	r14, r31
     428:	f1 2c       	mov	r15, r1
     42a:	f0 2d       	mov	r31, r0
     42c:	f0 92 5b 06 	sts	0x065B, r15	; 0x80065b <angle+0x59>
     430:	e0 92 5a 06 	sts	0x065A, r14	; 0x80065a <angle+0x58>
     434:	0e e0       	ldi	r16, 0x0E	; 14
     436:	11 e0       	ldi	r17, 0x01	; 1
     438:	10 93 5d 06 	sts	0x065D, r17	; 0x80065d <angle+0x5b>
     43c:	00 93 5c 06 	sts	0x065C, r16	; 0x80065c <angle+0x5a>
     440:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <angle+0x5d>
     444:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <angle+0x5c>
     448:	90 93 61 06 	sts	0x0661, r25	; 0x800661 <angle+0x5f>
     44c:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <angle+0x5e>
     450:	0a e5       	ldi	r16, 0x5A	; 90
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	10 93 63 06 	sts	0x0663, r17	; 0x800663 <angle+0x61>
     458:	00 93 62 06 	sts	0x0662, r16	; 0x800662 <angle+0x60>
     45c:	d0 92 65 06 	sts	0x0665, r13	; 0x800665 <angle+0x63>
     460:	c0 92 64 06 	sts	0x0664, r12	; 0x800664 <angle+0x62>
     464:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <angle+0x65>
     468:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <angle+0x64>
     46c:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <angle+0x67>
     470:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <angle+0x66>
     474:	b0 92 6b 06 	sts	0x066B, r11	; 0x80066b <angle+0x69>
     478:	a0 92 6a 06 	sts	0x066A, r10	; 0x80066a <angle+0x68>
     47c:	30 93 6d 06 	sts	0x066D, r19	; 0x80066d <angle+0x6b>
     480:	20 93 6c 06 	sts	0x066C, r18	; 0x80066c <angle+0x6a>
     484:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <angle+0x6d>
     488:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <angle+0x6c>
     48c:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <angle+0x6f>
     490:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <angle+0x6e>
     494:	b0 93 73 06 	sts	0x0673, r27	; 0x800673 <angle+0x71>
     498:	a0 93 72 06 	sts	0x0672, r26	; 0x800672 <angle+0x70>
     49c:	90 92 75 06 	sts	0x0675, r9	; 0x800675 <angle+0x73>
     4a0:	80 92 74 06 	sts	0x0674, r8	; 0x800674 <angle+0x72>
     4a4:	f0 93 77 06 	sts	0x0677, r31	; 0x800677 <angle+0x75>
     4a8:	e0 93 76 06 	sts	0x0676, r30	; 0x800676 <angle+0x74>
     4ac:	50 93 79 06 	sts	0x0679, r21	; 0x800679 <angle+0x77>
     4b0:	40 93 78 06 	sts	0x0678, r20	; 0x800678 <angle+0x76>
     4b4:	30 92 7b 06 	sts	0x067B, r3	; 0x80067b <angle+0x79>
     4b8:	20 92 7a 06 	sts	0x067A, r2	; 0x80067a <angle+0x78>
     4bc:	0f 2e       	mov	r0, r31
     4be:	f2 ed       	ldi	r31, 0xD2	; 210
     4c0:	cf 2e       	mov	r12, r31
     4c2:	d1 2c       	mov	r13, r1
     4c4:	f0 2d       	mov	r31, r0
     4c6:	d0 92 7d 06 	sts	0x067D, r13	; 0x80067d <angle+0x7b>
     4ca:	c0 92 7c 06 	sts	0x067C, r12	; 0x80067c <angle+0x7a>
     4ce:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <angle+0x7d>
     4d2:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <angle+0x7c>
     4d6:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <angle+0x7f>
     4da:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <angle+0x7e>
     4de:	0f 2e       	mov	r0, r31
     4e0:	fe e1       	ldi	r31, 0x1E	; 30
     4e2:	cf 2e       	mov	r12, r31
     4e4:	d1 2c       	mov	r13, r1
     4e6:	f0 2d       	mov	r31, r0
     4e8:	d0 92 83 06 	sts	0x0683, r13	; 0x800683 <angle+0x81>
     4ec:	c0 92 82 06 	sts	0x0682, r12	; 0x800682 <angle+0x80>
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f3 ec       	ldi	r31, 0xC3	; 195
     4f4:	cf 2e       	mov	r12, r31
     4f6:	d1 2c       	mov	r13, r1
     4f8:	f0 2d       	mov	r31, r0
     4fa:	d0 92 85 06 	sts	0x0685, r13	; 0x800685 <angle+0x83>
     4fe:	c0 92 84 06 	sts	0x0684, r12	; 0x800684 <angle+0x82>
     502:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <angle+0x85>
     506:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <angle+0x84>
     50a:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <angle+0x87>
     50e:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <angle+0x86>
     512:	d0 93 8b 06 	sts	0x068B, r29	; 0x80068b <angle+0x89>
     516:	c0 93 8a 06 	sts	0x068A, r28	; 0x80068a <angle+0x88>
     51a:	50 93 8d 06 	sts	0x068D, r21	; 0x80068d <angle+0x8b>
     51e:	40 93 8c 06 	sts	0x068C, r20	; 0x80068c <angle+0x8a>
     522:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <angle+0x8d>
     526:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <angle+0x8c>
     52a:	90 93 91 06 	sts	0x0691, r25	; 0x800691 <angle+0x8f>
     52e:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <angle+0x8e>
     532:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <angle+0x91>
     536:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <angle+0x90>
     53a:	0f 2e       	mov	r0, r31
     53c:	f5 ea       	ldi	r31, 0xA5	; 165
     53e:	cf 2e       	mov	r12, r31
     540:	d1 2c       	mov	r13, r1
     542:	f0 2d       	mov	r31, r0
     544:	d0 92 95 06 	sts	0x0695, r13	; 0x800695 <angle+0x93>
     548:	c0 92 94 06 	sts	0x0694, r12	; 0x800694 <angle+0x92>
     54c:	b0 93 97 06 	sts	0x0697, r27	; 0x800697 <angle+0x95>
     550:	a0 93 96 06 	sts	0x0696, r26	; 0x800696 <angle+0x94>
     554:	f0 93 99 06 	sts	0x0699, r31	; 0x800699 <angle+0x97>
     558:	e0 93 98 06 	sts	0x0698, r30	; 0x800698 <angle+0x96>
     55c:	0f 2e       	mov	r0, r31
     55e:	f9 e5       	ldi	r31, 0x59	; 89
     560:	cf 2e       	mov	r12, r31
     562:	dd 24       	eor	r13, r13
     564:	d3 94       	inc	r13
     566:	f0 2d       	mov	r31, r0
     568:	d0 92 9b 06 	sts	0x069B, r13	; 0x80069b <angle+0x99>
     56c:	c0 92 9a 06 	sts	0x069A, r12	; 0x80069a <angle+0x98>
     570:	0f 2e       	mov	r0, r31
     572:	f6 e9       	ldi	r31, 0x96	; 150
     574:	cf 2e       	mov	r12, r31
     576:	d1 2c       	mov	r13, r1
     578:	f0 2d       	mov	r31, r0
     57a:	d0 92 9d 06 	sts	0x069D, r13	; 0x80069d <angle+0x9b>
     57e:	c0 92 9c 06 	sts	0x069C, r12	; 0x80069c <angle+0x9a>
     582:	90 93 9f 06 	sts	0x069F, r25	; 0x80069f <angle+0x9d>
     586:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <angle+0x9c>
     58a:	90 93 a1 06 	sts	0x06A1, r25	; 0x8006a1 <angle+0x9f>
     58e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <angle+0x9e>
     592:	0f 2e       	mov	r0, r31
     594:	fa e4       	ldi	r31, 0x4A	; 74
     596:	cf 2e       	mov	r12, r31
     598:	dd 24       	eor	r13, r13
     59a:	d3 94       	inc	r13
     59c:	f0 2d       	mov	r31, r0
     59e:	d0 92 a3 06 	sts	0x06A3, r13	; 0x8006a3 <angle+0xa1>
     5a2:	c0 92 a2 06 	sts	0x06A2, r12	; 0x8006a2 <angle+0xa0>
     5a6:	70 92 a5 06 	sts	0x06A5, r7	; 0x8006a5 <angle+0xa3>
     5aa:	60 92 a4 06 	sts	0x06A4, r6	; 0x8006a4 <angle+0xa2>
     5ae:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <angle+0xa5>
     5b2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <angle+0xa4>
     5b6:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <angle+0xa7>
     5ba:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <angle+0xa6>
     5be:	0f 2e       	mov	r0, r31
     5c0:	fb e3       	ldi	r31, 0x3B	; 59
     5c2:	cf 2e       	mov	r12, r31
     5c4:	dd 24       	eor	r13, r13
     5c6:	d3 94       	inc	r13
     5c8:	f0 2d       	mov	r31, r0
     5ca:	d0 92 ab 06 	sts	0x06AB, r13	; 0x8006ab <angle+0xa9>
     5ce:	c0 92 aa 06 	sts	0x06AA, r12	; 0x8006aa <angle+0xa8>
     5d2:	f0 93 ad 06 	sts	0x06AD, r31	; 0x8006ad <angle+0xab>
     5d6:	e0 93 ac 06 	sts	0x06AC, r30	; 0x8006ac <angle+0xaa>
     5da:	90 93 af 06 	sts	0x06AF, r25	; 0x8006af <angle+0xad>
     5de:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <angle+0xac>
     5e2:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <angle+0xaf>
     5e6:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <angle+0xae>
     5ea:	70 93 b3 06 	sts	0x06B3, r23	; 0x8006b3 <angle+0xb1>
     5ee:	60 93 b2 06 	sts	0x06B2, r22	; 0x8006b2 <angle+0xb0>
     5f2:	f0 92 b5 06 	sts	0x06B5, r15	; 0x8006b5 <angle+0xb3>
     5f6:	e0 92 b4 06 	sts	0x06B4, r14	; 0x8006b4 <angle+0xb2>
     5fa:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <angle+0xb5>
     5fe:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <angle+0xb4>
     602:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <angle+0xb7>
     606:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <angle+0xb6>
     60a:	10 93 bb 06 	sts	0x06BB, r17	; 0x8006bb <angle+0xb9>
     60e:	00 93 ba 06 	sts	0x06BA, r16	; 0x8006ba <angle+0xb8>
     612:	50 92 bd 06 	sts	0x06BD, r5	; 0x8006bd <angle+0xbb>
     616:	40 92 bc 06 	sts	0x06BC, r4	; 0x8006bc <angle+0xba>
     61a:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <angle+0xbd>
     61e:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <angle+0xbc>
     622:	90 93 c1 06 	sts	0x06C1, r25	; 0x8006c1 <angle+0xbf>
     626:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <angle+0xbe>
     62a:	50 93 c3 06 	sts	0x06C3, r21	; 0x8006c3 <angle+0xc1>
     62e:	40 93 c2 06 	sts	0x06C2, r20	; 0x8006c2 <angle+0xc0>
     632:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <angle+0xc3>
     636:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <angle+0xc2>
     63a:	30 93 c7 06 	sts	0x06C7, r19	; 0x8006c7 <angle+0xc5>
     63e:	20 93 c6 06 	sts	0x06C6, r18	; 0x8006c6 <angle+0xc4>
     642:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <angle+0xc7>
     646:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <angle+0xc6>
     64a:	50 93 cb 06 	sts	0x06CB, r21	; 0x8006cb <angle+0xc9>
     64e:	40 93 ca 06 	sts	0x06CA, r20	; 0x8006ca <angle+0xc8>
     652:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <angle+0xcb>
     656:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <angle+0xca>
     65a:	b0 93 cf 06 	sts	0x06CF, r27	; 0x8006cf <angle+0xcd>
     65e:	a0 93 ce 06 	sts	0x06CE, r26	; 0x8006ce <angle+0xcc>
     662:	70 93 d1 06 	sts	0x06D1, r23	; 0x8006d1 <angle+0xcf>
     666:	60 93 d0 06 	sts	0x06D0, r22	; 0x8006d0 <angle+0xce>
     66a:	50 93 d3 06 	sts	0x06D3, r21	; 0x8006d3 <angle+0xd1>
     66e:	40 93 d2 06 	sts	0x06D2, r20	; 0x8006d2 <angle+0xd0>
     672:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <angle+0xd3>
     676:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <angle+0xd2>
     67a:	f0 93 d7 06 	sts	0x06D7, r31	; 0x8006d7 <angle+0xd5>
     67e:	e0 93 d6 06 	sts	0x06D6, r30	; 0x8006d6 <angle+0xd4>
     682:	30 93 d9 06 	sts	0x06D9, r19	; 0x8006d9 <angle+0xd7>
     686:	20 93 d8 06 	sts	0x06D8, r18	; 0x8006d8 <angle+0xd6>
     68a:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <angle+0xd9>
     68e:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <angle+0xd8>
     692:	50 93 dd 06 	sts	0x06DD, r21	; 0x8006dd <angle+0xdb>
     696:	40 93 dc 06 	sts	0x06DC, r20	; 0x8006dc <angle+0xda>
     69a:	70 93 df 06 	sts	0x06DF, r23	; 0x8006df <angle+0xdd>
     69e:	60 93 de 06 	sts	0x06DE, r22	; 0x8006de <angle+0xdc>
     6a2:	90 93 e1 06 	sts	0x06E1, r25	; 0x8006e1 <angle+0xdf>
     6a6:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <angle+0xde>
     6aa:	b0 93 e3 06 	sts	0x06E3, r27	; 0x8006e3 <angle+0xe1>
     6ae:	a0 93 e2 06 	sts	0x06E2, r26	; 0x8006e2 <angle+0xe0>
     6b2:	f0 93 e5 06 	sts	0x06E5, r31	; 0x8006e5 <angle+0xe3>
     6b6:	e0 93 e4 06 	sts	0x06E4, r30	; 0x8006e4 <angle+0xe2>
     6ba:	30 93 e7 06 	sts	0x06E7, r19	; 0x8006e7 <angle+0xe5>
     6be:	20 93 e6 06 	sts	0x06E6, r18	; 0x8006e6 <angle+0xe4>
     6c2:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <angle+0xe7>
     6c6:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <angle+0xe6>
     6ca:	b0 93 eb 06 	sts	0x06EB, r27	; 0x8006eb <angle+0xe9>
     6ce:	a0 93 ea 06 	sts	0x06EA, r26	; 0x8006ea <angle+0xe8>
     6d2:	30 93 ed 06 	sts	0x06ED, r19	; 0x8006ed <angle+0xeb>
     6d6:	20 93 ec 06 	sts	0x06EC, r18	; 0x8006ec <angle+0xea>
     6da:	70 93 ef 06 	sts	0x06EF, r23	; 0x8006ef <angle+0xed>
     6de:	60 93 ee 06 	sts	0x06EE, r22	; 0x8006ee <angle+0xec>
     6e2:	50 93 f1 06 	sts	0x06F1, r21	; 0x8006f1 <angle+0xef>
     6e6:	40 93 f0 06 	sts	0x06F0, r20	; 0x8006f0 <angle+0xee>
     6ea:	b0 93 f3 06 	sts	0x06F3, r27	; 0x8006f3 <angle+0xf1>
     6ee:	a0 93 f2 06 	sts	0x06F2, r26	; 0x8006f2 <angle+0xf0>
     6f2:	30 93 f5 06 	sts	0x06F5, r19	; 0x8006f5 <angle+0xf3>
     6f6:	20 93 f4 06 	sts	0x06F4, r18	; 0x8006f4 <angle+0xf2>
     6fa:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <angle+0xf5>
     6fe:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <angle+0xf4>
     702:	f0 93 f9 06 	sts	0x06F9, r31	; 0x8006f9 <angle+0xf7>
     706:	e0 93 f8 06 	sts	0x06F8, r30	; 0x8006f8 <angle+0xf6>
     70a:	30 93 fb 06 	sts	0x06FB, r19	; 0x8006fb <angle+0xf9>
     70e:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <angle+0xf8>
     712:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <angle+0xfb>
     716:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <angle+0xfa>
     71a:	50 93 ff 06 	sts	0x06FF, r21	; 0x8006ff <angle+0xfd>
     71e:	40 93 fe 06 	sts	0x06FE, r20	; 0x8006fe <angle+0xfc>
     722:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <angle+0xff>
     726:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <angle+0xfe>
     72a:	70 93 03 07 	sts	0x0703, r23	; 0x800703 <angle+0x101>
     72e:	60 93 02 07 	sts	0x0702, r22	; 0x800702 <angle+0x100>
     732:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <angle+0x103>
     736:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <angle+0x102>
     73a:	f0 93 07 07 	sts	0x0707, r31	; 0x800707 <angle+0x105>
     73e:	e0 93 06 07 	sts	0x0706, r30	; 0x800706 <angle+0x104>
     742:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <angle+0x107>
     746:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <angle+0x106>
     74a:	70 93 0b 07 	sts	0x070B, r23	; 0x80070b <angle+0x109>
     74e:	60 93 0a 07 	sts	0x070A, r22	; 0x80070a <angle+0x108>
     752:	f0 93 0d 07 	sts	0x070D, r31	; 0x80070d <angle+0x10b>
     756:	e0 93 0c 07 	sts	0x070C, r30	; 0x80070c <angle+0x10a>
     75a:	50 93 0f 07 	sts	0x070F, r21	; 0x80070f <angle+0x10d>
     75e:	40 93 0e 07 	sts	0x070E, r20	; 0x80070e <angle+0x10c>
     762:	b0 93 11 07 	sts	0x0711, r27	; 0x800711 <angle+0x10f>
     766:	a0 93 10 07 	sts	0x0710, r26	; 0x800710 <angle+0x10e>
     76a:	70 93 13 07 	sts	0x0713, r23	; 0x800713 <angle+0x111>
     76e:	60 93 12 07 	sts	0x0712, r22	; 0x800712 <angle+0x110>
     772:	f0 93 15 07 	sts	0x0715, r31	; 0x800715 <angle+0x113>
     776:	e0 93 14 07 	sts	0x0714, r30	; 0x800714 <angle+0x112>
     77a:	30 93 17 07 	sts	0x0717, r19	; 0x800717 <angle+0x115>
     77e:	20 93 16 07 	sts	0x0716, r18	; 0x800716 <angle+0x114>
     782:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <angle+0x117>
     786:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <angle+0x116>
     78a:	f0 93 1b 07 	sts	0x071B, r31	; 0x80071b <angle+0x119>
     78e:	e0 93 1a 07 	sts	0x071A, r30	; 0x80071a <angle+0x118>
     792:	b0 93 1d 07 	sts	0x071D, r27	; 0x80071d <angle+0x11b>
     796:	a0 93 1c 07 	sts	0x071C, r26	; 0x80071c <angle+0x11a>
     79a:	70 93 1f 07 	sts	0x071F, r23	; 0x80071f <angle+0x11d>
     79e:	60 93 1e 07 	sts	0x071E, r22	; 0x80071e <angle+0x11c>
     7a2:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <angle+0x11f>
     7a6:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <angle+0x11e>
     7aa:	b0 93 23 07 	sts	0x0723, r27	; 0x800723 <angle+0x121>
     7ae:	a0 93 22 07 	sts	0x0722, r26	; 0x800722 <angle+0x120>
     7b2:	30 93 25 07 	sts	0x0725, r19	; 0x800725 <angle+0x123>
     7b6:	20 93 24 07 	sts	0x0724, r18	; 0x800724 <angle+0x122>
     7ba:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <angle+0x125>
     7be:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <angle+0x124>
     7c2:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <angle+0x127>
     7c6:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <angle+0x126>
     7ca:	f0 93 2b 07 	sts	0x072B, r31	; 0x80072b <angle+0x129>
     7ce:	e0 93 2a 07 	sts	0x072A, r30	; 0x80072a <angle+0x128>
     7d2:	70 93 2d 07 	sts	0x072D, r23	; 0x80072d <angle+0x12b>
     7d6:	60 93 2c 07 	sts	0x072C, r22	; 0x80072c <angle+0x12a>
     7da:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <angle+0x12d>
     7de:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <angle+0x12c>
     7e2:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <angle+0x12f>
     7e6:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <angle+0x12e>
     7ea:	70 93 33 07 	sts	0x0733, r23	; 0x800733 <angle+0x131>
     7ee:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <angle+0x130>
     7f2:	f0 93 35 07 	sts	0x0735, r31	; 0x800735 <angle+0x133>
     7f6:	e0 93 34 07 	sts	0x0734, r30	; 0x800734 <angle+0x132>
     7fa:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <angle+0x135>
     7fe:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <angle+0x134>
     802:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <angle+0x137>
     806:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <angle+0x136>
     80a:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <angle+0x139>
     80e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <angle+0x138>
     812:	50 93 3d 07 	sts	0x073D, r21	; 0x80073d <angle+0x13b>
     816:	40 93 3c 07 	sts	0x073C, r20	; 0x80073c <angle+0x13a>
     81a:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <angle+0x13d>
     81e:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <angle+0x13c>
     822:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <angle+0x13f>
     826:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <angle+0x13e>
     82a:	50 93 43 07 	sts	0x0743, r21	; 0x800743 <angle+0x141>
     82e:	40 93 42 07 	sts	0x0742, r20	; 0x800742 <angle+0x140>
     832:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <angle+0x143>
     836:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <angle+0x142>
     83a:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <angle+0x145>
     83e:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <angle+0x144>
     842:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <angle+0x147>
     846:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <angle+0x146>
     84a:	30 93 4b 07 	sts	0x074B, r19	; 0x80074b <angle+0x149>
     84e:	20 93 4a 07 	sts	0x074A, r18	; 0x80074a <angle+0x148>
     852:	b0 93 4d 07 	sts	0x074D, r27	; 0x80074d <angle+0x14b>
     856:	a0 93 4c 07 	sts	0x074C, r26	; 0x80074c <angle+0x14a>
     85a:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <angle+0x14d>
     85e:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <angle+0x14c>
     862:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <angle+0x14f>
     866:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <angle+0x14e>
     86a:	50 93 53 07 	sts	0x0753, r21	; 0x800753 <angle+0x151>
     86e:	40 93 52 07 	sts	0x0752, r20	; 0x800752 <angle+0x150>
     872:	b0 93 55 07 	sts	0x0755, r27	; 0x800755 <angle+0x153>
     876:	a0 93 54 07 	sts	0x0754, r26	; 0x800754 <angle+0x152>
     87a:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <angle+0x155>
     87e:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <angle+0x154>
     882:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <angle+0x157>
     886:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <angle+0x156>
     88a:	f0 93 5b 07 	sts	0x075B, r31	; 0x80075b <angle+0x159>
     88e:	e0 93 5a 07 	sts	0x075A, r30	; 0x80075a <angle+0x158>
     892:	30 93 5d 07 	sts	0x075D, r19	; 0x80075d <angle+0x15b>
     896:	20 93 5c 07 	sts	0x075C, r18	; 0x80075c <angle+0x15a>
     89a:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <angle+0x15d>
     89e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <angle+0x15c>
     8a2:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <angle+0x15f>
     8a6:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <angle+0x15e>
     8aa:	b0 93 63 07 	sts	0x0763, r27	; 0x800763 <angle+0x161>
     8ae:	a0 93 62 07 	sts	0x0762, r26	; 0x800762 <angle+0x160>
     8b2:	70 93 65 07 	sts	0x0765, r23	; 0x800765 <angle+0x163>
     8b6:	60 93 64 07 	sts	0x0764, r22	; 0x800764 <angle+0x162>
     8ba:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <angle+0x165>
     8be:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <angle+0x164>
     8c2:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <angle+0x167>
     8c6:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <angle+0x166>
     8ca:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <angle+0x169>
     8ce:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <angle+0x168>
     8d2:	f0 93 6d 07 	sts	0x076D, r31	; 0x80076d <angle+0x16b>
     8d6:	e0 93 6c 07 	sts	0x076C, r30	; 0x80076c <angle+0x16a>
     8da:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <angle+0x16d>
     8de:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <angle+0x16c>
     8e2:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <angle+0x16f>
     8e6:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <angle+0x16e>
     8ea:	70 93 73 07 	sts	0x0773, r23	; 0x800773 <angle+0x171>
     8ee:	60 93 72 07 	sts	0x0772, r22	; 0x800772 <angle+0x170>
     8f2:	50 93 75 07 	sts	0x0775, r21	; 0x800775 <angle+0x173>
     8f6:	40 93 74 07 	sts	0x0774, r20	; 0x800774 <angle+0x172>
     8fa:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <angle+0x175>
     8fe:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <angle+0x174>
     902:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <angle+0x177>
     906:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <angle+0x176>
     90a:	30 93 7b 07 	sts	0x077B, r19	; 0x80077b <angle+0x179>
     90e:	20 93 7a 07 	sts	0x077A, r18	; 0x80077a <angle+0x178>
     912:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <angle+0x17b>
     916:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <angle+0x17a>
     91a:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <angle+0x17d>
     91e:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <angle+0x17c>
     922:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <angle+0x17f>
     926:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <angle+0x17e>
     92a:	ed e7       	ldi	r30, 0x7D	; 125
     92c:	f4 e0       	ldi	r31, 0x04	; 4
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	28 e1       	ldi	r18, 0x18	; 24
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	33 83       	std	Z+3, r19	; 0x03
     93c:	22 83       	std	Z+2, r18	; 0x02
     93e:	15 82       	std	Z+5, r1	; 0x05
     940:	14 82       	std	Z+4, r1	; 0x04
     942:	17 82       	std	Z+7, r1	; 0x07
     944:	16 82       	std	Z+6, r1	; 0x06
     946:	21 e0       	ldi	r18, 0x01	; 1
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	31 87       	std	Z+9, r19	; 0x09
     94c:	20 87       	std	Z+8, r18	; 0x08
     94e:	23 e0       	ldi	r18, 0x03	; 3
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	33 87       	std	Z+11, r19	; 0x0b
     954:	22 87       	std	Z+10, r18	; 0x0a
     956:	15 86       	std	Z+13, r1	; 0x0d
     958:	14 86       	std	Z+12, r1	; 0x0c
     95a:	17 86       	std	Z+15, r1	; 0x0f
     95c:	16 86       	std	Z+14, r1	; 0x0e
     95e:	91 8b       	std	Z+17, r25	; 0x11
     960:	80 8b       	std	Z+16, r24	; 0x10
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	93 8b       	std	Z+19, r25	; 0x13
     968:	82 8b       	std	Z+18, r24	; 0x12
     96a:	49 e1       	ldi	r20, 0x19	; 25
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	55 8b       	std	Z+21, r21	; 0x15
     970:	44 8b       	std	Z+20, r20	; 0x14
     972:	44 e2       	ldi	r20, 0x24	; 36
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	57 8b       	std	Z+23, r21	; 0x17
     978:	46 8b       	std	Z+22, r20	; 0x16
     97a:	31 8f       	std	Z+25, r19	; 0x19
     97c:	20 8f       	std	Z+24, r18	; 0x18
     97e:	25 e0       	ldi	r18, 0x05	; 5
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	33 8f       	std	Z+27, r19	; 0x1b
     984:	22 8f       	std	Z+26, r18	; 0x1a
     986:	15 8e       	std	Z+29, r1	; 0x1d
     988:	14 8e       	std	Z+28, r1	; 0x1c
     98a:	17 8e       	std	Z+31, r1	; 0x1f
     98c:	16 8e       	std	Z+30, r1	; 0x1e
     98e:	91 a3       	std	Z+33, r25	; 0x21
     990:	80 a3       	std	Z+32, r24	; 0x20
     992:	86 e0       	ldi	r24, 0x06	; 6
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	93 a3       	std	Z+35, r25	; 0x23
     998:	82 a3       	std	Z+34, r24	; 0x22
     99a:	15 a2       	std	Z+37, r1	; 0x25
     99c:	14 a2       	std	Z+36, r1	; 0x24
     99e:	17 a2       	std	Z+39, r1	; 0x27
     9a0:	16 a2       	std	Z+38, r1	; 0x26
     9a2:	31 a7       	std	Z+41, r19	; 0x29
     9a4:	20 a7       	std	Z+40, r18	; 0x28
     9a6:	27 e0       	ldi	r18, 0x07	; 7
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	33 a7       	std	Z+43, r19	; 0x2b
     9ac:	22 a7       	std	Z+42, r18	; 0x2a
     9ae:	15 a6       	std	Z+45, r1	; 0x2d
     9b0:	14 a6       	std	Z+44, r1	; 0x2c
     9b2:	17 a6       	std	Z+47, r1	; 0x2f
     9b4:	16 a6       	std	Z+46, r1	; 0x2e
     9b6:	91 ab       	std	Z+49, r25	; 0x31
     9b8:	80 ab       	std	Z+48, r24	; 0x30
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	93 ab       	std	Z+51, r25	; 0x33
     9c0:	82 ab       	std	Z+50, r24	; 0x32
     9c2:	45 e2       	ldi	r20, 0x25	; 37
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	55 ab       	std	Z+53, r21	; 0x35
     9c8:	44 ab       	std	Z+52, r20	; 0x34
     9ca:	46 e2       	ldi	r20, 0x26	; 38
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	57 ab       	std	Z+55, r21	; 0x37
     9d0:	46 ab       	std	Z+54, r20	; 0x36
     9d2:	31 af       	std	Z+57, r19	; 0x39
     9d4:	20 af       	std	Z+56, r18	; 0x38
     9d6:	29 e0       	ldi	r18, 0x09	; 9
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	33 af       	std	Z+59, r19	; 0x3b
     9dc:	22 af       	std	Z+58, r18	; 0x3a
     9de:	15 ae       	std	Z+61, r1	; 0x3d
     9e0:	14 ae       	std	Z+60, r1	; 0x3c
     9e2:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <node+0x3f>
     9e6:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <node+0x3e>
     9ea:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <node+0x41>
     9ee:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <node+0x40>
     9f2:	8a e0       	ldi	r24, 0x0A	; 10
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <node+0x43>
     9fa:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <node+0x42>
     9fe:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <node+0x45>
     a02:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <node+0x44>
     a06:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <node+0x47>
     a0a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <node+0x46>
     a0e:	30 93 c6 04 	sts	0x04C6, r19	; 0x8004c6 <node+0x49>
     a12:	20 93 c5 04 	sts	0x04C5, r18	; 0x8004c5 <node+0x48>
     a16:	2b e0       	ldi	r18, 0x0B	; 11
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	30 93 c8 04 	sts	0x04C8, r19	; 0x8004c8 <node+0x4b>
     a1e:	20 93 c7 04 	sts	0x04C7, r18	; 0x8004c7 <node+0x4a>
     a22:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <node+0x4d>
     a26:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <node+0x4c>
     a2a:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <node+0x4f>
     a2e:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <node+0x4e>
     a32:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <node+0x51>
     a36:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <node+0x50>
     a3a:	8c e0       	ldi	r24, 0x0C	; 12
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <node+0x53>
     a42:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <node+0x52>
     a46:	4c e1       	ldi	r20, 0x1C	; 28
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	50 93 d2 04 	sts	0x04D2, r21	; 0x8004d2 <node+0x55>
     a4e:	40 93 d1 04 	sts	0x04D1, r20	; 0x8004d1 <node+0x54>
     a52:	4d e1       	ldi	r20, 0x1D	; 29
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	50 93 d4 04 	sts	0x04D4, r21	; 0x8004d4 <node+0x57>
     a5a:	40 93 d3 04 	sts	0x04D3, r20	; 0x8004d3 <node+0x56>
     a5e:	30 93 d6 04 	sts	0x04D6, r19	; 0x8004d6 <node+0x59>
     a62:	20 93 d5 04 	sts	0x04D5, r18	; 0x8004d5 <node+0x58>
     a66:	2d e0       	ldi	r18, 0x0D	; 13
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	30 93 d8 04 	sts	0x04D8, r19	; 0x8004d8 <node+0x5b>
     a6e:	20 93 d7 04 	sts	0x04D7, r18	; 0x8004d7 <node+0x5a>
     a72:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <node+0x5d>
     a76:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <node+0x5c>
     a7a:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <node+0x5f>
     a7e:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <node+0x5e>
     a82:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <node+0x61>
     a86:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <node+0x60>
     a8a:	8e e0       	ldi	r24, 0x0E	; 14
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <node+0x63>
     a92:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <node+0x62>
     a96:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <node+0x65>
     a9a:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <node+0x64>
     a9e:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <node+0x67>
     aa2:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <node+0x66>
     aa6:	30 93 e6 04 	sts	0x04E6, r19	; 0x8004e6 <node+0x69>
     aaa:	20 93 e5 04 	sts	0x04E5, r18	; 0x8004e5 <node+0x68>
     aae:	d0 93 e8 04 	sts	0x04E8, r29	; 0x8004e8 <node+0x6b>
     ab2:	c0 93 e7 04 	sts	0x04E7, r28	; 0x8004e7 <node+0x6a>
     ab6:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <node+0x6d>
     aba:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <node+0x6c>
     abe:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <node+0x6f>
     ac2:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <node+0x6e>
     ac6:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <node+0x71>
     aca:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <node+0x70>
     ace:	20 e1       	ldi	r18, 0x10	; 16
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	30 93 f0 04 	sts	0x04F0, r19	; 0x8004f0 <node+0x73>
     ad6:	20 93 ef 04 	sts	0x04EF, r18	; 0x8004ef <node+0x72>
     ada:	87 e2       	ldi	r24, 0x27	; 39
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <node+0x75>
     ae2:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <node+0x74>
     ae6:	88 e2       	ldi	r24, 0x28	; 40
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <node+0x77>
     aee:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <node+0x76>
     af2:	d0 93 f6 04 	sts	0x04F6, r29	; 0x8004f6 <node+0x79>
     af6:	c0 93 f5 04 	sts	0x04F5, r28	; 0x8004f5 <node+0x78>
     afa:	81 e1       	ldi	r24, 0x11	; 17
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <node+0x7b>
     b02:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <node+0x7a>
     b06:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <node+0x7d>
     b0a:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <node+0x7c>
     b0e:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <node+0x7f>
     b12:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <node+0x7e>
     b16:	30 93 fe 04 	sts	0x04FE, r19	; 0x8004fe <node+0x81>
     b1a:	20 93 fd 04 	sts	0x04FD, r18	; 0x8004fd <node+0x80>
     b1e:	22 e1       	ldi	r18, 0x12	; 18
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	30 93 00 05 	sts	0x0500, r19	; 0x800500 <node+0x83>
     b26:	20 93 ff 04 	sts	0x04FF, r18	; 0x8004ff <node+0x82>
     b2a:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <node+0x85>
     b2e:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <node+0x84>
     b32:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <node+0x87>
     b36:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <node+0x86>
     b3a:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <node+0x89>
     b3e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <node+0x88>
     b42:	83 e1       	ldi	r24, 0x13	; 19
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <node+0x8b>
     b4a:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <node+0x8a>
     b4e:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <node+0x8d>
     b52:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <node+0x8c>
     b56:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <node+0x8f>
     b5a:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <node+0x8e>
     b5e:	30 93 0e 05 	sts	0x050E, r19	; 0x80050e <node+0x91>
     b62:	20 93 0d 05 	sts	0x050D, r18	; 0x80050d <node+0x90>
     b66:	24 e1       	ldi	r18, 0x14	; 20
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	30 93 10 05 	sts	0x0510, r19	; 0x800510 <node+0x93>
     b6e:	20 93 0f 05 	sts	0x050F, r18	; 0x80050f <node+0x92>
     b72:	40 e2       	ldi	r20, 0x20	; 32
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	50 93 12 05 	sts	0x0512, r21	; 0x800512 <node+0x95>
     b7a:	40 93 11 05 	sts	0x0511, r20	; 0x800511 <node+0x94>
     b7e:	41 e2       	ldi	r20, 0x21	; 33
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	50 93 14 05 	sts	0x0514, r21	; 0x800514 <node+0x97>
     b86:	40 93 13 05 	sts	0x0513, r20	; 0x800513 <node+0x96>
     b8a:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <node+0x99>
     b8e:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <node+0x98>
     b92:	85 e1       	ldi	r24, 0x15	; 21
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <node+0x9b>
     b9a:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <node+0x9a>
     b9e:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <node+0x9d>
     ba2:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <node+0x9c>
     ba6:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <node+0x9f>
     baa:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <node+0x9e>
     bae:	30 93 1e 05 	sts	0x051E, r19	; 0x80051e <node+0xa1>
     bb2:	20 93 1d 05 	sts	0x051D, r18	; 0x80051d <node+0xa0>
     bb6:	26 e1       	ldi	r18, 0x16	; 22
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	30 93 20 05 	sts	0x0520, r19	; 0x800520 <node+0xa3>
     bbe:	20 93 1f 05 	sts	0x051F, r18	; 0x80051f <node+0xa2>
     bc2:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <node+0xa5>
     bc6:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <node+0xa4>
     bca:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <node+0xa7>
     bce:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <node+0xa6>
     bd2:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <node+0xa9>
     bd6:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <node+0xa8>
     bda:	87 e1       	ldi	r24, 0x17	; 23
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 28 05 	sts	0x0528, r25	; 0x800528 <node+0xab>
     be2:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <node+0xaa>
     be6:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <node+0xad>
     bea:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <node+0xac>
     bee:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <node+0xaf>
     bf2:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <node+0xae>
     bf6:	86 e1       	ldi	r24, 0x16	; 22
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <node+0xb1>
     bfe:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <node+0xb0>
     c02:	88 e1       	ldi	r24, 0x18	; 24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	90 93 30 05 	sts	0x0530, r25	; 0x800530 <node+0xb3>
     c0a:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <node+0xb2>
     c0e:	c9 e2       	ldi	r28, 0x29	; 41
     c10:	d0 e0       	ldi	r29, 0x00	; 0
     c12:	d0 93 32 05 	sts	0x0532, r29	; 0x800532 <node+0xb5>
     c16:	c0 93 31 05 	sts	0x0531, r28	; 0x800531 <node+0xb4>
     c1a:	0f 2e       	mov	r0, r31
     c1c:	fa e2       	ldi	r31, 0x2A	; 42
     c1e:	af 2e       	mov	r10, r31
     c20:	b1 2c       	mov	r11, r1
     c22:	f0 2d       	mov	r31, r0
     c24:	b0 92 34 05 	sts	0x0534, r11	; 0x800534 <node+0xb7>
     c28:	a0 92 33 05 	sts	0x0533, r10	; 0x800533 <node+0xb6>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <node+0xb9>
     c34:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <node+0xb8>
     c38:	e7 e1       	ldi	r30, 0x17	; 23
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	f0 93 38 05 	sts	0x0538, r31	; 0x800538 <node+0xbb>
     c40:	e0 93 37 05 	sts	0x0537, r30	; 0x800537 <node+0xba>
     c44:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <node+0xbd>
     c48:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <node+0xbc>
     c4c:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <node+0xbf>
     c50:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <node+0xbe>
     c54:	0f 2e       	mov	r0, r31
     c56:	f3 e0       	ldi	r31, 0x03	; 3
     c58:	8f 2e       	mov	r8, r31
     c5a:	91 2c       	mov	r9, r1
     c5c:	f0 2d       	mov	r31, r0
     c5e:	90 92 3e 05 	sts	0x053E, r9	; 0x80053e <node+0xc1>
     c62:	80 92 3d 05 	sts	0x053D, r8	; 0x80053d <node+0xc0>
     c66:	6a e1       	ldi	r22, 0x1A	; 26
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	70 93 40 05 	sts	0x0540, r23	; 0x800540 <node+0xc3>
     c6e:	60 93 3f 05 	sts	0x053F, r22	; 0x80053f <node+0xc2>
     c72:	a4 e2       	ldi	r26, 0x24	; 36
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	b0 93 42 05 	sts	0x0542, r27	; 0x800542 <node+0xc5>
     c7a:	a0 93 41 05 	sts	0x0541, r26	; 0x800541 <node+0xc4>
     c7e:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <node+0xc7>
     c82:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <node+0xc6>
     c86:	0f 2e       	mov	r0, r31
     c88:	f9 e1       	ldi	r31, 0x19	; 25
     c8a:	6f 2e       	mov	r6, r31
     c8c:	71 2c       	mov	r7, r1
     c8e:	f0 2d       	mov	r31, r0
     c90:	70 92 46 05 	sts	0x0546, r7	; 0x800546 <node+0xc9>
     c94:	60 92 45 05 	sts	0x0545, r6	; 0x800545 <node+0xc8>
     c98:	4b e1       	ldi	r20, 0x1B	; 27
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	50 93 48 05 	sts	0x0548, r21	; 0x800548 <node+0xcb>
     ca0:	40 93 47 05 	sts	0x0547, r20	; 0x800547 <node+0xca>
     ca4:	85 e2       	ldi	r24, 0x25	; 37
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <node+0xcd>
     cac:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <node+0xcc>
     cb0:	0f 2e       	mov	r0, r31
     cb2:	fc e2       	ldi	r31, 0x2C	; 44
     cb4:	4f 2e       	mov	r4, r31
     cb6:	51 2c       	mov	r5, r1
     cb8:	f0 2d       	mov	r31, r0
     cba:	50 92 4c 05 	sts	0x054C, r5	; 0x80054c <node+0xcf>
     cbe:	40 92 4b 05 	sts	0x054B, r4	; 0x80054b <node+0xce>
     cc2:	70 93 4e 05 	sts	0x054E, r23	; 0x80054e <node+0xd1>
     cc6:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <node+0xd0>
     cca:	2c e1       	ldi	r18, 0x1C	; 28
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	30 93 50 05 	sts	0x0550, r19	; 0x800550 <node+0xd3>
     cd2:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <node+0xd2>
     cd6:	86 e2       	ldi	r24, 0x26	; 38
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <node+0xd5>
     cde:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <node+0xd4>
     ce2:	0d e2       	ldi	r16, 0x2D	; 45
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	10 93 54 05 	sts	0x0554, r17	; 0x800554 <node+0xd7>
     cea:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <node+0xd6>
     cee:	0b e0       	ldi	r16, 0x0B	; 11
     cf0:	10 e0       	ldi	r17, 0x00	; 0
     cf2:	10 93 56 05 	sts	0x0556, r17	; 0x800556 <node+0xd9>
     cf6:	00 93 55 05 	sts	0x0555, r16	; 0x800555 <node+0xd8>
     cfa:	50 93 58 05 	sts	0x0558, r21	; 0x800558 <node+0xdb>
     cfe:	40 93 57 05 	sts	0x0557, r20	; 0x800557 <node+0xda>
     d02:	8d e1       	ldi	r24, 0x1D	; 29
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <node+0xdd>
     d0a:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <node+0xdc>
     d0e:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <node+0xdf>
     d12:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <node+0xde>
     d16:	10 93 5e 05 	sts	0x055E, r17	; 0x80055e <node+0xe1>
     d1a:	00 93 5d 05 	sts	0x055D, r16	; 0x80055d <node+0xe0>
     d1e:	30 93 60 05 	sts	0x0560, r19	; 0x800560 <node+0xe3>
     d22:	20 93 5f 05 	sts	0x055F, r18	; 0x80055f <node+0xe2>
     d26:	2e e1       	ldi	r18, 0x1E	; 30
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	30 93 62 05 	sts	0x0562, r19	; 0x800562 <node+0xe5>
     d2e:	20 93 61 05 	sts	0x0561, r18	; 0x800561 <node+0xe4>
     d32:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <node+0xe7>
     d36:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <node+0xe6>
     d3a:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <node+0xe9>
     d3e:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <node+0xe8>
     d42:	8f e1       	ldi	r24, 0x1F	; 31
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <node+0xeb>
     d4a:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <node+0xea>
     d4e:	07 e2       	ldi	r16, 0x27	; 39
     d50:	10 e0       	ldi	r17, 0x00	; 0
     d52:	10 93 6a 05 	sts	0x056A, r17	; 0x80056a <node+0xed>
     d56:	00 93 69 05 	sts	0x0569, r16	; 0x800569 <node+0xec>
     d5a:	0f 2e       	mov	r0, r31
     d5c:	fe e2       	ldi	r31, 0x2E	; 46
     d5e:	2f 2e       	mov	r2, r31
     d60:	31 2c       	mov	r3, r1
     d62:	f0 2d       	mov	r31, r0
     d64:	30 92 6c 05 	sts	0x056C, r3	; 0x80056c <node+0xef>
     d68:	20 92 6b 05 	sts	0x056B, r2	; 0x80056b <node+0xee>
     d6c:	30 93 6e 05 	sts	0x056E, r19	; 0x80056e <node+0xf1>
     d70:	20 93 6d 05 	sts	0x056D, r18	; 0x80056d <node+0xf0>
     d74:	68 94       	set
     d76:	ee 24       	eor	r14, r14
     d78:	e5 f8       	bld	r14, 5
     d7a:	f1 2c       	mov	r15, r1
     d7c:	f0 92 70 05 	sts	0x0570, r15	; 0x800570 <node+0xf3>
     d80:	e0 92 6f 05 	sts	0x056F, r14	; 0x80056f <node+0xf2>
     d84:	08 e2       	ldi	r16, 0x28	; 40
     d86:	10 e0       	ldi	r17, 0x00	; 0
     d88:	10 93 72 05 	sts	0x0572, r17	; 0x800572 <node+0xf5>
     d8c:	00 93 71 05 	sts	0x0571, r16	; 0x800571 <node+0xf4>
     d90:	0f 2e       	mov	r0, r31
     d92:	ff e2       	ldi	r31, 0x2F	; 47
     d94:	cf 2e       	mov	r12, r31
     d96:	d1 2c       	mov	r13, r1
     d98:	f0 2d       	mov	r31, r0
     d9a:	d0 92 74 05 	sts	0x0574, r13	; 0x800574 <node+0xf7>
     d9e:	c0 92 73 05 	sts	0x0573, r12	; 0x800573 <node+0xf6>
     da2:	0f 2e       	mov	r0, r31
     da4:	f3 e1       	ldi	r31, 0x13	; 19
     da6:	cf 2e       	mov	r12, r31
     da8:	d1 2c       	mov	r13, r1
     daa:	f0 2d       	mov	r31, r0
     dac:	d0 92 76 05 	sts	0x0576, r13	; 0x800576 <node+0xf9>
     db0:	c0 92 75 05 	sts	0x0575, r12	; 0x800575 <node+0xf8>
     db4:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <node+0xfb>
     db8:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <node+0xfa>
     dbc:	01 e2       	ldi	r16, 0x21	; 33
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	10 93 7a 05 	sts	0x057A, r17	; 0x80057a <node+0xfd>
     dc4:	00 93 79 05 	sts	0x0579, r16	; 0x800579 <node+0xfc>
     dc8:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <node+0xff>
     dcc:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <node+0xfe>
     dd0:	d0 92 7e 05 	sts	0x057E, r13	; 0x80057e <node+0x101>
     dd4:	c0 92 7d 05 	sts	0x057D, r12	; 0x80057d <node+0x100>
     dd8:	f0 92 80 05 	sts	0x0580, r15	; 0x800580 <node+0x103>
     ddc:	e0 92 7f 05 	sts	0x057F, r14	; 0x80057f <node+0x102>
     de0:	0f 2e       	mov	r0, r31
     de2:	f2 e2       	ldi	r31, 0x22	; 34
     de4:	ef 2e       	mov	r14, r31
     de6:	f1 2c       	mov	r15, r1
     de8:	f0 2d       	mov	r31, r0
     dea:	f0 92 82 05 	sts	0x0582, r15	; 0x800582 <node+0x105>
     dee:	e0 92 81 05 	sts	0x0581, r14	; 0x800581 <node+0x104>
     df2:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <node+0x107>
     df6:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <node+0x106>
     dfa:	10 93 86 05 	sts	0x0586, r17	; 0x800586 <node+0x109>
     dfe:	00 93 85 05 	sts	0x0585, r16	; 0x800585 <node+0x108>
     e02:	03 e2       	ldi	r16, 0x23	; 35
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	10 93 88 05 	sts	0x0588, r17	; 0x800588 <node+0x10b>
     e0a:	00 93 87 05 	sts	0x0587, r16	; 0x800587 <node+0x10a>
     e0e:	d0 93 8a 05 	sts	0x058A, r29	; 0x80058a <node+0x10d>
     e12:	c0 93 89 05 	sts	0x0589, r28	; 0x800589 <node+0x10c>
     e16:	c0 e3       	ldi	r28, 0x30	; 48
     e18:	d0 e0       	ldi	r29, 0x00	; 0
     e1a:	d0 93 8c 05 	sts	0x058C, r29	; 0x80058c <node+0x10f>
     e1e:	c0 93 8b 05 	sts	0x058B, r28	; 0x80058b <node+0x10e>
     e22:	f0 92 8e 05 	sts	0x058E, r15	; 0x80058e <node+0x111>
     e26:	e0 92 8d 05 	sts	0x058D, r14	; 0x80058d <node+0x110>
     e2a:	b0 93 90 05 	sts	0x0590, r27	; 0x800590 <node+0x113>
     e2e:	a0 93 8f 05 	sts	0x058F, r26	; 0x80058f <node+0x112>
     e32:	b0 92 92 05 	sts	0x0592, r11	; 0x800592 <node+0x115>
     e36:	a0 92 91 05 	sts	0x0591, r10	; 0x800591 <node+0x114>
     e3a:	ab e2       	ldi	r26, 0x2B	; 43
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	b0 93 94 05 	sts	0x0594, r27	; 0x800594 <node+0x117>
     e42:	a0 93 93 05 	sts	0x0593, r26	; 0x800593 <node+0x116>
     e46:	90 92 96 05 	sts	0x0596, r9	; 0x800596 <node+0x119>
     e4a:	80 92 95 05 	sts	0x0595, r8	; 0x800595 <node+0x118>
     e4e:	70 92 98 05 	sts	0x0598, r7	; 0x800598 <node+0x11b>
     e52:	60 92 97 05 	sts	0x0597, r6	; 0x800597 <node+0x11a>
     e56:	10 93 9a 05 	sts	0x059A, r17	; 0x80059a <node+0x11d>
     e5a:	00 93 99 05 	sts	0x0599, r16	; 0x800599 <node+0x11c>
     e5e:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <node+0x11f>
     e62:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <node+0x11e>
     e66:	0f 2e       	mov	r0, r31
     e68:	f7 e0       	ldi	r31, 0x07	; 7
     e6a:	cf 2e       	mov	r12, r31
     e6c:	d1 2c       	mov	r13, r1
     e6e:	f0 2d       	mov	r31, r0
     e70:	d0 92 9e 05 	sts	0x059E, r13	; 0x80059e <node+0x121>
     e74:	c0 92 9d 05 	sts	0x059D, r12	; 0x80059d <node+0x120>
     e78:	70 93 a0 05 	sts	0x05A0, r23	; 0x8005a0 <node+0x123>
     e7c:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <node+0x122>
     e80:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <node+0x125>
     e84:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <node+0x124>
     e88:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <node+0x127>
     e8c:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <node+0x126>
     e90:	d0 92 a6 05 	sts	0x05A6, r13	; 0x8005a6 <node+0x129>
     e94:	c0 92 a5 05 	sts	0x05A5, r12	; 0x8005a5 <node+0x128>
     e98:	50 93 a8 05 	sts	0x05A8, r21	; 0x8005a8 <node+0x12b>
     e9c:	40 93 a7 05 	sts	0x05A7, r20	; 0x8005a7 <node+0x12a>
     ea0:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <node+0x12d>
     ea4:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <node+0x12c>
     ea8:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <node+0x12f>
     eac:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <node+0x12e>
     eb0:	0f 2e       	mov	r0, r31
     eb2:	ff e0       	ldi	r31, 0x0F	; 15
     eb4:	cf 2e       	mov	r12, r31
     eb6:	d1 2c       	mov	r13, r1
     eb8:	f0 2d       	mov	r31, r0
     eba:	d0 92 ae 05 	sts	0x05AE, r13	; 0x8005ae <node+0x131>
     ebe:	c0 92 ad 05 	sts	0x05AD, r12	; 0x8005ad <node+0x130>
     ec2:	30 93 b0 05 	sts	0x05B0, r19	; 0x8005b0 <node+0x133>
     ec6:	20 93 af 05 	sts	0x05AF, r18	; 0x8005af <node+0x132>
     eca:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <node+0x135>
     ece:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <node+0x134>
     ed2:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <node+0x137>
     ed6:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <node+0x136>
     eda:	d0 92 b6 05 	sts	0x05B6, r13	; 0x8005b6 <node+0x139>
     ede:	c0 92 b5 05 	sts	0x05B5, r12	; 0x8005b5 <node+0x138>
     ee2:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <node+0x13b>
     ee6:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <node+0x13a>
     eea:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <node+0x13d>
     eee:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <node+0x13c>
     ef2:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <node+0x13f>
     ef6:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <node+0x13e>
     efa:	f0 93 be 05 	sts	0x05BE, r31	; 0x8005be <node+0x141>
     efe:	e0 93 bd 05 	sts	0x05BD, r30	; 0x8005bd <node+0x140>
     f02:	f0 92 c0 05 	sts	0x05C0, r15	; 0x8005c0 <node+0x143>
     f06:	e0 92 bf 05 	sts	0x05BF, r14	; 0x8005bf <node+0x142>
     f0a:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <node+0x145>
     f0e:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <node+0x144>
     f12:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <node+0x147>
     f16:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <node+0x146>
     f1a:	f0 93 c6 05 	sts	0x05C6, r31	; 0x8005c6 <node+0x149>
     f1e:	e0 93 c5 05 	sts	0x05C5, r30	; 0x8005c5 <node+0x148>
     f22:	10 93 c8 05 	sts	0x05C8, r17	; 0x8005c8 <node+0x14b>
     f26:	00 93 c7 05 	sts	0x05C7, r16	; 0x8005c7 <node+0x14a>
     f2a:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <node+0x14d>
     f2e:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <node+0x14c>
     f32:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <node+0x14f>
     f36:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <node+0x14e>
     f3a:	10 93 ce 05 	sts	0x05CE, r17	; 0x8005ce <node+0x151>
     f3e:	00 93 cd 05 	sts	0x05CD, r16	; 0x8005cd <node+0x150>
     f42:	50 92 d0 05 	sts	0x05D0, r5	; 0x8005d0 <node+0x153>
     f46:	40 92 cf 05 	sts	0x05CF, r4	; 0x8005cf <node+0x152>
     f4a:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <node+0x155>
     f4e:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <node+0x154>
     f52:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <node+0x157>
     f56:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <node+0x156>
     f5a:	70 93 d6 05 	sts	0x05D6, r23	; 0x8005d6 <node+0x159>
     f5e:	60 93 d5 05 	sts	0x05D5, r22	; 0x8005d5 <node+0x158>
     f62:	b0 93 d8 05 	sts	0x05D8, r27	; 0x8005d8 <node+0x15b>
     f66:	a0 93 d7 05 	sts	0x05D7, r26	; 0x8005d7 <node+0x15a>
     f6a:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <node+0x15d>
     f6e:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <node+0x15c>
     f72:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <node+0x15f>
     f76:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <node+0x15e>
     f7a:	50 93 de 05 	sts	0x05DE, r21	; 0x8005de <node+0x161>
     f7e:	40 93 dd 05 	sts	0x05DD, r20	; 0x8005dd <node+0x160>
     f82:	30 92 e0 05 	sts	0x05E0, r3	; 0x8005e0 <node+0x163>
     f86:	20 92 df 05 	sts	0x05DF, r2	; 0x8005df <node+0x162>
     f8a:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <node+0x165>
     f8e:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <node+0x164>
     f92:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <node+0x167>
     f96:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <node+0x166>
     f9a:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <node+0x169>
     f9e:	20 93 e5 05 	sts	0x05E5, r18	; 0x8005e5 <node+0x168>
     fa2:	0d e2       	ldi	r16, 0x2D	; 45
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	10 93 e8 05 	sts	0x05E8, r17	; 0x8005e8 <node+0x16b>
     faa:	00 93 e7 05 	sts	0x05E7, r16	; 0x8005e7 <node+0x16a>
     fae:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <node+0x16d>
     fb2:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <node+0x16c>
     fb6:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <node+0x16f>
     fba:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <node+0x16e>
     fbe:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <node+0x171>
     fc2:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <node+0x170>
     fc6:	d0 93 f0 05 	sts	0x05F0, r29	; 0x8005f0 <node+0x173>
     fca:	c0 93 ef 05 	sts	0x05EF, r28	; 0x8005ef <node+0x172>
     fce:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <node+0x175>
     fd2:	10 92 f1 05 	sts	0x05F1, r1	; 0x8005f1 <node+0x174>
     fd6:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <node+0x177>
     fda:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <node+0x176>
     fde:	f0 92 f6 05 	sts	0x05F6, r15	; 0x8005f6 <node+0x179>
     fe2:	e0 92 f5 05 	sts	0x05F5, r14	; 0x8005f5 <node+0x178>
     fe6:	2f e2       	ldi	r18, 0x2F	; 47
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	30 93 f8 05 	sts	0x05F8, r19	; 0x8005f8 <node+0x17b>
     fee:	20 93 f7 05 	sts	0x05F7, r18	; 0x8005f7 <node+0x17a>
     ff2:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <node+0x17d>
     ff6:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <node+0x17c>
     ffa:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <node+0x17f>
     ffe:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <node+0x17e>
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	7f 90       	pop	r7
    101c:	6f 90       	pop	r6
    101e:	5f 90       	pop	r5
    1020:	4f 90       	pop	r4
    1022:	3f 90       	pop	r3
    1024:	2f 90       	pop	r2
    1026:	08 95       	ret

00001028 <__vector_25>:
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	0b b6       	in	r0, 0x3b	; 59
    1034:	0f 92       	push	r0
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31
    1046:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    104a:	88 23       	and	r24, r24
    104c:	0c f0       	brlt	.+2      	; 0x1050 <__vector_25+0x28>
    104e:	58 c0       	rjmp	.+176    	; 0x1100 <__vector_25+0xd8>
    1050:	98 2f       	mov	r25, r24
    1052:	9f 77       	andi	r25, 0x7F	; 127
    1054:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <lastCommand>
    1058:	4e 2f       	mov	r20, r30
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	fa 01       	movw	r30, r20
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	ea 30       	cpi	r30, 0x0A	; 10
    1062:	f1 05       	cpc	r31, r1
    1064:	08 f0       	brcs	.+2      	; 0x1068 <__vector_25+0x40>
    1066:	53 c0       	rjmp	.+166    	; 0x110e <__vector_25+0xe6>
    1068:	88 27       	eor	r24, r24
    106a:	ee 58       	subi	r30, 0x8E	; 142
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	8f 4f       	sbci	r24, 0xFF	; 255
    1070:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__tablejump2__>
    1074:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <noteCount>
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	e9 5f       	subi	r30, 0xF9	; 249
    107c:	fb 4f       	sbci	r31, 0xFB	; 251
    107e:	90 83       	st	Z, r25
    1080:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <noteCount>
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <noteCount>
    108a:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <noteCount>
    108e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1092:	3d c0       	rjmp	.+122    	; 0x110e <__vector_25+0xe6>
    1094:	e0 91 ef 03 	lds	r30, 0x03EF	; 0x8003ef <taskCount>
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	ef 50       	subi	r30, 0x0F	; 15
    109c:	fc 4f       	sbci	r31, 0xFC	; 252
    109e:	90 83       	st	Z, r25
    10a0:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <taskCount>
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <taskCount>
    10aa:	31 c0       	rjmp	.+98     	; 0x110e <__vector_25+0xe6>
    10ac:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <otherBotLocation>
    10b0:	2e c0       	rjmp	.+92     	; 0x110e <__vector_25+0xe6>
    10b2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <otherBotMovingTo>
    10b6:	2b c0       	rjmp	.+86     	; 0x110e <__vector_25+0xe6>
    10b8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    10bc:	89 13       	cpse	r24, r25
    10be:	27 c0       	rjmp	.+78     	; 0x110e <__vector_25+0xe6>
    10c0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <noteToStrike>
    10ca:	21 c0       	rjmp	.+66     	; 0x110e <__vector_25+0xe6>
    10cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    10d0:	89 13       	cpse	r24, r25
    10d2:	1d c0       	rjmp	.+58     	; 0x110e <__vector_25+0xe6>
    10d4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <noteToProcess>
    10de:	17 c0       	rjmp	.+46     	; 0x110e <__vector_25+0xe6>
    10e0:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <taskCost>
    10e4:	89 0f       	add	r24, r25
    10e6:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <taskCost>
    10ea:	11 c0       	rjmp	.+34     	; 0x110e <__vector_25+0xe6>
    10ec:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotLastTaskIndex>
    10f0:	0e c0       	rjmp	.+28     	; 0x110e <__vector_25+0xe6>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <botEnd+0x1>
    10fa:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <botEnd>
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <__vector_25+0xe6>
    1100:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <lastCommand>
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	19 f4       	brne	.+6      	; 0x110e <__vector_25+0xe6>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <notesReceived>
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_51>:
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	0b b6       	in	r0, 0x3b	; 59
    1138:	0f 92       	push	r0
    113a:	8f 93       	push	r24
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
    1140:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1144:	8f 3f       	cpi	r24, 0xFF	; 255
    1146:	81 f0       	breq	.+32     	; 0x1168 <__vector_51+0x3c>
    1148:	e0 91 f0 03 	lds	r30, 0x03F0	; 0x8003f0 <noteCount>
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	e9 5f       	subi	r30, 0xF9	; 249
    1150:	fb 4f       	sbci	r31, 0xFB	; 251
    1152:	80 83       	st	Z, r24
    1154:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <noteCount>
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <noteCount>
    115e:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <noteCount>
    1162:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <__vector_51+0x46>
    1168:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <notesReceived>
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	8f 91       	pop	r24
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <buzzer_pin_config>:
    1186:	3b 9a       	sbi	0x07, 3	; 7
    1188:	43 98       	cbi	0x08, 3	; 8
    118a:	08 95       	ret

0000118c <buzzer_on>:
    118c:	86 b1       	in	r24, 0x06	; 6
    118e:	88 60       	ori	r24, 0x08	; 8
    1190:	88 b9       	out	0x08, r24	; 8
    1192:	08 95       	ret

00001194 <buzzer_off>:
    1194:	86 b1       	in	r24, 0x06	; 6
    1196:	87 7f       	andi	r24, 0xF7	; 247
    1198:	88 b9       	out	0x08, r24	; 8
    119a:	08 95       	ret

0000119c <adc_pin_config>:
    119c:	10 ba       	out	0x10, r1	; 16
    119e:	11 ba       	out	0x11, r1	; 17
    11a0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    11a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    11a8:	08 95       	ret

000011aa <motion_pin_config>:
    11aa:	81 b1       	in	r24, 0x01	; 1
    11ac:	8f 60       	ori	r24, 0x0F	; 15
    11ae:	81 b9       	out	0x01, r24	; 1
    11b0:	82 b1       	in	r24, 0x02	; 2
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	82 b9       	out	0x02, r24	; 2
    11b6:	ea e0       	ldi	r30, 0x0A	; 10
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	80 81       	ld	r24, Z
    11bc:	88 61       	ori	r24, 0x18	; 24
    11be:	80 83       	st	Z, r24
    11c0:	eb e0       	ldi	r30, 0x0B	; 11
    11c2:	f1 e0       	ldi	r31, 0x01	; 1
    11c4:	80 81       	ld	r24, Z
    11c6:	88 61       	ori	r24, 0x18	; 24
    11c8:	80 83       	st	Z, r24
    11ca:	08 95       	ret

000011cc <left_encoder_pin_config>:
    11cc:	6c 98       	cbi	0x0d, 4	; 13
    11ce:	74 9a       	sbi	0x0e, 4	; 14
    11d0:	08 95       	ret

000011d2 <right_encoder_pin_config>:
    11d2:	6d 98       	cbi	0x0d, 5	; 13
    11d4:	75 9a       	sbi	0x0e, 5	; 14
    11d6:	08 95       	ret

000011d8 <port_init>:
    11d8:	e8 df       	rcall	.-48     	; 0x11aa <motion_pin_config>
    11da:	f8 df       	rcall	.-16     	; 0x11cc <left_encoder_pin_config>
    11dc:	fa df       	rcall	.-12     	; 0x11d2 <right_encoder_pin_config>
    11de:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_port_config>
    11e2:	dc df       	rcall	.-72     	; 0x119c <adc_pin_config>
    11e4:	d0 cf       	rjmp	.-96     	; 0x1186 <buzzer_pin_config>
    11e6:	08 95       	ret

000011e8 <timer5_init>:
    11e8:	e1 e2       	ldi	r30, 0x21	; 33
    11ea:	f1 e0       	ldi	r31, 0x01	; 1
    11ec:	10 82       	st	Z, r1
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    11fa:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    11fe:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1202:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1206:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    120a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    120e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    1212:	89 ea       	ldi	r24, 0xA9	; 169
    1214:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1218:	8b e0       	ldi	r24, 0x0B	; 11
    121a:	80 83       	st	Z, r24
    121c:	08 95       	ret

0000121e <adc_init>:
    121e:	ea e7       	ldi	r30, 0x7A	; 122
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	10 82       	st	Z, r1
    1224:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1228:	80 e2       	ldi	r24, 0x20	; 32
    122a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    122e:	80 e8       	ldi	r24, 0x80	; 128
    1230:	80 bf       	out	0x30, r24	; 48
    1232:	86 e8       	ldi	r24, 0x86	; 134
    1234:	80 83       	st	Z, r24
    1236:	08 95       	ret

00001238 <ADC_Conversion>:
    1238:	88 30       	cpi	r24, 0x08	; 8
    123a:	18 f0       	brcs	.+6      	; 0x1242 <ADC_Conversion+0xa>
    123c:	98 e0       	ldi	r25, 0x08	; 8
    123e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1242:	87 70       	andi	r24, 0x07	; 7
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    124a:	ea e7       	ldi	r30, 0x7A	; 122
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	80 83       	st	Z, r24
    1254:	80 81       	ld	r24, Z
    1256:	84 ff       	sbrs	r24, 4
    1258:	fd cf       	rjmp	.-6      	; 0x1254 <ADC_Conversion+0x1c>
    125a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    125e:	ea e7       	ldi	r30, 0x7A	; 122
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	90 81       	ld	r25, Z
    1264:	90 61       	ori	r25, 0x10	; 16
    1266:	90 83       	st	Z, r25
    1268:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    126c:	08 95       	ret

0000126e <left_position_encoder_interrupt_init>:
    126e:	f8 94       	cli
    1270:	ea e6       	ldi	r30, 0x6A	; 106
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	82 60       	ori	r24, 0x02	; 2
    1278:	80 83       	st	Z, r24
    127a:	ec 9a       	sbi	0x1d, 4	; 29
    127c:	78 94       	sei
    127e:	08 95       	ret

00001280 <right_position_encoder_interrupt_init>:
    1280:	f8 94       	cli
    1282:	ea e6       	ldi	r30, 0x6A	; 106
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	88 60       	ori	r24, 0x08	; 8
    128a:	80 83       	st	Z, r24
    128c:	ed 9a       	sbi	0x1d, 5	; 29
    128e:	78 94       	sei
    1290:	08 95       	ret

00001292 <__vector_6>:
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <ShaftCountRight>
    12a8:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <ShaftCountRight+0x1>
    12ac:	a0 91 e2 03 	lds	r26, 0x03E2	; 0x8003e2 <ShaftCountRight+0x2>
    12b0:	b0 91 e3 03 	lds	r27, 0x03E3	; 0x8003e3 <ShaftCountRight+0x3>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	a1 1d       	adc	r26, r1
    12b8:	b1 1d       	adc	r27, r1
    12ba:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <ShaftCountRight>
    12be:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <ShaftCountRight+0x1>
    12c2:	a0 93 e2 03 	sts	0x03E2, r26	; 0x8003e2 <ShaftCountRight+0x2>
    12c6:	b0 93 e3 03 	sts	0x03E3, r27	; 0x8003e3 <ShaftCountRight+0x3>
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_5>:
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <ShaftCountLeft>
    12f2:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <ShaftCountLeft+0x1>
    12f6:	a0 91 e6 03 	lds	r26, 0x03E6	; 0x8003e6 <ShaftCountLeft+0x2>
    12fa:	b0 91 e7 03 	lds	r27, 0x03E7	; 0x8003e7 <ShaftCountLeft+0x3>
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
    1304:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <ShaftCountLeft>
    1308:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <ShaftCountLeft+0x1>
    130c:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <ShaftCountLeft+0x2>
    1310:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <ShaftCountLeft+0x3>
    1314:	bf 91       	pop	r27
    1316:	af 91       	pop	r26
    1318:	9f 91       	pop	r25
    131a:	8f 91       	pop	r24
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <motion_set>:
    1326:	92 b1       	in	r25, 0x02	; 2
    1328:	90 7f       	andi	r25, 0xF0	; 240
    132a:	8f 70       	andi	r24, 0x0F	; 15
    132c:	98 2b       	or	r25, r24
    132e:	92 b9       	out	0x02, r25	; 2
    1330:	08 95       	ret

00001332 <forward>:
    1332:	86 e0       	ldi	r24, 0x06	; 6
    1334:	f8 cf       	rjmp	.-16     	; 0x1326 <motion_set>
    1336:	08 95       	ret

00001338 <left>:
    1338:	85 e0       	ldi	r24, 0x05	; 5
    133a:	f5 cf       	rjmp	.-22     	; 0x1326 <motion_set>
    133c:	08 95       	ret

0000133e <right>:
    133e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <thresh>
    1342:	f1 cf       	rjmp	.-30     	; 0x1326 <motion_set>
    1344:	08 95       	ret

00001346 <stop>:
}

void stop (void)
{
	motion_set(0x00);
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	ee cf       	rjmp	.-36     	; 0x1326 <motion_set>
    134a:	08 95       	ret

0000134c <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1358:	bc 01       	movw	r22, r24
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	6a d6       	rcall	.+3284   	; 0x2034 <__floatunsisf>
    1360:	28 e4       	ldi	r18, 0x48	; 72
    1362:	31 ee       	ldi	r19, 0xE1	; 225
    1364:	42 e8       	ldi	r20, 0x82	; 130
    1366:	50 e4       	ldi	r21, 0x40	; 64
    1368:	d1 d5       	rcall	.+2978   	; 0x1f0c <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    136a:	38 d6       	rcall	.+3184   	; 0x1fdc <__fixunssfsi>
    136c:	ab 01       	movw	r20, r22
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
	ShaftCountRight = 0;
    1372:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <ShaftCountRight>
    1376:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <ShaftCountRight+0x1>
    137a:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <ShaftCountRight+0x2>
    137e:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
    1382:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <ShaftCountLeft>
    1386:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <ShaftCountLeft+0x1>
    138a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <ShaftCountLeft+0x2>
    138e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <ShaftCountLeft+0x3>

	while (1)
	{
		//lcd_print(1,5,ShaftCountRight,3);
		//lcd_print(2,10,ShaftCountRight,2);
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	e0 e0       	ldi	r30, 0x00	; 0
    1396:	c0 90 e0 03 	lds	r12, 0x03E0	; 0x8003e0 <ShaftCountRight>
    139a:	d0 90 e1 03 	lds	r13, 0x03E1	; 0x8003e1 <ShaftCountRight+0x1>
    139e:	e0 90 e2 03 	lds	r14, 0x03E2	; 0x8003e2 <ShaftCountRight+0x2>
    13a2:	f0 90 e3 03 	lds	r15, 0x03E3	; 0x8003e3 <ShaftCountRight+0x3>
    13a6:	00 91 e4 03 	lds	r16, 0x03E4	; 0x8003e4 <ShaftCountLeft>
    13aa:	10 91 e5 03 	lds	r17, 0x03E5	; 0x8003e5 <ShaftCountLeft+0x1>
    13ae:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <ShaftCountLeft+0x2>
    13b2:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <ShaftCountLeft+0x3>
    13b6:	89 2f       	mov	r24, r25
    13b8:	04 17       	cp	r16, r20
    13ba:	15 07       	cpc	r17, r21
    13bc:	26 07       	cpc	r18, r22
    13be:	37 07       	cpc	r19, r23
    13c0:	08 f4       	brcc	.+2      	; 0x13c4 <angle_rotate+0x78>
    13c2:	8e 2f       	mov	r24, r30
    13c4:	81 11       	cpse	r24, r1
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <angle_rotate+0x8e>
    13c8:	89 2f       	mov	r24, r25
    13ca:	c4 16       	cp	r12, r20
    13cc:	d5 06       	cpc	r13, r21
    13ce:	e6 06       	cpc	r14, r22
    13d0:	f7 06       	cpc	r15, r23
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <angle_rotate+0x8a>
    13d4:	8e 2f       	mov	r24, r30
    13d6:	88 23       	and	r24, r24
    13d8:	f1 f2       	breq	.-68     	; 0x1396 <angle_rotate+0x4a>
		break;
	}
	stop(); //Stop robot
    13da:	b5 df       	rcall	.-150    	; 0x1346 <stop>
}
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	08 95       	ret

000013ea <left_degrees>:



void left_degrees(unsigned int Degrees)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    13f0:	a3 df       	rcall	.-186    	; 0x1338 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    13f8:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	velocity(255,255);
	angle_rotate(Degrees);
    13fc:	ce 01       	movw	r24, r28
    13fe:	a6 df       	rcall	.-180    	; 0x134c <angle_rotate>
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    140c:	98 df       	rcall	.-208    	; 0x133e <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1414:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	velocity(255,255);
	angle_rotate(Degrees);
    1418:	ce 01       	movw	r24, r28
    141a:	98 df       	rcall	.-208    	; 0x134c <angle_rotate>
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    1428:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    142c:	08 95       	ret

0000142e <init_devices>:
}

void init_devices()
{
	cli(); //Clears the global interrupt
    142e:	f8 94       	cli
	port_init();  //Initializes all the ports
    1430:	d3 de       	rcall	.-602    	; 0x11d8 <port_init>
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    1432:	e1 ec       	ldi	r30, 0xC1	; 193
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    1438:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    143c:	26 e0       	ldi	r18, 0x06	; 6
    143e:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    1442:	9f e5       	ldi	r25, 0x5F	; 95
    1444:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    1448:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    144c:	88 e9       	ldi	r24, 0x98	; 152
    144e:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    1450:	e1 ed       	ldi	r30, 0xD1	; 209
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    1456:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    145a:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    145e:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    1462:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    1466:	80 83       	st	Z, r24
{
	cli(); //Clears the global interrupt
	port_init();  //Initializes all the ports
	uart0_init();	//init Zigbee comm
	uart2_init();	//init PC - USB comm
	left_position_encoder_interrupt_init();
    1468:	02 df       	rcall	.-508    	; 0x126e <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    146a:	0a df       	rcall	.-492    	; 0x1280 <right_position_encoder_interrupt_init>
	adc_init();
    146c:	d8 de       	rcall	.-592    	; 0x121e <adc_init>
	timer5_init();
    146e:	bc de       	rcall	.-648    	; 0x11e8 <timer5_init>
	lcd_set_4bit();
    1470:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_set_4bit>
	lcd_init();
    1474:	0e 94 40 01 	call	0x280	; 0x280 <lcd_init>
	LED_bargraph_config();
    1478:	d4 df       	rcall	.-88     	; 0x1422 <LED_bargraph_config>
	sei();   // Enables the global interrupt
    147a:	78 94       	sei
    147c:	08 95       	ret

0000147e <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    147e:	bc 01       	movw	r22, r24
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	d7 d5       	rcall	.+2990   	; 0x2034 <__floatunsisf>
    1486:	25 ee       	ldi	r18, 0xE5	; 229
    1488:	30 ed       	ldi	r19, 0xD0	; 208
    148a:	4a ea       	ldi	r20, 0xAA	; 170
    148c:	50 e4       	ldi	r21, 0x40	; 64
    148e:	3e d5       	rcall	.+2684   	; 0x1f0c <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1490:	a5 d5       	rcall	.+2890   	; 0x1fdc <__fixunssfsi>
    1492:	ab 01       	movw	r20, r22
    1494:	bc 01       	movw	r22, r24
	ShaftCountRight = 0;
    1496:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <ShaftCountRight>
    149a:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <ShaftCountRight+0x1>
    149e:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <ShaftCountRight+0x2>
    14a2:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <ShaftCountRight+0x3>
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    14a6:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <ShaftCountRight>
    14aa:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <ShaftCountRight+0x1>
    14ae:	a0 91 e2 03 	lds	r26, 0x03E2	; 0x8003e2 <ShaftCountRight+0x2>
    14b2:	b0 91 e3 03 	lds	r27, 0x03E3	; 0x8003e3 <ShaftCountRight+0x3>
    14b6:	48 17       	cp	r20, r24
    14b8:	59 07       	cpc	r21, r25
    14ba:	6a 07       	cpc	r22, r26
    14bc:	7b 07       	cpc	r23, r27
    14be:	98 f7       	brcc	.-26     	; 0x14a6 <linear_distance_mm+0x28>
		{
			break;
		}
	}
	stop(); //Stop robot
    14c0:	42 cf       	rjmp	.-380    	; 0x1346 <stop>
    14c2:	08 95       	ret

000014c4 <forward_mm>:
}


void forward_mm(unsigned int DistanceInMM)
{
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ec 01       	movw	r28, r24
	forward();
    14ca:	33 df       	rcall	.-410    	; 0x1332 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14cc:	9a e5       	ldi	r25, 0x5A	; 90
    14ce:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    14d2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(90,90);
	linear_distance_mm(DistanceInMM);
    14d6:	ce 01       	movw	r24, r28
    14d8:	d2 df       	rcall	.-92     	; 0x147e <linear_distance_mm>
}
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    14e0:	4f 92       	push	r4
    14e2:	5f 92       	push	r5
    14e4:	6f 92       	push	r6
    14e6:	7f 92       	push	r7
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	c0 5c       	subi	r28, 0xC0	; 192
    1506:	d1 09       	sbc	r29, r1
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
    1512:	de 01       	movw	r26, r28
    1514:	af 59       	subi	r26, 0x9F	; 159
    1516:	bf 4f       	sbci	r27, 0xFF	; 255
    1518:	20 e6       	ldi	r18, 0x60	; 96
    151a:	fd 01       	movw	r30, r26
    151c:	11 92       	st	Z+, r1
    151e:	2a 95       	dec	r18
    1520:	e9 f7       	brne	.-6      	; 0x151c <costplan+0x3c>
    1522:	ed e1       	ldi	r30, 0x1D	; 29
    1524:	f4 e0       	ldi	r31, 0x04	; 4
    1526:	8e 01       	movw	r16, r28
    1528:	0f 5f       	subi	r16, 0xFF	; 255
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	78 01       	movw	r14, r16
    152e:	6d 01       	movw	r12, r26
    1530:	0d e7       	ldi	r16, 0x7D	; 125
    1532:	14 e0       	ldi	r17, 0x04	; 4
    1534:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    1536:	63 e6       	ldi	r22, 0x63	; 99
    1538:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    153a:	4f ef       	ldi	r20, 0xFF	; 255
    153c:	5f ef       	ldi	r21, 0xFF	; 255
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    153e:	61 93       	st	Z+, r22
    1540:	71 93       	st	Z+, r23
		list[j]=-1;
    1542:	d9 01       	movw	r26, r18
    1544:	4d 93       	st	X+, r20
    1546:	5d 93       	st	X+, r21
    1548:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    154a:	d6 01       	movw	r26, r12
    154c:	1d 92       	st	X+, r1
    154e:	1d 92       	st	X+, r1
    1550:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    1552:	e0 17       	cp	r30, r16
    1554:	f1 07       	cpc	r31, r17
    1556:	99 f7       	brne	.-26     	; 0x153e <costplan+0x5e>
    1558:	fc 01       	movw	r30, r24
    155a:	ac 01       	movw	r20, r24
    155c:	44 5f       	subi	r20, 0xF4	; 244
    155e:	5f 4f       	sbci	r21, 0xFF	; 255
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{
			cost[note_loc[j]-1]=0;
			k=k+1;
			list[k]=note_loc[j];   // It is the list of nodes to explore
			tmploc[note_loc[j]-1]=1;  // each node which is added to the list is marked with 1
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	21 15       	cp	r18, r1
    156e:	31 05       	cpc	r19, r1
    1570:	09 f1       	breq	.+66     	; 0x15b4 <costplan+0xd4>
		{
			cost[note_loc[j]-1]=0;
    1572:	22 0f       	add	r18, r18
    1574:	33 1f       	adc	r19, r19
    1576:	d9 01       	movw	r26, r18
    1578:	a5 5e       	subi	r26, 0xE5	; 229
    157a:	bb 4f       	sbci	r27, 0xFB	; 251
    157c:	1d 92       	st	X+, r1
    157e:	1c 92       	st	X, r1
			k=k+1;
    1580:	01 96       	adiw	r24, 0x01	; 1
			list[k]=note_loc[j];   // It is the list of nodes to explore
    1582:	20 81       	ld	r18, Z
    1584:	31 81       	ldd	r19, Z+1	; 0x01
    1586:	dc 01       	movw	r26, r24
    1588:	aa 0f       	add	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	01 e0       	ldi	r16, 0x01	; 1
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	0c 0f       	add	r16, r28
    1592:	1d 1f       	adc	r17, r29
    1594:	a0 0f       	add	r26, r16
    1596:	b1 1f       	adc	r27, r17
    1598:	2d 93       	st	X+, r18
    159a:	3c 93       	st	X, r19
			tmploc[note_loc[j]-1]=1;  // each node which is added to the list is marked with 1
    159c:	d9 01       	movw	r26, r18
    159e:	11 97       	sbiw	r26, 0x01	; 1
    15a0:	aa 0f       	add	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	21 e6       	ldi	r18, 0x61	; 97
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	2c 0f       	add	r18, r28
    15aa:	3d 1f       	adc	r19, r29
    15ac:	a2 0f       	add	r26, r18
    15ae:	b3 1f       	adc	r27, r19
    15b0:	6d 93       	st	X+, r22
    15b2:	7c 93       	st	X, r23
    15b4:	32 96       	adiw	r30, 0x02	; 2
	{
		cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    15b6:	e4 17       	cp	r30, r20
    15b8:	f5 07       	cpc	r31, r21
    15ba:	b1 f6       	brne	.-84     	; 0x1568 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    15bc:	ae 2c       	mov	r10, r14
    15be:	9f 2c       	mov	r9, r15
    15c0:	81 2c       	mov	r8, r1
    15c2:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}
		k=k-1;
    15c4:	68 94       	set
    15c6:	bb 24       	eor	r11, r11
    15c8:	b2 f8       	bld	r11, 2
    15ca:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
				cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    15cc:	cc 24       	eor	r12, r12
    15ce:	c3 94       	inc	r12
    15d0:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    15d2:	a9 81       	ldd	r26, Y+1	; 0x01
    15d4:	ba 81       	ldd	r27, Y+2	; 0x02
    15d6:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    15d8:	99 23       	and	r25, r25
    15da:	6c f0       	brlt	.+26     	; 0x15f6 <costplan+0x116>
    15dc:	ea 2d       	mov	r30, r10
    15de:	f9 2d       	mov	r31, r9
    15e0:	28 2d       	mov	r18, r8
    15e2:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    15e4:	2f 5f       	subi	r18, 0xFF	; 255
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	42 81       	ldd	r20, Z+2	; 0x02
    15ea:	53 81       	ldd	r21, Z+3	; 0x03
    15ec:	41 93       	st	Z+, r20
    15ee:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    15f0:	82 17       	cp	r24, r18
    15f2:	93 07       	cpc	r25, r19
    15f4:	bc f7       	brge	.-18     	; 0x15e4 <costplan+0x104>
		{
			list[i]=list[i+1];
		}
		k=k-1;
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	fd 01       	movw	r30, r26
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	e3 58       	subi	r30, 0x83	; 131
    1608:	fb 4f       	sbci	r31, 0xFB	; 251
    160a:	2b 2d       	mov	r18, r11
    160c:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    160e:	aa 0f       	add	r26, r26
    1610:	bb 1f       	adc	r27, r27
    1612:	ad 01       	movw	r20, r26
    1614:	43 5e       	subi	r20, 0xE3	; 227
    1616:	5b 4f       	sbci	r21, 0xFB	; 251
    1618:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    161a:	61 91       	ld	r22, Z+
    161c:	71 91       	ld	r23, Z+
    161e:	61 15       	cp	r22, r1
    1620:	71 05       	cpc	r23, r1
    1622:	d1 f1       	breq	.+116    	; 0x1698 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1624:	d2 01       	movw	r26, r4
    1626:	0d 91       	ld	r16, X+
    1628:	1c 91       	ld	r17, X
    162a:	0f 5f       	subi	r16, 0xFF	; 255
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	ab 01       	movw	r20, r22
    1630:	41 50       	subi	r20, 0x01	; 1
    1632:	51 09       	sbc	r21, r1
    1634:	7a 01       	movw	r14, r20
    1636:	ee 0c       	add	r14, r14
    1638:	ff 1c       	adc	r15, r15
    163a:	d7 01       	movw	r26, r14
    163c:	a3 5e       	subi	r26, 0xE3	; 227
    163e:	bb 4f       	sbci	r27, 0xFB	; 251
    1640:	ed 90       	ld	r14, X+
    1642:	fc 90       	ld	r15, X
    1644:	e0 16       	cp	r14, r16
    1646:	f1 06       	cpc	r15, r17
    1648:	44 f0       	brlt	.+16     	; 0x165a <costplan+0x17a>
				cost[node[s][i]-1]=(cost[s]+1);
    164a:	7a 01       	movw	r14, r20
    164c:	ee 0c       	add	r14, r14
    164e:	ff 1c       	adc	r15, r15
    1650:	d7 01       	movw	r26, r14
    1652:	a3 5e       	subi	r26, 0xE3	; 227
    1654:	bb 4f       	sbci	r27, 0xFB	; 251
    1656:	0d 93       	st	X+, r16
    1658:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    165a:	8a 01       	movw	r16, r20
    165c:	00 0f       	add	r16, r16
    165e:	11 1f       	adc	r17, r17
    1660:	a1 e6       	ldi	r26, 0x61	; 97
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ac 0f       	add	r26, r28
    1666:	bd 1f       	adc	r27, r29
    1668:	0a 0f       	add	r16, r26
    166a:	1b 1f       	adc	r17, r27
    166c:	d8 01       	movw	r26, r16
    166e:	0d 91       	ld	r16, X+
    1670:	1c 91       	ld	r17, X
    1672:	11 97       	sbiw	r26, 0x01	; 1
    1674:	01 30       	cpi	r16, 0x01	; 1
    1676:	11 05       	cpc	r17, r1
    1678:	79 f0       	breq	.+30     	; 0x1698 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    167a:	cd 92       	st	X+, r12
    167c:	dc 92       	st	X, r13
					k=k+1;
    167e:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    1680:	ac 01       	movw	r20, r24
    1682:	44 0f       	add	r20, r20
    1684:	55 1f       	adc	r21, r21
    1686:	01 e0       	ldi	r16, 0x01	; 1
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	0c 0f       	add	r16, r28
    168c:	1d 1f       	adc	r17, r29
    168e:	40 0f       	add	r20, r16
    1690:	51 1f       	adc	r21, r17
    1692:	da 01       	movw	r26, r20
    1694:	6d 93       	st	X+, r22
    1696:	7c 93       	st	X, r23
    1698:	21 50       	subi	r18, 0x01	; 1
    169a:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
		{
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    169c:	09 f0       	breq	.+2      	; 0x16a0 <costplan+0x1c0>
    169e:	bd cf       	rjmp	.-134    	; 0x161a <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 && k!=-1);
    16a0:	49 81       	ldd	r20, Y+1	; 0x01
    16a2:	5a 81       	ldd	r21, Y+2	; 0x02
    16a4:	4f 3f       	cpi	r20, 0xFF	; 255
    16a6:	5f 4f       	sbci	r21, 0xFF	; 255
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <costplan+0x1d4>
    16aa:	8f 3f       	cpi	r24, 0xFF	; 255
    16ac:	ef ef       	ldi	r30, 0xFF	; 255
    16ae:	9e 07       	cpc	r25, r30
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <costplan+0x1d4>
    16b2:	8f cf       	rjmp	.-226    	; 0x15d2 <costplan+0xf2>
}
    16b4:	c0 54       	subi	r28, 0x40	; 64
    16b6:	df 4f       	sbci	r29, 0xFF	; 255
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	9f 90       	pop	r9
    16d8:	8f 90       	pop	r8
    16da:	7f 90       	pop	r7
    16dc:	6f 90       	pop	r6
    16de:	5f 90       	pop	r5
    16e0:	4f 90       	pop	r4
    16e2:	08 95       	ret

000016e4 <rotate>:

void rotate(int turnang)
{
	if(turnang<0)
    16e4:	99 23       	and	r25, r25
    16e6:	44 f4       	brge	.+16     	; 0x16f8 <rotate+0x14>
	{
		turnang=-turnang;
		right_degrees(turnang-25);
    16e8:	27 ee       	ldi	r18, 0xE7	; 231
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	a9 01       	movw	r20, r18
    16ee:	48 1b       	sub	r20, r24
    16f0:	59 0b       	sbc	r21, r25
    16f2:	ca 01       	movw	r24, r20
    16f4:	88 de       	rcall	.-752    	; 0x1406 <right_degrees>
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <rotate+0x18>
	}
	else
	{
		left_degrees(turnang-25);
    16f8:	49 97       	sbiw	r24, 0x19	; 25
    16fa:	77 de       	rcall	.-786    	; 0x13ea <left_degrees>
	}
	while(1)
	{
		Center_white_line = ADC_Conversion(2);
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	9c dd       	rcall	.-1224   	; 0x1238 <ADC_Conversion>
    1700:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <Center_white_line>
		if(Center_white_line>0x78)
    1704:	89 37       	cpi	r24, 0x79	; 121
    1706:	d0 f3       	brcs	.-12     	; 0x16fc <rotate+0x18>
		break;
	}
}
    1708:	08 95       	ret

0000170a <move>:

int move(int n)
{
    170a:	8f 92       	push	r8
    170c:	9f 92       	push	r9
    170e:	af 92       	push	r10
    1710:	bf 92       	push	r11
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    1724:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1728:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    172c:	31 97       	sbiw	r30, 0x01	; 1
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	e8 0f       	add	r30, r24
    1738:	f9 1f       	adc	r31, r25
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 5f       	subi	r30, 0xFE	; 254
    1740:	f9 4f       	sbci	r31, 0xF9	; 249
    1742:	e0 80       	ld	r14, Z
    1744:	f1 80       	ldd	r15, Z+1	; 0x01
    1746:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    174a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    174e:	e8 1a       	sub	r14, r24
    1750:	f9 0a       	sbc	r15, r25
	if(fabs(turnang)>45)
    1752:	b7 01       	movw	r22, r14
    1754:	0f 2c       	mov	r0, r15
    1756:	00 0c       	add	r0, r0
    1758:	88 0b       	sbc	r24, r24
    175a:	99 0b       	sbc	r25, r25
    175c:	6d d4       	rcall	.+2266   	; 0x2038 <__floatsisf>
    175e:	9f 77       	andi	r25, 0x7F	; 127
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	44 e3       	ldi	r20, 0x34	; 52
    1766:	52 e4       	ldi	r21, 0x42	; 66
    1768:	f3 d4       	rcall	.+2534   	; 0x2150 <__gesf2>
    176a:	18 16       	cp	r1, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <move+0x6e>
	{
		forward_mm(70);
    176e:	86 e4       	ldi	r24, 0x46	; 70
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a8 de       	rcall	.-688    	; 0x14c4 <forward_mm>
		rotate(turnang);
    1774:	c7 01       	movw	r24, r14
    1776:	b6 df       	rcall	.-148    	; 0x16e4 <rotate>
	}
	botang=angle[botloc-1][n];
    1778:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    177c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	c8 0f       	add	r28, r24
    178c:	d9 1f       	adc	r29, r25
    178e:	cc 0f       	add	r28, r28
    1790:	dd 1f       	adc	r29, r29
    1792:	ce 5f       	subi	r28, 0xFE	; 254
    1794:	d9 4f       	sbci	r29, 0xF9	; 249
    1796:	88 81       	ld	r24, Y
    1798:	99 81       	ldd	r25, Y+1	; 0x01
    179a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    179e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	forward();
    17a2:	c7 dd       	rcall	.-1138   	; 0x1332 <forward>
	}
}

int move(int n)
{
	int suc=1,turnang;
    17a4:	bb 24       	eor	r11, r11
    17a6:	b3 94       	inc	r11
    17a8:	c1 2c       	mov	r12, r1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17aa:	08 e2       	ldi	r16, 0x28	; 40
    17ac:	11 e0       	ldi	r17, 0x01	; 1
    17ae:	0f 2e       	mov	r0, r31
    17b0:	fa e5       	ldi	r31, 0x5A	; 90
    17b2:	df 2e       	mov	r13, r31
    17b4:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    17b6:	ca e2       	ldi	r28, 0x2A	; 42
    17b8:	d1 e0       	ldi	r29, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17ba:	0f 2e       	mov	r0, r31
    17bc:	f2 e8       	ldi	r31, 0x82	; 130
    17be:	9f 2e       	mov	r9, r31
    17c0:	f0 2d       	mov	r31, r0
		{
			rotate(180);
			botang=botang-180-turnang;
			if(botang<0)
			botang+=360;
			suc=0;
    17c2:	a1 2c       	mov	r10, r1
    17c4:	81 2c       	mov	r8, r1
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <move+0xca>
		ShaftCountRight=0;
		
		if(Front_IR_Sensor>0xf0)
		{
			rotate(180);
			botang=botang-180-turnang;
    17c8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    17cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			if(botang<0)
			botang+=360;
			suc=0;
    17d0:	ba 2c       	mov	r11, r10
    17d2:	c8 2c       	mov	r12, r8
	}
	botang=angle[botloc-1][n];
	forward();
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	30 dd       	rcall	.-1440   	; 0x1238 <ADC_Conversion>
    17d8:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	2c dd       	rcall	.-1448   	; 0x1238 <ADC_Conversion>
    17e0:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	28 dd       	rcall	.-1456   	; 0x1238 <ADC_Conversion>
    17e8:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    17ec:	86 e0       	ldi	r24, 0x06	; 6
    17ee:	24 dd       	rcall	.-1464   	; 0x1238 <ADC_Conversion>
    17f0:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <__data_end>

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	20 dd       	rcall	.-1472   	; 0x1238 <ADC_Conversion>
    17f8:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <ADC_Value>
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	1c dd       	rcall	.-1480   	; 0x1238 <ADC_Conversion>
    1800:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <ADC_Value>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	18 dd       	rcall	.-1488   	; 0x1238 <ADC_Conversion>
    1808:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <ADC_Value>
		
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		ShaftCountRight=0;
    180c:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <ShaftCountRight>
    1810:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <ShaftCountRight+0x1>
    1814:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <ShaftCountRight+0x2>
    1818:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <ShaftCountRight+0x3>
		
		if(Front_IR_Sensor>0xf0)
    181c:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
    1820:	81 3f       	cpi	r24, 0xF1	; 241
    1822:	b0 f0       	brcs	.+44     	; 0x1850 <move+0x146>
		{
			rotate(180);
    1824:	84 eb       	ldi	r24, 0xB4	; 180
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	5d df       	rcall	.-326    	; 0x16e4 <rotate>
			botang=botang-180-turnang;
    182a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    182e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1832:	84 5b       	subi	r24, 0xB4	; 180
    1834:	91 09       	sbc	r25, r1
    1836:	8e 19       	sub	r24, r14
    1838:	9f 09       	sbc	r25, r15
			if(botang<0)
    183a:	0a f0       	brmi	.+2      	; 0x183e <move+0x134>
    183c:	c5 cf       	rjmp	.-118    	; 0x17c8 <move+0xbe>
			botang+=360;
    183e:	88 59       	subi	r24, 0x98	; 152
    1840:	9e 4f       	sbci	r25, 0xFE	; 254
    1842:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1846:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			suc=0;
    184a:	ba 2c       	mov	r11, r10
    184c:	c8 2c       	mov	r12, r8
    184e:	c2 cf       	rjmp	.-124    	; 0x17d4 <move+0xca>
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
    1850:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <Center_white_line>
    1854:	8e 2f       	mov	r24, r30
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <thresh>
    185c:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <thresh+0x1>
    1860:	48 17       	cp	r20, r24
    1862:	59 07       	cpc	r21, r25
    1864:	6c f4       	brge	.+26     	; 0x1880 <move+0x176>
    1866:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <Left_white_line>
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	42 17       	cp	r20, r18
    186e:	53 07       	cpc	r21, r19
    1870:	9c f1       	brlt	.+102    	; 0x18d8 <move+0x1ce>
    1872:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <Right_white_line>
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	46 17       	cp	r20, r22
    187a:	57 07       	cpc	r21, r23
    187c:	d4 f1       	brlt	.+116    	; 0x18f2 <move+0x1e8>
    187e:	46 c0       	rjmp	.+140    	; 0x190c <move+0x202>
			forward();
			velocity(0,0);
			//lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1880:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <Left_white_line>
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	42 17       	cp	r20, r18
    1888:	53 07       	cpc	r21, r19
    188a:	2c f4       	brge	.+10     	; 0x1896 <move+0x18c>
		{
			//flag=1;
			forward();
    188c:	52 dd       	rcall	.-1372   	; 0x1332 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    188e:	f8 01       	movw	r30, r16
    1890:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1892:	d8 82       	st	Y, r13
    1894:	9f cf       	rjmp	.-194    	; 0x17d4 <move+0xca>
			//flag=1;
			forward();
			//lcd_print(2,1,1,3);
			velocity(0,90);
		}
		else if(Right_white_line>thresh)
    1896:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <Right_white_line>
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	46 17       	cp	r20, r22
    189e:	57 07       	cpc	r21, r23
    18a0:	2c f4       	brge	.+10     	; 0x18ac <move+0x1a2>
		{
			//flag=1;
			forward();
    18a2:	47 dd       	rcall	.-1394   	; 0x1332 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18a4:	f8 01       	movw	r30, r16
    18a6:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    18a8:	18 82       	st	Y, r1
    18aa:	94 cf       	rjmp	.-216    	; 0x17d4 <move+0xca>
			//flag=1;
			forward();
			//lcd_print(2,1,2,3);
			velocity(90,0);
		}
		else if(Center_white_line>0x78)
    18ac:	e9 37       	cpi	r30, 0x79	; 121
    18ae:	20 f0       	brcs	.+8      	; 0x18b8 <move+0x1ae>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18b0:	f8 01       	movw	r30, r16
    18b2:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
    18b4:	98 82       	st	Y, r9
    18b6:	8e cf       	rjmp	.-228    	; 0x17d4 <move+0xca>
		{
			velocity(130,130);
			//lcd_print(2,1,0,3);
			//flag=1;
		}
		else if(Center_white_line<thresh && Left_white_line<thresh && Right_white_line<thresh)
    18b8:	84 17       	cp	r24, r20
    18ba:	95 07       	cpc	r25, r21
    18bc:	0c f0       	brlt	.+2      	; 0x18c0 <move+0x1b6>
    18be:	8a cf       	rjmp	.-236    	; 0x17d4 <move+0xca>
    18c0:	24 17       	cp	r18, r20
    18c2:	35 07       	cpc	r19, r21
    18c4:	0c f0       	brlt	.+2      	; 0x18c8 <move+0x1be>
    18c6:	86 cf       	rjmp	.-244    	; 0x17d4 <move+0xca>
    18c8:	64 17       	cp	r22, r20
    18ca:	75 07       	cpc	r23, r21
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <move+0x1c6>
    18ce:	82 cf       	rjmp	.-252    	; 0x17d4 <move+0xca>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18d0:	f8 01       	movw	r30, r16
    18d2:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    18d4:	d8 82       	st	Y, r13
    18d6:	7e cf       	rjmp	.-260    	; 0x17d4 <move+0xca>
			botang=botang-180-turnang;
			if(botang<0)
			botang+=360;
			suc=0;
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
    18d8:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <ShaftCountRight>
    18dc:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <ShaftCountRight+0x1>
    18e0:	a0 91 e2 03 	lds	r26, 0x03E2	; 0x8003e2 <ShaftCountRight+0x2>
    18e4:	b0 91 e3 03 	lds	r27, 0x03E3	; 0x8003e3 <ShaftCountRight+0x3>
    18e8:	0b 97       	sbiw	r24, 0x0b	; 11
    18ea:	a1 05       	cpc	r26, r1
    18ec:	b1 05       	cpc	r27, r1
    18ee:	70 f2       	brcs	.-100    	; 0x188c <move+0x182>
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <move+0x20a>
    18f2:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <ShaftCountRight>
    18f6:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <ShaftCountRight+0x1>
    18fa:	a0 91 e2 03 	lds	r26, 0x03E2	; 0x8003e2 <ShaftCountRight+0x2>
    18fe:	b0 91 e3 03 	lds	r27, 0x03E3	; 0x8003e3 <ShaftCountRight+0x3>
    1902:	0b 97       	sbiw	r24, 0x0b	; 11
    1904:	a1 05       	cpc	r26, r1
    1906:	b1 05       	cpc	r27, r1
    1908:	60 f2       	brcs	.-104    	; 0x18a2 <move+0x198>
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <move+0x20a>
			//flag=1;
			forward();
			//lcd_print(2,1,1,3);
			velocity(0,90);
		}
		else if(Right_white_line>thresh)
    190c:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <Right_white_line>
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	cc cf       	rjmp	.-104    	; 0x18ac <move+0x1a2>
			botang+=360;
			suc=0;
		}
		else if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>10)
		{
			forward();
    1914:	0e dd       	rcall	.-1508   	; 0x1332 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1916:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    191a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		{
			velocity(90,90);
		}
	}
	return suc;
}
    191e:	8b 2d       	mov	r24, r11
    1920:	9c 2d       	mov	r25, r12
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	df 90       	pop	r13
    1930:	cf 90       	pop	r12
    1932:	bf 90       	pop	r11
    1934:	af 90       	pop	r10
    1936:	9f 90       	pop	r9
    1938:	8f 90       	pop	r8
    193a:	08 95       	ret

0000193c <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	9c 01       	movw	r18, r24
	int i;
	if(cost[loc-1]==0)
    1942:	bc 01       	movw	r22, r24
    1944:	61 50       	subi	r22, 0x01	; 1
    1946:	71 09       	sbc	r23, r1
    1948:	db 01       	movw	r26, r22
    194a:	aa 0f       	add	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	a3 5e       	subi	r26, 0xE3	; 227
    1950:	bb 4f       	sbci	r27, 0xFB	; 251
    1952:	8d 91       	ld	r24, X+
    1954:	9c 91       	ld	r25, X
    1956:	89 2b       	or	r24, r25
    1958:	39 f4       	brne	.+14     	; 0x1968 <BotEndLocation+0x2c>
	{
		LastLocation=loc;
    195a:	30 93 89 07 	sts	0x0789, r19	; 0x800789 <LastLocation+0x1>
    195e:	20 93 88 07 	sts	0x0788, r18	; 0x800788 <LastLocation>
		return LastLocation;
    1962:	82 2f       	mov	r24, r18
    1964:	93 2f       	mov	r25, r19
    1966:	38 c0       	rjmp	.+112    	; 0x19d8 <BotEndLocation+0x9c>
	}
	int mCost=cost[node[loc-1][0]];
    1968:	db 01       	movw	r26, r22
    196a:	aa 0f       	add	r26, r26
    196c:	bb 1f       	adc	r27, r27
    196e:	aa 0f       	add	r26, r26
    1970:	bb 1f       	adc	r27, r27
    1972:	aa 0f       	add	r26, r26
    1974:	bb 1f       	adc	r27, r27
    1976:	fd 01       	movw	r30, r26
    1978:	e3 58       	subi	r30, 0x83	; 131
    197a:	fb 4f       	sbci	r31, 0xFB	; 251
    197c:	01 90       	ld	r0, Z+
    197e:	f0 81       	ld	r31, Z
    1980:	e0 2d       	mov	r30, r0
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	e3 5e       	subi	r30, 0xE3	; 227
    1988:	fb 4f       	sbci	r31, 0xFB	; 251
    198a:	c0 81       	ld	r28, Z
    198c:	d1 81       	ldd	r29, Z+1	; 0x01
    198e:	a1 58       	subi	r26, 0x81	; 129
    1990:	bb 4f       	sbci	r27, 0xFB	; 251
	int pos=0;
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
	for(i=1;i<4;i++)
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(cost[node[loc-1][i]]<mCost)
    199a:	ed 91       	ld	r30, X+
    199c:	fd 91       	ld	r31, X+
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	e3 5e       	subi	r30, 0xE3	; 227
    19a4:	fb 4f       	sbci	r31, 0xFB	; 251
    19a6:	40 81       	ld	r20, Z
    19a8:	51 81       	ldd	r21, Z+1	; 0x01
    19aa:	4c 17       	cp	r20, r28
    19ac:	5d 07       	cpc	r21, r29
    19ae:	14 f4       	brge	.+4      	; 0x19b4 <BotEndLocation+0x78>
    19b0:	9c 01       	movw	r18, r24
		{
			mCost=cost[node[loc-1][i]];
    19b2:	ea 01       	movw	r28, r20
		LastLocation=loc;
		return LastLocation;
	}
	int mCost=cost[node[loc-1][0]];
	int pos=0;
	for(i=1;i<4;i++)
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	91 05       	cpc	r25, r1
    19ba:	79 f7       	brne	.-34     	; 0x199a <BotEndLocation+0x5e>
		{
			mCost=cost[node[loc-1][i]];
			pos=i;
		}
	}
	return BotEndLocation(node[loc-1][pos]);
    19bc:	fb 01       	movw	r30, r22
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	ee 0f       	add	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	e2 0f       	add	r30, r18
    19c8:	f3 1f       	adc	r31, r19
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	e3 58       	subi	r30, 0x83	; 131
    19d0:	fb 4f       	sbci	r31, 0xFB	; 251
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	b2 df       	rcall	.-156    	; 0x193c <BotEndLocation>
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <main>:

int main()
{
    19de:	2f 92       	push	r2
    19e0:	3f 92       	push	r3
    19e2:	4f 92       	push	r4
    19e4:	5f 92       	push	r5
    19e6:	6f 92       	push	r6
    19e8:	7f 92       	push	r7
    19ea:	8f 92       	push	r8
    19ec:	9f 92       	push	r9
    19ee:	af 92       	push	r10
    19f0:	bf 92       	push	r11
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
	declare_constants();
    1a02:	0e 94 50 01 	call	0x2a0	; 0x2a0 <declare_constants>
	init_devices();
    1a06:	13 dd       	rcall	.-1498   	; 0x142e <init_devices>
	PORTJ = 0x00;
    1a08:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    1a0c:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <notesReceived>
lcd_string("Waiting...");
    1a10:	81 ec       	ldi	r24, 0xC1	; 193
    1a12:	93 e0       	ldi	r25, 0x03	; 3
    1a14:	0e 94 32 01 	call	0x264	; 0x264 <lcd_string>
	while(!notesReceived);
    1a18:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <notesReceived>
    1a1c:	88 23       	and	r24, r24
    1a1e:	e1 f3       	breq	.-8      	; 0x1a18 <main+0x3a>
lcd_string("Received!");
    1a20:	8c ec       	ldi	r24, 0xCC	; 204
    1a22:	93 e0       	ldi	r25, 0x03	; 3
    1a24:	0e 94 32 01 	call	0x264	; 0x264 <lcd_string>
	PORTJ = 0xFF;
    1a28:	8f ef       	ldi	r24, 0xFF	; 255
    1a2a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a2e:	e0 ec       	ldi	r30, 0xC0	; 192
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	85 ff       	sbrs	r24, 5
    1a36:	fd cf       	rjmp	.-6      	; 0x1a32 <main+0x54>
	UDR0 = data;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a3e:	2f ef       	ldi	r18, 0xFF	; 255
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4c e2       	ldi	r20, 0x2C	; 44
    1a44:	21 50       	subi	r18, 0x01	; 1
    1a46:	30 40       	sbci	r19, 0x00	; 0
    1a48:	40 40       	sbci	r20, 0x00	; 0
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <main+0x66>
    1a4c:	00 c0       	rjmp	.+0      	; 0x1a4e <main+0x70>
    1a4e:	00 00       	nop
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	_delay_ms(1000);
	int i;
	for(i = 0; i<noteCount; i++)
    1a50:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <noteCount>
    1a54:	88 23       	and	r24, r24
    1a56:	01 f1       	breq	.+64     	; 0x1a98 <main+0xba>
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a5c:	e0 ec       	ldi	r30, 0xC0	; 192
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    1a60:	c6 ec       	ldi	r28, 0xC6	; 198
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
	//lcd_string("Start");
	_delay_ms(1000);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    1a64:	d9 01       	movw	r26, r18
    1a66:	a9 5f       	subi	r26, 0xF9	; 249
    1a68:	bb 4f       	sbci	r27, 0xFB	; 251
    1a6a:	9c 91       	ld	r25, X
    1a6c:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a6e:	80 81       	ld	r24, Z
    1a70:	85 ff       	sbrs	r24, 5
    1a72:	fd cf       	rjmp	.-6      	; 0x1a6e <main+0x90>
	UDR0 = data;
    1a74:	98 83       	st	Y, r25
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	9f ef       	ldi	r25, 0xFF	; 255
    1a7a:	4c e2       	ldi	r20, 0x2C	; 44
    1a7c:	81 50       	subi	r24, 0x01	; 1
    1a7e:	90 40       	sbci	r25, 0x00	; 0
    1a80:	40 40       	sbci	r20, 0x00	; 0
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <main+0x9e>
    1a84:	00 c0       	rjmp	.+0      	; 0x1a86 <main+0xa8>
    1a86:	00 00       	nop
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	_delay_ms(1000);
	int i;
	for(i = 0; i<noteCount; i++)
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <noteCount>
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	28 17       	cp	r18, r24
    1a94:	39 07       	cpc	r19, r25
    1a96:	34 f3       	brlt	.-52     	; 0x1a64 <main+0x86>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1a98:	e0 ec       	ldi	r30, 0xC0	; 192
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	85 ff       	sbrs	r24, 5
    1aa0:	fd cf       	rjmp	.-6      	; 0x1a9c <main+0xbe>
	UDR0 = data;
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	9f ef       	ldi	r25, 0xFF	; 255
    1aac:	ec e2       	ldi	r30, 0x2C	; 44
    1aae:	81 50       	subi	r24, 0x01	; 1
    1ab0:	90 40       	sbci	r25, 0x00	; 0
    1ab2:	e0 40       	sbci	r30, 0x00	; 0
    1ab4:	e1 f7       	brne	.-8      	; 0x1aae <main+0xd0>
    1ab6:	00 c0       	rjmp	.+0      	; 0x1ab8 <main+0xda>
    1ab8:	00 00       	nop
	while(!notesReceived);
lcd_string("Received!");
	PORTJ = 0xFF;
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    1aba:	8f e0       	ldi	r24, 0x0F	; 15
    1abc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
lcd_string("Sent!");
    1ac0:	86 ed       	ldi	r24, 0xD6	; 214
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 32 01 	call	0x264	; 0x264 <lcd_string>
			taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
    1ac8:	31 2c       	mov	r3, r1
    1aca:	21 2c       	mov	r2, r1

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1acc:	c0 ec       	ldi	r28, 0xC0	; 192
    1ace:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f6 ec       	ldi	r31, 0xC6	; 198
    1ad4:	cf 2e       	mov	r12, r31
    1ad6:	d1 2c       	mov	r13, r1
    1ad8:	f0 2d       	mov	r31, r0
    1ada:	0f 2e       	mov	r0, r31
    1adc:	f5 e0       	ldi	r31, 0x05	; 5
    1ade:	9f 2e       	mov	r9, r31
    1ae0:	f0 2d       	mov	r31, r0
    1ae2:	68 94       	set
    1ae4:	88 24       	eor	r8, r8
    1ae6:	82 f8       	bld	r8, 2
			taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
    1ae8:	63 2c       	mov	r6, r3
    1aea:	52 2c       	mov	r5, r2
				for(i=1;i<4;i++)
    1aec:	77 24       	eor	r7, r7
    1aee:	73 94       	inc	r7
    1af0:	41 2c       	mov	r4, r1
	SendNotesToSlave();
	PORTJ = 0x0F;
lcd_string("Sent!");
	#endif
	
	while(notes[(int)noteToStrike]!=0)
    1af2:	cb c1       	rjmp	.+918    	; 0x1e8a <main+0x4ac>
	{
		if(taskCount==taskitr)	// If the bot has traversed all Tasks in the list
    1af4:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <taskCount>
    1af8:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <taskitr>
    1afc:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <taskitr+0x1>
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	28 17       	cp	r18, r24
    1b04:	39 07       	cpc	r19, r25
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <main+0x12c>
    1b08:	a0 c0       	rjmp	.+320    	; 0x1c4a <main+0x26c>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
    1b0a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <noteToProcess>
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	e9 5f       	subi	r30, 0xF9	; 249
    1b12:	fb 4f       	sbci	r31, 0xFB	; 251
    1b14:	80 81       	ld	r24, Z
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	82 0f       	add	r24, r18
    1b22:	93 1f       	adc	r25, r19
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	84 5f       	subi	r24, 0xF4	; 244
    1b2e:	9d 4f       	sbci	r25, 0xFD	; 253
    1b30:	d7 dc       	rcall	.-1618   	; 0x14e0 <costplan>
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
    1b32:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1b36:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	e5 5e       	subi	r30, 0xE5	; 229
    1b40:	fb 4f       	sbci	r31, 0xFB	; 251
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	40 91 ed 03 	lds	r20, 0x03ED	; 0x8003ed <otherBotTaskCost>
    1b4a:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	e3 5e       	subi	r30, 0xE3	; 227
    1b56:	fb 4f       	sbci	r31, 0xFB	; 251
    1b58:	20 81       	ld	r18, Z
    1b5a:	31 81       	ldd	r19, Z+1	; 0x01
    1b5c:	24 0f       	add	r18, r20
    1b5e:	31 1d       	adc	r19, r1
    1b60:	28 17       	cp	r18, r24
    1b62:	39 07       	cpc	r19, r25
    1b64:	64 f5       	brge	.+88     	; 0x1bbe <main+0x1e0>
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
    1b66:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b6a:	88 81       	ld	r24, Y
    1b6c:	85 ff       	sbrs	r24, 5
    1b6e:	fd cf       	rjmp	.-6      	; 0x1b6a <main+0x18c>
	UDR0 = data;
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	f6 01       	movw	r30, r12
    1b74:	80 83       	st	Z, r24

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    1b76:	29 2f       	mov	r18, r25
    1b78:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b7a:	88 81       	ld	r24, Y
    1b7c:	85 ff       	sbrs	r24, 5
    1b7e:	fd cf       	rjmp	.-6      	; 0x1b7a <main+0x19c>
	UDR0 = data;
    1b80:	f6 01       	movw	r30, r12
    1b82:	20 83       	st	Z, r18
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    1b84:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <otherBotLastTaskIndex>
		{
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
    1b88:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	e3 5e       	subi	r30, 0xE3	; 227
    1b94:	fb 4f       	sbci	r31, 0xFB	; 251
    1b96:	90 81       	ld	r25, Z

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1b98:	88 81       	ld	r24, Y
    1b9a:	85 ff       	sbrs	r24, 5
    1b9c:	fd cf       	rjmp	.-6      	; 0x1b98 <main+0x1ba>
	UDR0 = data;
    1b9e:	88 e0       	ldi	r24, 0x08	; 8
    1ba0:	f6 01       	movw	r30, r12
    1ba2:	80 83       	st	Z, r24

// To Send the Cost of the task for the other robot.
void inline SendTaskCost(char taskcost)
{
	SendByteToSlave(ADD_COST);
	SendByteToSlave(DATA(taskcost));
    1ba4:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1ba6:	88 81       	ld	r24, Y
    1ba8:	85 ff       	sbrs	r24, 5
    1baa:	fd cf       	rjmp	.-6      	; 0x1ba6 <main+0x1c8>
	UDR0 = data;
    1bac:	f6 01       	movw	r30, r12
    1bae:	90 83       	st	Z, r25
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);	// Calculate cost for the next Note to process for the full map
			if(cost[botloc-1]>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex])) // Give the Task to the Bot which has less Total Cost
			{
				SendTaskToSlave((int)noteToProcess);			// Send the Task to the other bot if it has less cost
				SendTaskCost(cost[(int)otherBotLastTaskIndex]);		// Send the cost for the processed task
				otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);	// Update the other bot last index
    1bb0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <otherBotLastTaskIndex>
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	c2 de       	rcall	.-636    	; 0x193c <BotEndLocation>
    1bb8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <otherBotLastTaskIndex>
    1bbc:	32 c0       	rjmp	.+100    	; 0x1c22 <main+0x244>
			}
			else
			{
				tasks[(int)taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
    1bbe:	e0 91 ef 03 	lds	r30, 0x03EF	; 0x8003ef <taskCount>
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>
    1bc8:	ef 50       	subi	r30, 0x0F	; 15
    1bca:	fc 4f       	sbci	r31, 0xFC	; 252
    1bcc:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
    1bce:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <taskCost>
    1bd2:	89 0f       	add	r24, r25
    1bd4:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <taskCost>
				taskCount++;
    1bd8:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <taskCount>
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <taskCount>
				SendLastIndex((int)noteToProcess);
    1be2:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1be6:	88 81       	ld	r24, Y
    1be8:	85 ff       	sbrs	r24, 5
    1bea:	fd cf       	rjmp	.-6      	; 0x1be6 <main+0x208>
	UDR0 = data;
    1bec:	89 e0       	ldi	r24, 0x09	; 9
    1bee:	f6 01       	movw	r30, r12
    1bf0:	80 83       	st	Z, r24

// Inform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1bf2:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1bf4:	88 81       	ld	r24, Y
    1bf6:	85 ff       	sbrs	r24, 5
    1bf8:	fd cf       	rjmp	.-6      	; 0x1bf4 <main+0x216>
	UDR0 = data;
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	90 83       	st	Z, r25
			{
				tasks[(int)taskCount]=(int)noteToProcess;	// If the bot has less cost than the other bot add the task to the list
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
    1bfe:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    1c02:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1c06:	9a de       	rcall	.-716    	; 0x193c <BotEndLocation>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1c08:	98 81       	ld	r25, Y
    1c0a:	95 ff       	sbrs	r25, 5
    1c0c:	fd cf       	rjmp	.-6      	; 0x1c08 <main+0x22a>
	UDR0 = data;
    1c0e:	99 e0       	ldi	r25, 0x09	; 9
    1c10:	f6 01       	movw	r30, r12
    1c12:	90 83       	st	Z, r25

// Inform the LastTaskIndex to the Other Bot
void inline SendLastIndex(char lastIndex)
{
	SendByteToSlave(LAST_IND);
	SendByteToSlave(DATA(lastIndex));
    1c14:	98 2f       	mov	r25, r24
    1c16:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1c18:	88 81       	ld	r24, Y
    1c1a:	85 ff       	sbrs	r24, 5
    1c1c:	fd cf       	rjmp	.-6      	; 0x1c18 <main+0x23a>
	UDR0 = data;
    1c1e:	f6 01       	movw	r30, r12
    1c20:	90 83       	st	Z, r25
				taskCost+=cost[botloc-1];		//
				taskCount++;
				SendLastIndex((int)noteToProcess);
				SendLastIndex((int)BotEndLocation(botloc));
			}
			NoteProcessed(noteToProcess);
    1c22:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <noteToProcess>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1c26:	88 81       	ld	r24, Y
    1c28:	85 ff       	sbrs	r24, 5
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <main+0x248>
	UDR0 = data;
    1c2c:	87 e0       	ldi	r24, 0x07	; 7
    1c2e:	f6 01       	movw	r30, r12
    1c30:	80 83       	st	Z, r24

//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
    1c32:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1c34:	88 81       	ld	r24, Y
    1c36:	85 ff       	sbrs	r24, 5
    1c38:	fd cf       	rjmp	.-6      	; 0x1c34 <main+0x256>
	UDR0 = data;
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	90 83       	st	Z, r25
//Inform that a note has been processed
void inline NoteProcessed(char noteIndex)
{
	SendByteToSlave(PRC_NOTE);
	SendByteToSlave(DATA(noteIndex));
	noteToProcess++;
    1c3e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <noteToProcess>
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <noteToProcess>
    1c48:	20 c1       	rjmp	.+576    	; 0x1e8a <main+0x4ac>
			NoteProcessed(noteToProcess);
		}
		else
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	ef 50       	subi	r30, 0x0F	; 15
    1c4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c50:	e0 81       	ld	r30, Z
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	e9 5f       	subi	r30, 0xF9	; 249
    1c56:	fb 4f       	sbci	r31, 0xFB	; 251
    1c58:	80 81       	ld	r24, Z
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	9c 01       	movw	r18, r24
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	84 5f       	subi	r24, 0xF4	; 244
    1c72:	9d 4f       	sbci	r25, 0xFD	; 253
    1c74:	35 dc       	rcall	.-1942   	; 0x14e0 <costplan>
			if(cost[botloc-1]==0)
			taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
    1c76:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1c7a:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1c7e:	31 97       	sbiw	r30, 0x01	; 1
    1c80:	df 01       	movw	r26, r30
    1c82:	aa 0f       	add	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	a3 5e       	subi	r26, 0xE3	; 227
    1c88:	bb 4f       	sbci	r27, 0xFB	; 251
    1c8a:	8d 91       	ld	r24, X+
    1c8c:	9c 91       	ld	r25, X
    1c8e:	89 2b       	or	r24, r25
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <main+0x2b6>
    1c92:	c9 c0       	rjmp	.+402    	; 0x1e26 <main+0x448>
			{
				minCost=cost[node[botloc-1][0]];
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	ee 0f       	add	r30, r30
    1c9a:	ff 1f       	adc	r31, r31
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	df 01       	movw	r26, r30
    1ca2:	a3 58       	subi	r26, 0x83	; 131
    1ca4:	bb 4f       	sbci	r27, 0xFB	; 251
    1ca6:	ed 90       	ld	r14, X+
    1ca8:	fc 90       	ld	r15, X
    1caa:	d7 01       	movw	r26, r14
    1cac:	aa 0f       	add	r26, r26
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	a3 5e       	subi	r26, 0xE3	; 227
    1cb2:	bb 4f       	sbci	r27, 0xFB	; 251
    1cb4:	4d 91       	ld	r20, X+
    1cb6:	5c 91       	ld	r21, X
    1cb8:	e1 58       	subi	r30, 0x81	; 129
    1cba:	fb 4f       	sbci	r31, 0xFB	; 251
				nxtNode=node[botloc-1][0];
				pos=0;
    1cbc:	06 2d       	mov	r16, r6
    1cbe:	15 2d       	mov	r17, r5
				for(i=1;i<4;i++)
    1cc0:	87 2d       	mov	r24, r7
    1cc2:	94 2d       	mov	r25, r4
				{
					if(node[botloc-1][i]!=0)
    1cc4:	21 91       	ld	r18, Z+
    1cc6:	31 91       	ld	r19, Z+
    1cc8:	21 15       	cp	r18, r1
    1cca:	31 05       	cpc	r19, r1
    1ccc:	69 f0       	breq	.+26     	; 0x1ce8 <main+0x30a>
					if(cost[node[botloc-1][i]]<minCost)
    1cce:	d9 01       	movw	r26, r18
    1cd0:	aa 0f       	add	r26, r26
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	a3 5e       	subi	r26, 0xE3	; 227
    1cd6:	bb 4f       	sbci	r27, 0xFB	; 251
    1cd8:	6d 91       	ld	r22, X+
    1cda:	7c 91       	ld	r23, X
    1cdc:	64 17       	cp	r22, r20
    1cde:	75 07       	cpc	r23, r21
    1ce0:	1c f4       	brge	.+6      	; 0x1ce8 <main+0x30a>
    1ce2:	8c 01       	movw	r16, r24
					{
						minCost=cost[node[botloc-1][i]];
						nxtNode=node[botloc-1][i];
    1ce4:	79 01       	movw	r14, r18
				for(i=1;i<4;i++)
				{
					if(node[botloc-1][i]!=0)
					if(cost[node[botloc-1][i]]<minCost)
					{
						minCost=cost[node[botloc-1][i]];
    1ce6:	ab 01       	movw	r20, r22
			while(cost[botloc-1]!=0)
			{
				minCost=cost[node[botloc-1][0]];
				nxtNode=node[botloc-1][0];
				pos=0;
				for(i=1;i<4;i++)
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	84 30       	cpi	r24, 0x04	; 4
    1cec:	91 05       	cpc	r25, r1
    1cee:	51 f7       	brne	.-44     	; 0x1cc4 <main+0x2e6>
    1cf0:	58 01       	movw	r10, r16
    1cf2:	97 01       	movw	r18, r14
						minCost=cost[node[botloc-1][i]];
						nxtNode=node[botloc-1][i];
						pos=i;
					}
				}
				while(otherBotMovingTo==nxtNode);
    1cf4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <otherBotMovingTo>
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	d1 f3       	breq	.-12     	; 0x1cf4 <main+0x316>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d00:	88 81       	ld	r24, Y
    1d02:	85 ff       	sbrs	r24, 5
    1d04:	fd cf       	rjmp	.-6      	; 0x1d00 <main+0x322>
	UDR0 = data;
    1d06:	f6 01       	movw	r30, r12
    1d08:	90 82       	st	Z, r9

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    1d0a:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d0c:	88 81       	ld	r24, Y
    1d0e:	85 ff       	sbrs	r24, 5
    1d10:	fd cf       	rjmp	.-6      	; 0x1d0c <main+0x32e>
	UDR0 = data;
    1d12:	f6 01       	movw	r30, r12
    1d14:	20 83       	st	Z, r18
					}
				}
				while(otherBotMovingTo==nxtNode);
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
    1d16:	c5 01       	movw	r24, r10
    1d18:	f8 dc       	rcall	.-1552   	; 0x170a <move>
				if(taskDone==0)
    1d1a:	89 2b       	or	r24, r25
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <main+0x342>
    1d1e:	54 c0       	rjmp	.+168    	; 0x1dc8 <main+0x3ea>
				{
					for(i=0;i<4;i++)
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
    1d20:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <botloc>
    1d24:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <botloc+0x1>
    1d28:	11 97       	sbiw	r26, 0x01	; 1
    1d2a:	23 2d       	mov	r18, r3
    1d2c:	32 2d       	mov	r19, r2
    1d2e:	aa 0f       	add	r26, r26
    1d30:	bb 1f       	adc	r27, r27
    1d32:	aa 0f       	add	r26, r26
    1d34:	bb 1f       	adc	r27, r27
    1d36:	a0 0f       	add	r26, r16
    1d38:	b1 1f       	adc	r27, r17
    1d3a:	aa 0f       	add	r26, r26
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	a3 58       	subi	r26, 0x83	; 131
    1d40:	bb 4f       	sbci	r27, 0xFB	; 251
    1d42:	8d 91       	ld	r24, X+
    1d44:	9c 91       	ld	r25, X
    1d46:	11 97       	sbiw	r26, 0x01	; 1
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	ee 0f       	add	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	ee 0f       	add	r30, r30
    1d52:	ff 1f       	adc	r31, r31
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	ee 0f       	add	r30, r30
    1d5a:	ff 1f       	adc	r31, r31
    1d5c:	e3 58       	subi	r30, 0x83	; 131
    1d5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d60:	40 81       	ld	r20, Z
    1d62:	51 81       	ldd	r21, Z+1	; 0x01
    1d64:	4e 15       	cp	r20, r14
    1d66:	5f 05       	cpc	r21, r15
    1d68:	69 f4       	brne	.+26     	; 0x1d84 <main+0x3a6>
					node[node[botloc-1][pos]-1][i]=0;
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	e2 0f       	add	r30, r18
    1d76:	f3 1f       	adc	r31, r19
    1d78:	ee 0f       	add	r30, r30
    1d7a:	ff 1f       	adc	r31, r31
    1d7c:	e3 58       	subi	r30, 0x83	; 131
    1d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
				SendNextNode(nxtNode);
				//while(otherBotLocation==nxtNode);
				taskDone=move(pos);
				if(taskDone==0)
				{
					for(i=0;i<4;i++)
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	24 30       	cpi	r18, 0x04	; 4
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	d1 f6       	brne	.-76     	; 0x1d42 <main+0x364>
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
					node[node[botloc-1][pos]-1][i]=0;
					node[botloc-1][pos]=0;
    1d8e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <botloc>
    1d92:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <botloc+0x1>
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	fc 01       	movw	r30, r24
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	ee 0f       	add	r30, r30
    1da0:	ff 1f       	adc	r31, r31
    1da2:	e0 0f       	add	r30, r16
    1da4:	f1 1f       	adc	r31, r17
    1da6:	ee 0f       	add	r30, r30
    1da8:	ff 1f       	adc	r31, r31
    1daa:	e3 58       	subi	r30, 0x83	; 131
    1dac:	fb 4f       	sbci	r31, 0xFB	; 251
    1dae:	11 82       	std	Z+1, r1	; 0x01
    1db0:	10 82       	st	Z, r1
				{
					botloc=node[botloc-1][pos];
					SendNodeReached(botloc);
				}
			}
			if(cost[botloc-1]==0)
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	fc 01       	movw	r30, r24
    1db8:	e3 5e       	subi	r30, 0xE3	; 227
    1dba:	fb 4f       	sbci	r31, 0xFB	; 251
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	89 2b       	or	r24, r25
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <main+0x3e8>
    1dc4:	62 c0       	rjmp	.+196    	; 0x1e8a <main+0x4ac>
    1dc6:	2f c0       	rjmp	.+94     	; 0x1e26 <main+0x448>
					node[botloc-1][pos]=0;
					break;
				}
				else
				{
					botloc=node[botloc-1][pos];
    1dc8:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1dcc:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1dd0:	31 97       	sbiw	r30, 0x01	; 1
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	ea 0d       	add	r30, r10
    1ddc:	fb 1d       	adc	r31, r11
    1dde:	ee 0f       	add	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	e3 58       	subi	r30, 0x83	; 131
    1de4:	fb 4f       	sbci	r31, 0xFB	; 251
    1de6:	90 81       	ld	r25, Z
    1de8:	81 81       	ldd	r24, Z+1	; 0x01
    1dea:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <botloc>
    1dee:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1df2:	88 81       	ld	r24, Y
    1df4:	85 ff       	sbrs	r24, 5
    1df6:	fd cf       	rjmp	.-6      	; 0x1df2 <main+0x414>
	UDR0 = data;
    1df8:	f6 01       	movw	r30, r12
    1dfa:	80 82       	st	Z, r8

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    1dfc:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1dfe:	88 81       	ld	r24, Y
    1e00:	85 ff       	sbrs	r24, 5
    1e02:	fd cf       	rjmp	.-6      	; 0x1dfe <main+0x420>
	UDR0 = data;
    1e04:	f6 01       	movw	r30, r12
    1e06:	90 83       	st	Z, r25
		{	int taskDone=0;
			int i,minCost,nxtNode,pos;
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
			if(cost[botloc-1]==0)
			taskDone=1;       // In Case the Bot is Already in the Dest Node.
			while(cost[botloc-1]!=0)
    1e08:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <botloc>
    1e0c:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <botloc+0x1>
    1e10:	31 97       	sbiw	r30, 0x01	; 1
    1e12:	df 01       	movw	r26, r30
    1e14:	aa 0f       	add	r26, r26
    1e16:	bb 1f       	adc	r27, r27
    1e18:	a3 5e       	subi	r26, 0xE3	; 227
    1e1a:	bb 4f       	sbci	r27, 0xFB	; 251
    1e1c:	8d 91       	ld	r24, X+
    1e1e:	9c 91       	ld	r25, X
    1e20:	89 2b       	or	r24, r25
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <main+0x448>
    1e24:	37 cf       	rjmp	.-402    	; 0x1c94 <main+0x2b6>
					SendNodeReached(botloc);
				}
			}
			if(cost[botloc-1]==0)
			{
				while(noteToStrike!=tasks[taskitr]);
    1e26:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <taskitr>
    1e2a:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <taskitr+0x1>
    1e2e:	ef 50       	subi	r30, 0x0F	; 15
    1e30:	fc 4f       	sbci	r31, 0xFC	; 252
    1e32:	90 81       	ld	r25, Z
    1e34:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1e38:	98 13       	cpse	r25, r24
    1e3a:	fb cf       	rjmp	.-10     	; 0x1e32 <main+0x454>
				// Servo Motor Control
				// Strike the Note
				buzzer_on();
    1e3c:	a7 d9       	rcall	.-3250   	; 0x118c <buzzer_on>
    1e3e:	ff ef       	ldi	r31, 0xFF	; 255
    1e40:	2f e7       	ldi	r18, 0x7F	; 127
    1e42:	36 e1       	ldi	r19, 0x16	; 22
    1e44:	f1 50       	subi	r31, 0x01	; 1
    1e46:	20 40       	sbci	r18, 0x00	; 0
    1e48:	30 40       	sbci	r19, 0x00	; 0
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <main+0x466>
    1e4c:	00 c0       	rjmp	.+0      	; 0x1e4e <main+0x470>
    1e4e:	00 00       	nop
				_delay_ms(500);
				buzzer_off();
    1e50:	a1 d9       	rcall	.-3262   	; 0x1194 <buzzer_off>
				taskitr++;
    1e52:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <taskitr>
    1e56:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <taskitr+0x1>
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <taskitr+0x1>
    1e60:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <taskitr>
				SendNoteStruck(noteToStrike);
    1e64:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <noteToStrike>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e68:	88 81       	ld	r24, Y
    1e6a:	85 ff       	sbrs	r24, 5
    1e6c:	fd cf       	rjmp	.-6      	; 0x1e68 <main+0x48a>
	UDR0 = data;
    1e6e:	86 e0       	ldi	r24, 0x06	; 6
    1e70:	f6 01       	movw	r30, r12
    1e72:	80 83       	st	Z, r24

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    1e74:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e76:	88 81       	ld	r24, Y
    1e78:	85 ff       	sbrs	r24, 5
    1e7a:	fd cf       	rjmp	.-6      	; 0x1e76 <main+0x498>
	UDR0 = data;
    1e7c:	f6 01       	movw	r30, r12
    1e7e:	90 83       	st	Z, r25
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    1e80:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <noteToStrike>
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <noteToStrike>
	SendNotesToSlave();
	PORTJ = 0x0F;
lcd_string("Sent!");
	#endif
	
	while(notes[(int)noteToStrike]!=0)
    1e8a:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <noteToStrike>
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	e9 5f       	subi	r30, 0xF9	; 249
    1e92:	fb 4f       	sbci	r31, 0xFB	; 251
    1e94:	80 81       	ld	r24, Z
    1e96:	81 11       	cpse	r24, r1
    1e98:	2d ce       	rjmp	.-934    	; 0x1af4 <main+0x116>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1e9a:	e0 ec       	ldi	r30, 0xC0	; 192
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	85 ff       	sbrs	r24, 5
    1ea2:	fd cf       	rjmp	.-6      	; 0x1e9e <main+0x4c0>
	UDR0 = data;
    1ea4:	8a e0       	ldi	r24, 0x0A	; 10
    1ea6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1eaa:	e0 ec       	ldi	r30, 0xC0	; 192
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	85 ff       	sbrs	r24, 5
    1eb2:	fd cf       	rjmp	.-6      	; 0x1eae <main+0x4d0>
	UDR0 = data;
    1eb4:	80 e8       	ldi	r24, 0x80	; 128
    1eb6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			}
		}
		
	}
	BotEnded();
	while(botEnd!=1);
    1eba:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <botEnd>
    1ebe:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <botEnd+0x1>
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	e9 f7       	brne	.-6      	; 0x1ec2 <main+0x4e4>
	buzzer_on();
    1ec8:	61 d9       	rcall	.-3390   	; 0x118c <buzzer_on>
    1eca:	ff ef       	ldi	r31, 0xFF	; 255
    1ecc:	2f ef       	ldi	r18, 0xFF	; 255
    1ece:	30 ee       	ldi	r19, 0xE0	; 224
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	f1 50       	subi	r31, 0x01	; 1
    1ed4:	20 40       	sbci	r18, 0x00	; 0
    1ed6:	30 40       	sbci	r19, 0x00	; 0
    1ed8:	40 40       	sbci	r20, 0x00	; 0
    1eda:	d9 f7       	brne	.-10     	; 0x1ed2 <main+0x4f4>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <main+0x500>
    1ede:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    1ee0:	59 d9       	rcall	.-3406   	; 0x1194 <buzzer_off>
	return 0;
}
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	df 90       	pop	r13
    1ef4:	cf 90       	pop	r12
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	9f 90       	pop	r9
    1efc:	8f 90       	pop	r8
    1efe:	7f 90       	pop	r7
    1f00:	6f 90       	pop	r6
    1f02:	5f 90       	pop	r5
    1f04:	4f 90       	pop	r4
    1f06:	3f 90       	pop	r3
    1f08:	2f 90       	pop	r2
    1f0a:	08 95       	ret

00001f0c <__divsf3>:
    1f0c:	0c d0       	rcall	.+24     	; 0x1f26 <__divsf3x>
    1f0e:	e6 c0       	rjmp	.+460    	; 0x20dc <__fp_round>
    1f10:	de d0       	rcall	.+444    	; 0x20ce <__fp_pscB>
    1f12:	40 f0       	brcs	.+16     	; 0x1f24 <__divsf3+0x18>
    1f14:	d5 d0       	rcall	.+426    	; 0x20c0 <__fp_pscA>
    1f16:	30 f0       	brcs	.+12     	; 0x1f24 <__divsf3+0x18>
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <__divsf3+0x16>
    1f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <__divsf3+0x18>
    1f1e:	c7 c0       	rjmp	.+398    	; 0x20ae <__fp_inf>
    1f20:	51 11       	cpse	r21, r1
    1f22:	10 c1       	rjmp	.+544    	; 0x2144 <__fp_szero>
    1f24:	ca c0       	rjmp	.+404    	; 0x20ba <__fp_nan>

00001f26 <__divsf3x>:
    1f26:	eb d0       	rcall	.+470    	; 0x20fe <__fp_split3>
    1f28:	98 f3       	brcs	.-26     	; 0x1f10 <__divsf3+0x4>

00001f2a <__divsf3_pse>:
    1f2a:	99 23       	and	r25, r25
    1f2c:	c9 f3       	breq	.-14     	; 0x1f20 <__divsf3+0x14>
    1f2e:	55 23       	and	r21, r21
    1f30:	b1 f3       	breq	.-20     	; 0x1f1e <__divsf3+0x12>
    1f32:	95 1b       	sub	r25, r21
    1f34:	55 0b       	sbc	r21, r21
    1f36:	bb 27       	eor	r27, r27
    1f38:	aa 27       	eor	r26, r26
    1f3a:	62 17       	cp	r22, r18
    1f3c:	73 07       	cpc	r23, r19
    1f3e:	84 07       	cpc	r24, r20
    1f40:	38 f0       	brcs	.+14     	; 0x1f50 <__divsf3_pse+0x26>
    1f42:	9f 5f       	subi	r25, 0xFF	; 255
    1f44:	5f 4f       	sbci	r21, 0xFF	; 255
    1f46:	22 0f       	add	r18, r18
    1f48:	33 1f       	adc	r19, r19
    1f4a:	44 1f       	adc	r20, r20
    1f4c:	aa 1f       	adc	r26, r26
    1f4e:	a9 f3       	breq	.-22     	; 0x1f3a <__divsf3_pse+0x10>
    1f50:	33 d0       	rcall	.+102    	; 0x1fb8 <__divsf3_pse+0x8e>
    1f52:	0e 2e       	mov	r0, r30
    1f54:	3a f0       	brmi	.+14     	; 0x1f64 <__divsf3_pse+0x3a>
    1f56:	e0 e8       	ldi	r30, 0x80	; 128
    1f58:	30 d0       	rcall	.+96     	; 0x1fba <__divsf3_pse+0x90>
    1f5a:	91 50       	subi	r25, 0x01	; 1
    1f5c:	50 40       	sbci	r21, 0x00	; 0
    1f5e:	e6 95       	lsr	r30
    1f60:	00 1c       	adc	r0, r0
    1f62:	ca f7       	brpl	.-14     	; 0x1f56 <__divsf3_pse+0x2c>
    1f64:	29 d0       	rcall	.+82     	; 0x1fb8 <__divsf3_pse+0x8e>
    1f66:	fe 2f       	mov	r31, r30
    1f68:	27 d0       	rcall	.+78     	; 0x1fb8 <__divsf3_pse+0x8e>
    1f6a:	66 0f       	add	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	88 1f       	adc	r24, r24
    1f70:	bb 1f       	adc	r27, r27
    1f72:	26 17       	cp	r18, r22
    1f74:	37 07       	cpc	r19, r23
    1f76:	48 07       	cpc	r20, r24
    1f78:	ab 07       	cpc	r26, r27
    1f7a:	b0 e8       	ldi	r27, 0x80	; 128
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <__divsf3_pse+0x56>
    1f7e:	bb 0b       	sbc	r27, r27
    1f80:	80 2d       	mov	r24, r0
    1f82:	bf 01       	movw	r22, r30
    1f84:	ff 27       	eor	r31, r31
    1f86:	93 58       	subi	r25, 0x83	; 131
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	2a f0       	brmi	.+10     	; 0x1f96 <__divsf3_pse+0x6c>
    1f8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f8e:	51 05       	cpc	r21, r1
    1f90:	68 f0       	brcs	.+26     	; 0x1fac <__divsf3_pse+0x82>
    1f92:	8d c0       	rjmp	.+282    	; 0x20ae <__fp_inf>
    1f94:	d7 c0       	rjmp	.+430    	; 0x2144 <__fp_szero>
    1f96:	5f 3f       	cpi	r21, 0xFF	; 255
    1f98:	ec f3       	brlt	.-6      	; 0x1f94 <__divsf3_pse+0x6a>
    1f9a:	98 3e       	cpi	r25, 0xE8	; 232
    1f9c:	dc f3       	brlt	.-10     	; 0x1f94 <__divsf3_pse+0x6a>
    1f9e:	86 95       	lsr	r24
    1fa0:	77 95       	ror	r23
    1fa2:	67 95       	ror	r22
    1fa4:	b7 95       	ror	r27
    1fa6:	f7 95       	ror	r31
    1fa8:	9f 5f       	subi	r25, 0xFF	; 255
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <__divsf3_pse+0x74>
    1fac:	88 0f       	add	r24, r24
    1fae:	91 1d       	adc	r25, r1
    1fb0:	96 95       	lsr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	08 95       	ret
    1fb8:	e1 e0       	ldi	r30, 0x01	; 1
    1fba:	66 0f       	add	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	62 17       	cp	r22, r18
    1fc4:	73 07       	cpc	r23, r19
    1fc6:	84 07       	cpc	r24, r20
    1fc8:	ba 07       	cpc	r27, r26
    1fca:	20 f0       	brcs	.+8      	; 0x1fd4 <__divsf3_pse+0xaa>
    1fcc:	62 1b       	sub	r22, r18
    1fce:	73 0b       	sbc	r23, r19
    1fd0:	84 0b       	sbc	r24, r20
    1fd2:	ba 0b       	sbc	r27, r26
    1fd4:	ee 1f       	adc	r30, r30
    1fd6:	88 f7       	brcc	.-30     	; 0x1fba <__divsf3_pse+0x90>
    1fd8:	e0 95       	com	r30
    1fda:	08 95       	ret

00001fdc <__fixunssfsi>:
    1fdc:	98 d0       	rcall	.+304    	; 0x210e <__fp_splitA>
    1fde:	88 f0       	brcs	.+34     	; 0x2002 <__fixunssfsi+0x26>
    1fe0:	9f 57       	subi	r25, 0x7F	; 127
    1fe2:	90 f0       	brcs	.+36     	; 0x2008 <__fixunssfsi+0x2c>
    1fe4:	b9 2f       	mov	r27, r25
    1fe6:	99 27       	eor	r25, r25
    1fe8:	b7 51       	subi	r27, 0x17	; 23
    1fea:	a0 f0       	brcs	.+40     	; 0x2014 <__fixunssfsi+0x38>
    1fec:	d1 f0       	breq	.+52     	; 0x2022 <__fixunssfsi+0x46>
    1fee:	66 0f       	add	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	88 1f       	adc	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	1a f0       	brmi	.+6      	; 0x1ffe <__fixunssfsi+0x22>
    1ff8:	ba 95       	dec	r27
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__fixunssfsi+0x12>
    1ffc:	12 c0       	rjmp	.+36     	; 0x2022 <__fixunssfsi+0x46>
    1ffe:	b1 30       	cpi	r27, 0x01	; 1
    2000:	81 f0       	breq	.+32     	; 0x2022 <__fixunssfsi+0x46>
    2002:	9f d0       	rcall	.+318    	; 0x2142 <__fp_zero>
    2004:	b1 e0       	ldi	r27, 0x01	; 1
    2006:	08 95       	ret
    2008:	9c c0       	rjmp	.+312    	; 0x2142 <__fp_zero>
    200a:	67 2f       	mov	r22, r23
    200c:	78 2f       	mov	r23, r24
    200e:	88 27       	eor	r24, r24
    2010:	b8 5f       	subi	r27, 0xF8	; 248
    2012:	39 f0       	breq	.+14     	; 0x2022 <__fixunssfsi+0x46>
    2014:	b9 3f       	cpi	r27, 0xF9	; 249
    2016:	cc f3       	brlt	.-14     	; 0x200a <__fixunssfsi+0x2e>
    2018:	86 95       	lsr	r24
    201a:	77 95       	ror	r23
    201c:	67 95       	ror	r22
    201e:	b3 95       	inc	r27
    2020:	d9 f7       	brne	.-10     	; 0x2018 <__fixunssfsi+0x3c>
    2022:	3e f4       	brtc	.+14     	; 0x2032 <__fixunssfsi+0x56>
    2024:	90 95       	com	r25
    2026:	80 95       	com	r24
    2028:	70 95       	com	r23
    202a:	61 95       	neg	r22
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	8f 4f       	sbci	r24, 0xFF	; 255
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	08 95       	ret

00002034 <__floatunsisf>:
    2034:	e8 94       	clt
    2036:	09 c0       	rjmp	.+18     	; 0x204a <__floatsisf+0x12>

00002038 <__floatsisf>:
    2038:	97 fb       	bst	r25, 7
    203a:	3e f4       	brtc	.+14     	; 0x204a <__floatsisf+0x12>
    203c:	90 95       	com	r25
    203e:	80 95       	com	r24
    2040:	70 95       	com	r23
    2042:	61 95       	neg	r22
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	99 23       	and	r25, r25
    204c:	a9 f0       	breq	.+42     	; 0x2078 <__floatsisf+0x40>
    204e:	f9 2f       	mov	r31, r25
    2050:	96 e9       	ldi	r25, 0x96	; 150
    2052:	bb 27       	eor	r27, r27
    2054:	93 95       	inc	r25
    2056:	f6 95       	lsr	r31
    2058:	87 95       	ror	r24
    205a:	77 95       	ror	r23
    205c:	67 95       	ror	r22
    205e:	b7 95       	ror	r27
    2060:	f1 11       	cpse	r31, r1
    2062:	f8 cf       	rjmp	.-16     	; 0x2054 <__floatsisf+0x1c>
    2064:	fa f4       	brpl	.+62     	; 0x20a4 <__floatsisf+0x6c>
    2066:	bb 0f       	add	r27, r27
    2068:	11 f4       	brne	.+4      	; 0x206e <__floatsisf+0x36>
    206a:	60 ff       	sbrs	r22, 0
    206c:	1b c0       	rjmp	.+54     	; 0x20a4 <__floatsisf+0x6c>
    206e:	6f 5f       	subi	r22, 0xFF	; 255
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	8f 4f       	sbci	r24, 0xFF	; 255
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	16 c0       	rjmp	.+44     	; 0x20a4 <__floatsisf+0x6c>
    2078:	88 23       	and	r24, r24
    207a:	11 f0       	breq	.+4      	; 0x2080 <__floatsisf+0x48>
    207c:	96 e9       	ldi	r25, 0x96	; 150
    207e:	11 c0       	rjmp	.+34     	; 0x20a2 <__floatsisf+0x6a>
    2080:	77 23       	and	r23, r23
    2082:	21 f0       	breq	.+8      	; 0x208c <__floatsisf+0x54>
    2084:	9e e8       	ldi	r25, 0x8E	; 142
    2086:	87 2f       	mov	r24, r23
    2088:	76 2f       	mov	r23, r22
    208a:	05 c0       	rjmp	.+10     	; 0x2096 <__floatsisf+0x5e>
    208c:	66 23       	and	r22, r22
    208e:	71 f0       	breq	.+28     	; 0x20ac <__floatsisf+0x74>
    2090:	96 e8       	ldi	r25, 0x86	; 134
    2092:	86 2f       	mov	r24, r22
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	2a f0       	brmi	.+10     	; 0x20a4 <__floatsisf+0x6c>
    209a:	9a 95       	dec	r25
    209c:	66 0f       	add	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	da f7       	brpl	.-10     	; 0x209a <__floatsisf+0x62>
    20a4:	88 0f       	add	r24, r24
    20a6:	96 95       	lsr	r25
    20a8:	87 95       	ror	r24
    20aa:	97 f9       	bld	r25, 7
    20ac:	08 95       	ret

000020ae <__fp_inf>:
    20ae:	97 f9       	bld	r25, 7
    20b0:	9f 67       	ori	r25, 0x7F	; 127
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	08 95       	ret

000020ba <__fp_nan>:
    20ba:	9f ef       	ldi	r25, 0xFF	; 255
    20bc:	80 ec       	ldi	r24, 0xC0	; 192
    20be:	08 95       	ret

000020c0 <__fp_pscA>:
    20c0:	00 24       	eor	r0, r0
    20c2:	0a 94       	dec	r0
    20c4:	16 16       	cp	r1, r22
    20c6:	17 06       	cpc	r1, r23
    20c8:	18 06       	cpc	r1, r24
    20ca:	09 06       	cpc	r0, r25
    20cc:	08 95       	ret

000020ce <__fp_pscB>:
    20ce:	00 24       	eor	r0, r0
    20d0:	0a 94       	dec	r0
    20d2:	12 16       	cp	r1, r18
    20d4:	13 06       	cpc	r1, r19
    20d6:	14 06       	cpc	r1, r20
    20d8:	05 06       	cpc	r0, r21
    20da:	08 95       	ret

000020dc <__fp_round>:
    20dc:	09 2e       	mov	r0, r25
    20de:	03 94       	inc	r0
    20e0:	00 0c       	add	r0, r0
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <__fp_round+0xc>
    20e4:	88 23       	and	r24, r24
    20e6:	52 f0       	brmi	.+20     	; 0x20fc <__fp_round+0x20>
    20e8:	bb 0f       	add	r27, r27
    20ea:	40 f4       	brcc	.+16     	; 0x20fc <__fp_round+0x20>
    20ec:	bf 2b       	or	r27, r31
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <__fp_round+0x18>
    20f0:	60 ff       	sbrs	r22, 0
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <__fp_round+0x20>
    20f4:	6f 5f       	subi	r22, 0xFF	; 255
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	08 95       	ret

000020fe <__fp_split3>:
    20fe:	57 fd       	sbrc	r21, 7
    2100:	90 58       	subi	r25, 0x80	; 128
    2102:	44 0f       	add	r20, r20
    2104:	55 1f       	adc	r21, r21
    2106:	59 f0       	breq	.+22     	; 0x211e <__fp_splitA+0x10>
    2108:	5f 3f       	cpi	r21, 0xFF	; 255
    210a:	71 f0       	breq	.+28     	; 0x2128 <__fp_splitA+0x1a>
    210c:	47 95       	ror	r20

0000210e <__fp_splitA>:
    210e:	88 0f       	add	r24, r24
    2110:	97 fb       	bst	r25, 7
    2112:	99 1f       	adc	r25, r25
    2114:	61 f0       	breq	.+24     	; 0x212e <__fp_splitA+0x20>
    2116:	9f 3f       	cpi	r25, 0xFF	; 255
    2118:	79 f0       	breq	.+30     	; 0x2138 <__fp_splitA+0x2a>
    211a:	87 95       	ror	r24
    211c:	08 95       	ret
    211e:	12 16       	cp	r1, r18
    2120:	13 06       	cpc	r1, r19
    2122:	14 06       	cpc	r1, r20
    2124:	55 1f       	adc	r21, r21
    2126:	f2 cf       	rjmp	.-28     	; 0x210c <__fp_split3+0xe>
    2128:	46 95       	lsr	r20
    212a:	f1 df       	rcall	.-30     	; 0x210e <__fp_splitA>
    212c:	08 c0       	rjmp	.+16     	; 0x213e <__fp_splitA+0x30>
    212e:	16 16       	cp	r1, r22
    2130:	17 06       	cpc	r1, r23
    2132:	18 06       	cpc	r1, r24
    2134:	99 1f       	adc	r25, r25
    2136:	f1 cf       	rjmp	.-30     	; 0x211a <__fp_splitA+0xc>
    2138:	86 95       	lsr	r24
    213a:	71 05       	cpc	r23, r1
    213c:	61 05       	cpc	r22, r1
    213e:	08 94       	sec
    2140:	08 95       	ret

00002142 <__fp_zero>:
    2142:	e8 94       	clt

00002144 <__fp_szero>:
    2144:	bb 27       	eor	r27, r27
    2146:	66 27       	eor	r22, r22
    2148:	77 27       	eor	r23, r23
    214a:	cb 01       	movw	r24, r22
    214c:	97 f9       	bld	r25, 7
    214e:	08 95       	ret

00002150 <__gesf2>:
    2150:	03 d0       	rcall	.+6      	; 0x2158 <__fp_cmp>
    2152:	08 f4       	brcc	.+2      	; 0x2156 <__gesf2+0x6>
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	08 95       	ret

00002158 <__fp_cmp>:
    2158:	99 0f       	add	r25, r25
    215a:	00 08       	sbc	r0, r0
    215c:	55 0f       	add	r21, r21
    215e:	aa 0b       	sbc	r26, r26
    2160:	e0 e8       	ldi	r30, 0x80	; 128
    2162:	fe ef       	ldi	r31, 0xFE	; 254
    2164:	16 16       	cp	r1, r22
    2166:	17 06       	cpc	r1, r23
    2168:	e8 07       	cpc	r30, r24
    216a:	f9 07       	cpc	r31, r25
    216c:	c0 f0       	brcs	.+48     	; 0x219e <__fp_cmp+0x46>
    216e:	12 16       	cp	r1, r18
    2170:	13 06       	cpc	r1, r19
    2172:	e4 07       	cpc	r30, r20
    2174:	f5 07       	cpc	r31, r21
    2176:	98 f0       	brcs	.+38     	; 0x219e <__fp_cmp+0x46>
    2178:	62 1b       	sub	r22, r18
    217a:	73 0b       	sbc	r23, r19
    217c:	84 0b       	sbc	r24, r20
    217e:	95 0b       	sbc	r25, r21
    2180:	39 f4       	brne	.+14     	; 0x2190 <__fp_cmp+0x38>
    2182:	0a 26       	eor	r0, r26
    2184:	61 f0       	breq	.+24     	; 0x219e <__fp_cmp+0x46>
    2186:	23 2b       	or	r18, r19
    2188:	24 2b       	or	r18, r20
    218a:	25 2b       	or	r18, r21
    218c:	21 f4       	brne	.+8      	; 0x2196 <__fp_cmp+0x3e>
    218e:	08 95       	ret
    2190:	0a 26       	eor	r0, r26
    2192:	09 f4       	brne	.+2      	; 0x2196 <__fp_cmp+0x3e>
    2194:	a1 40       	sbci	r26, 0x01	; 1
    2196:	a6 95       	lsr	r26
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	81 1d       	adc	r24, r1
    219c:	81 1d       	adc	r24, r1
    219e:	08 95       	ret

000021a0 <__tablejump2__>:
    21a0:	ee 0f       	add	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	88 1f       	adc	r24, r24
    21a6:	8b bf       	out	0x3b, r24	; 59
    21a8:	07 90       	elpm	r0, Z+
    21aa:	f6 91       	elpm	r31, Z
    21ac:	e0 2d       	mov	r30, r0
    21ae:	19 94       	eijmp

000021b0 <_exit>:
    21b0:	f8 94       	cli

000021b2 <__stop_program>:
    21b2:	ff cf       	rjmp	.-2      	; 0x21b2 <__stop_program>
