
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ac  00800200  000034e2  00003576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000043a  008005ac  008005ac  00003922  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003713  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001070  00000000  00000000  000072af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024cc  00000000  00000000  0000831f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  0000a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cdc  00000000  00000000  0000aec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002023  00000000  00000000  0000bba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000dbc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_5>
      18:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_6>
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_51>
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	36 c0       	rjmp	.+108    	; 0x146 <__bad_interrupt>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6a 09       	sbc	r22, r10
      e6:	96 0a       	sbc	r9, r22
      e8:	8a 09       	sbc	r24, r10
      ea:	a2 09       	sbc	r26, r2
      ec:	a5 09       	sbc	r26, r5
      ee:	a8 09       	sbc	r26, r8
      f0:	b2 09       	sbc	r27, r2
      f2:	bc 09       	sbc	r27, r12
      f4:	c2 09       	sbc	r28, r2
      f6:	81 0a       	sbc	r8, r17
      f8:	7a 09       	sbc	r23, r10
      fa:	96 0a       	sbc	r9, r22
      fc:	96 09       	sbc	r25, r6
      fe:	c8 09       	sbc	r28, r8
     100:	c5 09       	sbc	r28, r5
     102:	57 0a       	sbc	r5, r23

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	15 e0       	ldi	r17, 0x05	; 5
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	e2 ee       	ldi	r30, 0xE2	; 226
     11c:	f4 e3       	ldi	r31, 0x34	; 52
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	ac 3a       	cpi	r26, 0xAC	; 172
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	29 e0       	ldi	r18, 0x09	; 9
     130:	ac ea       	ldi	r26, 0xAC	; 172
     132:	b5 e0       	ldi	r27, 0x05	; 5
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a6 3e       	cpi	r26, 0xE6	; 230
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <main>
     142:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <uart_putchar>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     148:	e0 ed       	ldi	r30, 0xD0	; 208
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	90 81       	ld	r25, Z
     14e:	95 ff       	sbrs	r25, 5
     150:	fd cf       	rjmp	.-6      	; 0x14c <uart_putchar+0x4>
     152:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     156:	08 95       	ret

00000158 <lcd_port_config>:
     158:	87 b1       	in	r24, 0x07	; 7
     15a:	87 6f       	ori	r24, 0xF7	; 247
     15c:	87 b9       	out	0x07, r24	; 7
     15e:	88 b1       	in	r24, 0x08	; 8
     160:	80 78       	andi	r24, 0x80	; 128
     162:	88 b9       	out	0x08, r24	; 8
     164:	08 95       	ret

00000166 <lcd_set_4bit>:
     166:	86 e6       	ldi	r24, 0x66	; 102
     168:	9e e0       	ldi	r25, 0x0E	; 14
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_set_4bit+0x4>
     16e:	00 00       	nop
     170:	40 98       	cbi	0x08, 0	; 8
     172:	41 98       	cbi	0x08, 1	; 8
     174:	80 e3       	ldi	r24, 0x30	; 48
     176:	88 b9       	out	0x08, r24	; 8
     178:	42 9a       	sbi	0x08, 2	; 8
     17a:	ef ef       	ldi	r30, 0xFF	; 255
     17c:	f7 e4       	ldi	r31, 0x47	; 71
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <lcd_set_4bit+0x18>
     182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_set_4bit+0x1e>
     184:	00 00       	nop
     186:	42 98       	cbi	0x08, 2	; 8
     188:	e6 e6       	ldi	r30, 0x66	; 102
     18a:	fe e0       	ldi	r31, 0x0E	; 14
     18c:	31 97       	sbiw	r30, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_set_4bit+0x26>
     190:	00 00       	nop
     192:	40 98       	cbi	0x08, 0	; 8
     194:	41 98       	cbi	0x08, 1	; 8
     196:	88 b9       	out	0x08, r24	; 8
     198:	42 9a       	sbi	0x08, 2	; 8
     19a:	ef ef       	ldi	r30, 0xFF	; 255
     19c:	f7 e4       	ldi	r31, 0x47	; 71
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_set_4bit+0x38>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_set_4bit+0x3e>
     1a4:	00 00       	nop
     1a6:	42 98       	cbi	0x08, 2	; 8
     1a8:	e6 e6       	ldi	r30, 0x66	; 102
     1aa:	fe e0       	ldi	r31, 0x0E	; 14
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_set_4bit+0x46>
     1b0:	00 00       	nop
     1b2:	40 98       	cbi	0x08, 0	; 8
     1b4:	41 98       	cbi	0x08, 1	; 8
     1b6:	88 b9       	out	0x08, r24	; 8
     1b8:	42 9a       	sbi	0x08, 2	; 8
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	97 e4       	ldi	r25, 0x47	; 71
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_set_4bit+0x58>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_set_4bit+0x5e>
     1c4:	00 00       	nop
     1c6:	42 98       	cbi	0x08, 2	; 8
     1c8:	e6 e6       	ldi	r30, 0x66	; 102
     1ca:	fe e0       	ldi	r31, 0x0E	; 14
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_set_4bit+0x66>
     1d0:	00 00       	nop
     1d2:	40 98       	cbi	0x08, 0	; 8
     1d4:	41 98       	cbi	0x08, 1	; 8
     1d6:	80 e2       	ldi	r24, 0x20	; 32
     1d8:	88 b9       	out	0x08, r24	; 8
     1da:	42 9a       	sbi	0x08, 2	; 8
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	97 e4       	ldi	r25, 0x47	; 71
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_set_4bit+0x7a>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_set_4bit+0x80>
     1e6:	00 00       	nop
     1e8:	42 98       	cbi	0x08, 2	; 8
     1ea:	08 95       	ret

000001ec <lcd_wr_command>:
     1ec:	98 b1       	in	r25, 0x08	; 8
     1ee:	9f 70       	andi	r25, 0x0F	; 15
     1f0:	98 b9       	out	0x08, r25	; 8
     1f2:	98 b1       	in	r25, 0x08	; 8
     1f4:	28 2f       	mov	r18, r24
     1f6:	20 7f       	andi	r18, 0xF0	; 240
     1f8:	92 2b       	or	r25, r18
     1fa:	98 b9       	out	0x08, r25	; 8
     1fc:	40 98       	cbi	0x08, 0	; 8
     1fe:	41 98       	cbi	0x08, 1	; 8
     200:	42 9a       	sbi	0x08, 2	; 8
     202:	ef ef       	ldi	r30, 0xFF	; 255
     204:	f7 e4       	ldi	r31, 0x47	; 71
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <lcd_wr_command+0x1a>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_wr_command+0x20>
     20c:	00 00       	nop
     20e:	42 98       	cbi	0x08, 2	; 8
     210:	98 b1       	in	r25, 0x08	; 8
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	98 b9       	out	0x08, r25	; 8
     216:	98 b1       	in	r25, 0x08	; 8
     218:	82 95       	swap	r24
     21a:	80 7f       	andi	r24, 0xF0	; 240
     21c:	89 2b       	or	r24, r25
     21e:	88 b9       	out	0x08, r24	; 8
     220:	40 98       	cbi	0x08, 0	; 8
     222:	41 98       	cbi	0x08, 1	; 8
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	97 e4       	ldi	r25, 0x47	; 71
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_wr_command+0x3e>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_wr_command+0x44>
     230:	00 00       	nop
     232:	42 98       	cbi	0x08, 2	; 8
     234:	08 95       	ret

00000236 <lcd_wr_char>:
     236:	98 b1       	in	r25, 0x08	; 8
     238:	9f 70       	andi	r25, 0x0F	; 15
     23a:	98 b9       	out	0x08, r25	; 8
     23c:	98 b1       	in	r25, 0x08	; 8
     23e:	28 2f       	mov	r18, r24
     240:	20 7f       	andi	r18, 0xF0	; 240
     242:	92 2b       	or	r25, r18
     244:	98 b9       	out	0x08, r25	; 8
     246:	40 9a       	sbi	0x08, 0	; 8
     248:	41 98       	cbi	0x08, 1	; 8
     24a:	42 9a       	sbi	0x08, 2	; 8
     24c:	ef ef       	ldi	r30, 0xFF	; 255
     24e:	f7 e4       	ldi	r31, 0x47	; 71
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_wr_char+0x1a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_wr_char+0x20>
     256:	00 00       	nop
     258:	42 98       	cbi	0x08, 2	; 8
     25a:	98 b1       	in	r25, 0x08	; 8
     25c:	9f 70       	andi	r25, 0x0F	; 15
     25e:	98 b9       	out	0x08, r25	; 8
     260:	98 b1       	in	r25, 0x08	; 8
     262:	82 95       	swap	r24
     264:	80 7f       	andi	r24, 0xF0	; 240
     266:	89 2b       	or	r24, r25
     268:	88 b9       	out	0x08, r24	; 8
     26a:	40 9a       	sbi	0x08, 0	; 8
     26c:	41 98       	cbi	0x08, 1	; 8
     26e:	42 9a       	sbi	0x08, 2	; 8
     270:	8f ef       	ldi	r24, 0xFF	; 255
     272:	97 e4       	ldi	r25, 0x47	; 71
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <lcd_wr_char+0x3e>
     278:	00 c0       	rjmp	.+0      	; 0x27a <lcd_wr_char+0x44>
     27a:	00 00       	nop
     27c:	42 98       	cbi	0x08, 2	; 8
     27e:	08 95       	ret

00000280 <lcd_home>:
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	b4 cf       	rjmp	.-152    	; 0x1ec <lcd_wr_command>
     284:	08 95       	ret

00000286 <lcd_string>:
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
     28c:	88 81       	ld	r24, Y
     28e:	88 23       	and	r24, r24
     290:	29 f0       	breq	.+10     	; 0x29c <lcd_string+0x16>
     292:	21 96       	adiw	r28, 0x01	; 1
     294:	d0 df       	rcall	.-96     	; 0x236 <lcd_wr_char>
     296:	89 91       	ld	r24, Y+
     298:	81 11       	cpse	r24, r1
     29a:	fc cf       	rjmp	.-8      	; 0x294 <lcd_string+0xe>
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <lcd_init>:
     2a2:	86 e6       	ldi	r24, 0x66	; 102
     2a4:	9e e0       	ldi	r25, 0x0E	; 14
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0x4>
     2aa:	00 00       	nop
     2ac:	88 e2       	ldi	r24, 0x28	; 40
     2ae:	9e df       	rcall	.-196    	; 0x1ec <lcd_wr_command>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	9c df       	rcall	.-200    	; 0x1ec <lcd_wr_command>
     2b4:	86 e0       	ldi	r24, 0x06	; 6
     2b6:	9a df       	rcall	.-204    	; 0x1ec <lcd_wr_command>
     2b8:	8e e0       	ldi	r24, 0x0E	; 14
     2ba:	98 df       	rcall	.-208    	; 0x1ec <lcd_wr_command>
     2bc:	80 e8       	ldi	r24, 0x80	; 128
     2be:	96 cf       	rjmp	.-212    	; 0x1ec <lcd_wr_command>
     2c0:	08 95       	ret

000002c2 <lcd_cursor>:
     2c2:	82 30       	cpi	r24, 0x02	; 2
     2c4:	69 f0       	breq	.+26     	; 0x2e0 <lcd_cursor+0x1e>
     2c6:	18 f4       	brcc	.+6      	; 0x2ce <lcd_cursor+0xc>
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	31 f0       	breq	.+12     	; 0x2d8 <lcd_cursor+0x16>
     2cc:	08 95       	ret
     2ce:	83 30       	cpi	r24, 0x03	; 3
     2d0:	59 f0       	breq	.+22     	; 0x2e8 <lcd_cursor+0x26>
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	69 f0       	breq	.+26     	; 0x2f0 <lcd_cursor+0x2e>
     2d6:	08 95       	ret
     2d8:	8f e7       	ldi	r24, 0x7F	; 127
     2da:	86 0f       	add	r24, r22
     2dc:	87 cf       	rjmp	.-242    	; 0x1ec <lcd_wr_command>
     2de:	08 95       	ret
     2e0:	8f eb       	ldi	r24, 0xBF	; 191
     2e2:	86 0f       	add	r24, r22
     2e4:	83 cf       	rjmp	.-250    	; 0x1ec <lcd_wr_command>
     2e6:	08 95       	ret
     2e8:	83 e9       	ldi	r24, 0x93	; 147
     2ea:	86 0f       	add	r24, r22
     2ec:	7f cf       	rjmp	.-258    	; 0x1ec <lcd_wr_command>
     2ee:	08 95       	ret
     2f0:	83 ed       	ldi	r24, 0xD3	; 211
     2f2:	86 0f       	add	r24, r22
     2f4:	7b cf       	rjmp	.-266    	; 0x1ec <lcd_wr_command>
     2f6:	08 95       	ret

000002f8 <lcd_print>:
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	8a 01       	movw	r16, r20
     302:	e9 01       	movw	r28, r18
     304:	88 23       	and	r24, r24
     306:	11 f0       	breq	.+4      	; 0x30c <lcd_print+0x14>
     308:	61 11       	cpse	r22, r1
     30a:	02 c0       	rjmp	.+4      	; 0x310 <lcd_print+0x18>
     30c:	b9 df       	rcall	.-142    	; 0x280 <lcd_home>
     30e:	01 c0       	rjmp	.+2      	; 0x312 <lcd_print+0x1a>
     310:	d8 df       	rcall	.-80     	; 0x2c2 <lcd_cursor>
     312:	c5 30       	cpi	r28, 0x05	; 5
     314:	d1 05       	cpc	r29, r1
     316:	c1 f4       	brne	.+48     	; 0x348 <lcd_print+0x50>
     318:	98 01       	movw	r18, r16
     31a:	32 95       	swap	r19
     31c:	22 95       	swap	r18
     31e:	2f 70       	andi	r18, 0x0F	; 15
     320:	23 27       	eor	r18, r19
     322:	3f 70       	andi	r19, 0x0F	; 15
     324:	23 27       	eor	r18, r19
     326:	a7 e4       	ldi	r26, 0x47	; 71
     328:	b3 e0       	ldi	r27, 0x03	; 3
     32a:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	96 95       	lsr	r25
     334:	87 95       	ror	r24
     336:	96 95       	lsr	r25
     338:	87 95       	ror	r24
     33a:	c0 96       	adiw	r24, 0x30	; 48
     33c:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <million+0x1>
     340:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <million>
     344:	78 df       	rcall	.-272    	; 0x236 <lcd_wr_char>
     346:	04 c0       	rjmp	.+8      	; 0x350 <lcd_print+0x58>
     348:	c4 30       	cpi	r28, 0x04	; 4
     34a:	d1 05       	cpc	r29, r1
     34c:	09 f0       	breq	.+2      	; 0x350 <lcd_print+0x58>
     34e:	be c0       	rjmp	.+380    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     350:	98 01       	movw	r18, r16
     352:	36 95       	lsr	r19
     354:	27 95       	ror	r18
     356:	36 95       	lsr	r19
     358:	27 95       	ror	r18
     35a:	36 95       	lsr	r19
     35c:	27 95       	ror	r18
     35e:	a5 ec       	ldi	r26, 0xC5	; 197
     360:	b0 e2       	ldi	r27, 0x20	; 32
     362:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     366:	ac 01       	movw	r20, r24
     368:	52 95       	swap	r21
     36a:	42 95       	swap	r20
     36c:	4f 70       	andi	r20, 0x0F	; 15
     36e:	45 27       	eor	r20, r21
     370:	5f 70       	andi	r21, 0x0F	; 15
     372:	45 27       	eor	r20, r21
     374:	50 93 3f 08 	sts	0x083F, r21	; 0x80083f <temp+0x1>
     378:	40 93 3e 08 	sts	0x083E, r20	; 0x80083e <temp>
     37c:	9a 01       	movw	r18, r20
     37e:	ad ec       	ldi	r26, 0xCD	; 205
     380:	bc ec       	ldi	r27, 0xCC	; 204
     382:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	96 95       	lsr	r25
     38c:	87 95       	ror	r24
     38e:	96 95       	lsr	r25
     390:	87 95       	ror	r24
     392:	9c 01       	movw	r18, r24
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	9a 01       	movw	r18, r20
     3aa:	28 1b       	sub	r18, r24
     3ac:	39 0b       	sbc	r19, r25
     3ae:	c9 01       	movw	r24, r18
     3b0:	c0 96       	adiw	r24, 0x30	; 48
     3b2:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <thousand+0x1>
     3b6:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <thousand>
     3ba:	3d df       	rcall	.-390    	; 0x236 <lcd_wr_char>
     3bc:	98 01       	movw	r18, r16
     3be:	36 95       	lsr	r19
     3c0:	27 95       	ror	r18
     3c2:	36 95       	lsr	r19
     3c4:	27 95       	ror	r18
     3c6:	ab e7       	ldi	r26, 0x7B	; 123
     3c8:	b4 e1       	ldi	r27, 0x14	; 20
     3ca:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     3ce:	ac 01       	movw	r20, r24
     3d0:	56 95       	lsr	r21
     3d2:	47 95       	ror	r20
     3d4:	50 93 3f 08 	sts	0x083F, r21	; 0x80083f <temp+0x1>
     3d8:	40 93 3e 08 	sts	0x083E, r20	; 0x80083e <temp>
     3dc:	9a 01       	movw	r18, r20
     3de:	ad ec       	ldi	r26, 0xCD	; 205
     3e0:	bc ec       	ldi	r27, 0xCC	; 204
     3e2:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     3e6:	96 95       	lsr	r25
     3e8:	87 95       	ror	r24
     3ea:	96 95       	lsr	r25
     3ec:	87 95       	ror	r24
     3ee:	96 95       	lsr	r25
     3f0:	87 95       	ror	r24
     3f2:	9c 01       	movw	r18, r24
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	82 0f       	add	r24, r18
     406:	93 1f       	adc	r25, r19
     408:	9a 01       	movw	r18, r20
     40a:	28 1b       	sub	r18, r24
     40c:	39 0b       	sbc	r19, r25
     40e:	c9 01       	movw	r24, r18
     410:	c0 96       	adiw	r24, 0x30	; 48
     412:	90 93 d9 09 	sts	0x09D9, r25	; 0x8009d9 <hundred+0x1>
     416:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <hundred>
     41a:	0d df       	rcall	.-486    	; 0x236 <lcd_wr_char>
     41c:	04 c0       	rjmp	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41e:	c2 30       	cpi	r28, 0x02	; 2
     420:	d1 05       	cpc	r29, r1
     422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	58 c0       	rjmp	.+176    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     426:	98 01       	movw	r18, r16
     428:	ad ec       	ldi	r26, 0xCD	; 205
     42a:	bc ec       	ldi	r27, 0xCC	; 204
     42c:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     430:	ac 01       	movw	r20, r24
     432:	56 95       	lsr	r21
     434:	47 95       	ror	r20
     436:	56 95       	lsr	r21
     438:	47 95       	ror	r20
     43a:	56 95       	lsr	r21
     43c:	47 95       	ror	r20
     43e:	50 93 3f 08 	sts	0x083F, r21	; 0x80083f <temp+0x1>
     442:	40 93 3e 08 	sts	0x083E, r20	; 0x80083e <temp>
     446:	9a 01       	movw	r18, r20
     448:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     44c:	96 95       	lsr	r25
     44e:	87 95       	ror	r24
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	9c 01       	movw	r18, r24
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	82 0f       	add	r24, r18
     46c:	93 1f       	adc	r25, r19
     46e:	9a 01       	movw	r18, r20
     470:	28 1b       	sub	r18, r24
     472:	39 0b       	sbc	r19, r25
     474:	c9 01       	movw	r24, r18
     476:	c0 96       	adiw	r24, 0x30	; 48
     478:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <tens+0x1>
     47c:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <tens>
     480:	da de       	rcall	.-588    	; 0x236 <lcd_wr_char>
     482:	98 01       	movw	r18, r16
     484:	ad ec       	ldi	r26, 0xCD	; 205
     486:	bc ec       	ldi	r27, 0xCC	; 204
     488:	0e 94 30 1a 	call	0x3460	; 0x3460 <__umulhisi3>
     48c:	96 95       	lsr	r25
     48e:	87 95       	ror	r24
     490:	96 95       	lsr	r25
     492:	87 95       	ror	r24
     494:	96 95       	lsr	r25
     496:	87 95       	ror	r24
     498:	9c 01       	movw	r18, r24
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	98 01       	movw	r18, r16
     4b0:	28 1b       	sub	r18, r24
     4b2:	39 0b       	sbc	r19, r25
     4b4:	c9 01       	movw	r24, r18
     4b6:	c0 96       	adiw	r24, 0x30	; 48
     4b8:	90 93 db 09 	sts	0x09DB, r25	; 0x8009db <unit+0x1>
     4bc:	80 93 da 09 	sts	0x09DA, r24	; 0x8009da <unit>
     4c0:	ba de       	rcall	.-652    	; 0x236 <lcd_wr_char>
     4c2:	26 97       	sbiw	r28, 0x06	; 6
     4c4:	64 f0       	brlt	.+24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4c6:	85 e4       	ldi	r24, 0x45	; 69
     4c8:	b6 de       	rcall	.-660    	; 0x236 <lcd_wr_char>
     4ca:	09 c0       	rjmp	.+18     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4cc:	c3 30       	cpi	r28, 0x03	; 3
     4ce:	d1 05       	cpc	r29, r1
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	a5 cf       	rjmp	.-182    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     4d4:	73 cf       	rjmp	.-282    	; 0x3bc <lcd_print+0xc4>
     4d6:	c1 30       	cpi	r28, 0x01	; 1
     4d8:	d1 05       	cpc	r29, r1
     4da:	99 f7       	brne	.-26     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4dc:	d2 cf       	rjmp	.-92     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	08 95       	ret

000004e8 <lcd_clear>:
     4e8:	80 e8       	ldi	r24, 0x80	; 128
     4ea:	80 de       	rcall	.-768    	; 0x1ec <lcd_wr_command>
     4ec:	86 e3       	ldi	r24, 0x36	; 54
     4ee:	95 e0       	ldi	r25, 0x05	; 5
     4f0:	ca de       	rcall	.-620    	; 0x286 <lcd_string>
     4f2:	80 ec       	ldi	r24, 0xC0	; 192
     4f4:	7b de       	rcall	.-778    	; 0x1ec <lcd_wr_command>
     4f6:	86 e3       	ldi	r24, 0x36	; 54
     4f8:	95 e0       	ldi	r25, 0x05	; 5
     4fa:	c5 de       	rcall	.-630    	; 0x286 <lcd_string>
     4fc:	c1 ce       	rjmp	.-638    	; 0x280 <lcd_home>
     4fe:	08 95       	ret

00000500 <declare_constants>:
     500:	2f 92       	push	r2
     502:	3f 92       	push	r3
     504:	4f 92       	push	r4
     506:	5f 92       	push	r5
     508:	6f 92       	push	r6
     50a:	7f 92       	push	r7
     50c:	8f 92       	push	r8
     50e:	9f 92       	push	r9
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	e7 e5       	ldi	r30, 0x57	; 87
     526:	f8 e0       	ldi	r31, 0x08	; 8
     528:	0f 2e       	mov	r0, r31
     52a:	fb e4       	ldi	r31, 0x4B	; 75
     52c:	af 2e       	mov	r10, r31
     52e:	b1 2c       	mov	r11, r1
     530:	f0 2d       	mov	r31, r0
     532:	b1 82       	std	Z+1, r11	; 0x01
     534:	a0 82       	st	Z, r10
     536:	0f 2e       	mov	r0, r31
     538:	fd e1       	ldi	r31, 0x1D	; 29
     53a:	4f 2e       	mov	r4, r31
     53c:	55 24       	eor	r5, r5
     53e:	53 94       	inc	r5
     540:	f0 2d       	mov	r31, r0
     542:	53 82       	std	Z+3, r5	; 0x03
     544:	42 82       	std	Z+2, r4	; 0x02
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	9f ef       	ldi	r25, 0xFF	; 255
     54a:	95 83       	std	Z+5, r25	; 0x05
     54c:	84 83       	std	Z+4, r24	; 0x04
     54e:	97 83       	std	Z+7, r25	; 0x07
     550:	86 83       	std	Z+6, r24	; 0x06
     552:	cc 24       	eor	r12, r12
     554:	ca 94       	dec	r12
     556:	d1 2c       	mov	r13, r1
     558:	d1 86       	std	Z+9, r13	; 0x09
     55a:	c0 86       	std	Z+8, r12	; 0x08
     55c:	ac e3       	ldi	r26, 0x3C	; 60
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	b3 87       	std	Z+11, r27	; 0x0b
     562:	a2 87       	std	Z+10, r26	; 0x0a
     564:	95 87       	std	Z+13, r25	; 0x0d
     566:	84 87       	std	Z+12, r24	; 0x0c
     568:	97 87       	std	Z+15, r25	; 0x0f
     56a:	86 87       	std	Z+14, r24	; 0x0e
     56c:	20 ef       	ldi	r18, 0xF0	; 240
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	31 8b       	std	Z+17, r19	; 0x11
     572:	20 8b       	std	Z+16, r18	; 0x10
     574:	0f 2e       	mov	r0, r31
     576:	fd e2       	ldi	r31, 0x2D	; 45
     578:	2f 2e       	mov	r2, r31
     57a:	31 2c       	mov	r3, r1
     57c:	f0 2d       	mov	r31, r0
     57e:	33 8a       	std	Z+19, r3	; 0x13
     580:	22 8a       	std	Z+18, r2	; 0x12
     582:	15 8a       	std	Z+21, r1	; 0x15
     584:	14 8a       	std	Z+20, r1	; 0x14
     586:	6c e2       	ldi	r22, 0x2C	; 44
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	77 8b       	std	Z+23, r23	; 0x17
     58c:	66 8b       	std	Z+22, r22	; 0x16
     58e:	0f 2e       	mov	r0, r31
     590:	f1 ee       	ldi	r31, 0xE1	; 225
     592:	8f 2e       	mov	r8, r31
     594:	91 2c       	mov	r9, r1
     596:	f0 2d       	mov	r31, r0
     598:	91 8e       	std	Z+25, r9	; 0x19
     59a:	80 8e       	std	Z+24, r8	; 0x18
     59c:	0e e1       	ldi	r16, 0x1E	; 30
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	13 8f       	std	Z+27, r17	; 0x1b
     5a2:	02 8f       	std	Z+26, r16	; 0x1a
     5a4:	95 8f       	std	Z+29, r25	; 0x1d
     5a6:	84 8f       	std	Z+28, r24	; 0x1c
     5a8:	97 8f       	std	Z+31, r25	; 0x1f
     5aa:	86 8f       	std	Z+30, r24	; 0x1e
     5ac:	42 ed       	ldi	r20, 0xD2	; 210
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	51 a3       	std	Z+33, r21	; 0x21
     5b2:	40 a3       	std	Z+32, r20	; 0x20
     5b4:	cf e0       	ldi	r28, 0x0F	; 15
     5b6:	d0 e0       	ldi	r29, 0x00	; 0
     5b8:	d3 a3       	std	Z+35, r29	; 0x23
     5ba:	c2 a3       	std	Z+34, r28	; 0x22
     5bc:	95 a3       	std	Z+37, r25	; 0x25
     5be:	84 a3       	std	Z+36, r24	; 0x24
     5c0:	97 a3       	std	Z+39, r25	; 0x27
     5c2:	86 a3       	std	Z+38, r24	; 0x26
     5c4:	03 ec       	ldi	r16, 0xC3	; 195
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	11 a7       	std	Z+41, r17	; 0x29
     5ca:	00 a7       	std	Z+40, r16	; 0x28
     5cc:	13 a6       	std	Z+43, r1	; 0x2b
     5ce:	12 a6       	std	Z+42, r1	; 0x2a
     5d0:	95 a7       	std	Z+45, r25	; 0x2d
     5d2:	84 a7       	std	Z+44, r24	; 0x2c
     5d4:	97 a7       	std	Z+47, r25	; 0x2f
     5d6:	86 a7       	std	Z+46, r24	; 0x2e
     5d8:	44 eb       	ldi	r20, 0xB4	; 180
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	51 ab       	std	Z+49, r21	; 0x31
     5de:	40 ab       	std	Z+48, r20	; 0x30
     5e0:	09 e5       	ldi	r16, 0x59	; 89
     5e2:	11 e0       	ldi	r17, 0x01	; 1
     5e4:	13 ab       	std	Z+51, r17	; 0x33
     5e6:	02 ab       	std	Z+50, r16	; 0x32
     5e8:	35 ab       	std	Z+53, r19	; 0x35
     5ea:	24 ab       	std	Z+52, r18	; 0x34
     5ec:	77 ab       	std	Z+55, r23	; 0x37
     5ee:	66 ab       	std	Z+54, r22	; 0x36
     5f0:	05 ea       	ldi	r16, 0xA5	; 165
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	11 af       	std	Z+57, r17	; 0x39
     5f6:	00 af       	std	Z+56, r16	; 0x38
     5f8:	0a e4       	ldi	r16, 0x4A	; 74
     5fa:	11 e0       	ldi	r17, 0x01	; 1
     5fc:	13 af       	std	Z+59, r17	; 0x3b
     5fe:	02 af       	std	Z+58, r16	; 0x3a
     600:	95 af       	std	Z+61, r25	; 0x3d
     602:	84 af       	std	Z+60, r24	; 0x3c
     604:	90 93 96 08 	sts	0x0896, r25	; 0x800896 <angle+0x3f>
     608:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <angle+0x3e>
     60c:	e6 e9       	ldi	r30, 0x96	; 150
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	f0 93 98 08 	sts	0x0898, r31	; 0x800898 <angle+0x41>
     614:	e0 93 97 08 	sts	0x0897, r30	; 0x800897 <angle+0x40>
     618:	0b e3       	ldi	r16, 0x3B	; 59
     61a:	11 e0       	ldi	r17, 0x01	; 1
     61c:	10 93 9a 08 	sts	0x089A, r17	; 0x80089a <angle+0x43>
     620:	00 93 99 08 	sts	0x0899, r16	; 0x800899 <angle+0x42>
     624:	90 93 9c 08 	sts	0x089C, r25	; 0x80089c <angle+0x45>
     628:	80 93 9b 08 	sts	0x089B, r24	; 0x80089b <angle+0x44>
     62c:	90 93 9e 08 	sts	0x089E, r25	; 0x80089e <angle+0x47>
     630:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <angle+0x46>
     634:	0f 2e       	mov	r0, r31
     636:	f7 e8       	ldi	r31, 0x87	; 135
     638:	6f 2e       	mov	r6, r31
     63a:	71 2c       	mov	r7, r1
     63c:	f0 2d       	mov	r31, r0
     63e:	70 92 a0 08 	sts	0x08A0, r7	; 0x8008a0 <angle+0x49>
     642:	60 92 9f 08 	sts	0x089F, r6	; 0x80089f <angle+0x48>
     646:	70 93 a2 08 	sts	0x08A2, r23	; 0x8008a2 <angle+0x4b>
     64a:	60 93 a1 08 	sts	0x08A1, r22	; 0x8008a1 <angle+0x4a>
     64e:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <angle+0x4d>
     652:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <angle+0x4c>
     656:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <angle+0x4f>
     65a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <angle+0x4e>
     65e:	e8 e7       	ldi	r30, 0x78	; 120
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	f0 93 a8 08 	sts	0x08A8, r31	; 0x8008a8 <angle+0x51>
     666:	e0 93 a7 08 	sts	0x08A7, r30	; 0x8008a7 <angle+0x50>
     66a:	50 92 aa 08 	sts	0x08AA, r5	; 0x8008aa <angle+0x53>
     66e:	40 92 a9 08 	sts	0x08A9, r4	; 0x8008a9 <angle+0x52>
     672:	50 93 ac 08 	sts	0x08AC, r21	; 0x8008ac <angle+0x55>
     676:	40 93 ab 08 	sts	0x08AB, r20	; 0x8008ab <angle+0x54>
     67a:	30 93 ae 08 	sts	0x08AE, r19	; 0x8008ae <angle+0x57>
     67e:	20 93 ad 08 	sts	0x08AD, r18	; 0x8008ad <angle+0x56>
     682:	0f 2e       	mov	r0, r31
     684:	f9 e6       	ldi	r31, 0x69	; 105
     686:	ef 2e       	mov	r14, r31
     688:	f1 2c       	mov	r15, r1
     68a:	f0 2d       	mov	r31, r0
     68c:	f0 92 b0 08 	sts	0x08B0, r15	; 0x8008b0 <angle+0x59>
     690:	e0 92 af 08 	sts	0x08AF, r14	; 0x8008af <angle+0x58>
     694:	0e e0       	ldi	r16, 0x0E	; 14
     696:	11 e0       	ldi	r17, 0x01	; 1
     698:	10 93 b2 08 	sts	0x08B2, r17	; 0x8008b2 <angle+0x5b>
     69c:	00 93 b1 08 	sts	0x08B1, r16	; 0x8008b1 <angle+0x5a>
     6a0:	90 93 b4 08 	sts	0x08B4, r25	; 0x8008b4 <angle+0x5d>
     6a4:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <angle+0x5c>
     6a8:	90 93 b6 08 	sts	0x08B6, r25	; 0x8008b6 <angle+0x5f>
     6ac:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <angle+0x5e>
     6b0:	0a e5       	ldi	r16, 0x5A	; 90
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	10 93 b8 08 	sts	0x08B8, r17	; 0x8008b8 <angle+0x61>
     6b8:	00 93 b7 08 	sts	0x08B7, r16	; 0x8008b7 <angle+0x60>
     6bc:	d0 92 ba 08 	sts	0x08BA, r13	; 0x8008ba <angle+0x63>
     6c0:	c0 92 b9 08 	sts	0x08B9, r12	; 0x8008b9 <angle+0x62>
     6c4:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <angle+0x65>
     6c8:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <angle+0x64>
     6cc:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <angle+0x67>
     6d0:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <angle+0x66>
     6d4:	b0 92 c0 08 	sts	0x08C0, r11	; 0x8008c0 <angle+0x69>
     6d8:	a0 92 bf 08 	sts	0x08BF, r10	; 0x8008bf <angle+0x68>
     6dc:	30 93 c2 08 	sts	0x08C2, r19	; 0x8008c2 <angle+0x6b>
     6e0:	20 93 c1 08 	sts	0x08C1, r18	; 0x8008c1 <angle+0x6a>
     6e4:	90 93 c4 08 	sts	0x08C4, r25	; 0x8008c4 <angle+0x6d>
     6e8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <angle+0x6c>
     6ec:	90 93 c6 08 	sts	0x08C6, r25	; 0x8008c6 <angle+0x6f>
     6f0:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <angle+0x6e>
     6f4:	b0 93 c8 08 	sts	0x08C8, r27	; 0x8008c8 <angle+0x71>
     6f8:	a0 93 c7 08 	sts	0x08C7, r26	; 0x8008c7 <angle+0x70>
     6fc:	90 92 ca 08 	sts	0x08CA, r9	; 0x8008ca <angle+0x73>
     700:	80 92 c9 08 	sts	0x08C9, r8	; 0x8008c9 <angle+0x72>
     704:	f0 93 cc 08 	sts	0x08CC, r31	; 0x8008cc <angle+0x75>
     708:	e0 93 cb 08 	sts	0x08CB, r30	; 0x8008cb <angle+0x74>
     70c:	50 93 ce 08 	sts	0x08CE, r21	; 0x8008ce <angle+0x77>
     710:	40 93 cd 08 	sts	0x08CD, r20	; 0x8008cd <angle+0x76>
     714:	30 92 d0 08 	sts	0x08D0, r3	; 0x8008d0 <angle+0x79>
     718:	20 92 cf 08 	sts	0x08CF, r2	; 0x8008cf <angle+0x78>
     71c:	0f 2e       	mov	r0, r31
     71e:	f2 ed       	ldi	r31, 0xD2	; 210
     720:	cf 2e       	mov	r12, r31
     722:	d1 2c       	mov	r13, r1
     724:	f0 2d       	mov	r31, r0
     726:	d0 92 d2 08 	sts	0x08D2, r13	; 0x8008d2 <angle+0x7b>
     72a:	c0 92 d1 08 	sts	0x08D1, r12	; 0x8008d1 <angle+0x7a>
     72e:	90 93 d4 08 	sts	0x08D4, r25	; 0x8008d4 <angle+0x7d>
     732:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <angle+0x7c>
     736:	90 93 d6 08 	sts	0x08D6, r25	; 0x8008d6 <angle+0x7f>
     73a:	80 93 d5 08 	sts	0x08D5, r24	; 0x8008d5 <angle+0x7e>
     73e:	0f 2e       	mov	r0, r31
     740:	fe e1       	ldi	r31, 0x1E	; 30
     742:	cf 2e       	mov	r12, r31
     744:	d1 2c       	mov	r13, r1
     746:	f0 2d       	mov	r31, r0
     748:	d0 92 d8 08 	sts	0x08D8, r13	; 0x8008d8 <angle+0x81>
     74c:	c0 92 d7 08 	sts	0x08D7, r12	; 0x8008d7 <angle+0x80>
     750:	0f 2e       	mov	r0, r31
     752:	f3 ec       	ldi	r31, 0xC3	; 195
     754:	cf 2e       	mov	r12, r31
     756:	d1 2c       	mov	r13, r1
     758:	f0 2d       	mov	r31, r0
     75a:	d0 92 da 08 	sts	0x08DA, r13	; 0x8008da <angle+0x83>
     75e:	c0 92 d9 08 	sts	0x08D9, r12	; 0x8008d9 <angle+0x82>
     762:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <angle+0x85>
     766:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <angle+0x84>
     76a:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <angle+0x87>
     76e:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <angle+0x86>
     772:	d0 93 e0 08 	sts	0x08E0, r29	; 0x8008e0 <angle+0x89>
     776:	c0 93 df 08 	sts	0x08DF, r28	; 0x8008df <angle+0x88>
     77a:	50 93 e2 08 	sts	0x08E2, r21	; 0x8008e2 <angle+0x8b>
     77e:	40 93 e1 08 	sts	0x08E1, r20	; 0x8008e1 <angle+0x8a>
     782:	90 93 e4 08 	sts	0x08E4, r25	; 0x8008e4 <angle+0x8d>
     786:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <angle+0x8c>
     78a:	90 93 e6 08 	sts	0x08E6, r25	; 0x8008e6 <angle+0x8f>
     78e:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <angle+0x8e>
     792:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <angle+0x91>
     796:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <angle+0x90>
     79a:	0f 2e       	mov	r0, r31
     79c:	f5 ea       	ldi	r31, 0xA5	; 165
     79e:	cf 2e       	mov	r12, r31
     7a0:	d1 2c       	mov	r13, r1
     7a2:	f0 2d       	mov	r31, r0
     7a4:	d0 92 ea 08 	sts	0x08EA, r13	; 0x8008ea <angle+0x93>
     7a8:	c0 92 e9 08 	sts	0x08E9, r12	; 0x8008e9 <angle+0x92>
     7ac:	b0 93 ec 08 	sts	0x08EC, r27	; 0x8008ec <angle+0x95>
     7b0:	a0 93 eb 08 	sts	0x08EB, r26	; 0x8008eb <angle+0x94>
     7b4:	f0 93 ee 08 	sts	0x08EE, r31	; 0x8008ee <angle+0x97>
     7b8:	e0 93 ed 08 	sts	0x08ED, r30	; 0x8008ed <angle+0x96>
     7bc:	0f 2e       	mov	r0, r31
     7be:	f9 e5       	ldi	r31, 0x59	; 89
     7c0:	cf 2e       	mov	r12, r31
     7c2:	dd 24       	eor	r13, r13
     7c4:	d3 94       	inc	r13
     7c6:	f0 2d       	mov	r31, r0
     7c8:	d0 92 f0 08 	sts	0x08F0, r13	; 0x8008f0 <angle+0x99>
     7cc:	c0 92 ef 08 	sts	0x08EF, r12	; 0x8008ef <angle+0x98>
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f6 e9       	ldi	r31, 0x96	; 150
     7d4:	cf 2e       	mov	r12, r31
     7d6:	d1 2c       	mov	r13, r1
     7d8:	f0 2d       	mov	r31, r0
     7da:	d0 92 f2 08 	sts	0x08F2, r13	; 0x8008f2 <angle+0x9b>
     7de:	c0 92 f1 08 	sts	0x08F1, r12	; 0x8008f1 <angle+0x9a>
     7e2:	90 93 f4 08 	sts	0x08F4, r25	; 0x8008f4 <angle+0x9d>
     7e6:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <angle+0x9c>
     7ea:	90 93 f6 08 	sts	0x08F6, r25	; 0x8008f6 <angle+0x9f>
     7ee:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <angle+0x9e>
     7f2:	0f 2e       	mov	r0, r31
     7f4:	fa e4       	ldi	r31, 0x4A	; 74
     7f6:	cf 2e       	mov	r12, r31
     7f8:	dd 24       	eor	r13, r13
     7fa:	d3 94       	inc	r13
     7fc:	f0 2d       	mov	r31, r0
     7fe:	d0 92 f8 08 	sts	0x08F8, r13	; 0x8008f8 <angle+0xa1>
     802:	c0 92 f7 08 	sts	0x08F7, r12	; 0x8008f7 <angle+0xa0>
     806:	70 92 fa 08 	sts	0x08FA, r7	; 0x8008fa <angle+0xa3>
     80a:	60 92 f9 08 	sts	0x08F9, r6	; 0x8008f9 <angle+0xa2>
     80e:	90 93 fc 08 	sts	0x08FC, r25	; 0x8008fc <angle+0xa5>
     812:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <angle+0xa4>
     816:	90 93 fe 08 	sts	0x08FE, r25	; 0x8008fe <angle+0xa7>
     81a:	80 93 fd 08 	sts	0x08FD, r24	; 0x8008fd <angle+0xa6>
     81e:	0f 2e       	mov	r0, r31
     820:	fb e3       	ldi	r31, 0x3B	; 59
     822:	cf 2e       	mov	r12, r31
     824:	dd 24       	eor	r13, r13
     826:	d3 94       	inc	r13
     828:	f0 2d       	mov	r31, r0
     82a:	d0 92 00 09 	sts	0x0900, r13	; 0x800900 <angle+0xa9>
     82e:	c0 92 ff 08 	sts	0x08FF, r12	; 0x8008ff <angle+0xa8>
     832:	f0 93 02 09 	sts	0x0902, r31	; 0x800902 <angle+0xab>
     836:	e0 93 01 09 	sts	0x0901, r30	; 0x800901 <angle+0xaa>
     83a:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <angle+0xad>
     83e:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <angle+0xac>
     842:	90 93 06 09 	sts	0x0906, r25	; 0x800906 <angle+0xaf>
     846:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <angle+0xae>
     84a:	70 93 08 09 	sts	0x0908, r23	; 0x800908 <angle+0xb1>
     84e:	60 93 07 09 	sts	0x0907, r22	; 0x800907 <angle+0xb0>
     852:	f0 92 0a 09 	sts	0x090A, r15	; 0x80090a <angle+0xb3>
     856:	e0 92 09 09 	sts	0x0909, r14	; 0x800909 <angle+0xb2>
     85a:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <angle+0xb5>
     85e:	10 92 0b 09 	sts	0x090B, r1	; 0x80090b <angle+0xb4>
     862:	b0 93 0e 09 	sts	0x090E, r27	; 0x80090e <angle+0xb7>
     866:	a0 93 0d 09 	sts	0x090D, r26	; 0x80090d <angle+0xb6>
     86a:	10 93 10 09 	sts	0x0910, r17	; 0x800910 <angle+0xb9>
     86e:	00 93 0f 09 	sts	0x090F, r16	; 0x80090f <angle+0xb8>
     872:	50 92 12 09 	sts	0x0912, r5	; 0x800912 <angle+0xbb>
     876:	40 92 11 09 	sts	0x0911, r4	; 0x800911 <angle+0xba>
     87a:	90 93 14 09 	sts	0x0914, r25	; 0x800914 <angle+0xbd>
     87e:	80 93 13 09 	sts	0x0913, r24	; 0x800913 <angle+0xbc>
     882:	90 93 16 09 	sts	0x0916, r25	; 0x800916 <angle+0xbf>
     886:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <angle+0xbe>
     88a:	50 93 18 09 	sts	0x0918, r21	; 0x800918 <angle+0xc1>
     88e:	40 93 17 09 	sts	0x0917, r20	; 0x800917 <angle+0xc0>
     892:	10 92 1a 09 	sts	0x091A, r1	; 0x80091a <angle+0xc3>
     896:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <angle+0xc2>
     89a:	30 93 1c 09 	sts	0x091C, r19	; 0x80091c <angle+0xc5>
     89e:	20 93 1b 09 	sts	0x091B, r18	; 0x80091b <angle+0xc4>
     8a2:	90 93 1e 09 	sts	0x091E, r25	; 0x80091e <angle+0xc7>
     8a6:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <angle+0xc6>
     8aa:	50 93 20 09 	sts	0x0920, r21	; 0x800920 <angle+0xc9>
     8ae:	40 93 1f 09 	sts	0x091F, r20	; 0x80091f <angle+0xc8>
     8b2:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <angle+0xcb>
     8b6:	10 92 21 09 	sts	0x0921, r1	; 0x800921 <angle+0xca>
     8ba:	b0 93 24 09 	sts	0x0924, r27	; 0x800924 <angle+0xcd>
     8be:	a0 93 23 09 	sts	0x0923, r26	; 0x800923 <angle+0xcc>
     8c2:	70 93 26 09 	sts	0x0926, r23	; 0x800926 <angle+0xcf>
     8c6:	60 93 25 09 	sts	0x0925, r22	; 0x800925 <angle+0xce>
     8ca:	50 93 28 09 	sts	0x0928, r21	; 0x800928 <angle+0xd1>
     8ce:	40 93 27 09 	sts	0x0927, r20	; 0x800927 <angle+0xd0>
     8d2:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <angle+0xd3>
     8d6:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <angle+0xd2>
     8da:	f0 93 2c 09 	sts	0x092C, r31	; 0x80092c <angle+0xd5>
     8de:	e0 93 2b 09 	sts	0x092B, r30	; 0x80092b <angle+0xd4>
     8e2:	30 93 2e 09 	sts	0x092E, r19	; 0x80092e <angle+0xd7>
     8e6:	20 93 2d 09 	sts	0x092D, r18	; 0x80092d <angle+0xd6>
     8ea:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <angle+0xd9>
     8ee:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <angle+0xd8>
     8f2:	50 93 32 09 	sts	0x0932, r21	; 0x800932 <angle+0xdb>
     8f6:	40 93 31 09 	sts	0x0931, r20	; 0x800931 <angle+0xda>
     8fa:	70 93 34 09 	sts	0x0934, r23	; 0x800934 <angle+0xdd>
     8fe:	60 93 33 09 	sts	0x0933, r22	; 0x800933 <angle+0xdc>
     902:	90 93 36 09 	sts	0x0936, r25	; 0x800936 <angle+0xdf>
     906:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <angle+0xde>
     90a:	b0 93 38 09 	sts	0x0938, r27	; 0x800938 <angle+0xe1>
     90e:	a0 93 37 09 	sts	0x0937, r26	; 0x800937 <angle+0xe0>
     912:	f0 93 3a 09 	sts	0x093A, r31	; 0x80093a <angle+0xe3>
     916:	e0 93 39 09 	sts	0x0939, r30	; 0x800939 <angle+0xe2>
     91a:	30 93 3c 09 	sts	0x093C, r19	; 0x80093c <angle+0xe5>
     91e:	20 93 3b 09 	sts	0x093B, r18	; 0x80093b <angle+0xe4>
     922:	90 93 3e 09 	sts	0x093E, r25	; 0x80093e <angle+0xe7>
     926:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <angle+0xe6>
     92a:	b0 93 40 09 	sts	0x0940, r27	; 0x800940 <angle+0xe9>
     92e:	a0 93 3f 09 	sts	0x093F, r26	; 0x80093f <angle+0xe8>
     932:	30 93 42 09 	sts	0x0942, r19	; 0x800942 <angle+0xeb>
     936:	20 93 41 09 	sts	0x0941, r18	; 0x800941 <angle+0xea>
     93a:	70 93 44 09 	sts	0x0944, r23	; 0x800944 <angle+0xed>
     93e:	60 93 43 09 	sts	0x0943, r22	; 0x800943 <angle+0xec>
     942:	50 93 46 09 	sts	0x0946, r21	; 0x800946 <angle+0xef>
     946:	40 93 45 09 	sts	0x0945, r20	; 0x800945 <angle+0xee>
     94a:	b0 93 48 09 	sts	0x0948, r27	; 0x800948 <angle+0xf1>
     94e:	a0 93 47 09 	sts	0x0947, r26	; 0x800947 <angle+0xf0>
     952:	30 93 4a 09 	sts	0x094A, r19	; 0x80094a <angle+0xf3>
     956:	20 93 49 09 	sts	0x0949, r18	; 0x800949 <angle+0xf2>
     95a:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <angle+0xf5>
     95e:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <angle+0xf4>
     962:	f0 93 4e 09 	sts	0x094E, r31	; 0x80094e <angle+0xf7>
     966:	e0 93 4d 09 	sts	0x094D, r30	; 0x80094d <angle+0xf6>
     96a:	30 93 50 09 	sts	0x0950, r19	; 0x800950 <angle+0xf9>
     96e:	20 93 4f 09 	sts	0x094F, r18	; 0x80094f <angle+0xf8>
     972:	b0 93 52 09 	sts	0x0952, r27	; 0x800952 <angle+0xfb>
     976:	a0 93 51 09 	sts	0x0951, r26	; 0x800951 <angle+0xfa>
     97a:	50 93 54 09 	sts	0x0954, r21	; 0x800954 <angle+0xfd>
     97e:	40 93 53 09 	sts	0x0953, r20	; 0x800953 <angle+0xfc>
     982:	90 93 56 09 	sts	0x0956, r25	; 0x800956 <angle+0xff>
     986:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <angle+0xfe>
     98a:	70 93 58 09 	sts	0x0958, r23	; 0x800958 <angle+0x101>
     98e:	60 93 57 09 	sts	0x0957, r22	; 0x800957 <angle+0x100>
     992:	10 92 5a 09 	sts	0x095A, r1	; 0x80095a <angle+0x103>
     996:	10 92 59 09 	sts	0x0959, r1	; 0x800959 <angle+0x102>
     99a:	f0 93 5c 09 	sts	0x095C, r31	; 0x80095c <angle+0x105>
     99e:	e0 93 5b 09 	sts	0x095B, r30	; 0x80095b <angle+0x104>
     9a2:	90 93 5e 09 	sts	0x095E, r25	; 0x80095e <angle+0x107>
     9a6:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <angle+0x106>
     9aa:	70 93 60 09 	sts	0x0960, r23	; 0x800960 <angle+0x109>
     9ae:	60 93 5f 09 	sts	0x095F, r22	; 0x80095f <angle+0x108>
     9b2:	f0 93 62 09 	sts	0x0962, r31	; 0x800962 <angle+0x10b>
     9b6:	e0 93 61 09 	sts	0x0961, r30	; 0x800961 <angle+0x10a>
     9ba:	50 93 64 09 	sts	0x0964, r21	; 0x800964 <angle+0x10d>
     9be:	40 93 63 09 	sts	0x0963, r20	; 0x800963 <angle+0x10c>
     9c2:	b0 93 66 09 	sts	0x0966, r27	; 0x800966 <angle+0x10f>
     9c6:	a0 93 65 09 	sts	0x0965, r26	; 0x800965 <angle+0x10e>
     9ca:	70 93 68 09 	sts	0x0968, r23	; 0x800968 <angle+0x111>
     9ce:	60 93 67 09 	sts	0x0967, r22	; 0x800967 <angle+0x110>
     9d2:	f0 93 6a 09 	sts	0x096A, r31	; 0x80096a <angle+0x113>
     9d6:	e0 93 69 09 	sts	0x0969, r30	; 0x800969 <angle+0x112>
     9da:	30 93 6c 09 	sts	0x096C, r19	; 0x80096c <angle+0x115>
     9de:	20 93 6b 09 	sts	0x096B, r18	; 0x80096b <angle+0x114>
     9e2:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <angle+0x117>
     9e6:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <angle+0x116>
     9ea:	f0 93 70 09 	sts	0x0970, r31	; 0x800970 <angle+0x119>
     9ee:	e0 93 6f 09 	sts	0x096F, r30	; 0x80096f <angle+0x118>
     9f2:	b0 93 72 09 	sts	0x0972, r27	; 0x800972 <angle+0x11b>
     9f6:	a0 93 71 09 	sts	0x0971, r26	; 0x800971 <angle+0x11a>
     9fa:	70 93 74 09 	sts	0x0974, r23	; 0x800974 <angle+0x11d>
     9fe:	60 93 73 09 	sts	0x0973, r22	; 0x800973 <angle+0x11c>
     a02:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <angle+0x11f>
     a06:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <angle+0x11e>
     a0a:	b0 93 78 09 	sts	0x0978, r27	; 0x800978 <angle+0x121>
     a0e:	a0 93 77 09 	sts	0x0977, r26	; 0x800977 <angle+0x120>
     a12:	30 93 7a 09 	sts	0x097A, r19	; 0x80097a <angle+0x123>
     a16:	20 93 79 09 	sts	0x0979, r18	; 0x800979 <angle+0x122>
     a1a:	90 93 7c 09 	sts	0x097C, r25	; 0x80097c <angle+0x125>
     a1e:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <angle+0x124>
     a22:	90 93 7e 09 	sts	0x097E, r25	; 0x80097e <angle+0x127>
     a26:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <angle+0x126>
     a2a:	f0 93 80 09 	sts	0x0980, r31	; 0x800980 <angle+0x129>
     a2e:	e0 93 7f 09 	sts	0x097F, r30	; 0x80097f <angle+0x128>
     a32:	70 93 82 09 	sts	0x0982, r23	; 0x800982 <angle+0x12b>
     a36:	60 93 81 09 	sts	0x0981, r22	; 0x800981 <angle+0x12a>
     a3a:	90 93 84 09 	sts	0x0984, r25	; 0x800984 <angle+0x12d>
     a3e:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <angle+0x12c>
     a42:	90 93 86 09 	sts	0x0986, r25	; 0x800986 <angle+0x12f>
     a46:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <angle+0x12e>
     a4a:	70 93 88 09 	sts	0x0988, r23	; 0x800988 <angle+0x131>
     a4e:	60 93 87 09 	sts	0x0987, r22	; 0x800987 <angle+0x130>
     a52:	f0 93 8a 09 	sts	0x098A, r31	; 0x80098a <angle+0x133>
     a56:	e0 93 89 09 	sts	0x0989, r30	; 0x800989 <angle+0x132>
     a5a:	90 93 8c 09 	sts	0x098C, r25	; 0x80098c <angle+0x135>
     a5e:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <angle+0x134>
     a62:	90 93 8e 09 	sts	0x098E, r25	; 0x80098e <angle+0x137>
     a66:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <angle+0x136>
     a6a:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <angle+0x139>
     a6e:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <angle+0x138>
     a72:	50 93 92 09 	sts	0x0992, r21	; 0x800992 <angle+0x13b>
     a76:	40 93 91 09 	sts	0x0991, r20	; 0x800991 <angle+0x13a>
     a7a:	90 93 94 09 	sts	0x0994, r25	; 0x800994 <angle+0x13d>
     a7e:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <angle+0x13c>
     a82:	90 93 96 09 	sts	0x0996, r25	; 0x800996 <angle+0x13f>
     a86:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <angle+0x13e>
     a8a:	50 93 98 09 	sts	0x0998, r21	; 0x800998 <angle+0x141>
     a8e:	40 93 97 09 	sts	0x0997, r20	; 0x800997 <angle+0x140>
     a92:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <angle+0x143>
     a96:	10 92 99 09 	sts	0x0999, r1	; 0x800999 <angle+0x142>
     a9a:	90 93 9c 09 	sts	0x099C, r25	; 0x80099c <angle+0x145>
     a9e:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <angle+0x144>
     aa2:	90 93 9e 09 	sts	0x099E, r25	; 0x80099e <angle+0x147>
     aa6:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <angle+0x146>
     aaa:	30 93 a0 09 	sts	0x09A0, r19	; 0x8009a0 <angle+0x149>
     aae:	20 93 9f 09 	sts	0x099F, r18	; 0x80099f <angle+0x148>
     ab2:	b0 93 a2 09 	sts	0x09A2, r27	; 0x8009a2 <angle+0x14b>
     ab6:	a0 93 a1 09 	sts	0x09A1, r26	; 0x8009a1 <angle+0x14a>
     aba:	90 93 a4 09 	sts	0x09A4, r25	; 0x8009a4 <angle+0x14d>
     abe:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <angle+0x14c>
     ac2:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <angle+0x14f>
     ac6:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <angle+0x14e>
     aca:	50 93 a8 09 	sts	0x09A8, r21	; 0x8009a8 <angle+0x151>
     ace:	40 93 a7 09 	sts	0x09A7, r20	; 0x8009a7 <angle+0x150>
     ad2:	b0 93 aa 09 	sts	0x09AA, r27	; 0x8009aa <angle+0x153>
     ad6:	a0 93 a9 09 	sts	0x09A9, r26	; 0x8009a9 <angle+0x152>
     ada:	90 93 ac 09 	sts	0x09AC, r25	; 0x8009ac <angle+0x155>
     ade:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <angle+0x154>
     ae2:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <angle+0x157>
     ae6:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <angle+0x156>
     aea:	f0 93 b0 09 	sts	0x09B0, r31	; 0x8009b0 <angle+0x159>
     aee:	e0 93 af 09 	sts	0x09AF, r30	; 0x8009af <angle+0x158>
     af2:	30 93 b2 09 	sts	0x09B2, r19	; 0x8009b2 <angle+0x15b>
     af6:	20 93 b1 09 	sts	0x09B1, r18	; 0x8009b1 <angle+0x15a>
     afa:	90 93 b4 09 	sts	0x09B4, r25	; 0x8009b4 <angle+0x15d>
     afe:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <angle+0x15c>
     b02:	90 93 b6 09 	sts	0x09B6, r25	; 0x8009b6 <angle+0x15f>
     b06:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <angle+0x15e>
     b0a:	b0 93 b8 09 	sts	0x09B8, r27	; 0x8009b8 <angle+0x161>
     b0e:	a0 93 b7 09 	sts	0x09B7, r26	; 0x8009b7 <angle+0x160>
     b12:	70 93 ba 09 	sts	0x09BA, r23	; 0x8009ba <angle+0x163>
     b16:	60 93 b9 09 	sts	0x09B9, r22	; 0x8009b9 <angle+0x162>
     b1a:	90 93 bc 09 	sts	0x09BC, r25	; 0x8009bc <angle+0x165>
     b1e:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <angle+0x164>
     b22:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <angle+0x167>
     b26:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <angle+0x166>
     b2a:	10 92 c0 09 	sts	0x09C0, r1	; 0x8009c0 <angle+0x169>
     b2e:	10 92 bf 09 	sts	0x09BF, r1	; 0x8009bf <angle+0x168>
     b32:	f0 93 c2 09 	sts	0x09C2, r31	; 0x8009c2 <angle+0x16b>
     b36:	e0 93 c1 09 	sts	0x09C1, r30	; 0x8009c1 <angle+0x16a>
     b3a:	90 93 c4 09 	sts	0x09C4, r25	; 0x8009c4 <angle+0x16d>
     b3e:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <angle+0x16c>
     b42:	90 93 c6 09 	sts	0x09C6, r25	; 0x8009c6 <angle+0x16f>
     b46:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <angle+0x16e>
     b4a:	70 93 c8 09 	sts	0x09C8, r23	; 0x8009c8 <angle+0x171>
     b4e:	60 93 c7 09 	sts	0x09C7, r22	; 0x8009c7 <angle+0x170>
     b52:	50 93 ca 09 	sts	0x09CA, r21	; 0x8009ca <angle+0x173>
     b56:	40 93 c9 09 	sts	0x09C9, r20	; 0x8009c9 <angle+0x172>
     b5a:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <angle+0x175>
     b5e:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <angle+0x174>
     b62:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <angle+0x177>
     b66:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <angle+0x176>
     b6a:	30 93 d0 09 	sts	0x09D0, r19	; 0x8009d0 <angle+0x179>
     b6e:	20 93 cf 09 	sts	0x09CF, r18	; 0x8009cf <angle+0x178>
     b72:	10 92 d2 09 	sts	0x09D2, r1	; 0x8009d2 <angle+0x17b>
     b76:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <angle+0x17a>
     b7a:	90 93 d4 09 	sts	0x09D4, r25	; 0x8009d4 <angle+0x17d>
     b7e:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <angle+0x17c>
     b82:	90 93 d6 09 	sts	0x09D6, r25	; 0x8009d6 <angle+0x17f>
     b86:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <angle+0x17e>
     b8a:	ee eb       	ldi	r30, 0xBE	; 190
     b8c:	f6 e0       	ldi	r31, 0x06	; 6
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	80 83       	st	Z, r24
     b96:	28 e1       	ldi	r18, 0x18	; 24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	33 83       	std	Z+3, r19	; 0x03
     b9c:	22 83       	std	Z+2, r18	; 0x02
     b9e:	15 82       	std	Z+5, r1	; 0x05
     ba0:	14 82       	std	Z+4, r1	; 0x04
     ba2:	17 82       	std	Z+7, r1	; 0x07
     ba4:	16 82       	std	Z+6, r1	; 0x06
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	31 87       	std	Z+9, r19	; 0x09
     bac:	20 87       	std	Z+8, r18	; 0x08
     bae:	23 e0       	ldi	r18, 0x03	; 3
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	33 87       	std	Z+11, r19	; 0x0b
     bb4:	22 87       	std	Z+10, r18	; 0x0a
     bb6:	15 86       	std	Z+13, r1	; 0x0d
     bb8:	14 86       	std	Z+12, r1	; 0x0c
     bba:	17 86       	std	Z+15, r1	; 0x0f
     bbc:	16 86       	std	Z+14, r1	; 0x0e
     bbe:	91 8b       	std	Z+17, r25	; 0x11
     bc0:	80 8b       	std	Z+16, r24	; 0x10
     bc2:	84 e0       	ldi	r24, 0x04	; 4
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	93 8b       	std	Z+19, r25	; 0x13
     bc8:	82 8b       	std	Z+18, r24	; 0x12
     bca:	49 e1       	ldi	r20, 0x19	; 25
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	55 8b       	std	Z+21, r21	; 0x15
     bd0:	44 8b       	std	Z+20, r20	; 0x14
     bd2:	44 e2       	ldi	r20, 0x24	; 36
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	57 8b       	std	Z+23, r21	; 0x17
     bd8:	46 8b       	std	Z+22, r20	; 0x16
     bda:	31 8f       	std	Z+25, r19	; 0x19
     bdc:	20 8f       	std	Z+24, r18	; 0x18
     bde:	25 e0       	ldi	r18, 0x05	; 5
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	33 8f       	std	Z+27, r19	; 0x1b
     be4:	22 8f       	std	Z+26, r18	; 0x1a
     be6:	15 8e       	std	Z+29, r1	; 0x1d
     be8:	14 8e       	std	Z+28, r1	; 0x1c
     bea:	17 8e       	std	Z+31, r1	; 0x1f
     bec:	16 8e       	std	Z+30, r1	; 0x1e
     bee:	91 a3       	std	Z+33, r25	; 0x21
     bf0:	80 a3       	std	Z+32, r24	; 0x20
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	93 a3       	std	Z+35, r25	; 0x23
     bf8:	82 a3       	std	Z+34, r24	; 0x22
     bfa:	15 a2       	std	Z+37, r1	; 0x25
     bfc:	14 a2       	std	Z+36, r1	; 0x24
     bfe:	17 a2       	std	Z+39, r1	; 0x27
     c00:	16 a2       	std	Z+38, r1	; 0x26
     c02:	31 a7       	std	Z+41, r19	; 0x29
     c04:	20 a7       	std	Z+40, r18	; 0x28
     c06:	27 e0       	ldi	r18, 0x07	; 7
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	33 a7       	std	Z+43, r19	; 0x2b
     c0c:	22 a7       	std	Z+42, r18	; 0x2a
     c0e:	15 a6       	std	Z+45, r1	; 0x2d
     c10:	14 a6       	std	Z+44, r1	; 0x2c
     c12:	17 a6       	std	Z+47, r1	; 0x2f
     c14:	16 a6       	std	Z+46, r1	; 0x2e
     c16:	91 ab       	std	Z+49, r25	; 0x31
     c18:	80 ab       	std	Z+48, r24	; 0x30
     c1a:	88 e0       	ldi	r24, 0x08	; 8
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	93 ab       	std	Z+51, r25	; 0x33
     c20:	82 ab       	std	Z+50, r24	; 0x32
     c22:	45 e2       	ldi	r20, 0x25	; 37
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	55 ab       	std	Z+53, r21	; 0x35
     c28:	44 ab       	std	Z+52, r20	; 0x34
     c2a:	46 e2       	ldi	r20, 0x26	; 38
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	57 ab       	std	Z+55, r21	; 0x37
     c30:	46 ab       	std	Z+54, r20	; 0x36
     c32:	31 af       	std	Z+57, r19	; 0x39
     c34:	20 af       	std	Z+56, r18	; 0x38
     c36:	29 e0       	ldi	r18, 0x09	; 9
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	33 af       	std	Z+59, r19	; 0x3b
     c3c:	22 af       	std	Z+58, r18	; 0x3a
     c3e:	15 ae       	std	Z+61, r1	; 0x3d
     c40:	14 ae       	std	Z+60, r1	; 0x3c
     c42:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <node+0x3f>
     c46:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <node+0x3e>
     c4a:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <node+0x41>
     c4e:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <node+0x40>
     c52:	8a e0       	ldi	r24, 0x0A	; 10
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <node+0x43>
     c5a:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <node+0x42>
     c5e:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <node+0x45>
     c62:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <node+0x44>
     c66:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <node+0x47>
     c6a:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <node+0x46>
     c6e:	30 93 07 07 	sts	0x0707, r19	; 0x800707 <node+0x49>
     c72:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <node+0x48>
     c76:	2b e0       	ldi	r18, 0x0B	; 11
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	30 93 09 07 	sts	0x0709, r19	; 0x800709 <node+0x4b>
     c7e:	20 93 08 07 	sts	0x0708, r18	; 0x800708 <node+0x4a>
     c82:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <node+0x4d>
     c86:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <node+0x4c>
     c8a:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <node+0x4f>
     c8e:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <node+0x4e>
     c92:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <node+0x51>
     c96:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <node+0x50>
     c9a:	8c e0       	ldi	r24, 0x0C	; 12
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <node+0x53>
     ca2:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <node+0x52>
     ca6:	4c e1       	ldi	r20, 0x1C	; 28
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	50 93 13 07 	sts	0x0713, r21	; 0x800713 <node+0x55>
     cae:	40 93 12 07 	sts	0x0712, r20	; 0x800712 <node+0x54>
     cb2:	4d e1       	ldi	r20, 0x1D	; 29
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	50 93 15 07 	sts	0x0715, r21	; 0x800715 <node+0x57>
     cba:	40 93 14 07 	sts	0x0714, r20	; 0x800714 <node+0x56>
     cbe:	30 93 17 07 	sts	0x0717, r19	; 0x800717 <node+0x59>
     cc2:	20 93 16 07 	sts	0x0716, r18	; 0x800716 <node+0x58>
     cc6:	2d e0       	ldi	r18, 0x0D	; 13
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	30 93 19 07 	sts	0x0719, r19	; 0x800719 <node+0x5b>
     cce:	20 93 18 07 	sts	0x0718, r18	; 0x800718 <node+0x5a>
     cd2:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <node+0x5d>
     cd6:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <node+0x5c>
     cda:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <node+0x5f>
     cde:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <node+0x5e>
     ce2:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <node+0x61>
     ce6:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <node+0x60>
     cea:	8e e0       	ldi	r24, 0x0E	; 14
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <node+0x63>
     cf2:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <node+0x62>
     cf6:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <node+0x65>
     cfa:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <node+0x64>
     cfe:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <node+0x67>
     d02:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <node+0x66>
     d06:	30 93 27 07 	sts	0x0727, r19	; 0x800727 <node+0x69>
     d0a:	20 93 26 07 	sts	0x0726, r18	; 0x800726 <node+0x68>
     d0e:	d0 93 29 07 	sts	0x0729, r29	; 0x800729 <node+0x6b>
     d12:	c0 93 28 07 	sts	0x0728, r28	; 0x800728 <node+0x6a>
     d16:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <node+0x6d>
     d1a:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <node+0x6c>
     d1e:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <node+0x6f>
     d22:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <node+0x6e>
     d26:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <node+0x71>
     d2a:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <node+0x70>
     d2e:	20 e1       	ldi	r18, 0x10	; 16
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	30 93 31 07 	sts	0x0731, r19	; 0x800731 <node+0x73>
     d36:	20 93 30 07 	sts	0x0730, r18	; 0x800730 <node+0x72>
     d3a:	87 e2       	ldi	r24, 0x27	; 39
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <node+0x75>
     d42:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <node+0x74>
     d46:	88 e2       	ldi	r24, 0x28	; 40
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <node+0x77>
     d4e:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <node+0x76>
     d52:	d0 93 37 07 	sts	0x0737, r29	; 0x800737 <node+0x79>
     d56:	c0 93 36 07 	sts	0x0736, r28	; 0x800736 <node+0x78>
     d5a:	81 e1       	ldi	r24, 0x11	; 17
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <node+0x7b>
     d62:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <node+0x7a>
     d66:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <node+0x7d>
     d6a:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <node+0x7c>
     d6e:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <node+0x7f>
     d72:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <node+0x7e>
     d76:	30 93 3f 07 	sts	0x073F, r19	; 0x80073f <node+0x81>
     d7a:	20 93 3e 07 	sts	0x073E, r18	; 0x80073e <node+0x80>
     d7e:	22 e1       	ldi	r18, 0x12	; 18
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	30 93 41 07 	sts	0x0741, r19	; 0x800741 <node+0x83>
     d86:	20 93 40 07 	sts	0x0740, r18	; 0x800740 <node+0x82>
     d8a:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <node+0x85>
     d8e:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <node+0x84>
     d92:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <node+0x87>
     d96:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <node+0x86>
     d9a:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <node+0x89>
     d9e:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <node+0x88>
     da2:	83 e1       	ldi	r24, 0x13	; 19
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <node+0x8b>
     daa:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <node+0x8a>
     dae:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <node+0x8d>
     db2:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <node+0x8c>
     db6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <node+0x8f>
     dba:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <node+0x8e>
     dbe:	30 93 4f 07 	sts	0x074F, r19	; 0x80074f <node+0x91>
     dc2:	20 93 4e 07 	sts	0x074E, r18	; 0x80074e <node+0x90>
     dc6:	24 e1       	ldi	r18, 0x14	; 20
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	30 93 51 07 	sts	0x0751, r19	; 0x800751 <node+0x93>
     dce:	20 93 50 07 	sts	0x0750, r18	; 0x800750 <node+0x92>
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	50 93 53 07 	sts	0x0753, r21	; 0x800753 <node+0x95>
     dda:	40 93 52 07 	sts	0x0752, r20	; 0x800752 <node+0x94>
     dde:	41 e2       	ldi	r20, 0x21	; 33
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	50 93 55 07 	sts	0x0755, r21	; 0x800755 <node+0x97>
     de6:	40 93 54 07 	sts	0x0754, r20	; 0x800754 <node+0x96>
     dea:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <node+0x99>
     dee:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <node+0x98>
     df2:	85 e1       	ldi	r24, 0x15	; 21
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <node+0x9b>
     dfa:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <node+0x9a>
     dfe:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <node+0x9d>
     e02:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <node+0x9c>
     e06:	10 92 5d 07 	sts	0x075D, r1	; 0x80075d <node+0x9f>
     e0a:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <node+0x9e>
     e0e:	30 93 5f 07 	sts	0x075F, r19	; 0x80075f <node+0xa1>
     e12:	20 93 5e 07 	sts	0x075E, r18	; 0x80075e <node+0xa0>
     e16:	26 e1       	ldi	r18, 0x16	; 22
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	30 93 61 07 	sts	0x0761, r19	; 0x800761 <node+0xa3>
     e1e:	20 93 60 07 	sts	0x0760, r18	; 0x800760 <node+0xa2>
     e22:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <node+0xa5>
     e26:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <node+0xa4>
     e2a:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <node+0xa7>
     e2e:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <node+0xa6>
     e32:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <node+0xa9>
     e36:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <node+0xa8>
     e3a:	87 e1       	ldi	r24, 0x17	; 23
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <node+0xab>
     e42:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <node+0xaa>
     e46:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <node+0xad>
     e4a:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <node+0xac>
     e4e:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <node+0xaf>
     e52:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <node+0xae>
     e56:	86 e1       	ldi	r24, 0x16	; 22
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <node+0xb1>
     e5e:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <node+0xb0>
     e62:	88 e1       	ldi	r24, 0x18	; 24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <node+0xb3>
     e6a:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <node+0xb2>
     e6e:	c9 e2       	ldi	r28, 0x29	; 41
     e70:	d0 e0       	ldi	r29, 0x00	; 0
     e72:	d0 93 73 07 	sts	0x0773, r29	; 0x800773 <node+0xb5>
     e76:	c0 93 72 07 	sts	0x0772, r28	; 0x800772 <node+0xb4>
     e7a:	0f 2e       	mov	r0, r31
     e7c:	fa e2       	ldi	r31, 0x2A	; 42
     e7e:	af 2e       	mov	r10, r31
     e80:	b1 2c       	mov	r11, r1
     e82:	f0 2d       	mov	r31, r0
     e84:	b0 92 75 07 	sts	0x0775, r11	; 0x800775 <node+0xb7>
     e88:	a0 92 74 07 	sts	0x0774, r10	; 0x800774 <node+0xb6>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <node+0xb9>
     e94:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <node+0xb8>
     e98:	e7 e1       	ldi	r30, 0x17	; 23
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	f0 93 79 07 	sts	0x0779, r31	; 0x800779 <node+0xbb>
     ea0:	e0 93 78 07 	sts	0x0778, r30	; 0x800778 <node+0xba>
     ea4:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <node+0xbd>
     ea8:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <node+0xbc>
     eac:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <node+0xbf>
     eb0:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <node+0xbe>
     eb4:	0f 2e       	mov	r0, r31
     eb6:	f3 e0       	ldi	r31, 0x03	; 3
     eb8:	8f 2e       	mov	r8, r31
     eba:	91 2c       	mov	r9, r1
     ebc:	f0 2d       	mov	r31, r0
     ebe:	90 92 7f 07 	sts	0x077F, r9	; 0x80077f <node+0xc1>
     ec2:	80 92 7e 07 	sts	0x077E, r8	; 0x80077e <node+0xc0>
     ec6:	6a e1       	ldi	r22, 0x1A	; 26
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	70 93 81 07 	sts	0x0781, r23	; 0x800781 <node+0xc3>
     ece:	60 93 80 07 	sts	0x0780, r22	; 0x800780 <node+0xc2>
     ed2:	a4 e2       	ldi	r26, 0x24	; 36
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	b0 93 83 07 	sts	0x0783, r27	; 0x800783 <node+0xc5>
     eda:	a0 93 82 07 	sts	0x0782, r26	; 0x800782 <node+0xc4>
     ede:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <node+0xc7>
     ee2:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <node+0xc6>
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f9 e1       	ldi	r31, 0x19	; 25
     eea:	6f 2e       	mov	r6, r31
     eec:	71 2c       	mov	r7, r1
     eee:	f0 2d       	mov	r31, r0
     ef0:	70 92 87 07 	sts	0x0787, r7	; 0x800787 <node+0xc9>
     ef4:	60 92 86 07 	sts	0x0786, r6	; 0x800786 <node+0xc8>
     ef8:	4b e1       	ldi	r20, 0x1B	; 27
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	50 93 89 07 	sts	0x0789, r21	; 0x800789 <node+0xcb>
     f00:	40 93 88 07 	sts	0x0788, r20	; 0x800788 <node+0xca>
     f04:	85 e2       	ldi	r24, 0x25	; 37
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <node+0xcd>
     f0c:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <node+0xcc>
     f10:	0f 2e       	mov	r0, r31
     f12:	fc e2       	ldi	r31, 0x2C	; 44
     f14:	4f 2e       	mov	r4, r31
     f16:	51 2c       	mov	r5, r1
     f18:	f0 2d       	mov	r31, r0
     f1a:	50 92 8d 07 	sts	0x078D, r5	; 0x80078d <node+0xcf>
     f1e:	40 92 8c 07 	sts	0x078C, r4	; 0x80078c <node+0xce>
     f22:	70 93 8f 07 	sts	0x078F, r23	; 0x80078f <node+0xd1>
     f26:	60 93 8e 07 	sts	0x078E, r22	; 0x80078e <node+0xd0>
     f2a:	2c e1       	ldi	r18, 0x1C	; 28
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	30 93 91 07 	sts	0x0791, r19	; 0x800791 <node+0xd3>
     f32:	20 93 90 07 	sts	0x0790, r18	; 0x800790 <node+0xd2>
     f36:	86 e2       	ldi	r24, 0x26	; 38
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <node+0xd5>
     f3e:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <node+0xd4>
     f42:	0d e2       	ldi	r16, 0x2D	; 45
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	10 93 95 07 	sts	0x0795, r17	; 0x800795 <node+0xd7>
     f4a:	00 93 94 07 	sts	0x0794, r16	; 0x800794 <node+0xd6>
     f4e:	0b e0       	ldi	r16, 0x0B	; 11
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	10 93 97 07 	sts	0x0797, r17	; 0x800797 <node+0xd9>
     f56:	00 93 96 07 	sts	0x0796, r16	; 0x800796 <node+0xd8>
     f5a:	50 93 99 07 	sts	0x0799, r21	; 0x800799 <node+0xdb>
     f5e:	40 93 98 07 	sts	0x0798, r20	; 0x800798 <node+0xda>
     f62:	8d e1       	ldi	r24, 0x1D	; 29
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <node+0xdd>
     f6a:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <node+0xdc>
     f6e:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <node+0xdf>
     f72:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <node+0xde>
     f76:	10 93 9f 07 	sts	0x079F, r17	; 0x80079f <node+0xe1>
     f7a:	00 93 9e 07 	sts	0x079E, r16	; 0x80079e <node+0xe0>
     f7e:	30 93 a1 07 	sts	0x07A1, r19	; 0x8007a1 <node+0xe3>
     f82:	20 93 a0 07 	sts	0x07A0, r18	; 0x8007a0 <node+0xe2>
     f86:	2e e1       	ldi	r18, 0x1E	; 30
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	30 93 a3 07 	sts	0x07A3, r19	; 0x8007a3 <node+0xe5>
     f8e:	20 93 a2 07 	sts	0x07A2, r18	; 0x8007a2 <node+0xe4>
     f92:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <node+0xe7>
     f96:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <node+0xe6>
     f9a:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <node+0xe9>
     f9e:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <node+0xe8>
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 a9 07 	sts	0x07A9, r25	; 0x8007a9 <node+0xeb>
     faa:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <node+0xea>
     fae:	07 e2       	ldi	r16, 0x27	; 39
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	10 93 ab 07 	sts	0x07AB, r17	; 0x8007ab <node+0xed>
     fb6:	00 93 aa 07 	sts	0x07AA, r16	; 0x8007aa <node+0xec>
     fba:	0f 2e       	mov	r0, r31
     fbc:	fe e2       	ldi	r31, 0x2E	; 46
     fbe:	2f 2e       	mov	r2, r31
     fc0:	31 2c       	mov	r3, r1
     fc2:	f0 2d       	mov	r31, r0
     fc4:	30 92 ad 07 	sts	0x07AD, r3	; 0x8007ad <node+0xef>
     fc8:	20 92 ac 07 	sts	0x07AC, r2	; 0x8007ac <node+0xee>
     fcc:	30 93 af 07 	sts	0x07AF, r19	; 0x8007af <node+0xf1>
     fd0:	20 93 ae 07 	sts	0x07AE, r18	; 0x8007ae <node+0xf0>
     fd4:	68 94       	set
     fd6:	ee 24       	eor	r14, r14
     fd8:	e5 f8       	bld	r14, 5
     fda:	f1 2c       	mov	r15, r1
     fdc:	f0 92 b1 07 	sts	0x07B1, r15	; 0x8007b1 <node+0xf3>
     fe0:	e0 92 b0 07 	sts	0x07B0, r14	; 0x8007b0 <node+0xf2>
     fe4:	08 e2       	ldi	r16, 0x28	; 40
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	10 93 b3 07 	sts	0x07B3, r17	; 0x8007b3 <node+0xf5>
     fec:	00 93 b2 07 	sts	0x07B2, r16	; 0x8007b2 <node+0xf4>
     ff0:	0f 2e       	mov	r0, r31
     ff2:	ff e2       	ldi	r31, 0x2F	; 47
     ff4:	cf 2e       	mov	r12, r31
     ff6:	d1 2c       	mov	r13, r1
     ff8:	f0 2d       	mov	r31, r0
     ffa:	d0 92 b5 07 	sts	0x07B5, r13	; 0x8007b5 <node+0xf7>
     ffe:	c0 92 b4 07 	sts	0x07B4, r12	; 0x8007b4 <node+0xf6>
    1002:	0f 2e       	mov	r0, r31
    1004:	f3 e1       	ldi	r31, 0x13	; 19
    1006:	cf 2e       	mov	r12, r31
    1008:	d1 2c       	mov	r13, r1
    100a:	f0 2d       	mov	r31, r0
    100c:	d0 92 b7 07 	sts	0x07B7, r13	; 0x8007b7 <node+0xf9>
    1010:	c0 92 b6 07 	sts	0x07B6, r12	; 0x8007b6 <node+0xf8>
    1014:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <node+0xfb>
    1018:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <node+0xfa>
    101c:	01 e2       	ldi	r16, 0x21	; 33
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	10 93 bb 07 	sts	0x07BB, r17	; 0x8007bb <node+0xfd>
    1024:	00 93 ba 07 	sts	0x07BA, r16	; 0x8007ba <node+0xfc>
    1028:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <node+0xff>
    102c:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <node+0xfe>
    1030:	d0 92 bf 07 	sts	0x07BF, r13	; 0x8007bf <node+0x101>
    1034:	c0 92 be 07 	sts	0x07BE, r12	; 0x8007be <node+0x100>
    1038:	f0 92 c1 07 	sts	0x07C1, r15	; 0x8007c1 <node+0x103>
    103c:	e0 92 c0 07 	sts	0x07C0, r14	; 0x8007c0 <node+0x102>
    1040:	0f 2e       	mov	r0, r31
    1042:	f2 e2       	ldi	r31, 0x22	; 34
    1044:	ef 2e       	mov	r14, r31
    1046:	f1 2c       	mov	r15, r1
    1048:	f0 2d       	mov	r31, r0
    104a:	f0 92 c3 07 	sts	0x07C3, r15	; 0x8007c3 <node+0x105>
    104e:	e0 92 c2 07 	sts	0x07C2, r14	; 0x8007c2 <node+0x104>
    1052:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <node+0x107>
    1056:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <node+0x106>
    105a:	10 93 c7 07 	sts	0x07C7, r17	; 0x8007c7 <node+0x109>
    105e:	00 93 c6 07 	sts	0x07C6, r16	; 0x8007c6 <node+0x108>
    1062:	03 e2       	ldi	r16, 0x23	; 35
    1064:	10 e0       	ldi	r17, 0x00	; 0
    1066:	10 93 c9 07 	sts	0x07C9, r17	; 0x8007c9 <node+0x10b>
    106a:	00 93 c8 07 	sts	0x07C8, r16	; 0x8007c8 <node+0x10a>
    106e:	d0 93 cb 07 	sts	0x07CB, r29	; 0x8007cb <node+0x10d>
    1072:	c0 93 ca 07 	sts	0x07CA, r28	; 0x8007ca <node+0x10c>
    1076:	c0 e3       	ldi	r28, 0x30	; 48
    1078:	d0 e0       	ldi	r29, 0x00	; 0
    107a:	d0 93 cd 07 	sts	0x07CD, r29	; 0x8007cd <node+0x10f>
    107e:	c0 93 cc 07 	sts	0x07CC, r28	; 0x8007cc <node+0x10e>
    1082:	f0 92 cf 07 	sts	0x07CF, r15	; 0x8007cf <node+0x111>
    1086:	e0 92 ce 07 	sts	0x07CE, r14	; 0x8007ce <node+0x110>
    108a:	b0 93 d1 07 	sts	0x07D1, r27	; 0x8007d1 <node+0x113>
    108e:	a0 93 d0 07 	sts	0x07D0, r26	; 0x8007d0 <node+0x112>
    1092:	b0 92 d3 07 	sts	0x07D3, r11	; 0x8007d3 <node+0x115>
    1096:	a0 92 d2 07 	sts	0x07D2, r10	; 0x8007d2 <node+0x114>
    109a:	ab e2       	ldi	r26, 0x2B	; 43
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	b0 93 d5 07 	sts	0x07D5, r27	; 0x8007d5 <node+0x117>
    10a2:	a0 93 d4 07 	sts	0x07D4, r26	; 0x8007d4 <node+0x116>
    10a6:	90 92 d7 07 	sts	0x07D7, r9	; 0x8007d7 <node+0x119>
    10aa:	80 92 d6 07 	sts	0x07D6, r8	; 0x8007d6 <node+0x118>
    10ae:	70 92 d9 07 	sts	0x07D9, r7	; 0x8007d9 <node+0x11b>
    10b2:	60 92 d8 07 	sts	0x07D8, r6	; 0x8007d8 <node+0x11a>
    10b6:	10 93 db 07 	sts	0x07DB, r17	; 0x8007db <node+0x11d>
    10ba:	00 93 da 07 	sts	0x07DA, r16	; 0x8007da <node+0x11c>
    10be:	10 92 dd 07 	sts	0x07DD, r1	; 0x8007dd <node+0x11f>
    10c2:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <node+0x11e>
    10c6:	0f 2e       	mov	r0, r31
    10c8:	f7 e0       	ldi	r31, 0x07	; 7
    10ca:	cf 2e       	mov	r12, r31
    10cc:	d1 2c       	mov	r13, r1
    10ce:	f0 2d       	mov	r31, r0
    10d0:	d0 92 df 07 	sts	0x07DF, r13	; 0x8007df <node+0x121>
    10d4:	c0 92 de 07 	sts	0x07DE, r12	; 0x8007de <node+0x120>
    10d8:	70 93 e1 07 	sts	0x07E1, r23	; 0x8007e1 <node+0x123>
    10dc:	60 93 e0 07 	sts	0x07E0, r22	; 0x8007e0 <node+0x122>
    10e0:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <node+0x125>
    10e4:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <node+0x124>
    10e8:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <node+0x127>
    10ec:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <node+0x126>
    10f0:	d0 92 e7 07 	sts	0x07E7, r13	; 0x8007e7 <node+0x129>
    10f4:	c0 92 e6 07 	sts	0x07E6, r12	; 0x8007e6 <node+0x128>
    10f8:	50 93 e9 07 	sts	0x07E9, r21	; 0x8007e9 <node+0x12b>
    10fc:	40 93 e8 07 	sts	0x07E8, r20	; 0x8007e8 <node+0x12a>
    1100:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <node+0x12d>
    1104:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <node+0x12c>
    1108:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <node+0x12f>
    110c:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <node+0x12e>
    1110:	0f 2e       	mov	r0, r31
    1112:	ff e0       	ldi	r31, 0x0F	; 15
    1114:	cf 2e       	mov	r12, r31
    1116:	d1 2c       	mov	r13, r1
    1118:	f0 2d       	mov	r31, r0
    111a:	d0 92 ef 07 	sts	0x07EF, r13	; 0x8007ef <node+0x131>
    111e:	c0 92 ee 07 	sts	0x07EE, r12	; 0x8007ee <node+0x130>
    1122:	30 93 f1 07 	sts	0x07F1, r19	; 0x8007f1 <node+0x133>
    1126:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <node+0x132>
    112a:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <node+0x135>
    112e:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <node+0x134>
    1132:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <node+0x137>
    1136:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <node+0x136>
    113a:	d0 92 f7 07 	sts	0x07F7, r13	; 0x8007f7 <node+0x139>
    113e:	c0 92 f6 07 	sts	0x07F6, r12	; 0x8007f6 <node+0x138>
    1142:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <node+0x13b>
    1146:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <node+0x13a>
    114a:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <node+0x13d>
    114e:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <node+0x13c>
    1152:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <node+0x13f>
    1156:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <node+0x13e>
    115a:	f0 93 ff 07 	sts	0x07FF, r31	; 0x8007ff <node+0x141>
    115e:	e0 93 fe 07 	sts	0x07FE, r30	; 0x8007fe <node+0x140>
    1162:	f0 92 01 08 	sts	0x0801, r15	; 0x800801 <node+0x143>
    1166:	e0 92 00 08 	sts	0x0800, r14	; 0x800800 <node+0x142>
    116a:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <node+0x145>
    116e:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <node+0x144>
    1172:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <node+0x147>
    1176:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <node+0x146>
    117a:	f0 93 07 08 	sts	0x0807, r31	; 0x800807 <node+0x149>
    117e:	e0 93 06 08 	sts	0x0806, r30	; 0x800806 <node+0x148>
    1182:	10 93 09 08 	sts	0x0809, r17	; 0x800809 <node+0x14b>
    1186:	00 93 08 08 	sts	0x0808, r16	; 0x800808 <node+0x14a>
    118a:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <node+0x14d>
    118e:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <node+0x14c>
    1192:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <node+0x14f>
    1196:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <node+0x14e>
    119a:	10 93 0f 08 	sts	0x080F, r17	; 0x80080f <node+0x151>
    119e:	00 93 0e 08 	sts	0x080E, r16	; 0x80080e <node+0x150>
    11a2:	50 92 11 08 	sts	0x0811, r5	; 0x800811 <node+0x153>
    11a6:	40 92 10 08 	sts	0x0810, r4	; 0x800810 <node+0x152>
    11aa:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <node+0x155>
    11ae:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <node+0x154>
    11b2:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <node+0x157>
    11b6:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <node+0x156>
    11ba:	70 93 17 08 	sts	0x0817, r23	; 0x800817 <node+0x159>
    11be:	60 93 16 08 	sts	0x0816, r22	; 0x800816 <node+0x158>
    11c2:	b0 93 19 08 	sts	0x0819, r27	; 0x800819 <node+0x15b>
    11c6:	a0 93 18 08 	sts	0x0818, r26	; 0x800818 <node+0x15a>
    11ca:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <node+0x15d>
    11ce:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <node+0x15c>
    11d2:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <node+0x15f>
    11d6:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <node+0x15e>
    11da:	50 93 1f 08 	sts	0x081F, r21	; 0x80081f <node+0x161>
    11de:	40 93 1e 08 	sts	0x081E, r20	; 0x80081e <node+0x160>
    11e2:	30 92 21 08 	sts	0x0821, r3	; 0x800821 <node+0x163>
    11e6:	20 92 20 08 	sts	0x0820, r2	; 0x800820 <node+0x162>
    11ea:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <node+0x165>
    11ee:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <node+0x164>
    11f2:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <node+0x167>
    11f6:	10 92 24 08 	sts	0x0824, r1	; 0x800824 <node+0x166>
    11fa:	30 93 27 08 	sts	0x0827, r19	; 0x800827 <node+0x169>
    11fe:	20 93 26 08 	sts	0x0826, r18	; 0x800826 <node+0x168>
    1202:	0d e2       	ldi	r16, 0x2D	; 45
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	10 93 29 08 	sts	0x0829, r17	; 0x800829 <node+0x16b>
    120a:	00 93 28 08 	sts	0x0828, r16	; 0x800828 <node+0x16a>
    120e:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <node+0x16d>
    1212:	10 92 2a 08 	sts	0x082A, r1	; 0x80082a <node+0x16c>
    1216:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <node+0x16f>
    121a:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <node+0x16e>
    121e:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <node+0x171>
    1222:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <node+0x170>
    1226:	d0 93 31 08 	sts	0x0831, r29	; 0x800831 <node+0x173>
    122a:	c0 93 30 08 	sts	0x0830, r28	; 0x800830 <node+0x172>
    122e:	10 92 33 08 	sts	0x0833, r1	; 0x800833 <node+0x175>
    1232:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <node+0x174>
    1236:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <node+0x177>
    123a:	10 92 34 08 	sts	0x0834, r1	; 0x800834 <node+0x176>
    123e:	f0 92 37 08 	sts	0x0837, r15	; 0x800837 <node+0x179>
    1242:	e0 92 36 08 	sts	0x0836, r14	; 0x800836 <node+0x178>
    1246:	2f e2       	ldi	r18, 0x2F	; 47
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <node+0x17b>
    124e:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <node+0x17a>
    1252:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <node+0x17d>
    1256:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <node+0x17c>
    125a:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <node+0x17f>
    125e:	10 92 3c 08 	sts	0x083C, r1	; 0x80083c <node+0x17e>
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	7f 90       	pop	r7
    127c:	6f 90       	pop	r6
    127e:	5f 90       	pop	r5
    1280:	4f 90       	pop	r4
    1282:	3f 90       	pop	r3
    1284:	2f 90       	pop	r2
    1286:	08 95       	ret

00001288 <__vector_25>:
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	0b b6       	in	r0, 0x3b	; 59
    1294:	0f 92       	push	r0
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12aa:	88 23       	and	r24, r24
    12ac:	0c f0       	brlt	.+2      	; 0x12b0 <__vector_25+0x28>
    12ae:	30 c1       	rjmp	.+608    	; 0x1510 <__vector_25+0x288>
    12b0:	98 2f       	mov	r25, r24
    12b2:	9f 77       	andi	r25, 0x7F	; 127
    12b4:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <lastCommand>
    12b8:	4e 2f       	mov	r20, r30
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	fa 01       	movw	r30, r20
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	e0 31       	cpi	r30, 0x10	; 16
    12c2:	f1 05       	cpc	r31, r1
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__vector_25+0x40>
    12c6:	32 c1       	rjmp	.+612    	; 0x152c <__vector_25+0x2a4>
    12c8:	88 27       	eor	r24, r24
    12ca:	ee 58       	subi	r30, 0x8E	; 142
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__tablejump2__>
    12d4:	e0 91 1c 06 	lds	r30, 0x061C	; 0x80061c <noteCount>
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	ef 5c       	subi	r30, 0xCF	; 207
    12dc:	f9 4f       	sbci	r31, 0xF9	; 249
    12de:	90 83       	st	Z, r25
    12e0:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    12e4:	8f 5f       	subi	r24, 0xFF	; 255
    12e6:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <noteCount>
    12ea:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    12ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    12f2:	1c c1       	rjmp	.+568    	; 0x152c <__vector_25+0x2a4>
    12f4:	e0 91 1b 06 	lds	r30, 0x061B	; 0x80061b <noteCount2>
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	e3 5e       	subi	r30, 0xE3	; 227
    12fc:	f9 4f       	sbci	r31, 0xF9	; 249
    12fe:	90 83       	st	Z, r25
    1300:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <noteCount2>
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <noteCount2>
    130a:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <noteCount2>
    130e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1312:	0c c1       	rjmp	.+536    	; 0x152c <__vector_25+0x2a4>
    1314:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <taskCount>
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	eb 5b       	subi	r30, 0xBB	; 187
    131c:	f9 4f       	sbci	r31, 0xF9	; 249
    131e:	90 83       	st	Z, r25
    1320:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <taskCount>
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <taskCount>
    132a:	00 c1       	rjmp	.+512    	; 0x152c <__vector_25+0x2a4>
    132c:	e0 91 17 06 	lds	r30, 0x0617	; 0x800617 <taskCount2>
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	ef 5b       	subi	r30, 0xBF	; 191
    1334:	f7 4f       	sbci	r31, 0xF7	; 247
    1336:	90 83       	st	Z, r25
    1338:	80 91 17 06 	lds	r24, 0x0617	; 0x800617 <taskCount2>
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <taskCount2>
    1342:	f4 c0       	rjmp	.+488    	; 0x152c <__vector_25+0x2a4>
    1344:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <otherBotLocation>
    1348:	f1 c0       	rjmp	.+482    	; 0x152c <__vector_25+0x2a4>
    134a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <otherBotMovingTo>
    134e:	ee c0       	rjmp	.+476    	; 0x152c <__vector_25+0x2a4>
    1350:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <noteToStrike>
    1354:	89 13       	cpse	r24, r25
    1356:	ea c0       	rjmp	.+468    	; 0x152c <__vector_25+0x2a4>
    1358:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <noteToStrike>
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <noteToStrike>
    1362:	e4 c0       	rjmp	.+456    	; 0x152c <__vector_25+0x2a4>
    1364:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <noteToProcess>
    1368:	89 13       	cpse	r24, r25
    136a:	e0 c0       	rjmp	.+448    	; 0x152c <__vector_25+0x2a4>
    136c:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <noteToProcess>
    1370:	8f 5f       	subi	r24, 0xFF	; 255
    1372:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <noteToProcess>
    1376:	da c0       	rjmp	.+436    	; 0x152c <__vector_25+0x2a4>
    1378:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <taskCost>
    137c:	89 0f       	add	r24, r25
    137e:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <taskCost>
    1382:	d4 c0       	rjmp	.+424    	; 0x152c <__vector_25+0x2a4>
    1384:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <otherBotLastTaskIndex>
    1388:	d1 c0       	rjmp	.+418    	; 0x152c <__vector_25+0x2a4>
    138a:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <wchTask>
    138e:	ce c0       	rjmp	.+412    	; 0x152c <__vector_25+0x2a4>
    1390:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    1394:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    1398:	eb 5b       	subi	r30, 0xBB	; 187
    139a:	f9 4f       	sbci	r31, 0xF9	; 249
    139c:	80 81       	ld	r24, Z
    139e:	8f 37       	cpi	r24, 0x7F	; 127
    13a0:	51 f0       	breq	.+20     	; 0x13b6 <__vector_25+0x12e>
    13a2:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    13a6:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    13aa:	eb 5b       	subi	r30, 0xBB	; 187
    13ac:	f9 4f       	sbci	r31, 0xF9	; 249
    13ae:	80 81       	ld	r24, Z
    13b0:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <tmpTask1>
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <__vector_25+0x140>
    13b6:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    13ba:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    13be:	ef 5b       	subi	r30, 0xBF	; 191
    13c0:	f7 4f       	sbci	r31, 0xF7	; 247
    13c2:	80 81       	ld	r24, Z
    13c4:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <tmpTask2>
    13c8:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <wchTask>
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	81 f4       	brne	.+32     	; 0x13f0 <__vector_25+0x168>
    13d0:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    13d4:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    13d8:	eb 5b       	subi	r30, 0xBB	; 187
    13da:	f9 4f       	sbci	r31, 0xF9	; 249
    13dc:	90 83       	st	Z, r25
    13de:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    13e2:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    13e6:	ef 5b       	subi	r30, 0xBF	; 191
    13e8:	f7 4f       	sbci	r31, 0xF7	; 247
    13ea:	8f e7       	ldi	r24, 0x7F	; 127
    13ec:	80 83       	st	Z, r24
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <__vector_25+0x186>
    13f0:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    13f4:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    13f8:	ef 5b       	subi	r30, 0xBF	; 191
    13fa:	f7 4f       	sbci	r31, 0xF7	; 247
    13fc:	90 83       	st	Z, r25
    13fe:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    1402:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    1406:	eb 5b       	subi	r30, 0xBB	; 187
    1408:	f9 4f       	sbci	r31, 0xF9	; 249
    140a:	8f e7       	ldi	r24, 0x7F	; 127
    140c:	80 83       	st	Z, r24
    140e:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <tmpTask1>
    1412:	8f 37       	cpi	r24, 0x7F	; 127
    1414:	19 f1       	breq	.+70     	; 0x145c <__vector_25+0x1d4>
    1416:	e0 ec       	ldi	r30, 0xC0	; 192
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	85 ff       	sbrs	r24, 5
    141e:	fd cf       	rjmp	.-6      	; 0x141a <__vector_25+0x192>
    1420:	8f e0       	ldi	r24, 0x0F	; 15
    1422:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1426:	e0 ec       	ldi	r30, 0xC0	; 192
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	85 ff       	sbrs	r24, 5
    142e:	fd cf       	rjmp	.-6      	; 0x142a <__vector_25+0x1a2>
    1430:	81 e8       	ldi	r24, 0x81	; 129
    1432:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1436:	90 91 d7 09 	lds	r25, 0x09D7	; 0x8009d7 <tmpTask1>
    143a:	e0 ec       	ldi	r30, 0xC0	; 192
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	85 ff       	sbrs	r24, 5
    1442:	fd cf       	rjmp	.-6      	; 0x143e <__vector_25+0x1b6>
    1444:	80 e1       	ldi	r24, 0x10	; 16
    1446:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    144a:	90 68       	ori	r25, 0x80	; 128
    144c:	e0 ec       	ldi	r30, 0xC0	; 192
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	85 ff       	sbrs	r24, 5
    1454:	fd cf       	rjmp	.-6      	; 0x1450 <__vector_25+0x1c8>
    1456:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    145a:	22 c0       	rjmp	.+68     	; 0x14a0 <__vector_25+0x218>
    145c:	e0 ec       	ldi	r30, 0xC0	; 192
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	85 ff       	sbrs	r24, 5
    1464:	fd cf       	rjmp	.-6      	; 0x1460 <__vector_25+0x1d8>
    1466:	8f e0       	ldi	r24, 0x0F	; 15
    1468:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    146c:	e0 ec       	ldi	r30, 0xC0	; 192
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	85 ff       	sbrs	r24, 5
    1474:	fd cf       	rjmp	.-6      	; 0x1470 <__vector_25+0x1e8>
    1476:	82 e8       	ldi	r24, 0x82	; 130
    1478:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    147c:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <tmpTask2>
    1480:	e0 ec       	ldi	r30, 0xC0	; 192
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	85 ff       	sbrs	r24, 5
    1488:	fd cf       	rjmp	.-6      	; 0x1484 <__vector_25+0x1fc>
    148a:	80 e1       	ldi	r24, 0x10	; 16
    148c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1490:	90 68       	ori	r25, 0x80	; 128
    1492:	e0 ec       	ldi	r30, 0xC0	; 192
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	85 ff       	sbrs	r24, 5
    149a:	fd cf       	rjmp	.-6      	; 0x1496 <__vector_25+0x20e>
    149c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <swap+0x1>
    14a8:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <swap>
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <__vector_25+0x2a4>
    14ae:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <wchTask>
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	81 f4       	brne	.+32     	; 0x14d6 <__vector_25+0x24e>
    14b6:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    14ba:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    14be:	eb 5b       	subi	r30, 0xBB	; 187
    14c0:	f9 4f       	sbci	r31, 0xF9	; 249
    14c2:	90 83       	st	Z, r25
    14c4:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    14c8:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    14cc:	ef 5b       	subi	r30, 0xBF	; 191
    14ce:	f7 4f       	sbci	r31, 0xF7	; 247
    14d0:	8f e7       	ldi	r24, 0x7F	; 127
    14d2:	80 83       	st	Z, r24
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <__vector_25+0x26c>
    14d6:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    14da:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    14de:	ef 5b       	subi	r30, 0xBF	; 191
    14e0:	f7 4f       	sbci	r31, 0xF7	; 247
    14e2:	90 83       	st	Z, r25
    14e4:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    14e8:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    14ec:	eb 5b       	subi	r30, 0xBB	; 187
    14ee:	f9 4f       	sbci	r31, 0xF9	; 249
    14f0:	8f e7       	ldi	r24, 0x7F	; 127
    14f2:	80 83       	st	Z, r24
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <swap+0x1>
    14fc:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <swap>
    1500:	15 c0       	rjmp	.+42     	; 0x152c <__vector_25+0x2a4>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <botEnd+0x1>
    150a:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <botEnd>
    150e:	0e c0       	rjmp	.+28     	; 0x152c <__vector_25+0x2a4>
    1510:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <lastCommand>
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	19 f0       	breq	.+6      	; 0x151e <__vector_25+0x296>
    1518:	8c 30       	cpi	r24, 0x0C	; 12
    151a:	29 f0       	breq	.+10     	; 0x1526 <__vector_25+0x29e>
    151c:	07 c0       	rjmp	.+14     	; 0x152c <__vector_25+0x2a4>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <notesReceived>
    1524:	03 c0       	rjmp	.+6      	; 0x152c <__vector_25+0x2a4>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <notesReceived2>
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	9f 91       	pop	r25
    1532:	8f 91       	pop	r24
    1534:	7f 91       	pop	r23
    1536:	6f 91       	pop	r22
    1538:	5f 91       	pop	r21
    153a:	4f 91       	pop	r20
    153c:	0f 90       	pop	r0
    153e:	0b be       	out	0x3b, r0	; 59
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <__vector_51>:
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	0b b6       	in	r0, 0x3b	; 59
    1556:	0f 92       	push	r0
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
    1560:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1564:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <notesReceived>
    1568:	91 11       	cpse	r25, r1
    156a:	18 c0       	rjmp	.+48     	; 0x159c <__vector_51+0x52>
    156c:	8f 3f       	cpi	r24, 0xFF	; 255
    156e:	81 f0       	breq	.+32     	; 0x1590 <__vector_51+0x46>
    1570:	e0 91 1c 06 	lds	r30, 0x061C	; 0x80061c <noteCount>
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	ef 5c       	subi	r30, 0xCF	; 207
    1578:	f9 4f       	sbci	r31, 0xF9	; 249
    157a:	80 83       	st	Z, r24
    157c:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <noteCount>
    1586:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    158a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    158e:	21 c0       	rjmp	.+66     	; 0x15d2 <__vector_51+0x88>
    1590:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <notesReceived>
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <__vector_51+0x88>
    159c:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <notesReceived2>
    15a0:	91 11       	cpse	r25, r1
    15a2:	17 c0       	rjmp	.+46     	; 0x15d2 <__vector_51+0x88>
    15a4:	8f 3f       	cpi	r24, 0xFF	; 255
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <__vector_51+0x7e>
    15a8:	e0 91 1b 06 	lds	r30, 0x061B	; 0x80061b <noteCount2>
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	e3 5e       	subi	r30, 0xE3	; 227
    15b0:	f9 4f       	sbci	r31, 0xF9	; 249
    15b2:	80 83       	st	Z, r24
    15b4:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <noteCount2>
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <noteCount2>
    15be:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <noteCount2>
    15c2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <__vector_51+0x88>
    15c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <notesReceived2>
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	0f 90       	pop	r0
    15dc:	0b be       	out	0x3b, r0	; 59
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <servo1_pin_config>:
    15e8:	25 9a       	sbi	0x04, 5	; 4
    15ea:	2d 9a       	sbi	0x05, 5	; 5
    15ec:	08 95       	ret

000015ee <timer1_init>:
    15ee:	e1 e8       	ldi	r30, 0x81	; 129
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	10 82       	st	Z, r1
    15f4:	8c ef       	ldi	r24, 0xFC	; 252
    15f6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    160c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    1610:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1614:	8b ea       	ldi	r24, 0xAB	; 171
    1616:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    161a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    161e:	8c e0       	ldi	r24, 0x0C	; 12
    1620:	80 83       	st	Z, r24
    1622:	08 95       	ret

00001624 <servo_1>:
    1624:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1628:	68 2f       	mov	r22, r24
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__floatunsisf>
    1634:	2b e7       	ldi	r18, 0x7B	; 123
    1636:	34 e1       	ldi	r19, 0x14	; 20
    1638:	4e ee       	ldi	r20, 0xEE	; 238
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 de 18 	call	0x31bc	; 0x31bc <__divsf3>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4c e0       	ldi	r20, 0x0C	; 12
    1646:	52 e4       	ldi	r21, 0x42	; 66
    1648:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__addsf3>
    164c:	0e 94 46 19 	call	0x328c	; 0x328c <__fixunssfsi>
    1650:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    1654:	08 95       	ret

00001656 <buzzer_pin_config>:
    1656:	3b 9a       	sbi	0x07, 3	; 7
    1658:	43 98       	cbi	0x08, 3	; 8
    165a:	08 95       	ret

0000165c <buzzer_on>:
    165c:	86 b1       	in	r24, 0x06	; 6
    165e:	88 60       	ori	r24, 0x08	; 8
    1660:	88 b9       	out	0x08, r24	; 8
    1662:	08 95       	ret

00001664 <buzzer_off>:
    1664:	86 b1       	in	r24, 0x06	; 6
    1666:	87 7f       	andi	r24, 0xF7	; 247
    1668:	88 b9       	out	0x08, r24	; 8
    166a:	08 95       	ret

0000166c <adc_pin_config>:
    166c:	10 ba       	out	0x10, r1	; 16
    166e:	11 ba       	out	0x11, r1	; 17
    1670:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    1674:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    1678:	08 95       	ret

0000167a <motion_pin_config>:
    167a:	81 b1       	in	r24, 0x01	; 1
    167c:	8f 60       	ori	r24, 0x0F	; 15
    167e:	81 b9       	out	0x01, r24	; 1
    1680:	82 b1       	in	r24, 0x02	; 2
    1682:	80 7f       	andi	r24, 0xF0	; 240
    1684:	82 b9       	out	0x02, r24	; 2
    1686:	ea e0       	ldi	r30, 0x0A	; 10
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	80 81       	ld	r24, Z
    168c:	88 61       	ori	r24, 0x18	; 24
    168e:	80 83       	st	Z, r24
    1690:	eb e0       	ldi	r30, 0x0B	; 11
    1692:	f1 e0       	ldi	r31, 0x01	; 1
    1694:	80 81       	ld	r24, Z
    1696:	88 61       	ori	r24, 0x18	; 24
    1698:	80 83       	st	Z, r24
    169a:	08 95       	ret

0000169c <left_encoder_pin_config>:
    169c:	6c 98       	cbi	0x0d, 4	; 13
    169e:	74 9a       	sbi	0x0e, 4	; 14
    16a0:	08 95       	ret

000016a2 <right_encoder_pin_config>:
    16a2:	6d 98       	cbi	0x0d, 5	; 13
    16a4:	75 9a       	sbi	0x0e, 5	; 14
    16a6:	08 95       	ret

000016a8 <port_init>:
    16a8:	e8 df       	rcall	.-48     	; 0x167a <motion_pin_config>
    16aa:	f8 df       	rcall	.-16     	; 0x169c <left_encoder_pin_config>
    16ac:	fa df       	rcall	.-12     	; 0x16a2 <right_encoder_pin_config>
    16ae:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_port_config>
    16b2:	dc df       	rcall	.-72     	; 0x166c <adc_pin_config>
    16b4:	d0 cf       	rjmp	.-96     	; 0x1656 <buzzer_pin_config>
    16b6:	08 95       	ret

000016b8 <timer5_init>:
    16b8:	e1 e2       	ldi	r30, 0x21	; 33
    16ba:	f1 e0       	ldi	r31, 0x01	; 1
    16bc:	10 82       	st	Z, r1
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    16ca:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    16ce:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    16d2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    16d6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    16da:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    16de:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    16e2:	89 ea       	ldi	r24, 0xA9	; 169
    16e4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    16e8:	8b e0       	ldi	r24, 0x0B	; 11
    16ea:	80 83       	st	Z, r24
    16ec:	08 95       	ret

000016ee <adc_init>:
    16ee:	ea e7       	ldi	r30, 0x7A	; 122
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	10 82       	st	Z, r1
    16f4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    16f8:	80 e2       	ldi	r24, 0x20	; 32
    16fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    16fe:	80 e8       	ldi	r24, 0x80	; 128
    1700:	80 bf       	out	0x30, r24	; 48
    1702:	86 e8       	ldi	r24, 0x86	; 134
    1704:	80 83       	st	Z, r24
    1706:	08 95       	ret

00001708 <ADC_Conversion>:
    1708:	88 30       	cpi	r24, 0x08	; 8
    170a:	18 f0       	brcs	.+6      	; 0x1712 <ADC_Conversion+0xa>
    170c:	98 e0       	ldi	r25, 0x08	; 8
    170e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1712:	87 70       	andi	r24, 0x07	; 7
    1714:	80 62       	ori	r24, 0x20	; 32
    1716:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    171a:	ea e7       	ldi	r30, 0x7A	; 122
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	80 83       	st	Z, r24
    1724:	80 81       	ld	r24, Z
    1726:	84 ff       	sbrs	r24, 4
    1728:	fd cf       	rjmp	.-6      	; 0x1724 <ADC_Conversion+0x1c>
    172a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    172e:	ea e7       	ldi	r30, 0x7A	; 122
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	90 81       	ld	r25, Z
    1734:	90 61       	ori	r25, 0x10	; 16
    1736:	90 83       	st	Z, r25
    1738:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    173c:	08 95       	ret

0000173e <left_position_encoder_interrupt_init>:
    173e:	f8 94       	cli
    1740:	ea e6       	ldi	r30, 0x6A	; 106
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	80 83       	st	Z, r24
    174a:	ec 9a       	sbi	0x1d, 4	; 29
    174c:	78 94       	sei
    174e:	08 95       	ret

00001750 <right_position_encoder_interrupt_init>:
    1750:	f8 94       	cli
    1752:	ea e6       	ldi	r30, 0x6A	; 106
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	88 60       	ori	r24, 0x08	; 8
    175a:	80 83       	st	Z, r24
    175c:	ed 9a       	sbi	0x1d, 5	; 29
    175e:	78 94       	sei
    1760:	08 95       	ret

00001762 <__vector_6>:
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <ShaftCountRight>
    1778:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    177c:	a0 91 b2 05 	lds	r26, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    1780:	b0 91 b3 05 	lds	r27, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	a1 1d       	adc	r26, r1
    1788:	b1 1d       	adc	r27, r1
    178a:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <ShaftCountRight>
    178e:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <ShaftCountRight+0x1>
    1792:	a0 93 b2 05 	sts	0x05B2, r26	; 0x8005b2 <ShaftCountRight+0x2>
    1796:	b0 93 b3 05 	sts	0x05B3, r27	; 0x8005b3 <ShaftCountRight+0x3>
    179a:	bf 91       	pop	r27
    179c:	af 91       	pop	r26
    179e:	9f 91       	pop	r25
    17a0:	8f 91       	pop	r24
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_5>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <ShaftCountLeft>
    17c2:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <ShaftCountLeft+0x1>
    17c6:	a0 91 b6 05 	lds	r26, 0x05B6	; 0x8005b6 <ShaftCountLeft+0x2>
    17ca:	b0 91 b7 05 	lds	r27, 0x05B7	; 0x8005b7 <ShaftCountLeft+0x3>
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	a1 1d       	adc	r26, r1
    17d2:	b1 1d       	adc	r27, r1
    17d4:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <ShaftCountLeft>
    17d8:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <ShaftCountLeft+0x1>
    17dc:	a0 93 b6 05 	sts	0x05B6, r26	; 0x8005b6 <ShaftCountLeft+0x2>
    17e0:	b0 93 b7 05 	sts	0x05B7, r27	; 0x8005b7 <ShaftCountLeft+0x3>
    17e4:	bf 91       	pop	r27
    17e6:	af 91       	pop	r26
    17e8:	9f 91       	pop	r25
    17ea:	8f 91       	pop	r24
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <motion_set>:
    17f6:	92 b1       	in	r25, 0x02	; 2
    17f8:	90 7f       	andi	r25, 0xF0	; 240
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	98 2b       	or	r25, r24
    17fe:	92 b9       	out	0x02, r25	; 2
    1800:	08 95       	ret

00001802 <forward>:
    1802:	86 e0       	ldi	r24, 0x06	; 6
    1804:	f8 cf       	rjmp	.-16     	; 0x17f6 <motion_set>
    1806:	08 95       	ret

00001808 <left>:
    1808:	85 e0       	ldi	r24, 0x05	; 5
    180a:	f5 cf       	rjmp	.-22     	; 0x17f6 <motion_set>
    180c:	08 95       	ret

0000180e <right>:
    180e:	8a e0       	ldi	r24, 0x0A	; 10
    1810:	f2 cf       	rjmp	.-28     	; 0x17f6 <motion_set>
    1812:	08 95       	ret

00001814 <stop>:
}

void stop (void)
{
	motion_set(0x00);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	ef cf       	rjmp	.-34     	; 0x17f6 <motion_set>
    1818:	08 95       	ret

0000181a <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1826:	bc 01       	movw	r22, r24
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__floatunsisf>
    1830:	28 e4       	ldi	r18, 0x48	; 72
    1832:	31 ee       	ldi	r19, 0xE1	; 225
    1834:	42 e8       	ldi	r20, 0x82	; 130
    1836:	50 e4       	ldi	r21, 0x40	; 64
    1838:	0e 94 de 18 	call	0x31bc	; 0x31bc <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    183c:	0e 94 46 19 	call	0x328c	; 0x328c <__fixunssfsi>
    1840:	ab 01       	movw	r20, r22
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
	ShaftCountRight = 0;
    1846:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <ShaftCountRight>
    184a:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <ShaftCountRight+0x1>
    184e:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <ShaftCountRight+0x2>
    1852:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
    1856:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <ShaftCountLeft>
    185a:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <ShaftCountLeft+0x1>
    185e:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <ShaftCountLeft+0x2>
    1862:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <ShaftCountLeft+0x3>

	while (1)
	{
		//lcd_print(1,5,ShaftCountRight,3);
		//lcd_print(2,10,ShaftCountRight,2);
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	e0 e0       	ldi	r30, 0x00	; 0
    186a:	c0 90 b0 05 	lds	r12, 0x05B0	; 0x8005b0 <ShaftCountRight>
    186e:	d0 90 b1 05 	lds	r13, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    1872:	e0 90 b2 05 	lds	r14, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    1876:	f0 90 b3 05 	lds	r15, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    187a:	00 91 b4 05 	lds	r16, 0x05B4	; 0x8005b4 <ShaftCountLeft>
    187e:	10 91 b5 05 	lds	r17, 0x05B5	; 0x8005b5 <ShaftCountLeft+0x1>
    1882:	20 91 b6 05 	lds	r18, 0x05B6	; 0x8005b6 <ShaftCountLeft+0x2>
    1886:	30 91 b7 05 	lds	r19, 0x05B7	; 0x8005b7 <ShaftCountLeft+0x3>
    188a:	89 2f       	mov	r24, r25
    188c:	04 17       	cp	r16, r20
    188e:	15 07       	cpc	r17, r21
    1890:	26 07       	cpc	r18, r22
    1892:	37 07       	cpc	r19, r23
    1894:	08 f4       	brcc	.+2      	; 0x1898 <angle_rotate+0x7e>
    1896:	8e 2f       	mov	r24, r30
    1898:	81 11       	cpse	r24, r1
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <angle_rotate+0x94>
    189c:	89 2f       	mov	r24, r25
    189e:	c4 16       	cp	r12, r20
    18a0:	d5 06       	cpc	r13, r21
    18a2:	e6 06       	cpc	r14, r22
    18a4:	f7 06       	cpc	r15, r23
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <angle_rotate+0x90>
    18a8:	8e 2f       	mov	r24, r30
    18aa:	88 23       	and	r24, r24
    18ac:	f1 f2       	breq	.-68     	; 0x186a <angle_rotate+0x50>
		break;
	}
	//stop(); //Stop robot
	stop();
    18ae:	b2 df       	rcall	.-156    	; 0x1814 <stop>
}
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	df 90       	pop	r13
    18ba:	cf 90       	pop	r12
    18bc:	08 95       	ret

000018be <left_degrees>:



void left_degrees(unsigned int Degrees)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    18c4:	a1 df       	rcall	.-190    	; 0x1808 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    18cc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	velocity(255,255);
	angle_rotate(Degrees);
    18d0:	ce 01       	movw	r24, r28
    18d2:	a3 df       	rcall	.-186    	; 0x181a <angle_rotate>
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    18e0:	96 df       	rcall	.-212    	; 0x180e <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    18e8:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	velocity(255,255);
	angle_rotate(Degrees);
    18ec:	ce 01       	movw	r24, r28
    18ee:	95 df       	rcall	.-214    	; 0x181a <angle_rotate>
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    18fc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1900:	08 95       	ret

00001902 <init_devices>:
}

void init_devices()
{
	cli(); //Clears the global interrupt
    1902:	f8 94       	cli
	port_init();  //Initializes all the ports
    1904:	d1 de       	rcall	.-606    	; 0x16a8 <port_init>
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    1906:	e1 ec       	ldi	r30, 0xC1	; 193
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    190c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    1910:	26 e0       	ldi	r18, 0x06	; 6
    1912:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    1916:	9f e5       	ldi	r25, 0x5F	; 95
    1918:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    191c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    1920:	88 e9       	ldi	r24, 0x98	; 152
    1922:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    1924:	e1 ed       	ldi	r30, 0xD1	; 209
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    192a:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    192e:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    1932:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    1936:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    193a:	80 83       	st	Z, r24
{
	cli(); //Clears the global interrupt
	port_init();  //Initializes all the ports
	uart0_init();	//init Zigbee comm
	uart2_init();	//init PC - USB comm
	left_position_encoder_interrupt_init();
    193c:	00 df       	rcall	.-512    	; 0x173e <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    193e:	08 df       	rcall	.-496    	; 0x1750 <right_position_encoder_interrupt_init>
	adc_init();
    1940:	d6 de       	rcall	.-596    	; 0x16ee <adc_init>
	timer5_init();
    1942:	ba de       	rcall	.-652    	; 0x16b8 <timer5_init>
	lcd_set_4bit();
    1944:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_set_4bit>
	lcd_init();
    1948:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_init>
	servo1_pin_config();
    194c:	4d de       	rcall	.-870    	; 0x15e8 <servo1_pin_config>
	timer1_init();
    194e:	4f de       	rcall	.-866    	; 0x15ee <timer1_init>
	LED_bargraph_config();
    1950:	d2 df       	rcall	.-92     	; 0x18f6 <LED_bargraph_config>
	sei();   // Enables the global interrupt
    1952:	78 94       	sei
    1954:	08 95       	ret

00001956 <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1956:	bc 01       	movw	r22, r24
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__floatunsisf>
    1960:	25 ee       	ldi	r18, 0xE5	; 229
    1962:	30 ed       	ldi	r19, 0xD0	; 208
    1964:	4a ea       	ldi	r20, 0xAA	; 170
    1966:	50 e4       	ldi	r21, 0x40	; 64
    1968:	0e 94 de 18 	call	0x31bc	; 0x31bc <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    196c:	0e 94 46 19 	call	0x328c	; 0x328c <__fixunssfsi>
    1970:	ab 01       	movw	r20, r22
    1972:	bc 01       	movw	r22, r24
	ShaftCountRight = 0;
    1974:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <ShaftCountRight>
    1978:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <ShaftCountRight+0x1>
    197c:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <ShaftCountRight+0x2>
    1980:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <ShaftCountRight+0x3>
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1984:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <ShaftCountRight>
    1988:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    198c:	a0 91 b2 05 	lds	r26, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    1990:	b0 91 b3 05 	lds	r27, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    1994:	48 17       	cp	r20, r24
    1996:	59 07       	cpc	r21, r25
    1998:	6a 07       	cpc	r22, r26
    199a:	7b 07       	cpc	r23, r27
    199c:	98 f7       	brcc	.-26     	; 0x1984 <linear_distance_mm+0x2e>
		{
			break;
		}
	}
	stop(); //Stop robot
    199e:	3a cf       	rjmp	.-396    	; 0x1814 <stop>
    19a0:	08 95       	ret

000019a2 <forward_mm>:
}


void forward_mm(unsigned int DistanceInMM)
{
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	ec 01       	movw	r28, r24
	forward();
    19a8:	2c df       	rcall	.-424    	; 0x1802 <forward>
	velocity(speed,speed);
    19aa:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <speed>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    19ae:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    19b2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(speed,speed);
	linear_distance_mm(DistanceInMM);
    19b6:	ce 01       	movw	r24, r28
    19b8:	ce df       	rcall	.-100    	; 0x1956 <linear_distance_mm>
}
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    19c0:	4f 92       	push	r4
    19c2:	5f 92       	push	r5
    19c4:	6f 92       	push	r6
    19c6:	7f 92       	push	r7
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	c0 5c       	subi	r28, 0xC0	; 192
    19e6:	d1 09       	sbc	r29, r1
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
    19f2:	de 01       	movw	r26, r28
    19f4:	af 59       	subi	r26, 0x9F	; 159
    19f6:	bf 4f       	sbci	r27, 0xFF	; 255
    19f8:	20 e6       	ldi	r18, 0x60	; 96
    19fa:	fd 01       	movw	r30, r26
    19fc:	11 92       	st	Z+, r1
    19fe:	2a 95       	dec	r18
    1a00:	e9 f7       	brne	.-6      	; 0x19fc <costplan+0x3c>
    1a02:	ee e5       	ldi	r30, 0x5E	; 94
    1a04:	f6 e0       	ldi	r31, 0x06	; 6
    1a06:	8e 01       	movw	r16, r28
    1a08:	0f 5f       	subi	r16, 0xFF	; 255
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	78 01       	movw	r14, r16
    1a0e:	6d 01       	movw	r12, r26
    1a10:	0e eb       	ldi	r16, 0xBE	; 190
    1a12:	16 e0       	ldi	r17, 0x06	; 6
    1a14:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    1a16:	63 e6       	ldi	r22, 0x63	; 99
    1a18:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    1a1a:	4f ef       	ldi	r20, 0xFF	; 255
    1a1c:	5f ef       	ldi	r21, 0xFF	; 255
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    1a1e:	61 93       	st	Z+, r22
    1a20:	71 93       	st	Z+, r23
		list[j]=-1;
    1a22:	d9 01       	movw	r26, r18
    1a24:	4d 93       	st	X+, r20
    1a26:	5d 93       	st	X+, r21
    1a28:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    1a2a:	d6 01       	movw	r26, r12
    1a2c:	1d 92       	st	X+, r1
    1a2e:	1d 92       	st	X+, r1
    1a30:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    1a32:	e0 17       	cp	r30, r16
    1a34:	f1 07       	cpc	r31, r17
    1a36:	99 f7       	brne	.-26     	; 0x1a1e <costplan+0x5e>
    1a38:	fc 01       	movw	r30, r24
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	44 5f       	subi	r20, 0xF4	; 244
    1a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{
			cost[note_loc[j]-1]=0;
			k=k+1;
			list[k]=note_loc[j];   // It is the list of nodes to explore
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    1a48:	20 81       	ld	r18, Z
    1a4a:	31 81       	ldd	r19, Z+1	; 0x01
    1a4c:	21 15       	cp	r18, r1
    1a4e:	31 05       	cpc	r19, r1
    1a50:	09 f1       	breq	.+66     	; 0x1a94 <costplan+0xd4>
		{
			cost[note_loc[j]-1]=0;
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	d9 01       	movw	r26, r18
    1a58:	a4 5a       	subi	r26, 0xA4	; 164
    1a5a:	b9 4f       	sbci	r27, 0xF9	; 249
    1a5c:	1d 92       	st	X+, r1
    1a5e:	1c 92       	st	X, r1
			k=k+1;
    1a60:	01 96       	adiw	r24, 0x01	; 1
			list[k]=note_loc[j];   // It is the list of nodes to explore
    1a62:	20 81       	ld	r18, Z
    1a64:	31 81       	ldd	r19, Z+1	; 0x01
    1a66:	dc 01       	movw	r26, r24
    1a68:	aa 0f       	add	r26, r26
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	01 e0       	ldi	r16, 0x01	; 1
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	0c 0f       	add	r16, r28
    1a72:	1d 1f       	adc	r17, r29
    1a74:	a0 0f       	add	r26, r16
    1a76:	b1 1f       	adc	r27, r17
    1a78:	2d 93       	st	X+, r18
    1a7a:	3c 93       	st	X, r19
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    1a7c:	d9 01       	movw	r26, r18
    1a7e:	11 97       	sbiw	r26, 0x01	; 1
    1a80:	aa 0f       	add	r26, r26
    1a82:	bb 1f       	adc	r27, r27
    1a84:	21 e6       	ldi	r18, 0x61	; 97
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	2c 0f       	add	r18, r28
    1a8a:	3d 1f       	adc	r19, r29
    1a8c:	a2 0f       	add	r26, r18
    1a8e:	b3 1f       	adc	r27, r19
    1a90:	6d 93       	st	X+, r22
    1a92:	7c 93       	st	X, r23
    1a94:	32 96       	adiw	r30, 0x02	; 2
	{
		cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    1a96:	e4 17       	cp	r30, r20
    1a98:	f5 07       	cpc	r31, r21
    1a9a:	b1 f6       	brne	.-84     	; 0x1a48 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1a9c:	ae 2c       	mov	r10, r14
    1a9e:	9f 2c       	mov	r9, r15
    1aa0:	81 2c       	mov	r8, r1
    1aa2:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1aa4:	68 94       	set
    1aa6:	bb 24       	eor	r11, r11
    1aa8:	b2 f8       	bld	r11, 2
    1aaa:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
				cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    1aac:	cc 24       	eor	r12, r12
    1aae:	c3 94       	inc	r12
    1ab0:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    1ab2:	a9 81       	ldd	r26, Y+1	; 0x01
    1ab4:	ba 81       	ldd	r27, Y+2	; 0x02
    1ab6:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1ab8:	99 23       	and	r25, r25
    1aba:	6c f0       	brlt	.+26     	; 0x1ad6 <costplan+0x116>
    1abc:	ea 2d       	mov	r30, r10
    1abe:	f9 2d       	mov	r31, r9
    1ac0:	28 2d       	mov	r18, r8
    1ac2:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    1ac4:	2f 5f       	subi	r18, 0xFF	; 255
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	42 81       	ldd	r20, Z+2	; 0x02
    1aca:	53 81       	ldd	r21, Z+3	; 0x03
    1acc:	41 93       	st	Z+, r20
    1ace:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	bc f7       	brge	.-18     	; 0x1ac4 <costplan+0x104>
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	fd 01       	movw	r30, r26
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	e2 54       	subi	r30, 0x42	; 66
    1ae8:	f9 4f       	sbci	r31, 0xF9	; 249
    1aea:	2b 2d       	mov	r18, r11
    1aec:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1aee:	aa 0f       	add	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	ad 01       	movw	r20, r26
    1af4:	42 5a       	subi	r20, 0xA2	; 162
    1af6:	59 4f       	sbci	r21, 0xF9	; 249
    1af8:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    1afa:	61 91       	ld	r22, Z+
    1afc:	71 91       	ld	r23, Z+
    1afe:	61 15       	cp	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	d1 f1       	breq	.+116    	; 0x1b78 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1b04:	d2 01       	movw	r26, r4
    1b06:	0d 91       	ld	r16, X+
    1b08:	1c 91       	ld	r17, X
    1b0a:	0f 5f       	subi	r16, 0xFF	; 255
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	ab 01       	movw	r20, r22
    1b10:	41 50       	subi	r20, 0x01	; 1
    1b12:	51 09       	sbc	r21, r1
    1b14:	7a 01       	movw	r14, r20
    1b16:	ee 0c       	add	r14, r14
    1b18:	ff 1c       	adc	r15, r15
    1b1a:	d7 01       	movw	r26, r14
    1b1c:	a2 5a       	subi	r26, 0xA2	; 162
    1b1e:	b9 4f       	sbci	r27, 0xF9	; 249
    1b20:	ed 90       	ld	r14, X+
    1b22:	fc 90       	ld	r15, X
    1b24:	e0 16       	cp	r14, r16
    1b26:	f1 06       	cpc	r15, r17
    1b28:	44 f0       	brlt	.+16     	; 0x1b3a <costplan+0x17a>
				cost[node[s][i]-1]=(cost[s]+1);
    1b2a:	7a 01       	movw	r14, r20
    1b2c:	ee 0c       	add	r14, r14
    1b2e:	ff 1c       	adc	r15, r15
    1b30:	d7 01       	movw	r26, r14
    1b32:	a2 5a       	subi	r26, 0xA2	; 162
    1b34:	b9 4f       	sbci	r27, 0xF9	; 249
    1b36:	0d 93       	st	X+, r16
    1b38:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    1b3a:	8a 01       	movw	r16, r20
    1b3c:	00 0f       	add	r16, r16
    1b3e:	11 1f       	adc	r17, r17
    1b40:	a1 e6       	ldi	r26, 0x61	; 97
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ac 0f       	add	r26, r28
    1b46:	bd 1f       	adc	r27, r29
    1b48:	0a 0f       	add	r16, r26
    1b4a:	1b 1f       	adc	r17, r27
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	0d 91       	ld	r16, X+
    1b50:	1c 91       	ld	r17, X
    1b52:	11 97       	sbiw	r26, 0x01	; 1
    1b54:	01 30       	cpi	r16, 0x01	; 1
    1b56:	11 05       	cpc	r17, r1
    1b58:	79 f0       	breq	.+30     	; 0x1b78 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    1b5a:	cd 92       	st	X+, r12
    1b5c:	dc 92       	st	X, r13
					k=k+1;
    1b5e:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    1b60:	ac 01       	movw	r20, r24
    1b62:	44 0f       	add	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	01 e0       	ldi	r16, 0x01	; 1
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	0c 0f       	add	r16, r28
    1b6c:	1d 1f       	adc	r17, r29
    1b6e:	40 0f       	add	r20, r16
    1b70:	51 1f       	adc	r21, r17
    1b72:	da 01       	movw	r26, r20
    1b74:	6d 93       	st	X+, r22
    1b76:	7c 93       	st	X, r23
    1b78:	21 50       	subi	r18, 0x01	; 1
    1b7a:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
		{
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <costplan+0x1c0>
    1b7e:	bd cf       	rjmp	.-134    	; 0x1afa <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 || k!=-1);
    1b80:	29 81       	ldd	r18, Y+1	; 0x01
    1b82:	3a 81       	ldd	r19, Y+2	; 0x02
    1b84:	2f 3f       	cpi	r18, 0xFF	; 255
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <costplan+0x1cc>
    1b8a:	93 cf       	rjmp	.-218    	; 0x1ab2 <costplan+0xf2>
    1b8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8e:	ef ef       	ldi	r30, 0xFF	; 255
    1b90:	9e 07       	cpc	r25, r30
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <costplan+0x1d6>
    1b94:	8e cf       	rjmp	.-228    	; 0x1ab2 <costplan+0xf2>
}
    1b96:	c0 54       	subi	r28, 0x40	; 64
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	7f 90       	pop	r7
    1bbe:	6f 90       	pop	r6
    1bc0:	5f 90       	pop	r5
    1bc2:	4f 90       	pop	r4
    1bc4:	08 95       	ret

00001bc6 <rotate>:

void rotate(int turnang)
{
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
	int f=0;
	if(turnang<0)
    1bd4:	99 23       	and	r25, r25
    1bd6:	c4 f4       	brge	.+48     	; 0x1c08 <rotate+0x42>
	{
		turnang=-turnang;
    1bd8:	22 27       	eor	r18, r18
    1bda:	33 27       	eor	r19, r19
    1bdc:	28 1b       	sub	r18, r24
    1bde:	39 0b       	sbc	r19, r25
		if(turnang>180)
    1be0:	25 3b       	cpi	r18, 0xB5	; 181
    1be2:	31 05       	cpc	r19, r1
    1be4:	34 f0       	brlt	.+12     	; 0x1bf2 <rotate+0x2c>
		{
			turnang=360-turnang;
			left_degrees((turnang-20));
    1be6:	8c 5a       	subi	r24, 0xAC	; 172
    1be8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bea:	69 de       	rcall	.-814    	; 0x18be <left_degrees>
	}while(list[0]!=-1 || k!=-1);
}

void rotate(int turnang)
{
	int f=0;
    1bec:	e1 2c       	mov	r14, r1
    1bee:	f1 2c       	mov	r15, r1
    1bf0:	1d c0       	rjmp	.+58     	; 0x1c2c <rotate+0x66>
			left_degrees((turnang-20));
		}
		else
		{
			f=1;
			right_degrees((turnang-20));
    1bf2:	2c ee       	ldi	r18, 0xEC	; 236
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	48 1b       	sub	r20, r24
    1bfa:	59 0b       	sbc	r21, r25
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	6d de       	rcall	.-806    	; 0x18da <right_degrees>
			turnang=360-turnang;
			left_degrees((turnang-20));
		}
		else
		{
			f=1;
    1c00:	ee 24       	eor	r14, r14
    1c02:	e3 94       	inc	r14
    1c04:	f1 2c       	mov	r15, r1
    1c06:	12 c0       	rjmp	.+36     	; 0x1c2c <rotate+0x66>
			right_degrees((turnang-20));
		}
	}
	else
	{
		if(turnang>180)
    1c08:	85 3b       	cpi	r24, 0xB5	; 181
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	5c f0       	brlt	.+22     	; 0x1c24 <rotate+0x5e>
		{
			f=1;
			turnang=360-turnang;
			right_degrees((turnang-20));
    1c0e:	24 e5       	ldi	r18, 0x54	; 84
    1c10:	31 e0       	ldi	r19, 0x01	; 1
    1c12:	f9 01       	movw	r30, r18
    1c14:	e8 1b       	sub	r30, r24
    1c16:	f9 0b       	sbc	r31, r25
    1c18:	cf 01       	movw	r24, r30
    1c1a:	5f de       	rcall	.-834    	; 0x18da <right_degrees>
	}
	else
	{
		if(turnang>180)
		{
			f=1;
    1c1c:	ee 24       	eor	r14, r14
    1c1e:	e3 94       	inc	r14
    1c20:	f1 2c       	mov	r15, r1
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <rotate+0x66>
			turnang=360-turnang;
			right_degrees((turnang-20));
		}
		else
		{
			left_degrees((turnang-20));
    1c24:	44 97       	sbiw	r24, 0x14	; 20
    1c26:	4b de       	rcall	.-874    	; 0x18be <left_degrees>
	}while(list[0]!=-1 || k!=-1);
}

void rotate(int turnang)
{
	int f=0;
    1c28:	e1 2c       	mov	r14, r1
    1c2a:	f1 2c       	mov	r15, r1
		else
		{
			left_degrees((turnang-20));
		}
	}
	stop();
    1c2c:	f3 dd       	rcall	.-1050   	; 0x1814 <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c2e:	ff ef       	ldi	r31, 0xFF	; 255
    1c30:	2f e3       	ldi	r18, 0x3F	; 63
    1c32:	42 e0       	ldi	r20, 0x02	; 2
    1c34:	f1 50       	subi	r31, 0x01	; 1
    1c36:	20 40       	sbci	r18, 0x00	; 0
    1c38:	40 40       	sbci	r20, 0x00	; 0
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <rotate+0x6e>
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <rotate+0x78>
    1c3e:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1c40:	08 e2       	ldi	r16, 0x28	; 40
    1c42:	11 e0       	ldi	r17, 0x01	; 1
    1c44:	0f 2e       	mov	r0, r31
    1c46:	f4 e6       	ldi	r31, 0x64	; 100
    1c48:	df 2e       	mov	r13, r31
    1c4a:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1c4c:	ca e2       	ldi	r28, 0x2A	; 42
    1c4e:	d1 e0       	ldi	r29, 0x01	; 1
	}
	stop();
	_delay_ms(50);
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	5a dd       	rcall	.-1356   	; 0x1708 <ADC_Conversion>
    1c54:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	56 dd       	rcall	.-1364   	; 0x1708 <ADC_Conversion>
    1c5c:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	52 dd       	rcall	.-1372   	; 0x1708 <ADC_Conversion>
    1c64:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <Right_white_line>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1c68:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <Left_white_line>
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	23 e0       	ldi	r18, 0x03	; 3
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1c7a:	40 91 ae 05 	lds	r20, 0x05AE	; 0x8005ae <Center_white_line>
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	23 e0       	ldi	r18, 0x03	; 3
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	65 e0       	ldi	r22, 0x05	; 5
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1c8c:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <Right_white_line>
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	23 e0       	ldi	r18, 0x03	; 3
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	69 e0       	ldi	r22, 0x09	; 9
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		//forward();
		if(f==0)
    1c9e:	e1 14       	cp	r14, r1
    1ca0:	f1 04       	cpc	r15, r1
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <rotate+0xe8>
		{
			left();
    1ca4:	b1 dd       	rcall	.-1182   	; 0x1808 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1caa:	d8 82       	st	Y, r13
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <rotate+0xf0>
			left();
			velocity(100,100);
		}
		else
		{
			right();
    1cae:	af dd       	rcall	.-1186   	; 0x180e <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1cb4:	d8 82       	st	Y, r13
		else
		{
			right();
			velocity(100,100);
		}
		if(Center_white_line>55 || Left_white_line>120 || Right_white_line>120)
    1cb6:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <Center_white_line>
    1cba:	88 33       	cpi	r24, 0x38	; 56
    1cbc:	48 f4       	brcc	.+18     	; 0x1cd0 <rotate+0x10a>
    1cbe:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <Left_white_line>
    1cc2:	89 37       	cpi	r24, 0x79	; 121
    1cc4:	28 f4       	brcc	.+10     	; 0x1cd0 <rotate+0x10a>
    1cc6:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <Right_white_line>
    1cca:	89 37       	cpi	r24, 0x79	; 121
    1ccc:	08 f4       	brcc	.+2      	; 0x1cd0 <rotate+0x10a>
    1cce:	c0 cf       	rjmp	.-128    	; 0x1c50 <rotate+0x8a>
		{	
			stop();
    1cd0:	a1 dd       	rcall	.-1214   	; 0x1814 <stop>
		}
		
		
	}
	//velocity(0,0);
}
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	08 95       	ret

00001ce2 <swapTask>:
// Swapping Tasks between bots
void swapTask(int itr)
{
    1ce2:	9c 01       	movw	r18, r24
	if(tasks[itr]!=127)
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	eb 5b       	subi	r30, 0xBB	; 187
    1ce8:	f9 4f       	sbci	r31, 0xF9	; 249
    1cea:	80 81       	ld	r24, Z
    1cec:	8f 37       	cpi	r24, 0x7F	; 127
    1cee:	29 f1       	breq	.+74     	; 0x1d3a <swapTask+0x58>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1cf0:	e0 ec       	ldi	r30, 0xC0	; 192
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	90 81       	ld	r25, Z
    1cf6:	95 ff       	sbrs	r25, 5
    1cf8:	fd cf       	rjmp	.-6      	; 0x1cf4 <swapTask+0x12>
	UDR0 = data;
    1cfa:	8f e0       	ldi	r24, 0x0F	; 15
    1cfc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d00:	e0 ec       	ldi	r30, 0xC0	; 192
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	90 81       	ld	r25, Z
    1d06:	95 ff       	sbrs	r25, 5
    1d08:	fd cf       	rjmp	.-6      	; 0x1d04 <swapTask+0x22>
	UDR0 = data;
    1d0a:	81 e8       	ldi	r24, 0x81	; 129
    1d0c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
void swapTask(int itr)
{
	if(tasks[itr]!=127)
	{
		SendWhichTask(1);
		SendSwapTask(tasks[itr]);
    1d10:	f9 01       	movw	r30, r18
    1d12:	eb 5b       	subi	r30, 0xBB	; 187
    1d14:	f9 4f       	sbci	r31, 0xF9	; 249
    1d16:	90 81       	ld	r25, Z

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d18:	e0 ec       	ldi	r30, 0xC0	; 192
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	85 ff       	sbrs	r24, 5
    1d20:	fd cf       	rjmp	.-6      	; 0x1d1c <swapTask+0x3a>
	UDR0 = data;
    1d22:	8e e0       	ldi	r24, 0x0E	; 14
    1d24:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//send swap task1
void inline SendSwapTask(char task)
{
	SendByteToSlave(SWAP_TSK);
	SendByteToSlave(DATA(task));
    1d28:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	85 ff       	sbrs	r24, 5
    1d32:	fd cf       	rjmp	.-6      	; 0x1d2e <swapTask+0x4c>
	UDR0 = data;
    1d34:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1d38:	24 c0       	rjmp	.+72     	; 0x1d82 <swapTask+0xa0>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d3a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	90 81       	ld	r25, Z
    1d40:	95 ff       	sbrs	r25, 5
    1d42:	fd cf       	rjmp	.-6      	; 0x1d3e <swapTask+0x5c>
	UDR0 = data;
    1d44:	8f e0       	ldi	r24, 0x0F	; 15
    1d46:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d4a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	90 81       	ld	r25, Z
    1d50:	95 ff       	sbrs	r25, 5
    1d52:	fd cf       	rjmp	.-6      	; 0x1d4e <swapTask+0x6c>
	UDR0 = data;
    1d54:	82 e8       	ldi	r24, 0x82	; 130
    1d56:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		SendSwapTask(tasks[itr]);
	}
	else
	{
		SendWhichTask(2);
		SendSwapTask(tasks2[itr]);
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	ef 5b       	subi	r30, 0xBF	; 191
    1d5e:	f7 4f       	sbci	r31, 0xF7	; 247
    1d60:	90 81       	ld	r25, Z

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d62:	e0 ec       	ldi	r30, 0xC0	; 192
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	85 ff       	sbrs	r24, 5
    1d6a:	fd cf       	rjmp	.-6      	; 0x1d66 <swapTask+0x84>
	UDR0 = data;
    1d6c:	8e e0       	ldi	r24, 0x0E	; 14
    1d6e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//send swap task1
void inline SendSwapTask(char task)
{
	SendByteToSlave(SWAP_TSK);
	SendByteToSlave(DATA(task));
    1d72:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    1d74:	e0 ec       	ldi	r30, 0xC0	; 192
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	85 ff       	sbrs	r24, 5
    1d7c:	fd cf       	rjmp	.-6      	; 0x1d78 <swapTask+0x96>
	UDR0 = data;
    1d7e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	else
	{
		SendWhichTask(2);
		SendSwapTask(tasks2[itr]);
	}
	swap=1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <swap+0x1>
    1d8a:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <swap>
    1d8e:	08 95       	ret

00001d90 <servoStrike>:
}
void servoStrike(int side)
{
    1d90:	cf 93       	push	r28
	if(!side)
    1d92:	89 2b       	or	r24, r25
    1d94:	29 f5       	brne	.+74     	; 0x1de0 <servoStrike+0x50>
    1d96:	ca e5       	ldi	r28, 0x5A	; 90
	{
		for(int i=90;i>=0;i--)
		{
			servo_1(i);
    1d98:	8c 2f       	mov	r24, r28
    1d9a:	44 dc       	rcall	.-1912   	; 0x1624 <servo_1>
    1d9c:	29 e9       	ldi	r18, 0x99	; 153
    1d9e:	89 e5       	ldi	r24, 0x59	; 89
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	21 50       	subi	r18, 0x01	; 1
    1da4:	80 40       	sbci	r24, 0x00	; 0
    1da6:	90 40       	sbci	r25, 0x00	; 0
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <servoStrike+0x12>
    1daa:	00 00       	nop
    1dac:	c1 50       	subi	r28, 0x01	; 1
    1dae:	a0 f7       	brcc	.-24     	; 0x1d98 <servoStrike+0x8>
    1db0:	2f ef       	ldi	r18, 0xFF	; 255
    1db2:	8f e7       	ldi	r24, 0x7F	; 127
    1db4:	94 e0       	ldi	r25, 0x04	; 4
    1db6:	21 50       	subi	r18, 0x01	; 1
    1db8:	80 40       	sbci	r24, 0x00	; 0
    1dba:	90 40       	sbci	r25, 0x00	; 0
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <servoStrike+0x26>
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <servoStrike+0x30>
    1dc0:	00 00       	nop
    1dc2:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=0;i<=90;i++)
		{
			servo_1(i);
    1dc4:	8c 2f       	mov	r24, r28
    1dc6:	2e dc       	rcall	.-1956   	; 0x1624 <servo_1>
    1dc8:	29 e9       	ldi	r18, 0x99	; 153
    1dca:	89 e5       	ldi	r24, 0x59	; 89
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	21 50       	subi	r18, 0x01	; 1
    1dd0:	80 40       	sbci	r24, 0x00	; 0
    1dd2:	90 40       	sbci	r25, 0x00	; 0
    1dd4:	e1 f7       	brne	.-8      	; 0x1dce <servoStrike+0x3e>
    1dd6:	00 00       	nop
    1dd8:	cf 5f       	subi	r28, 0xFF	; 255
		{
			servo_1(i);
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=0;i<=90;i++)
    1dda:	cb 35       	cpi	r28, 0x5B	; 91
    1ddc:	99 f7       	brne	.-26     	; 0x1dc4 <servoStrike+0x34>
    1dde:	25 c0       	rjmp	.+74     	; 0x1e2a <servoStrike+0x9a>
    1de0:	ca e5       	ldi	r28, 0x5A	; 90
	}
	else
	{
		for(int i=90; i<=180; i++)
		{
			servo_1(i);
    1de2:	8c 2f       	mov	r24, r28
    1de4:	1f dc       	rcall	.-1986   	; 0x1624 <servo_1>
    1de6:	29 e9       	ldi	r18, 0x99	; 153
    1de8:	89 e5       	ldi	r24, 0x59	; 89
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	21 50       	subi	r18, 0x01	; 1
    1dee:	80 40       	sbci	r24, 0x00	; 0
    1df0:	90 40       	sbci	r25, 0x00	; 0
    1df2:	e1 f7       	brne	.-8      	; 0x1dec <servoStrike+0x5c>
    1df4:	00 00       	nop
    1df6:	cf 5f       	subi	r28, 0xFF	; 255
			_delay_ms(30);
		}
	}
	else
	{
		for(int i=90; i<=180; i++)
    1df8:	c5 3b       	cpi	r28, 0xB5	; 181
    1dfa:	99 f7       	brne	.-26     	; 0x1de2 <servoStrike+0x52>
    1dfc:	2f ef       	ldi	r18, 0xFF	; 255
    1dfe:	8f e7       	ldi	r24, 0x7F	; 127
    1e00:	94 e0       	ldi	r25, 0x04	; 4
    1e02:	21 50       	subi	r18, 0x01	; 1
    1e04:	80 40       	sbci	r24, 0x00	; 0
    1e06:	90 40       	sbci	r25, 0x00	; 0
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <servoStrike+0x72>
    1e0a:	00 c0       	rjmp	.+0      	; 0x1e0c <servoStrike+0x7c>
    1e0c:	00 00       	nop
    1e0e:	c4 eb       	ldi	r28, 0xB4	; 180
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=180;i>=90;i--)
		{
			servo_1(i);
    1e10:	8c 2f       	mov	r24, r28
    1e12:	08 dc       	rcall	.-2032   	; 0x1624 <servo_1>
    1e14:	29 e9       	ldi	r18, 0x99	; 153
    1e16:	89 e5       	ldi	r24, 0x59	; 89
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	21 50       	subi	r18, 0x01	; 1
    1e1c:	80 40       	sbci	r24, 0x00	; 0
    1e1e:	90 40       	sbci	r25, 0x00	; 0
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <servoStrike+0x8a>
    1e22:	00 00       	nop
    1e24:	c1 50       	subi	r28, 0x01	; 1
		{
			servo_1(i);
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=180;i>=90;i--)
    1e26:	c9 35       	cpi	r28, 0x59	; 89
    1e28:	99 f7       	brne	.-26     	; 0x1e10 <servoStrike+0x80>
		{
			servo_1(i);
			_delay_ms(30);
		}
	}
}
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <move>:

int prevbotloc=1;
int move(int n)
{
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	5c 01       	movw	r10, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e54:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1e58:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
int prevbotloc=1;
int move(int n)
{
	velocity(0,0);
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    1e5c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    1e60:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    1e64:	31 97       	sbiw	r30, 0x01	; 1
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	e8 0f       	add	r30, r24
    1e70:	f9 1f       	adc	r31, r25
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	e9 5a       	subi	r30, 0xA9	; 169
    1e78:	f7 4f       	sbci	r31, 0xF7	; 247
    1e7a:	c0 81       	ld	r28, Z
    1e7c:	d1 81       	ldd	r29, Z+1	; 0x01
    1e7e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    1e82:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    1e86:	c8 1b       	sub	r28, r24
    1e88:	d9 0b       	sbc	r29, r25
	int turns=0;
	if(fabs(turnang)>45)
    1e8a:	be 01       	movw	r22, r28
    1e8c:	0d 2e       	mov	r0, r29
    1e8e:	00 0c       	add	r0, r0
    1e90:	88 0b       	sbc	r24, r24
    1e92:	99 0b       	sbc	r25, r25
    1e94:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__floatsisf>
    1e98:	9f 77       	andi	r25, 0x7F	; 127
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	44 e3       	ldi	r20, 0x34	; 52
    1ea0:	52 e4       	ldi	r21, 0x42	; 66
    1ea2:	0e 94 00 1a 	call	0x3400	; 0x3400 <__gesf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	44 f4       	brge	.+16     	; 0x1eba <move+0x8c>
	{
		turns=1;
		forward_mm(70);
    1eaa:	86 e4       	ldi	r24, 0x46	; 70
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	79 dd       	rcall	.-1294   	; 0x19a2 <forward_mm>
		rotate(turnang);
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	89 de       	rcall	.-750    	; 0x1bc6 <rotate>
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
	int turns=0;
	if(fabs(turnang)>45)
	{
		turns=1;
    1eb4:	c1 e0       	ldi	r28, 0x01	; 1
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <move+0x90>
int move(int n)
{
	velocity(0,0);
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
	int turns=0;
    1eba:	c0 e0       	ldi	r28, 0x00	; 0
    1ebc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		turns=1;
		forward_mm(70);
		rotate(turnang);
	}
	botang=angle[botloc-1][n];
    1ebe:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    1ec2:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    1ec6:	31 97       	sbiw	r30, 0x01	; 1
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ea 0d       	add	r30, r10
    1ed2:	fb 1d       	adc	r31, r11
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e9 5a       	subi	r30, 0xA9	; 169
    1eda:	f7 4f       	sbci	r31, 0xF7	; 247
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <botang+0x1>
    1ee4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <botang>
	
	if(strike==1)
    1ee8:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <strike>
    1eec:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <strike+0x1>
    1ef0:	21 30       	cpi	r18, 0x01	; 1
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	e9 f4       	brne	.+58     	; 0x1f30 <move+0x102>
	{
		if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang)
    1ef6:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	ef 5c       	subi	r30, 0xCF	; 207
    1efe:	f9 4f       	sbci	r31, 0xF9	; 249
    1f00:	e0 81       	ld	r30, Z
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	ee 0f       	add	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	ee 5d       	subi	r30, 0xDE	; 222
    1f0e:	fc 4f       	sbci	r31, 0xFC	; 252
    1f10:	20 81       	ld	r18, Z
    1f12:	31 81       	ldd	r19, Z+1	; 0x01
    1f14:	82 17       	cp	r24, r18
    1f16:	93 07       	cpc	r25, r19
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <move+0xf4>
			servoStrike(1);//Strike Left
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	38 df       	rcall	.-400    	; 0x1d90 <servoStrike>
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <move+0xfa>
		else
			servoStrike(0);//Strike Right
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	34 df       	rcall	.-408    	; 0x1d90 <servoStrike>
		
		// Servo Motor Control
		// Strike the Note
		strike=0;
    1f28:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <strike+0x1>
    1f2c:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <strike>
	}
	
	forward();
    1f30:	68 dc       	rcall	.-1840   	; 0x1802 <forward>
	int flag=0;
	ShaftCountRight=0;
    1f32:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <ShaftCountRight>
    1f36:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <ShaftCountRight+0x1>
    1f3a:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <ShaftCountRight+0x2>
    1f3e:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <ShaftCountRight+0x3>
	if(!turns)
    1f42:	cd 2b       	or	r28, r29
    1f44:	01 f5       	brne	.+64     	; 0x1f86 <move+0x158>
		while(ShaftCountRight<10)
    1f46:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <ShaftCountRight>
    1f4a:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    1f4e:	a0 91 b2 05 	lds	r26, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    1f52:	b0 91 b3 05 	lds	r27, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    1f56:	0a 97       	sbiw	r24, 0x0a	; 10
    1f58:	a1 05       	cpc	r26, r1
    1f5a:	b1 05       	cpc	r27, r1
    1f5c:	a0 f4       	brcc	.+40     	; 0x1f86 <move+0x158>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1f5e:	a8 e2       	ldi	r26, 0x28	; 40
    1f60:	b1 e0       	ldi	r27, 0x01	; 1
    1f62:	84 e6       	ldi	r24, 0x64	; 100
	OCR5BL = (unsigned char)right_motor;
    1f64:	ea e2       	ldi	r30, 0x2A	; 42
    1f66:	f1 e0       	ldi	r31, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1f68:	8c 93       	st	X, r24
	OCR5BL = (unsigned char)right_motor;
    1f6a:	80 83       	st	Z, r24
	
	forward();
	int flag=0;
	ShaftCountRight=0;
	if(!turns)
		while(ShaftCountRight<10)
    1f6c:	40 91 b0 05 	lds	r20, 0x05B0	; 0x8005b0 <ShaftCountRight>
    1f70:	50 91 b1 05 	lds	r21, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    1f74:	60 91 b2 05 	lds	r22, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    1f78:	70 91 b3 05 	lds	r23, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    1f7c:	4a 30       	cpi	r20, 0x0A	; 10
    1f7e:	51 05       	cpc	r21, r1
    1f80:	61 05       	cpc	r22, r1
    1f82:	71 05       	cpc	r23, r1
    1f84:	88 f3       	brcs	.-30     	; 0x1f68 <move+0x13a>
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
	int turns=0;
	if(fabs(turnang)>45)
	{
		turns=1;
    1f86:	d1 e0       	ldi	r29, 0x01	; 1
    1f88:	c0 e0       	ldi	r28, 0x00	; 0
	if(!turns)
		while(ShaftCountRight<10)
			velocity(100,100);
	while(1)
	{
		flag=0;
    1f8a:	61 2c       	mov	r6, r1
    1f8c:	71 2c       	mov	r7, r1
				{
					botang=angle[node[botloc-1][n]-1][j];
					break;
				}*/
			int p=0;
			if(n==0)
    1f8e:	88 24       	eor	r8, r8
    1f90:	83 94       	inc	r8
    1f92:	91 2c       	mov	r9, r1
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
    1f94:	0f 2e       	mov	r0, r31
    1f96:	f0 e1       	ldi	r31, 0x10	; 16
    1f98:	cf 2e       	mov	r12, r31
    1f9a:	f2 e0       	ldi	r31, 0x02	; 2
    1f9c:	df 2e       	mov	r13, r31
    1f9e:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	f8 e2       	ldi	r31, 0x28	; 40
    1fa4:	ef 2e       	mov	r14, r31
    1fa6:	ff 24       	eor	r15, r15
    1fa8:	f3 94       	inc	r15
    1faa:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1fac:	0a e2       	ldi	r16, 0x2A	; 42
    1fae:	11 e0       	ldi	r17, 0x01	; 1
		while(ShaftCountRight<10)
			velocity(100,100);
	while(1)
	{
		flag=0;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	aa db       	rcall	.-2220   	; 0x1708 <ADC_Conversion>
    1fb4:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	a6 db       	rcall	.-2228   	; 0x1708 <ADC_Conversion>
    1fbc:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	a2 db       	rcall	.-2236   	; 0x1708 <ADC_Conversion>
    1fc4:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    1fc8:	86 e0       	ldi	r24, 0x06	; 6
    1fca:	9e db       	rcall	.-2244   	; 0x1708 <ADC_Conversion>
    1fcc:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <__data_end>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1fd0:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <Left_white_line>
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	23 e0       	ldi	r18, 0x03	; 3
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1fe2:	40 91 ae 05 	lds	r20, 0x05AE	; 0x8005ae <Center_white_line>
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	23 e0       	ldi	r18, 0x03	; 3
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	65 e0       	ldi	r22, 0x05	; 5
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1ff4:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <Right_white_line>
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	23 e0       	ldi	r18, 0x03	; 3
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	69 e0       	ldi	r22, 0x09	; 9
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		lcd_print(1,12,(int)Front_IR_Sensor,3);	//Front ir sensor Value
    2006:	40 91 ac 05 	lds	r20, 0x05AC	; 0x8005ac <__data_end>
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	23 e0       	ldi	r18, 0x03	; 3
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	6c e0       	ldi	r22, 0x0C	; 12
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		
		
		if(Front_IR_Sensor<145)
    2018:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <__data_end>
    201c:	81 39       	cpi	r24, 0x91	; 145
    201e:	08 f0       	brcs	.+2      	; 0x2022 <move+0x1f4>
    2020:	56 c0       	rjmp	.+172    	; 0x20ce <move+0x2a0>
				{
					botang=angle[node[botloc-1][n]-1][j];
					break;
				}*/
			int p=0;
			if(n==0)
    2022:	c8 2d       	mov	r28, r8
    2024:	d9 2d       	mov	r29, r9
    2026:	a1 14       	cp	r10, r1
    2028:	b1 04       	cpc	r11, r1
    202a:	11 f0       	breq	.+4      	; 0x2030 <move+0x202>
    202c:	c6 2d       	mov	r28, r6
    202e:	d7 2d       	mov	r29, r7
			{
				p=n+1;
			}
			turnang=angle[botloc-1][p]-botang;
    2030:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2034:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2038:	31 97       	sbiw	r30, 0x01	; 1
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	ec 0f       	add	r30, r28
    2044:	fd 1f       	adc	r31, r29
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e9 5a       	subi	r30, 0xA9	; 169
    204c:	f7 4f       	sbci	r31, 0xF7	; 247
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <botang>
    2056:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <botang+0x1>
			rotate(turnang);
    205a:	82 1b       	sub	r24, r18
    205c:	93 0b       	sbc	r25, r19
    205e:	b3 dd       	rcall	.-1178   	; 0x1bc6 <rotate>
			botang=angle[botloc-1][p];
    2060:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2064:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2068:	31 97       	sbiw	r30, 0x01	; 1
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ec 0f       	add	r30, r28
    2074:	fd 1f       	adc	r31, r29
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e9 5a       	subi	r30, 0xA9	; 169
    207c:	f7 4f       	sbci	r31, 0xF7	; 247
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <botang+0x1>
    2086:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <botang>
			prevbotloc=botloc;
    208a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <botloc>
    208e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <botloc+0x1>
    2092:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <prevbotloc+0x1>
    2096:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <prevbotloc>
			botloc=node[botloc-1][p];
    209a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <botloc>
    209e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <botloc+0x1>
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	c8 0f       	add	r28, r24
    20ae:	d9 1f       	adc	r29, r25
    20b0:	cc 0f       	add	r28, r28
    20b2:	dd 1f       	adc	r29, r29
    20b4:	c2 54       	subi	r28, 0x42	; 66
    20b6:	d9 4f       	sbci	r29, 0xF9	; 249
    20b8:	88 81       	ld	r24, Y
    20ba:	99 81       	ldd	r25, Y+1	; 0x01
    20bc:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <botloc+0x1>
    20c0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <botloc>
			suc=0;
			flag=1;
    20c4:	48 2d       	mov	r20, r8
    20c6:	59 2d       	mov	r21, r9
			turnang=angle[botloc-1][p]-botang;
			rotate(turnang);
			botang=angle[botloc-1][p];
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
    20c8:	d6 2d       	mov	r29, r6
    20ca:	c7 2d       	mov	r28, r7
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <move+0x2a4>
	if(!turns)
		while(ShaftCountRight<10)
			velocity(100,100);
	while(1)
	{
		flag=0;
    20ce:	46 2d       	mov	r20, r6
    20d0:	57 2d       	mov	r21, r7
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    20d2:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <Center_white_line>
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <thresh>
    20dc:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <thresh+0x1>
    20e0:	28 17       	cp	r18, r24
    20e2:	39 07       	cpc	r19, r25
    20e4:	7c f4       	brge	.+30     	; 0x2104 <move+0x2d6>
    20e6:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <Left_white_line>
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	26 17       	cp	r18, r22
    20ee:	37 07       	cpc	r19, r23
    20f0:	0c f4       	brge	.+2      	; 0x20f4 <move+0x2c6>
    20f2:	59 c0       	rjmp	.+178    	; 0x21a6 <move+0x378>
    20f4:	60 91 ad 05 	lds	r22, 0x05AD	; 0x8005ad <Right_white_line>
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	26 17       	cp	r18, r22
    20fc:	37 07       	cpc	r19, r23
    20fe:	0c f4       	brge	.+2      	; 0x2102 <move+0x2d4>
    2100:	5f c0       	rjmp	.+190    	; 0x21c0 <move+0x392>
    2102:	31 c0       	rjmp	.+98     	; 0x2166 <move+0x338>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    2104:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <Left_white_line>
    2108:	64 2f       	mov	r22, r20
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	26 17       	cp	r18, r22
    210e:	37 07       	cpc	r19, r23
    2110:	84 f4       	brge	.+32     	; 0x2132 <move+0x304>
		{
			//flag=1;
			forward();
    2112:	77 db       	rcall	.-2322   	; 0x1802 <forward>
			lcd_print(2,1,1,3);
    2114:	23 e0       	ldi	r18, 0x03	; 3
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	48 2d       	mov	r20, r8
    211a:	59 2d       	mov	r21, r9
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
			velocity(0,speed);
    2124:	f6 01       	movw	r30, r12
    2126:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2128:	f7 01       	movw	r30, r14
    212a:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    212c:	f8 01       	movw	r30, r16
    212e:	80 83       	st	Z, r24
    2130:	3f cf       	rjmp	.-386    	; 0x1fb0 <move+0x182>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
    2132:	50 91 ad 05 	lds	r21, 0x05AD	; 0x8005ad <Right_white_line>
    2136:	65 2f       	mov	r22, r21
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	26 17       	cp	r18, r22
    213c:	37 07       	cpc	r19, r23
    213e:	84 f4       	brge	.+32     	; 0x2160 <move+0x332>
		{
			//flag=1;
			forward();
    2140:	60 db       	rcall	.-2368   	; 0x1802 <forward>
			lcd_print(2,1,2,3);
    2142:	23 e0       	ldi	r18, 0x03	; 3
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	42 e0       	ldi	r20, 0x02	; 2
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
			velocity(speed,0);
    2152:	f6 01       	movw	r30, r12
    2154:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2156:	f7 01       	movw	r30, r14
    2158:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    215a:	f8 01       	movw	r30, r16
    215c:	10 82       	st	Z, r1
    215e:	28 cf       	rjmp	.-432    	; 0x1fb0 <move+0x182>
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
    2160:	28 17       	cp	r18, r24
    2162:	39 07       	cpc	r19, r25
    2164:	84 f4       	brge	.+32     	; 0x2186 <move+0x358>
		{
			forward();
    2166:	4d db       	rcall	.-2406   	; 0x1802 <forward>
			velocity(speed,speed);
    2168:	f6 01       	movw	r30, r12
    216a:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    216c:	f7 01       	movw	r30, r14
    216e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    2170:	f8 01       	movw	r30, r16
    2172:	80 83       	st	Z, r24
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
    2174:	23 e0       	ldi	r18, 0x03	; 3
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	46 2d       	mov	r20, r6
    217a:	57 2d       	mov	r21, r7
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
    2184:	15 cf       	rjmp	.-470    	; 0x1fb0 <move+0x182>
			//flag=1;
		}
		else if(Left_white_line>Right_white_line)
    2186:	54 17       	cp	r21, r20
    2188:	38 f4       	brcc	.+14     	; 0x2198 <move+0x36a>
		{
			velocity(0,speed);
    218a:	f6 01       	movw	r30, r12
    218c:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    218e:	f7 01       	movw	r30, r14
    2190:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    2192:	f8 01       	movw	r30, r16
    2194:	80 83       	st	Z, r24
    2196:	0c cf       	rjmp	.-488    	; 0x1fb0 <move+0x182>
		{
			velocity(0,speed);
		}
		else
		{
			velocity(speed,0);
    2198:	f6 01       	movw	r30, r12
    219a:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    219c:	f7 01       	movw	r30, r14
    219e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    21a0:	f8 01       	movw	r30, r16
    21a2:	10 82       	st	Z, r1
    21a4:	05 cf       	rjmp	.-502    	; 0x1fb0 <move+0x182>
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    21a6:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <ShaftCountRight>
    21aa:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    21ae:	a0 91 b2 05 	lds	r26, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    21b2:	b0 91 b3 05 	lds	r27, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    21b6:	45 97       	sbiw	r24, 0x15	; 21
    21b8:	a1 05       	cpc	r26, r1
    21ba:	b1 05       	cpc	r27, r1
    21bc:	80 f4       	brcc	.+32     	; 0x21de <move+0x3b0>
    21be:	a9 cf       	rjmp	.-174    	; 0x2112 <move+0x2e4>
    21c0:	20 90 b0 05 	lds	r2, 0x05B0	; 0x8005b0 <ShaftCountRight>
    21c4:	30 90 b1 05 	lds	r3, 0x05B1	; 0x8005b1 <ShaftCountRight+0x1>
    21c8:	40 90 b2 05 	lds	r4, 0x05B2	; 0x8005b2 <ShaftCountRight+0x2>
    21cc:	50 90 b3 05 	lds	r5, 0x05B3	; 0x8005b3 <ShaftCountRight+0x3>
    21d0:	f5 e1       	ldi	r31, 0x15	; 21
    21d2:	2f 16       	cp	r2, r31
    21d4:	31 04       	cpc	r3, r1
    21d6:	41 04       	cpc	r4, r1
    21d8:	51 04       	cpc	r5, r1
    21da:	40 f4       	brcc	.+16     	; 0x21ec <move+0x3be>
    21dc:	b1 cf       	rjmp	.-158    	; 0x2140 <move+0x312>
    21de:	45 2b       	or	r20, r21
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <move+0x3b6>
    21e2:	97 cf       	rjmp	.-210    	; 0x2112 <move+0x2e4>
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <move+0x3c2>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    21e6:	40 91 af 05 	lds	r20, 0x05AF	; 0x8005af <Left_white_line>
    21ea:	a3 cf       	rjmp	.-186    	; 0x2132 <move+0x304>
			prevbotloc=botloc;
			botloc=node[botloc-1][p];
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    21ec:	45 2b       	or	r20, r21
    21ee:	d9 f7       	brne	.-10     	; 0x21e6 <move+0x3b8>
		{
			forward();
    21f0:	08 db       	rcall	.-2544   	; 0x1802 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    21f2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    21f6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
		{
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
    21fa:	23 e0       	ldi	r18, 0x03	; 3
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	44 e6       	ldi	r20, 0x64	; 100
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		{
			velocity(speed,0);
		}
	}
	return suc;
}
    220a:	8d 2f       	mov	r24, r29
    220c:	9c 2f       	mov	r25, r28
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	ff 90       	pop	r15
    2218:	ef 90       	pop	r14
    221a:	df 90       	pop	r13
    221c:	cf 90       	pop	r12
    221e:	bf 90       	pop	r11
    2220:	af 90       	pop	r10
    2222:	9f 90       	pop	r9
    2224:	8f 90       	pop	r8
    2226:	7f 90       	pop	r7
    2228:	6f 90       	pop	r6
    222a:	5f 90       	pop	r5
    222c:	4f 90       	pop	r4
    222e:	3f 90       	pop	r3
    2230:	2f 90       	pop	r2
    2232:	08 95       	ret

00002234 <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	9c 01       	movw	r18, r24
	int i;
	if (cost[loc - 1] == 0)
    223a:	bc 01       	movw	r22, r24
    223c:	61 50       	subi	r22, 0x01	; 1
    223e:	71 09       	sbc	r23, r1
    2240:	db 01       	movw	r26, r22
    2242:	aa 0f       	add	r26, r26
    2244:	bb 1f       	adc	r27, r27
    2246:	a2 5a       	subi	r26, 0xA2	; 162
    2248:	b9 4f       	sbci	r27, 0xF9	; 249
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	89 2b       	or	r24, r25
    2250:	39 f4       	brne	.+14     	; 0x2260 <BotEndLocation+0x2c>
	{
		LastLocation = loc;
    2252:	30 93 df 09 	sts	0x09DF, r19	; 0x8009df <LastLocation+0x1>
    2256:	20 93 de 09 	sts	0x09DE, r18	; 0x8009de <LastLocation>
		return LastLocation;
    225a:	82 2f       	mov	r24, r18
    225c:	93 2f       	mov	r25, r19
    225e:	3c c0       	rjmp	.+120    	; 0x22d8 <BotEndLocation+0xa4>
	}
	int mCost = cost[node[loc - 1][0] - 1];
    2260:	db 01       	movw	r26, r22
    2262:	aa 0f       	add	r26, r26
    2264:	bb 1f       	adc	r27, r27
    2266:	aa 0f       	add	r26, r26
    2268:	bb 1f       	adc	r27, r27
    226a:	aa 0f       	add	r26, r26
    226c:	bb 1f       	adc	r27, r27
    226e:	fd 01       	movw	r30, r26
    2270:	e2 54       	subi	r30, 0x42	; 66
    2272:	f9 4f       	sbci	r31, 0xF9	; 249
    2274:	01 90       	ld	r0, Z+
    2276:	f0 81       	ld	r31, Z
    2278:	e0 2d       	mov	r30, r0
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	e4 5a       	subi	r30, 0xA4	; 164
    2280:	f9 4f       	sbci	r31, 0xF9	; 249
    2282:	c0 81       	ld	r28, Z
    2284:	d1 81       	ldd	r29, Z+1	; 0x01
    2286:	a0 54       	subi	r26, 0x40	; 64
    2288:	b9 4f       	sbci	r27, 0xF9	; 249
	int pos = 0;
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 1; i<4; i++)
    228e:	21 e0       	ldi	r18, 0x01	; 1
    2290:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (node[loc - 1][i]!=0)
    2292:	8d 91       	ld	r24, X+
    2294:	9d 91       	ld	r25, X+
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	61 f0       	breq	.+24     	; 0x22b2 <BotEndLocation+0x7e>
			if (cost[node[loc - 1][i] - 1]<mCost)
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	fc 01       	movw	r30, r24
    22a0:	e4 5a       	subi	r30, 0xA4	; 164
    22a2:	f9 4f       	sbci	r31, 0xF9	; 249
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	8c 17       	cp	r24, r28
    22aa:	9d 07       	cpc	r25, r29
    22ac:	14 f4       	brge	.+4      	; 0x22b2 <BotEndLocation+0x7e>
    22ae:	a9 01       	movw	r20, r18
			{
				mCost = cost[node[loc - 1][i] - 1];
    22b0:	ec 01       	movw	r28, r24
		LastLocation = loc;
		return LastLocation;
	}
	int mCost = cost[node[loc - 1][0] - 1];
	int pos = 0;
	for (i = 1; i<4; i++)
    22b2:	2f 5f       	subi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	24 30       	cpi	r18, 0x04	; 4
    22b8:	31 05       	cpc	r19, r1
    22ba:	59 f7       	brne	.-42     	; 0x2292 <BotEndLocation+0x5e>
			{
				mCost = cost[node[loc - 1][i] - 1];
				pos = i;
			}
	}
	return BotEndLocation(node[loc - 1][pos]);
    22bc:	fb 01       	movw	r30, r22
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	e4 0f       	add	r30, r20
    22c8:	f5 1f       	adc	r31, r21
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	e2 54       	subi	r30, 0x42	; 66
    22d0:	f9 4f       	sbci	r31, 0xF9	; 249
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	ae df       	rcall	.-164    	; 0x2234 <BotEndLocation>
}
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <processNotes>:
FILE uart_debug = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
///////////////////////////////////////////////////////


void processNotes()
{
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    22f4:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    22f8:	88 23       	and	r24, r24
    22fa:	09 f4       	brne	.+2      	; 0x22fe <processNotes+0x20>
    22fc:	65 c1       	rjmp	.+714    	; 0x25c8 <processNotes+0x2ea>
    22fe:	c0 e0       	ldi	r28, 0x00	; 0
    2300:	d0 e0       	ldi	r29, 0x00	; 0
    2302:	c1 2c       	mov	r12, r1
    2304:	d1 2c       	mov	r13, r1
			if(cost[botLastIndex-1]>cost[(int)otherBotLastTaskIndex-1])
				temp2=taskCost+otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1];
			else
				temp2=taskCost+otherBotTaskCost+cost[botLastIndex-1];
				
			if(temp2>temp1)
    2306:	99 24       	eor	r9, r9
    2308:	93 94       	inc	r9
    230a:	a1 2c       	mov	r10, r1
				tasks2[(int)taskCount]=127;
			}
			else
			{	
				tasks2[(int)taskCount]=noteToProcess;
				tasks[(int)taskCount]=127;
    230c:	0f 2e       	mov	r0, r31
    230e:	ff e7       	ldi	r31, 0x7F	; 127
    2310:	bf 2e       	mov	r11, r31
    2312:	f0 2d       	mov	r31, r0
				otherBotTask2[otherBotTaskCount]=127;
			}
			else
			{
				otherBotTask2[otherBotTaskCount]=noteToProcess;
				otherBotTask[otherBotTaskCount]=127;
    2314:	0f 2e       	mov	r0, r31
    2316:	ff e7       	ldi	r31, 0x7F	; 127
    2318:	ef 2e       	mov	r14, r31
    231a:	f1 2c       	mov	r15, r1
    231c:	f0 2d       	mov	r31, r0
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
	{
		int whichNote=0;
		if(notes2[(int)noteToProcess]!=0)
    231e:	fe 01       	movw	r30, r28
    2320:	e3 5e       	subi	r30, 0xE3	; 227
    2322:	f9 4f       	sbci	r31, 0xF9	; 249
    2324:	80 81       	ld	r24, Z
    2326:	88 23       	and	r24, r24
    2328:	09 f4       	brne	.+2      	; 0x232c <processNotes+0x4e>
    232a:	94 c0       	rjmp	.+296    	; 0x2454 <processNotes+0x176>
		{
			int temp1=0,temp2=0;
			costplan(nodesnear[(int)notes2[(int)noteToProcess]-1]);
    232c:	fe 01       	movw	r30, r28
    232e:	e3 5e       	subi	r30, 0xE3	; 227
    2330:	f9 4f       	sbci	r31, 0xF9	; 249
    2332:	80 81       	ld	r24, Z
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9c 01       	movw	r18, r24
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	86 55       	subi	r24, 0x56	; 86
    234c:	9c 4f       	sbci	r25, 0xFC	; 252
    234e:	38 db       	rcall	.-2448   	; 0x19c0 <costplan>
			if(cost[botLastIndex-1]>cost[(int)otherBotLastTaskIndex-1])
    2350:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <botLastIndex>
    2354:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <botLastIndex+0x1>
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e4 5a       	subi	r30, 0xA4	; 164
    235e:	f9 4f       	sbci	r31, 0xF9	; 249
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	e4 5a       	subi	r30, 0xA4	; 164
    2370:	f9 4f       	sbci	r31, 0xF9	; 249
    2372:	20 81       	ld	r18, Z
    2374:	31 81       	ldd	r19, Z+1	; 0x01
    2376:	28 17       	cp	r18, r24
    2378:	39 07       	cpc	r19, r25
    237a:	9c f4       	brge	.+38     	; 0x23a2 <processNotes+0xc4>
				temp1=taskCost+otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1];
    237c:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <taskCost>
    2380:	00 91 14 06 	lds	r16, 0x0614	; 0x800614 <otherBotTaskCost>
    2384:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2388:	10 e0       	ldi	r17, 0x00	; 0
    238a:	08 0f       	add	r16, r24
    238c:	11 1d       	adc	r17, r1
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	e4 5a       	subi	r30, 0xA4	; 164
    2396:	f9 4f       	sbci	r31, 0xF9	; 249
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	08 0f       	add	r16, r24
    239e:	19 1f       	adc	r17, r25
    23a0:	09 c0       	rjmp	.+18     	; 0x23b4 <processNotes+0xd6>
			else
				temp1=taskCost+otherBotTaskCost+cost[botLastIndex-1];
    23a2:	20 91 16 06 	lds	r18, 0x0616	; 0x800616 <taskCost>
    23a6:	00 91 14 06 	lds	r16, 0x0614	; 0x800614 <otherBotTaskCost>
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	02 0f       	add	r16, r18
    23ae:	11 1d       	adc	r17, r1
    23b0:	08 0f       	add	r16, r24
    23b2:	19 1f       	adc	r17, r25
				
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    23b4:	fe 01       	movw	r30, r28
    23b6:	ef 5c       	subi	r30, 0xCF	; 207
    23b8:	f9 4f       	sbci	r31, 0xF9	; 249
    23ba:	80 81       	ld	r24, Z
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9c 01       	movw	r18, r24
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	86 55       	subi	r24, 0x56	; 86
    23d4:	9c 4f       	sbci	r25, 0xFC	; 252
    23d6:	f4 da       	rcall	.-2584   	; 0x19c0 <costplan>
			if(cost[botLastIndex-1]>cost[(int)otherBotLastTaskIndex-1])
    23d8:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <botLastIndex>
    23dc:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <botLastIndex+0x1>
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	e4 5a       	subi	r30, 0xA4	; 164
    23e6:	f9 4f       	sbci	r31, 0xF9	; 249
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e4 5a       	subi	r30, 0xA4	; 164
    23f8:	f9 4f       	sbci	r31, 0xF9	; 249
    23fa:	20 81       	ld	r18, Z
    23fc:	31 81       	ldd	r19, Z+1	; 0x01
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	9c f4       	brge	.+38     	; 0x242a <processNotes+0x14c>
				temp2=taskCost+otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1];
    2404:	20 91 16 06 	lds	r18, 0x0616	; 0x800616 <taskCost>
    2408:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCost>
    240c:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	82 0f       	add	r24, r18
    2414:	91 1d       	adc	r25, r1
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	ee 0f       	add	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	e4 5a       	subi	r30, 0xA4	; 164
    241e:	f9 4f       	sbci	r31, 0xF9	; 249
    2420:	20 81       	ld	r18, Z
    2422:	31 81       	ldd	r19, Z+1	; 0x01
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	09 c0       	rjmp	.+18     	; 0x243c <processNotes+0x15e>
			else
				temp2=taskCost+otherBotTaskCost+cost[botLastIndex-1];
    242a:	40 91 16 06 	lds	r20, 0x0616	; 0x800616 <taskCost>
    242e:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <otherBotTaskCost>
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	24 0f       	add	r18, r20
    2436:	31 1d       	adc	r19, r1
    2438:	82 0f       	add	r24, r18
    243a:	93 1f       	adc	r25, r19
				
			if(temp2>temp1)
    243c:	39 2d       	mov	r19, r9
    243e:	2a 2d       	mov	r18, r10
    2440:	08 17       	cp	r16, r24
    2442:	19 07       	cpc	r17, r25
    2444:	14 f0       	brlt	.+4      	; 0x244a <processNotes+0x16c>
    2446:	3c 2d       	mov	r19, r12
    2448:	2d 2d       	mov	r18, r13
void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
	{
		int whichNote=0;
    244a:	03 2f       	mov	r16, r19
    244c:	12 2f       	mov	r17, r18
				
			if(temp2>temp1)
				whichNote=1;
				
		}
		if(!whichNote)
    244e:	01 15       	cp	r16, r1
    2450:	11 05       	cpc	r17, r1
    2452:	a9 f4       	brne	.+42     	; 0x247e <processNotes+0x1a0>
			costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    2454:	fe 01       	movw	r30, r28
    2456:	ef 5c       	subi	r30, 0xCF	; 207
    2458:	f9 4f       	sbci	r31, 0xF9	; 249
    245a:	80 81       	ld	r24, Z
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	9c 01       	movw	r18, r24
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	86 55       	subi	r24, 0x56	; 86
    2474:	9c 4f       	sbci	r25, 0xFC	; 252
    2476:	a4 da       	rcall	.-2744   	; 0x19c0 <costplan>
    2478:	0c 2d       	mov	r16, r12
    247a:	1d 2d       	mov	r17, r13
    247c:	12 c0       	rjmp	.+36     	; 0x24a2 <processNotes+0x1c4>
		else
			costplan(nodesnear[(int)notes2[(int)noteToProcess]-1]);
    247e:	fe 01       	movw	r30, r28
    2480:	e3 5e       	subi	r30, 0xE3	; 227
    2482:	f9 4f       	sbci	r31, 0xF9	; 249
    2484:	80 81       	ld	r24, Z
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9c 01       	movw	r18, r24
    248c:	22 0f       	add	r18, r18
    248e:	33 1f       	adc	r19, r19
    2490:	82 0f       	add	r24, r18
    2492:	93 1f       	adc	r25, r19
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	86 55       	subi	r24, 0x56	; 86
    249e:	9c 4f       	sbci	r25, 0xFC	; 252
    24a0:	8f da       	rcall	.-2786   	; 0x19c0 <costplan>
			
		if((taskCost+cost[botLastIndex-1])>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1]))
    24a2:	20 91 16 06 	lds	r18, 0x0616	; 0x800616 <taskCost>
    24a6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <botLastIndex>
    24aa:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <botLastIndex+0x1>
    24ae:	fc 01       	movw	r30, r24
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e4 5a       	subi	r30, 0xA4	; 164
    24b6:	f9 4f       	sbci	r31, 0xF9	; 249
    24b8:	40 81       	ld	r20, Z
    24ba:	51 81       	ldd	r21, Z+1	; 0x01
    24bc:	a0 91 14 06 	lds	r26, 0x0614	; 0x800614 <otherBotTaskCost>
    24c0:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    24c4:	ba 01       	movw	r22, r20
    24c6:	62 0f       	add	r22, r18
    24c8:	71 1d       	adc	r23, r1
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	e4 5a       	subi	r30, 0xA4	; 164
    24d2:	f9 4f       	sbci	r31, 0xF9	; 249
    24d4:	20 81       	ld	r18, Z
    24d6:	31 81       	ldd	r19, Z+1	; 0x01
    24d8:	2a 0f       	add	r18, r26
    24da:	31 1d       	adc	r19, r1
    24dc:	26 17       	cp	r18, r22
    24de:	37 07       	cpc	r19, r23
    24e0:	0c f0       	brlt	.+2      	; 0x24e4 <processNotes+0x206>
    24e2:	40 c0       	rjmp	.+128    	; 0x2564 <processNotes+0x286>
		{
			otherBotTaskCost+=cost[otherBotLastTaskIndex-1];
    24e4:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    24e8:	90 91 14 06 	lds	r25, 0x0614	; 0x800614 <otherBotTaskCost>
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	e4 5a       	subi	r30, 0xA4	; 164
    24f4:	f9 4f       	sbci	r31, 0xF9	; 249
    24f6:	80 81       	ld	r24, Z
    24f8:	89 0f       	add	r24, r25
    24fa:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <otherBotTaskCost>
			otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);
    24fe:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <otherBotLastTaskIndex>
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	97 de       	rcall	.-722    	; 0x2234 <BotEndLocation>
    2506:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <otherBotLastTaskIndex>
			if(!whichNote)
    250a:	01 2b       	or	r16, r17
    250c:	89 f4       	brne	.+34     	; 0x2530 <processNotes+0x252>
			{
				otherBotTask[otherBotTaskCount]=noteToProcess;
    250e:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <otherBotTaskCount>
    2512:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <otherBotTaskCount+0x1>
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	fc 01       	movw	r30, r24
    251c:	ea 51       	subi	r30, 0x1A	; 26
    251e:	fa 4f       	sbci	r31, 0xFA	; 250
    2520:	d1 83       	std	Z+1, r29	; 0x01
    2522:	c0 83       	st	Z, r28
				otherBotTask2[otherBotTaskCount]=127;
    2524:	fc 01       	movw	r30, r24
    2526:	e4 54       	subi	r30, 0x44	; 68
    2528:	fa 4f       	sbci	r31, 0xFA	; 250
    252a:	f1 82       	std	Z+1, r15	; 0x01
    252c:	e0 82       	st	Z, r14
    252e:	10 c0       	rjmp	.+32     	; 0x2550 <processNotes+0x272>
			}
			else
			{
				otherBotTask2[otherBotTaskCount]=noteToProcess;
    2530:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <otherBotTaskCount>
    2534:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <otherBotTaskCount+0x1>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	fc 01       	movw	r30, r24
    253e:	e4 54       	subi	r30, 0x44	; 68
    2540:	fa 4f       	sbci	r31, 0xFA	; 250
    2542:	d1 83       	std	Z+1, r29	; 0x01
    2544:	c0 83       	st	Z, r28
				otherBotTask[otherBotTaskCount]=127;
    2546:	fc 01       	movw	r30, r24
    2548:	ea 51       	subi	r30, 0x1A	; 26
    254a:	fa 4f       	sbci	r31, 0xFA	; 250
    254c:	f1 82       	std	Z+1, r15	; 0x01
    254e:	e0 82       	st	Z, r14
				
			}
			otherBotTaskCount++;
    2550:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <otherBotTaskCount>
    2554:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <otherBotTaskCount+0x1>
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	90 93 e5 05 	sts	0x05E5, r25	; 0x8005e5 <otherBotTaskCount+0x1>
    255e:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <otherBotTaskCount>
    2562:	2a c0       	rjmp	.+84     	; 0x25b8 <processNotes+0x2da>
		}
		else
		{
			taskCost+=cost[botLastIndex-1];
    2564:	20 91 16 06 	lds	r18, 0x0616	; 0x800616 <taskCost>
    2568:	42 0f       	add	r20, r18
    256a:	40 93 16 06 	sts	0x0616, r20	; 0x800616 <taskCost>
			botLastIndex=BotEndLocation(botLastIndex);
    256e:	62 de       	rcall	.-828    	; 0x2234 <BotEndLocation>
    2570:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <botLastIndex+0x1>
    2574:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <botLastIndex>
			if(!whichNote)
    2578:	01 2b       	or	r16, r17
    257a:	69 f4       	brne	.+26     	; 0x2596 <processNotes+0x2b8>
			{	
				tasks[(int)taskCount]=noteToProcess;
    257c:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <taskCount>
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	eb 5b       	subi	r30, 0xBB	; 187
    2584:	f9 4f       	sbci	r31, 0xF9	; 249
    2586:	c0 83       	st	Z, r28
				tasks2[(int)taskCount]=127;
    2588:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <taskCount>
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	ef 5b       	subi	r30, 0xBF	; 191
    2590:	f7 4f       	sbci	r31, 0xF7	; 247
    2592:	b0 82       	st	Z, r11
    2594:	0c c0       	rjmp	.+24     	; 0x25ae <processNotes+0x2d0>
			}
			else
			{	
				tasks2[(int)taskCount]=noteToProcess;
    2596:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <taskCount>
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	ef 5b       	subi	r30, 0xBF	; 191
    259e:	f7 4f       	sbci	r31, 0xF7	; 247
    25a0:	c0 83       	st	Z, r28
				tasks[(int)taskCount]=127;
    25a2:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <taskCount>
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	eb 5b       	subi	r30, 0xBB	; 187
    25aa:	f9 4f       	sbci	r31, 0xF9	; 249
    25ac:	b0 82       	st	Z, r11
			}
			taskCount++;
    25ae:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <taskCount>
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <taskCount>
		}
		noteToProcess++;
    25b8:	21 96       	adiw	r28, 0x01	; 1


void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    25ba:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	8c 17       	cp	r24, r28
    25c2:	9d 07       	cpc	r25, r29
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <processNotes+0x2ea>
    25c6:	ab ce       	rjmp	.-682    	; 0x231e <processNotes+0x40>
		}
		noteToProcess++;
		
	}
	
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	9f 90       	pop	r9
    25de:	08 95       	ret

000025e0 <main>:


int main()
{
    25e0:	2f 92       	push	r2
    25e2:	3f 92       	push	r3
    25e4:	4f 92       	push	r4
    25e6:	5f 92       	push	r5
    25e8:	6f 92       	push	r6
    25ea:	7f 92       	push	r7
    25ec:	8f 92       	push	r8
    25ee:	9f 92       	push	r9
    25f0:	af 92       	push	r10
    25f2:	bf 92       	push	r11
    25f4:	cf 92       	push	r12
    25f6:	df 92       	push	r13
    25f8:	ef 92       	push	r14
    25fa:	ff 92       	push	r15
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	00 d0       	rcall	.+0      	; 0x2606 <main+0x26>
    2606:	00 d0       	rcall	.+0      	; 0x2608 <main+0x28>
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	declare_constants();
    260c:	0e 94 80 02 	call	0x500	; 0x500 <declare_constants>
	init_devices();
    2610:	78 d9       	rcall	.-3344   	; 0x1902 <init_devices>
	servo_1(90);
    2612:	8a e5       	ldi	r24, 0x5A	; 90
    2614:	07 d8       	rcall	.-4082   	; 0x1624 <servo_1>
	PORTJ = 0x00;
    2616:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    261a:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <notesReceived>
	lcd_string("Waiting...");
    261e:	8f e5       	ldi	r24, 0x5F	; 95
    2620:	95 e0       	ldi	r25, 0x05	; 5
    2622:	0e 94 43 01 	call	0x286	; 0x286 <lcd_string>
	while(!notesReceived2);
    2626:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <notesReceived2>
    262a:	88 23       	and	r24, r24
    262c:	e1 f3       	breq	.-8      	; 0x2626 <main+0x46>
	lcd_clear();
    262e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	lcd_string("Received!");
    2632:	8a e6       	ldi	r24, 0x6A	; 106
    2634:	95 e0       	ldi	r25, 0x05	; 5
    2636:	0e 94 43 01 	call	0x286	; 0x286 <lcd_string>
	PORTJ = 0xFF;
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2640:	e0 ec       	ldi	r30, 0xC0	; 192
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	85 ff       	sbrs	r24, 5
    2648:	fd cf       	rjmp	.-6      	; 0x2644 <main+0x64>
	UDR0 = data;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//send data to slave through ZigBee
void inline SendNotesToSlave()
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
    2650:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    2654:	88 23       	and	r24, r24
    2656:	c1 f0       	breq	.+48     	; 0x2688 <main+0xa8>
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    265c:	e0 ec       	ldi	r30, 0xC0	; 192
    265e:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2660:	46 ec       	ldi	r20, 0xC6	; 198
    2662:	50 e0       	ldi	r21, 0x00	; 0
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    2664:	d9 01       	movw	r26, r18
    2666:	af 5c       	subi	r26, 0xCF	; 207
    2668:	b9 4f       	sbci	r27, 0xF9	; 249
    266a:	9c 91       	ld	r25, X
    266c:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    266e:	80 81       	ld	r24, Z
    2670:	85 ff       	sbrs	r24, 5
    2672:	fd cf       	rjmp	.-6      	; 0x266e <main+0x8e>
	UDR0 = data;
    2674:	da 01       	movw	r26, r20
    2676:	9c 93       	st	X, r25
//send data to slave through ZigBee
void inline SendNotesToSlave()
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
    2678:	2f 5f       	subi	r18, 0xFF	; 255
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	28 17       	cp	r18, r24
    2684:	39 07       	cpc	r19, r25
    2686:	74 f3       	brlt	.-36     	; 0x2664 <main+0x84>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2688:	e0 ec       	ldi	r30, 0xC0	; 192
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	85 ff       	sbrs	r24, 5
    2690:	fd cf       	rjmp	.-6      	; 0x268c <main+0xac>
	UDR0 = data;
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2698:	e0 ec       	ldi	r30, 0xC0	; 192
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	85 ff       	sbrs	r24, 5
    26a0:	fd cf       	rjmp	.-6      	; 0x269c <main+0xbc>
	UDR0 = data;
    26a2:	8b e0       	ldi	r24, 0x0B	; 11
    26a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		SendByteToSlave(DATA(notes[i]));
	}
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
    26a8:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <noteCount2>
    26ac:	88 23       	and	r24, r24
    26ae:	c1 f0       	breq	.+48     	; 0x26e0 <main+0x100>
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    26b4:	e0 ec       	ldi	r30, 0xC0	; 192
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    26b8:	46 ec       	ldi	r20, 0xC6	; 198
    26ba:	50 e0       	ldi	r21, 0x00	; 0
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
	{
		SendByteToSlave(DATA(notes2[i]));
    26bc:	d9 01       	movw	r26, r18
    26be:	a3 5e       	subi	r26, 0xE3	; 227
    26c0:	b9 4f       	sbci	r27, 0xF9	; 249
    26c2:	9c 91       	ld	r25, X
    26c4:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    26c6:	80 81       	ld	r24, Z
    26c8:	85 ff       	sbrs	r24, 5
    26ca:	fd cf       	rjmp	.-6      	; 0x26c6 <main+0xe6>
	UDR0 = data;
    26cc:	da 01       	movw	r26, r20
    26ce:	9c 93       	st	X, r25
		SendByteToSlave(DATA(notes[i]));
	}
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
    26d0:	2f 5f       	subi	r18, 0xFF	; 255
    26d2:	3f 4f       	sbci	r19, 0xFF	; 255
    26d4:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <noteCount2>
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	28 17       	cp	r18, r24
    26dc:	39 07       	cpc	r19, r25
    26de:	74 f3       	brlt	.-36     	; 0x26bc <main+0xdc>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    26e0:	e0 ec       	ldi	r30, 0xC0	; 192
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	85 ff       	sbrs	r24, 5
    26e8:	fd cf       	rjmp	.-6      	; 0x26e4 <main+0x104>
	UDR0 = data;
    26ea:	8c e0       	ldi	r24, 0x0C	; 12
    26ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	lcd_string("Received!");
	PORTJ = 0xFF;
	
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    26f0:	8f e0       	ldi	r24, 0x0F	; 15
    26f2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	lcd_clear();
    26f6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	lcd_string("Sent!");
    26fa:	84 e7       	ldi	r24, 0x74	; 116
    26fc:	95 e0       	ldi	r25, 0x05	; 5
    26fe:	0e 94 43 01 	call	0x286	; 0x286 <lcd_string>
	lcd_clear();
    2702:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	lcd_string("Sending Tasks");
    2706:	8a e7       	ldi	r24, 0x7A	; 122
    2708:	95 e0       	ldi	r25, 0x05	; 5
    270a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_string>
	processNotes();
    270e:	e7 dd       	rcall	.-1074   	; 0x22de <processNotes>
	lcd_clear();
    2710:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	lcd_string("Processed");
    2714:	88 e8       	ldi	r24, 0x88	; 136
    2716:	95 e0       	ldi	r25, 0x05	; 5
    2718:	0e 94 43 01 	call	0x286	; 0x286 <lcd_string>
	SendByteToSlave(RC_NOT_E2);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    271c:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <otherBotTaskCount>
    2720:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <otherBotTaskCount+0x1>
    2724:	18 16       	cp	r1, r24
    2726:	19 06       	cpc	r1, r25
    2728:	dc f5       	brge	.+118    	; 0x27a0 <main+0x1c0>
    272a:	46 ee       	ldi	r20, 0xE6	; 230
    272c:	55 e0       	ldi	r21, 0x05	; 5
    272e:	8c eb       	ldi	r24, 0xBC	; 188
    2730:	95 e0       	ldi	r25, 0x05	; 5
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2736:	e0 ec       	ldi	r30, 0xC0	; 192
    2738:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    273a:	0f 2e       	mov	r0, r31
    273c:	f6 ec       	ldi	r31, 0xC6	; 198
    273e:	ef 2e       	mov	r14, r31
    2740:	f1 2c       	mov	r15, r1
    2742:	f0 2d       	mov	r31, r0
    2744:	13 e0       	ldi	r17, 0x03	; 3
    2746:	7d e0       	ldi	r23, 0x0D	; 13
    2748:	6c 01       	movw	r12, r24
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
    274a:	da 01       	movw	r26, r20
    274c:	9c 91       	ld	r25, X
    274e:	4e 5f       	subi	r20, 0xFE	; 254
    2750:	5f 4f       	sbci	r21, 0xFF	; 255

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2752:	80 81       	ld	r24, Z
    2754:	85 ff       	sbrs	r24, 5
    2756:	fd cf       	rjmp	.-6      	; 0x2752 <main+0x172>
	UDR0 = data;
    2758:	d7 01       	movw	r26, r14
    275a:	1c 93       	st	X, r17

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    275c:	69 2f       	mov	r22, r25
    275e:	60 68       	ori	r22, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2760:	80 81       	ld	r24, Z
    2762:	85 ff       	sbrs	r24, 5
    2764:	fd cf       	rjmp	.-6      	; 0x2760 <main+0x180>
	UDR0 = data;
    2766:	d7 01       	movw	r26, r14
    2768:	6c 93       	st	X, r22
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    276a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <otherBotLastTaskIndex>
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
		SendTask2ToSlave(otherBotTask2[i]);
    276e:	d6 01       	movw	r26, r12
    2770:	9c 91       	ld	r25, X
    2772:	b2 e0       	ldi	r27, 0x02	; 2
    2774:	cb 0e       	add	r12, r27
    2776:	d1 1c       	adc	r13, r1

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2778:	80 81       	ld	r24, Z
    277a:	85 ff       	sbrs	r24, 5
    277c:	fd cf       	rjmp	.-6      	; 0x2778 <main+0x198>
	UDR0 = data;
    277e:	d7 01       	movw	r26, r14
    2780:	7c 93       	st	X, r23

//send the task2 to slave
void inline SendTask2ToSlave(char task)
{
	SendByteToSlave(ADD_TASK2);
	SendByteToSlave(DATA(task));
    2782:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2784:	80 81       	ld	r24, Z
    2786:	85 ff       	sbrs	r24, 5
    2788:	fd cf       	rjmp	.-6      	; 0x2784 <main+0x1a4>
	UDR0 = data;
    278a:	d7 01       	movw	r26, r14
    278c:	9c 93       	st	X, r25
	SendByteToSlave(RC_NOT_E2);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    278e:	2f 5f       	subi	r18, 0xFF	; 255
    2790:	3f 4f       	sbci	r19, 0xFF	; 255
    2792:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <otherBotTaskCount>
    2796:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <otherBotTaskCount+0x1>
    279a:	28 17       	cp	r18, r24
    279c:	39 07       	cpc	r19, r25
    279e:	ac f2       	brlt	.-86     	; 0x274a <main+0x16a>
	lcd_string("Sending Tasks");
	processNotes();
	lcd_clear();
	lcd_string("Processed");
	SendTaskArray();
	lcd_clear();
    27a0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	lcd_string("Task Sent");
    27a4:	82 e9       	ldi	r24, 0x92	; 146
    27a6:	95 e0       	ldi	r25, 0x05	; 5
    27a8:	0e 94 43 01 	call	0x286	; 0x286 <lcd_string>
	#endif

	while(taskCount==0);
    27ac:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <taskCount>
    27b0:	88 23       	and	r24, r24
    27b2:	e1 f3       	breq	.-8      	; 0x27ac <main+0x1cc>
	
	//PC Debug (printf)
	stdout = &uart_debug;
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	92 e0       	ldi	r25, 0x02	; 2
    27b8:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <__iob+0x3>
    27bc:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <__iob+0x2>
		
	int i=0;
	for(i=0;i<noteCount;i++)
    27c0:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    27c4:	88 23       	and	r24, r24
    27c6:	f1 f0       	breq	.+60     	; 0x2804 <main+0x224>
    27c8:	00 e0       	ldi	r16, 0x00	; 0
    27ca:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_print(2,1,(int)notes[i],2);
    27cc:	f8 01       	movw	r30, r16
    27ce:	ef 5c       	subi	r30, 0xCF	; 207
    27d0:	f9 4f       	sbci	r31, 0xF9	; 249
    27d2:	40 81       	ld	r20, Z
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	22 e0       	ldi	r18, 0x02	; 2
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
    27e2:	bf ef       	ldi	r27, 0xFF	; 255
    27e4:	ef ef       	ldi	r30, 0xFF	; 255
    27e6:	fc e2       	ldi	r31, 0x2C	; 44
    27e8:	b1 50       	subi	r27, 0x01	; 1
    27ea:	e0 40       	sbci	r30, 0x00	; 0
    27ec:	f0 40       	sbci	r31, 0x00	; 0
    27ee:	e1 f7       	brne	.-8      	; 0x27e8 <main+0x208>
    27f0:	00 c0       	rjmp	.+0      	; 0x27f2 <main+0x212>
    27f2:	00 00       	nop
	
	//PC Debug (printf)
	stdout = &uart_debug;
		
	int i=0;
	for(i=0;i<noteCount;i++)
    27f4:	0f 5f       	subi	r16, 0xFF	; 255
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <noteCount>
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	08 17       	cp	r16, r24
    2800:	19 07       	cpc	r17, r25
    2802:	24 f3       	brlt	.-56     	; 0x27cc <main+0x1ec>
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
    2804:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
	{	
		//printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
		int taskDone=0;
		int whichTask=0;
    2808:	a1 2c       	mov	r10, r1
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    280a:	0f 2e       	mov	r0, r31
    280c:	f6 ec       	ldi	r31, 0xC6	; 198
    280e:	cf 2e       	mov	r12, r31
    2810:	d1 2c       	mov	r13, r1
    2812:	f0 2d       	mov	r31, r0
    2814:	68 94       	set
    2816:	55 24       	eor	r5, r5
    2818:	52 f8       	bld	r5, 2
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    281a:	19 82       	std	Y+1, r1	; 0x01
    281c:	aa 82       	std	Y+2, r10	; 0x02
			for(i=1;i<4;i++)
    281e:	21 e0       	ldi	r18, 0x01	; 1
    2820:	2d 83       	std	Y+5, r18	; 0x05
    2822:	1e 82       	std	Y+6, r1	; 0x06
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    2824:	41 2c       	mov	r4, r1
    2826:	31 2c       	mov	r3, r1
			for(i=1;i<4;i++)
    2828:	22 24       	eor	r2, r2
    282a:	23 94       	inc	r2
    282c:	b1 2c       	mov	r11, r1
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
    282e:	03 c4       	rjmp	.+2054   	; 0x3036 <main+0xa56>
	{	
		//printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
		int taskDone=0;
		int whichTask=0;
		int i,minCost,nxtNode,pos;
		if((int)tasks[taskitr]!=127)
    2830:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2834:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2838:	eb 5b       	subi	r30, 0xBB	; 187
    283a:	f9 4f       	sbci	r31, 0xF9	; 249
    283c:	80 81       	ld	r24, Z
    283e:	8f 37       	cpi	r24, 0x7F	; 127
    2840:	e1 f1       	breq	.+120    	; 0x28ba <main+0x2da>
		{
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    2842:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2846:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    284a:	eb 5b       	subi	r30, 0xBB	; 187
    284c:	f9 4f       	sbci	r31, 0xF9	; 249
    284e:	e0 81       	ld	r30, Z
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	ef 5c       	subi	r30, 0xCF	; 207
    2854:	f9 4f       	sbci	r31, 0xF9	; 249
    2856:	80 81       	ld	r24, Z
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	9c 01       	movw	r18, r24
    285e:	22 0f       	add	r18, r18
    2860:	33 1f       	adc	r19, r19
    2862:	82 0f       	add	r24, r18
    2864:	93 1f       	adc	r25, r19
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	86 55       	subi	r24, 0x56	; 86
    2870:	9c 4f       	sbci	r25, 0xFC	; 252
    2872:	a6 d8       	rcall	.-3764   	; 0x19c0 <costplan>
			lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
    2874:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2878:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    287c:	eb 5b       	subi	r30, 0xBB	; 187
    287e:	f9 4f       	sbci	r31, 0xF9	; 249
    2880:	e0 81       	ld	r30, Z
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	ef 5c       	subi	r30, 0xCF	; 207
    2886:	f9 4f       	sbci	r31, 0xF9	; 249
    2888:	40 81       	ld	r20, Z
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	22 e0       	ldi	r18, 0x02	; 2
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	6c e0       	ldi	r22, 0x0C	; 12
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
	{	
		//printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
		int taskDone=0;
		int whichTask=0;
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
			costplan(nodesnear[(int)notes2[(int)tasks2[taskitr]]-1]);
			lcd_print(2,12,(int)notes2[(int)tasks2[taskitr]],2);
		}
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    28a0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    28a4:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	e4 5a       	subi	r30, 0xA4	; 164
    28ae:	f9 4f       	sbci	r31, 0xF9	; 249
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	89 2b       	or	r24, r25
    28b6:	89 f5       	brne	.+98     	; 0x291a <main+0x33a>
    28b8:	93 c1       	rjmp	.+806    	; 0x2be0 <main+0x600>
			lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
		}
		else
		{
			whichTask=1;
			costplan(nodesnear[(int)notes2[(int)tasks2[taskitr]]-1]);
    28ba:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    28be:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    28c2:	ef 5b       	subi	r30, 0xBF	; 191
    28c4:	f7 4f       	sbci	r31, 0xF7	; 247
    28c6:	e0 81       	ld	r30, Z
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	e3 5e       	subi	r30, 0xE3	; 227
    28cc:	f9 4f       	sbci	r31, 0xF9	; 249
    28ce:	80 81       	ld	r24, Z
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	9c 01       	movw	r18, r24
    28d6:	22 0f       	add	r18, r18
    28d8:	33 1f       	adc	r19, r19
    28da:	82 0f       	add	r24, r18
    28dc:	93 1f       	adc	r25, r19
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	86 55       	subi	r24, 0x56	; 86
    28e8:	9c 4f       	sbci	r25, 0xFC	; 252
    28ea:	6a d8       	rcall	.-3884   	; 0x19c0 <costplan>
			lcd_print(2,12,(int)notes2[(int)tasks2[taskitr]],2);
    28ec:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    28f0:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    28f4:	ef 5b       	subi	r30, 0xBF	; 191
    28f6:	f7 4f       	sbci	r31, 0xF7	; 247
    28f8:	e0 81       	ld	r30, Z
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	e3 5e       	subi	r30, 0xE3	; 227
    28fe:	f9 4f       	sbci	r31, 0xF9	; 249
    2900:	40 81       	ld	r20, Z
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	22 e0       	ldi	r18, 0x02	; 2
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	6c e0       	ldi	r22, 0x0C	; 12
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
			costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
			lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
		}
		else
		{
			whichTask=1;
    2910:	9d 81       	ldd	r25, Y+5	; 0x05
    2912:	9b 83       	std	Y+3, r25	; 0x03
    2914:	ae 81       	ldd	r26, Y+6	; 0x06
    2916:	ac 83       	std	Y+4, r26	; 0x04
    2918:	c3 cf       	rjmp	.-122    	; 0x28a0 <main+0x2c0>
		}
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
    291a:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <botloc>
    291e:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <botloc+0x1>
    2922:	22 e0       	ldi	r18, 0x02	; 2
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	65 e0       	ldi	r22, 0x05	; 5
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
			minCost=cost[node[botloc-1][0]-1];
    292e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2932:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2936:	ee 0f       	add	r30, r30
    2938:	ff 1f       	adc	r31, r31
    293a:	ee 0f       	add	r30, r30
    293c:	ff 1f       	adc	r31, r31
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	ea 54       	subi	r30, 0x4A	; 74
    2944:	f9 4f       	sbci	r31, 0xF9	; 249
    2946:	01 90       	ld	r0, Z+
    2948:	f0 81       	ld	r31, Z
    294a:	e0 2d       	mov	r30, r0
    294c:	ee 0f       	add	r30, r30
    294e:	ff 1f       	adc	r31, r31
    2950:	e4 5a       	subi	r30, 0xA4	; 164
    2952:	f9 4f       	sbci	r31, 0xF9	; 249
    2954:	20 81       	ld	r18, Z
    2956:	31 81       	ldd	r19, Z+1	; 0x01
			nxtNode=node[botloc-1][0];
    2958:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    295c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2960:	ee 0f       	add	r30, r30
    2962:	ff 1f       	adc	r31, r31
    2964:	ee 0f       	add	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	ee 0f       	add	r30, r30
    296a:	ff 1f       	adc	r31, r31
    296c:	ea 54       	subi	r30, 0x4A	; 74
    296e:	f9 4f       	sbci	r31, 0xF9	; 249
    2970:	60 80       	ld	r6, Z
    2972:	71 80       	ldd	r7, Z+1	; 0x01
			pos=0;
    2974:	84 2c       	mov	r8, r4
    2976:	93 2c       	mov	r9, r3
			for(i=1;i<4;i++)
    2978:	82 2d       	mov	r24, r2
    297a:	9b 2d       	mov	r25, r11
			{
				if(node[botloc-1][i]!=0)
    297c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2980:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2984:	31 97       	sbiw	r30, 0x01	; 1
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	ee 0f       	add	r30, r30
    298c:	ff 1f       	adc	r31, r31
    298e:	e8 0f       	add	r30, r24
    2990:	f9 1f       	adc	r31, r25
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	e2 54       	subi	r30, 0x42	; 66
    2998:	f9 4f       	sbci	r31, 0xF9	; 249
    299a:	40 81       	ld	r20, Z
    299c:	51 81       	ldd	r21, Z+1	; 0x01
    299e:	45 2b       	or	r20, r21
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <main+0x3c4>
    29a2:	45 c0       	rjmp	.+138    	; 0x2a2e <main+0x44e>
					if(cost[node[botloc-1][i]-1]<minCost)
    29a4:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    29a8:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    29ac:	31 97       	sbiw	r30, 0x01	; 1
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	e8 0f       	add	r30, r24
    29b8:	f9 1f       	adc	r31, r25
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	e2 54       	subi	r30, 0x42	; 66
    29c0:	f9 4f       	sbci	r31, 0xF9	; 249
    29c2:	01 90       	ld	r0, Z+
    29c4:	f0 81       	ld	r31, Z
    29c6:	e0 2d       	mov	r30, r0
    29c8:	ee 0f       	add	r30, r30
    29ca:	ff 1f       	adc	r31, r31
    29cc:	e4 5a       	subi	r30, 0xA4	; 164
    29ce:	f9 4f       	sbci	r31, 0xF9	; 249
    29d0:	40 81       	ld	r20, Z
    29d2:	51 81       	ldd	r21, Z+1	; 0x01
    29d4:	42 17       	cp	r20, r18
    29d6:	53 07       	cpc	r21, r19
    29d8:	54 f5       	brge	.+84     	; 0x2a2e <main+0x44e>
					{
						minCost=cost[node[botloc-1][i]-1];
    29da:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    29de:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    29e2:	31 97       	sbiw	r30, 0x01	; 1
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	e8 0f       	add	r30, r24
    29ee:	f9 1f       	adc	r31, r25
    29f0:	ee 0f       	add	r30, r30
    29f2:	ff 1f       	adc	r31, r31
    29f4:	e2 54       	subi	r30, 0x42	; 66
    29f6:	f9 4f       	sbci	r31, 0xF9	; 249
    29f8:	01 90       	ld	r0, Z+
    29fa:	f0 81       	ld	r31, Z
    29fc:	e0 2d       	mov	r30, r0
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	e4 5a       	subi	r30, 0xA4	; 164
    2a04:	f9 4f       	sbci	r31, 0xF9	; 249
    2a06:	20 81       	ld	r18, Z
    2a08:	31 81       	ldd	r19, Z+1	; 0x01
						nxtNode=node[botloc-1][i];
    2a0a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2a0e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2a12:	31 97       	sbiw	r30, 0x01	; 1
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	ee 0f       	add	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	e8 0f       	add	r30, r24
    2a1e:	f9 1f       	adc	r31, r25
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	e2 54       	subi	r30, 0x42	; 66
    2a26:	f9 4f       	sbci	r31, 0xF9	; 249
    2a28:	60 80       	ld	r6, Z
    2a2a:	71 80       	ldd	r7, Z+1	; 0x01
    2a2c:	4c 01       	movw	r8, r24
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
			for(i=1;i<4;i++)
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	84 30       	cpi	r24, 0x04	; 4
    2a32:	91 05       	cpc	r25, r1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <main+0x458>
    2a36:	a2 cf       	rjmp	.-188    	; 0x297c <main+0x39c>
    2a38:	74 01       	movw	r14, r8
    2a3a:	83 01       	movw	r16, r6
						minCost=cost[node[botloc-1][i]-1];
						nxtNode=node[botloc-1][i];
						pos=i;
					}
			}
			lcd_print(2,8,nxtNode,2);
    2a3c:	22 e0       	ldi	r18, 0x02	; 2
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	a3 01       	movw	r20, r6
    2a42:	68 e0       	ldi	r22, 0x08	; 8
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
			if(otherBotMovingTo==botloc)
    2a4a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <otherBotMovingTo>
    2a4e:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <botloc>
    2a52:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <botloc+0x1>
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	82 17       	cp	r24, r18
    2a5a:	93 07       	cpc	r25, r19
    2a5c:	91 f4       	brne	.+36     	; 0x2a82 <main+0x4a2>
				if(nxtNode==otherBotLocation)
    2a5e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <otherBotLocation>
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	86 15       	cp	r24, r6
    2a66:	97 05       	cpc	r25, r7
    2a68:	61 f4       	brne	.+24     	; 0x2a82 <main+0x4a2>
				{	
					swapTask(taskitr);
    2a6a:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <taskitr>
    2a6e:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <taskitr+0x1>
    2a72:	37 d9       	rcall	.-3474   	; 0x1ce2 <swapTask>
					swap=0;
    2a74:	e9 81       	ldd	r30, Y+1	; 0x01
    2a76:	fa 81       	ldd	r31, Y+2	; 0x02
    2a78:	f0 93 11 06 	sts	0x0611, r31	; 0x800611 <swap+0x1>
    2a7c:	e0 93 10 06 	sts	0x0610, r30	; 0x800610 <swap>
					break;
    2a80:	af c0       	rjmp	.+350    	; 0x2be0 <main+0x600>
				}
			while((int)otherBotMovingTo==nxtNode);
    2a82:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <otherBotMovingTo>
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	80 17       	cp	r24, r16
    2a8a:	91 07       	cpc	r25, r17
    2a8c:	d1 f3       	breq	.-12     	; 0x2a82 <main+0x4a2>
			while((int)otherBotLocation==nxtNode);
    2a8e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <otherBotLocation>
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	80 17       	cp	r24, r16
    2a96:	91 07       	cpc	r25, r17
    2a98:	d1 f3       	breq	.-12     	; 0x2a8e <main+0x4ae>
			if(swap==1)
    2a9a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <swap>
    2a9e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <swap+0x1>
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	39 f4       	brne	.+14     	; 0x2ab4 <main+0x4d4>
			{
				swap=0;
    2aa6:	29 81       	ldd	r18, Y+1	; 0x01
    2aa8:	3a 81       	ldd	r19, Y+2	; 0x02
    2aaa:	30 93 11 06 	sts	0x0611, r19	; 0x800611 <swap+0x1>
    2aae:	20 93 10 06 	sts	0x0610, r18	; 0x800610 <swap>
				break;
    2ab2:	96 c0       	rjmp	.+300    	; 0x2be0 <main+0x600>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2ab4:	a0 ec       	ldi	r26, 0xC0	; 192
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	8c 91       	ld	r24, X
    2aba:	85 ff       	sbrs	r24, 5
    2abc:	fb cf       	rjmp	.-10     	; 0x2ab4 <main+0x4d4>
	UDR0 = data;
    2abe:	85 e0       	ldi	r24, 0x05	; 5
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	80 83       	st	Z, r24

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    2ac4:	00 68       	ori	r16, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2ac6:	a0 ec       	ldi	r26, 0xC0	; 192
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	8c 91       	ld	r24, X
    2acc:	85 ff       	sbrs	r24, 5
    2ace:	fb cf       	rjmp	.-10     	; 0x2ac6 <main+0x4e6>
	UDR0 = data;
    2ad0:	f6 01       	movw	r30, r12
    2ad2:	00 83       	st	Z, r16
			{
				swap=0;
				break;
			}
			SendNextNode(nxtNode);
			taskDone=move(pos);
    2ad4:	c7 01       	movw	r24, r14
    2ad6:	ab d9       	rcall	.-3242   	; 0x1e2e <move>
			if(taskDone==0)
    2ad8:	89 2b       	or	r24, r25
    2ada:	09 f0       	breq	.+2      	; 0x2ade <main+0x4fe>
    2adc:	4c c0       	rjmp	.+152    	; 0x2b76 <main+0x596>
    2ade:	74 01       	movw	r14, r8
    2ae0:	b3 01       	movw	r22, r6
			{
				for(i=0;i<4;i++)
					if(node[node[prevbotloc-1][pos]-1][i]==nxtNode)
    2ae2:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <prevbotloc>
    2ae6:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <prevbotloc+0x1>
    2aea:	11 97       	sbiw	r26, 0x01	; 1
    2aec:	29 81       	ldd	r18, Y+1	; 0x01
    2aee:	3a 81       	ldd	r19, Y+2	; 0x02
    2af0:	aa 0f       	add	r26, r26
    2af2:	bb 1f       	adc	r27, r27
    2af4:	aa 0f       	add	r26, r26
    2af6:	bb 1f       	adc	r27, r27
    2af8:	a8 0d       	add	r26, r8
    2afa:	b9 1d       	adc	r27, r9
    2afc:	aa 0f       	add	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	a2 54       	subi	r26, 0x42	; 66
    2b02:	b9 4f       	sbci	r27, 0xF9	; 249
    2b04:	4d 91       	ld	r20, X+
    2b06:	5c 91       	ld	r21, X
    2b08:	11 97       	sbiw	r26, 0x01	; 1
    2b0a:	41 50       	subi	r20, 0x01	; 1
    2b0c:	51 09       	sbc	r21, r1
    2b0e:	fa 01       	movw	r30, r20
    2b10:	ee 0f       	add	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	ee 0f       	add	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	e2 54       	subi	r30, 0x42	; 66
    2b22:	f9 4f       	sbci	r31, 0xF9	; 249
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
    2b28:	86 17       	cp	r24, r22
    2b2a:	97 07       	cpc	r25, r23
    2b2c:	69 f4       	brne	.+26     	; 0x2b48 <main+0x568>
						node[node[prevbotloc-1][pos]-1][i]=0;
    2b2e:	fa 01       	movw	r30, r20
    2b30:	ee 0f       	add	r30, r30
    2b32:	ff 1f       	adc	r31, r31
    2b34:	ee 0f       	add	r30, r30
    2b36:	ff 1f       	adc	r31, r31
    2b38:	e2 0f       	add	r30, r18
    2b3a:	f3 1f       	adc	r31, r19
    2b3c:	ee 0f       	add	r30, r30
    2b3e:	ff 1f       	adc	r31, r31
    2b40:	e2 54       	subi	r30, 0x42	; 66
    2b42:	f9 4f       	sbci	r31, 0xF9	; 249
    2b44:	11 82       	std	Z+1, r1	; 0x01
    2b46:	10 82       	st	Z, r1
			}
			SendNextNode(nxtNode);
			taskDone=move(pos);
			if(taskDone==0)
			{
				for(i=0;i<4;i++)
    2b48:	2f 5f       	subi	r18, 0xFF	; 255
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	24 30       	cpi	r18, 0x04	; 4
    2b4e:	31 05       	cpc	r19, r1
    2b50:	c9 f6       	brne	.-78     	; 0x2b04 <main+0x524>
					if(node[node[prevbotloc-1][pos]-1][i]==nxtNode)
						node[node[prevbotloc-1][pos]-1][i]=0;
				node[prevbotloc-1][pos]=0;
    2b52:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <prevbotloc>
    2b56:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <prevbotloc+0x1>
    2b5a:	31 97       	sbiw	r30, 0x01	; 1
    2b5c:	ee 0f       	add	r30, r30
    2b5e:	ff 1f       	adc	r31, r31
    2b60:	ee 0f       	add	r30, r30
    2b62:	ff 1f       	adc	r31, r31
    2b64:	ee 0d       	add	r30, r14
    2b66:	ff 1d       	adc	r31, r15
    2b68:	ee 0f       	add	r30, r30
    2b6a:	ff 1f       	adc	r31, r31
    2b6c:	e2 54       	subi	r30, 0x42	; 66
    2b6e:	f9 4f       	sbci	r31, 0xF9	; 249
    2b70:	11 82       	std	Z+1, r1	; 0x01
    2b72:	10 82       	st	Z, r1
				break;
    2b74:	35 c0       	rjmp	.+106    	; 0x2be0 <main+0x600>
			}
			else
			{

				botloc=node[botloc-1][pos];
    2b76:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2b7a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2b7e:	31 97       	sbiw	r30, 0x01	; 1
    2b80:	ee 0f       	add	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	ee 0d       	add	r30, r14
    2b8a:	ff 1d       	adc	r31, r15
    2b8c:	ee 0f       	add	r30, r30
    2b8e:	ff 1f       	adc	r31, r31
    2b90:	e2 54       	subi	r30, 0x42	; 66
    2b92:	f9 4f       	sbci	r31, 0xF9	; 249
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <botloc+0x1>
    2b9c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <botloc>
				SendNodeReached(botloc);
    2ba0:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <botloc>
    2ba4:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2ba8:	a0 ec       	ldi	r26, 0xC0	; 192
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	8c 91       	ld	r24, X
    2bae:	85 ff       	sbrs	r24, 5
    2bb0:	fb cf       	rjmp	.-10     	; 0x2ba8 <main+0x5c8>
	UDR0 = data;
    2bb2:	f6 01       	movw	r30, r12
    2bb4:	50 82       	st	Z, r5

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    2bb6:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2bb8:	a0 ec       	ldi	r26, 0xC0	; 192
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	8c 91       	ld	r24, X
    2bbe:	85 ff       	sbrs	r24, 5
    2bc0:	fb cf       	rjmp	.-10     	; 0x2bb8 <main+0x5d8>
	UDR0 = data;
    2bc2:	f6 01       	movw	r30, r12
    2bc4:	20 83       	st	Z, r18
			costplan(nodesnear[(int)notes2[(int)tasks2[taskitr]]-1]);
			lcd_print(2,12,(int)notes2[(int)tasks2[taskitr]],2);
		}
		
		//printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    2bc6:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2bca:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2bce:	ee 0f       	add	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	e4 5a       	subi	r30, 0xA4	; 164
    2bd4:	f9 4f       	sbci	r31, 0xF9	; 249
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	89 2b       	or	r24, r25
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <main+0x600>
    2bde:	9d ce       	rjmp	.-710    	; 0x291a <main+0x33a>
				botloc=node[botloc-1][pos];
				SendNodeReached(botloc);
			}
		}
			
		if(cost[botloc-1]==0)
    2be0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2be4:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2be8:	ee 0f       	add	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	e4 5a       	subi	r30, 0xA4	; 164
    2bee:	f9 4f       	sbci	r31, 0xF9	; 249
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	89 2b       	or	r24, r25
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <main+0x61a>
    2bf8:	1e c2       	rjmp	.+1084   	; 0x3036 <main+0xa56>
		{
			if(!whichTask)
    2bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bfe:	23 2b       	or	r18, r19
    2c00:	61 f4       	brne	.+24     	; 0x2c1a <main+0x63a>
				while(noteToStrike!=tasks[taskitr]);
    2c02:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2c06:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2c0a:	eb 5b       	subi	r30, 0xBB	; 187
    2c0c:	f9 4f       	sbci	r31, 0xF9	; 249
    2c0e:	90 81       	ld	r25, Z
    2c10:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <noteToStrike>
    2c14:	98 13       	cpse	r25, r24
    2c16:	f5 cf       	rjmp	.-22     	; 0x2c02 <main+0x622>
    2c18:	0c c0       	rjmp	.+24     	; 0x2c32 <main+0x652>
			else
				while(noteToStrike!=tasks2[taskitr]);
    2c1a:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2c1e:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2c22:	ef 5b       	subi	r30, 0xBF	; 191
    2c24:	f7 4f       	sbci	r31, 0xF7	; 247
    2c26:	90 81       	ld	r25, Z
    2c28:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <noteToStrike>
    2c2c:	98 13       	cpse	r25, r24
    2c2e:	f5 cf       	rjmp	.-22     	; 0x2c1a <main+0x63a>
    2c30:	40 c0       	rjmp	.+128    	; 0x2cb2 <main+0x6d2>
			if((!whichTask) && (noteangles[(int)notes[(int)noteToStrike]-1][0]==botang || noteangles[(int)notes[(int)noteToStrike]-1][1]==botang))
    2c32:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	ef 5c       	subi	r30, 0xCF	; 207
    2c3a:	f9 4f       	sbci	r31, 0xF9	; 249
    2c3c:	e0 81       	ld	r30, Z
    2c3e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    2c42:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    2c46:	34 e0       	ldi	r19, 0x04	; 4
    2c48:	e3 9f       	mul	r30, r19
    2c4a:	f0 01       	movw	r30, r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	ee 5d       	subi	r30, 0xDE	; 222
    2c50:	fc 4f       	sbci	r31, 0xFC	; 252
    2c52:	20 81       	ld	r18, Z
    2c54:	31 81       	ldd	r19, Z+1	; 0x01
    2c56:	28 17       	cp	r18, r24
    2c58:	39 07       	cpc	r19, r25
    2c5a:	91 f0       	breq	.+36     	; 0x2c80 <main+0x6a0>
    2c5c:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	ef 5c       	subi	r30, 0xCF	; 207
    2c64:	f9 4f       	sbci	r31, 0xF9	; 249
    2c66:	e0 81       	ld	r30, Z
    2c68:	a4 e0       	ldi	r26, 0x04	; 4
    2c6a:	ea 9f       	mul	r30, r26
    2c6c:	f0 01       	movw	r30, r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	ee 5d       	subi	r30, 0xDE	; 222
    2c72:	fc 4f       	sbci	r31, 0xFC	; 252
    2c74:	22 81       	ldd	r18, Z+2	; 0x02
    2c76:	33 81       	ldd	r19, Z+3	; 0x03
    2c78:	82 17       	cp	r24, r18
    2c7a:	93 07       	cpc	r25, r19
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <main+0x6a0>
    2c7e:	58 c0       	rjmp	.+176    	; 0x2d30 <main+0x750>
			{
				if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang)
    2c80:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	ef 5c       	subi	r30, 0xCF	; 207
    2c88:	f9 4f       	sbci	r31, 0xF9	; 249
    2c8a:	e0 81       	ld	r30, Z
    2c8c:	b4 e0       	ldi	r27, 0x04	; 4
    2c8e:	eb 9f       	mul	r30, r27
    2c90:	f0 01       	movw	r30, r0
    2c92:	11 24       	eor	r1, r1
    2c94:	ee 5d       	subi	r30, 0xDE	; 222
    2c96:	fc 4f       	sbci	r31, 0xFC	; 252
    2c98:	20 81       	ld	r18, Z
    2c9a:	31 81       	ldd	r19, Z+1	; 0x01
    2c9c:	82 17       	cp	r24, r18
    2c9e:	93 07       	cpc	r25, r19
    2ca0:	21 f4       	brne	.+8      	; 0x2caa <main+0x6ca>
					servoStrike(1); // Strike Left
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	74 d8       	rcall	.-3864   	; 0x1d90 <servoStrike>
    2ca8:	99 c1       	rjmp	.+818    	; 0x2fdc <main+0x9fc>
				else
					servoStrike(0);//Strike Right
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	9a 2d       	mov	r25, r10
    2cae:	70 d8       	rcall	.-3872   	; 0x1d90 <servoStrike>
    2cb0:	95 c1       	rjmp	.+810    	; 0x2fdc <main+0x9fc>
					
				// Servo Motor Control
				// Strike the Note
			}
			else if((whichTask) && (noteangles[(int)notes2[(int)noteToStrike]-1][0]==botang || noteangles[(int)notes2[(int)noteToStrike]-1][1]==botang))
    2cb2:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	e3 5e       	subi	r30, 0xE3	; 227
    2cba:	f9 4f       	sbci	r31, 0xF9	; 249
    2cbc:	e0 81       	ld	r30, Z
    2cbe:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <botang>
    2cc2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <botang+0x1>
    2cc6:	24 e0       	ldi	r18, 0x04	; 4
    2cc8:	e2 9f       	mul	r30, r18
    2cca:	f0 01       	movw	r30, r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	ee 5d       	subi	r30, 0xDE	; 222
    2cd0:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd2:	20 81       	ld	r18, Z
    2cd4:	31 81       	ldd	r19, Z+1	; 0x01
    2cd6:	28 17       	cp	r18, r24
    2cd8:	39 07       	cpc	r19, r25
    2cda:	89 f0       	breq	.+34     	; 0x2cfe <main+0x71e>
    2cdc:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	e3 5e       	subi	r30, 0xE3	; 227
    2ce4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ce6:	e0 81       	ld	r30, Z
    2ce8:	34 e0       	ldi	r19, 0x04	; 4
    2cea:	e3 9f       	mul	r30, r19
    2cec:	f0 01       	movw	r30, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	ee 5d       	subi	r30, 0xDE	; 222
    2cf2:	fc 4f       	sbci	r31, 0xFC	; 252
    2cf4:	22 81       	ldd	r18, Z+2	; 0x02
    2cf6:	33 81       	ldd	r19, Z+3	; 0x03
    2cf8:	82 17       	cp	r24, r18
    2cfa:	93 07       	cpc	r25, r19
    2cfc:	e1 f4       	brne	.+56     	; 0x2d36 <main+0x756>
			{
				if(noteangles[(int)notes2[(int)noteToStrike]-1][0]==botang)
    2cfe:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	e3 5e       	subi	r30, 0xE3	; 227
    2d06:	f9 4f       	sbci	r31, 0xF9	; 249
    2d08:	e0 81       	ld	r30, Z
    2d0a:	a4 e0       	ldi	r26, 0x04	; 4
    2d0c:	ea 9f       	mul	r30, r26
    2d0e:	f0 01       	movw	r30, r0
    2d10:	11 24       	eor	r1, r1
    2d12:	ee 5d       	subi	r30, 0xDE	; 222
    2d14:	fc 4f       	sbci	r31, 0xFC	; 252
    2d16:	20 81       	ld	r18, Z
    2d18:	31 81       	ldd	r19, Z+1	; 0x01
    2d1a:	82 17       	cp	r24, r18
    2d1c:	93 07       	cpc	r25, r19
    2d1e:	21 f4       	brne	.+8      	; 0x2d28 <main+0x748>
				servoStrike(1); // Strike Left
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	35 d8       	rcall	.-3990   	; 0x1d90 <servoStrike>
    2d26:	5a c1       	rjmp	.+692    	; 0x2fdc <main+0x9fc>
				else
				servoStrike(0);//Strike Right
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	9a 2d       	mov	r25, r10
    2d2c:	31 d8       	rcall	.-3998   	; 0x1d90 <servoStrike>
    2d2e:	56 c1       	rjmp	.+684    	; 0x2fdc <main+0x9fc>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	9a 2d       	mov	r25, r10
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <main+0x75a>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	9a 2d       	mov	r25, r10
			else
			{
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
				{
					if((!whichTask) && (nodesnear[(int)notes[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes[(int)noteToStrike]-1][j]))
    2d3a:	e6 e0       	ldi	r30, 0x06	; 6
    2d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d40:	23 2b       	or	r18, r19
    2d42:	c9 f5       	brne	.+114    	; 0x2db6 <main+0x7d6>
    2d44:	a0 91 1a 06 	lds	r26, 0x061A	; 0x80061a <noteToStrike>
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	af 5c       	subi	r26, 0xCF	; 207
    2d4c:	b9 4f       	sbci	r27, 0xF9	; 249
    2d4e:	2c 91       	ld	r18, X
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	21 50       	subi	r18, 0x01	; 1
    2d54:	31 09       	sbc	r19, r1
    2d56:	d9 01       	movw	r26, r18
    2d58:	aa 0f       	add	r26, r26
    2d5a:	bb 1f       	adc	r27, r27
    2d5c:	a2 0f       	add	r26, r18
    2d5e:	b3 1f       	adc	r27, r19
    2d60:	aa 0f       	add	r26, r26
    2d62:	bb 1f       	adc	r27, r27
    2d64:	a8 0f       	add	r26, r24
    2d66:	b9 1f       	adc	r27, r25
    2d68:	aa 0f       	add	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	a6 55       	subi	r26, 0x56	; 86
    2d6e:	bc 4f       	sbci	r27, 0xFC	; 252
    2d70:	2d 91       	ld	r18, X+
    2d72:	3c 91       	ld	r19, X
    2d74:	23 2b       	or	r18, r19
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <main+0x79a>
    2d78:	55 c0       	rjmp	.+170    	; 0x2e24 <main+0x844>
    2d7a:	a0 91 1a 06 	lds	r26, 0x061A	; 0x80061a <noteToStrike>
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	af 5c       	subi	r26, 0xCF	; 207
    2d82:	b9 4f       	sbci	r27, 0xF9	; 249
    2d84:	4c 91       	ld	r20, X
    2d86:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <botloc>
    2d8a:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <botloc+0x1>
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	41 50       	subi	r20, 0x01	; 1
    2d92:	51 09       	sbc	r21, r1
    2d94:	e4 9f       	mul	r30, r20
    2d96:	d0 01       	movw	r26, r0
    2d98:	e5 9f       	mul	r30, r21
    2d9a:	b0 0d       	add	r27, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	a8 0f       	add	r26, r24
    2da0:	b9 1f       	adc	r27, r25
    2da2:	aa 0f       	add	r26, r26
    2da4:	bb 1f       	adc	r27, r27
    2da6:	a6 55       	subi	r26, 0x56	; 86
    2da8:	bc 4f       	sbci	r27, 0xFC	; 252
    2daa:	4d 91       	ld	r20, X+
    2dac:	5c 91       	ld	r21, X
    2dae:	42 17       	cp	r20, r18
    2db0:	53 07       	cpc	r21, r19
    2db2:	c1 f5       	brne	.+112    	; 0x2e24 <main+0x844>
    2db4:	3e c0       	rjmp	.+124    	; 0x2e32 <main+0x852>
					{
						tpos=j;
						break;
					}
					else if((whichTask) && (nodesnear[(int)notes2[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes2[(int)noteToStrike]-1][j]))
    2db6:	a0 91 1a 06 	lds	r26, 0x061A	; 0x80061a <noteToStrike>
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	a3 5e       	subi	r26, 0xE3	; 227
    2dbe:	b9 4f       	sbci	r27, 0xF9	; 249
    2dc0:	2c 91       	ld	r18, X
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	21 50       	subi	r18, 0x01	; 1
    2dc6:	31 09       	sbc	r19, r1
    2dc8:	d9 01       	movw	r26, r18
    2dca:	aa 0f       	add	r26, r26
    2dcc:	bb 1f       	adc	r27, r27
    2dce:	a2 0f       	add	r26, r18
    2dd0:	b3 1f       	adc	r27, r19
    2dd2:	aa 0f       	add	r26, r26
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	a8 0f       	add	r26, r24
    2dd8:	b9 1f       	adc	r27, r25
    2dda:	aa 0f       	add	r26, r26
    2ddc:	bb 1f       	adc	r27, r27
    2dde:	a6 55       	subi	r26, 0x56	; 86
    2de0:	bc 4f       	sbci	r27, 0xFC	; 252
    2de2:	2d 91       	ld	r18, X+
    2de4:	3c 91       	ld	r19, X
    2de6:	23 2b       	or	r18, r19
    2de8:	e9 f0       	breq	.+58     	; 0x2e24 <main+0x844>
    2dea:	a0 91 1a 06 	lds	r26, 0x061A	; 0x80061a <noteToStrike>
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	a3 5e       	subi	r26, 0xE3	; 227
    2df2:	b9 4f       	sbci	r27, 0xF9	; 249
    2df4:	4c 91       	ld	r20, X
    2df6:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <botloc>
    2dfa:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <botloc+0x1>
    2dfe:	50 e0       	ldi	r21, 0x00	; 0
    2e00:	41 50       	subi	r20, 0x01	; 1
    2e02:	51 09       	sbc	r21, r1
    2e04:	e4 9f       	mul	r30, r20
    2e06:	d0 01       	movw	r26, r0
    2e08:	e5 9f       	mul	r30, r21
    2e0a:	b0 0d       	add	r27, r0
    2e0c:	11 24       	eor	r1, r1
    2e0e:	a8 0f       	add	r26, r24
    2e10:	b9 1f       	adc	r27, r25
    2e12:	aa 0f       	add	r26, r26
    2e14:	bb 1f       	adc	r27, r27
    2e16:	a6 55       	subi	r26, 0x56	; 86
    2e18:	bc 4f       	sbci	r27, 0xFC	; 252
    2e1a:	4d 91       	ld	r20, X+
    2e1c:	5c 91       	ld	r21, X
    2e1e:	42 17       	cp	r20, r18
    2e20:	53 07       	cpc	r21, r19
    2e22:	39 f0       	breq	.+14     	; 0x2e32 <main+0x852>
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
    2e24:	01 96       	adiw	r24, 0x01	; 1
    2e26:	84 30       	cpi	r24, 0x04	; 4
    2e28:	91 05       	cpc	r25, r1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <main+0x84e>
    2e2c:	87 cf       	rjmp	.-242    	; 0x2d3c <main+0x75c>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	9a 2d       	mov	r25, r10
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    2e32:	00 e0       	ldi	r16, 0x00	; 0
    2e34:	1a 2d       	mov	r17, r10
				{
					if((!whichTask) && (node[botloc-1][j]==movToDestNote[(int)notes[(int)noteToStrike]-1][tpos]))
    2e36:	ab 81       	ldd	r26, Y+3	; 0x03
    2e38:	bc 81       	ldd	r27, Y+4	; 0x04
    2e3a:	ab 2b       	or	r26, r27
    2e3c:	d9 f5       	brne	.+118    	; 0x2eb4 <main+0x8d4>
    2e3e:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <botloc>
    2e42:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <botloc+0x1>
    2e46:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	ef 5c       	subi	r30, 0xCF	; 207
    2e4e:	f9 4f       	sbci	r31, 0xF9	; 249
    2e50:	e0 81       	ld	r30, Z
    2e52:	11 97       	sbiw	r26, 0x01	; 1
    2e54:	aa 0f       	add	r26, r26
    2e56:	bb 1f       	adc	r27, r27
    2e58:	aa 0f       	add	r26, r26
    2e5a:	bb 1f       	adc	r27, r27
    2e5c:	a0 0f       	add	r26, r16
    2e5e:	b1 1f       	adc	r27, r17
    2e60:	aa 0f       	add	r26, r26
    2e62:	bb 1f       	adc	r27, r27
    2e64:	a2 54       	subi	r26, 0x42	; 66
    2e66:	b9 4f       	sbci	r27, 0xF9	; 249
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	31 97       	sbiw	r30, 0x01	; 1
    2e6c:	ee 0f       	add	r30, r30
    2e6e:	ff 1f       	adc	r31, r31
    2e70:	ee 0f       	add	r30, r30
    2e72:	ff 1f       	adc	r31, r31
    2e74:	e8 0f       	add	r30, r24
    2e76:	f9 1f       	adc	r31, r25
    2e78:	ee 0f       	add	r30, r30
    2e7a:	ff 1f       	adc	r31, r31
    2e7c:	e2 5e       	subi	r30, 0xE2	; 226
    2e7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e80:	2d 91       	ld	r18, X+
    2e82:	3c 91       	ld	r19, X
    2e84:	40 81       	ld	r20, Z
    2e86:	51 81       	ldd	r21, Z+1	; 0x01
    2e88:	24 17       	cp	r18, r20
    2e8a:	35 07       	cpc	r19, r21
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <main+0x8b0>
    2e8e:	4c c0       	rjmp	.+152    	; 0x2f28 <main+0x948>
					{
						p=j;
						nxtNode=node[botloc-1][j];
    2e90:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2e94:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2e98:	31 97       	sbiw	r30, 0x01	; 1
    2e9a:	ee 0f       	add	r30, r30
    2e9c:	ff 1f       	adc	r31, r31
    2e9e:	ee 0f       	add	r30, r30
    2ea0:	ff 1f       	adc	r31, r31
    2ea2:	e0 0f       	add	r30, r16
    2ea4:	f1 1f       	adc	r31, r17
    2ea6:	ee 0f       	add	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	e2 54       	subi	r30, 0x42	; 66
    2eac:	f9 4f       	sbci	r31, 0xF9	; 249
    2eae:	60 80       	ld	r6, Z
    2eb0:	71 80       	ldd	r7, Z+1	; 0x01
						break;
    2eb2:	42 c0       	rjmp	.+132    	; 0x2f38 <main+0x958>
					}
					else if((whichTask) && (node[botloc-1][j]==movToDestNote[(int)notes2[(int)noteToStrike]-1][tpos]))
    2eb4:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <botloc>
    2eb8:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <botloc+0x1>
    2ebc:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	e3 5e       	subi	r30, 0xE3	; 227
    2ec4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ec6:	e0 81       	ld	r30, Z
    2ec8:	11 97       	sbiw	r26, 0x01	; 1
    2eca:	aa 0f       	add	r26, r26
    2ecc:	bb 1f       	adc	r27, r27
    2ece:	aa 0f       	add	r26, r26
    2ed0:	bb 1f       	adc	r27, r27
    2ed2:	a0 0f       	add	r26, r16
    2ed4:	b1 1f       	adc	r27, r17
    2ed6:	aa 0f       	add	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	a2 54       	subi	r26, 0x42	; 66
    2edc:	b9 4f       	sbci	r27, 0xF9	; 249
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	31 97       	sbiw	r30, 0x01	; 1
    2ee2:	ee 0f       	add	r30, r30
    2ee4:	ff 1f       	adc	r31, r31
    2ee6:	ee 0f       	add	r30, r30
    2ee8:	ff 1f       	adc	r31, r31
    2eea:	e8 0f       	add	r30, r24
    2eec:	f9 1f       	adc	r31, r25
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	e2 5e       	subi	r30, 0xE2	; 226
    2ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ef6:	2d 91       	ld	r18, X+
    2ef8:	3c 91       	ld	r19, X
    2efa:	40 81       	ld	r20, Z
    2efc:	51 81       	ldd	r21, Z+1	; 0x01
    2efe:	24 17       	cp	r18, r20
    2f00:	35 07       	cpc	r19, r21
    2f02:	91 f4       	brne	.+36     	; 0x2f28 <main+0x948>
					{
						p=j;
						nxtNode=node[botloc-1][j];
    2f04:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2f08:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2f0c:	31 97       	sbiw	r30, 0x01	; 1
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	ee 0f       	add	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	e0 0f       	add	r30, r16
    2f18:	f1 1f       	adc	r31, r17
    2f1a:	ee 0f       	add	r30, r30
    2f1c:	ff 1f       	adc	r31, r31
    2f1e:	e2 54       	subi	r30, 0x42	; 66
    2f20:	f9 4f       	sbci	r31, 0xF9	; 249
    2f22:	60 80       	ld	r6, Z
    2f24:	71 80       	ldd	r7, Z+1	; 0x01
						break;
    2f26:	08 c0       	rjmp	.+16     	; 0x2f38 <main+0x958>
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    2f28:	0f 5f       	subi	r16, 0xFF	; 255
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	04 30       	cpi	r16, 0x04	; 4
    2f2e:	11 05       	cpc	r17, r1
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <main+0x954>
    2f32:	81 cf       	rjmp	.-254    	; 0x2e36 <main+0x856>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
    2f34:	00 e0       	ldi	r16, 0x00	; 0
    2f36:	1a 2d       	mov	r17, r10
						p=j;
						nxtNode=node[botloc-1][j];
						break;
					}
				}
				strike=1;
    2f38:	bd 81       	ldd	r27, Y+5	; 0x05
    2f3a:	b0 93 b8 05 	sts	0x05B8, r27	; 0x8005b8 <strike>
    2f3e:	ee 81       	ldd	r30, Y+6	; 0x06
    2f40:	e0 93 b9 05 	sts	0x05B9, r30	; 0x8005b9 <strike+0x1>
				while((int)otherBotMovingTo==nxtNode);
    2f44:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <otherBotMovingTo>
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	86 15       	cp	r24, r6
    2f4c:	97 05       	cpc	r25, r7
    2f4e:	d1 f3       	breq	.-12     	; 0x2f44 <main+0x964>
				while((int)otherBotLocation==nxtNode);
    2f50:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <otherBotLocation>
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	86 15       	cp	r24, r6
    2f58:	97 05       	cpc	r25, r7
    2f5a:	d1 f3       	breq	.-12     	; 0x2f50 <main+0x970>
				SendNextNode(nxtNode);
    2f5c:	86 2d       	mov	r24, r6

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2f5e:	a0 ec       	ldi	r26, 0xC0	; 192
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	9c 91       	ld	r25, X
    2f64:	95 ff       	sbrs	r25, 5
    2f66:	fb cf       	rjmp	.-10     	; 0x2f5e <main+0x97e>
	UDR0 = data;
    2f68:	95 e0       	ldi	r25, 0x05	; 5
    2f6a:	f6 01       	movw	r30, r12
    2f6c:	90 83       	st	Z, r25

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    2f6e:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2f70:	a0 ec       	ldi	r26, 0xC0	; 192
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	9c 91       	ld	r25, X
    2f76:	95 ff       	sbrs	r25, 5
    2f78:	fb cf       	rjmp	.-10     	; 0x2f70 <main+0x990>
	UDR0 = data;
    2f7a:	f6 01       	movw	r30, r12
    2f7c:	80 83       	st	Z, r24
				}
				strike=1;
				while((int)otherBotMovingTo==nxtNode);
				while((int)otherBotLocation==nxtNode);
				SendNextNode(nxtNode);
				taskDone=move(p);
    2f7e:	c8 01       	movw	r24, r16
    2f80:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <move>
				if(taskDone==1)
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	51 f5       	brne	.+84     	; 0x2fdc <main+0x9fc>
				{
					botloc=node[botloc-1][p];
    2f88:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <botloc>
    2f8c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <botloc+0x1>
    2f90:	31 97       	sbiw	r30, 0x01	; 1
    2f92:	ee 0f       	add	r30, r30
    2f94:	ff 1f       	adc	r31, r31
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	e0 0f       	add	r30, r16
    2f9c:	f1 1f       	adc	r31, r17
    2f9e:	ee 0f       	add	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	e2 54       	subi	r30, 0x42	; 66
    2fa4:	f9 4f       	sbci	r31, 0xF9	; 249
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <botloc+0x1>
    2fae:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <botloc>
					SendNodeReached(botloc);
    2fb2:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <botloc>
    2fb6:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <botloc+0x1>
    2fba:	9c 01       	movw	r18, r24

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2fbc:	a0 ec       	ldi	r26, 0xC0	; 192
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	9c 91       	ld	r25, X
    2fc2:	95 ff       	sbrs	r25, 5
    2fc4:	fb cf       	rjmp	.-10     	; 0x2fbc <main+0x9dc>
    2fc6:	c9 01       	movw	r24, r18
	UDR0 = data;
    2fc8:	f6 01       	movw	r30, r12
    2fca:	50 82       	st	Z, r5

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    2fcc:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2fce:	a0 ec       	ldi	r26, 0xC0	; 192
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	9c 91       	ld	r25, X
    2fd4:	95 ff       	sbrs	r25, 5
    2fd6:	fb cf       	rjmp	.-10     	; 0x2fce <main+0x9ee>
	UDR0 = data;
    2fd8:	f6 01       	movw	r30, r12
    2fda:	80 83       	st	Z, r24
					botloc=node[botloc-1][p];
					SendNodeReached(botloc);
				}
			}
			//printf("Reached Destination node=%d \n",(int)notes[(int)tasks[taskitr]]);
			buzzer_on();
    2fdc:	0e 94 2e 0b 	call	0x165c	; 0x165c <buzzer_on>
    2fe0:	ff ef       	ldi	r31, 0xFF	; 255
    2fe2:	2f e7       	ldi	r18, 0x7F	; 127
    2fe4:	36 e1       	ldi	r19, 0x16	; 22
    2fe6:	f1 50       	subi	r31, 0x01	; 1
    2fe8:	20 40       	sbci	r18, 0x00	; 0
    2fea:	30 40       	sbci	r19, 0x00	; 0
    2fec:	e1 f7       	brne	.-8      	; 0x2fe6 <main+0xa06>
    2fee:	00 c0       	rjmp	.+0      	; 0x2ff0 <main+0xa10>
    2ff0:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    2ff2:	0e 94 32 0b 	call	0x1664	; 0x1664 <buzzer_off>
			taskitr++;
    2ff6:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <taskitr>
    2ffa:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <taskitr+0x1>
    2ffe:	01 96       	adiw	r24, 0x01	; 1
    3000:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <taskitr+0x1>
    3004:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <taskitr>
			SendNoteStruck(noteToStrike);
    3008:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <noteToStrike>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    300c:	a0 ec       	ldi	r26, 0xC0	; 192
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	9c 91       	ld	r25, X
    3012:	95 ff       	sbrs	r25, 5
    3014:	fb cf       	rjmp	.-10     	; 0x300c <main+0xa2c>
	UDR0 = data;
    3016:	96 e0       	ldi	r25, 0x06	; 6
    3018:	f6 01       	movw	r30, r12
    301a:	90 83       	st	Z, r25

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    301c:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    301e:	a0 ec       	ldi	r26, 0xC0	; 192
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	9c 91       	ld	r25, X
    3024:	95 ff       	sbrs	r25, 5
    3026:	fb cf       	rjmp	.-10     	; 0x301e <main+0xa3e>
	UDR0 = data;
    3028:	f6 01       	movw	r30, r12
    302a:	80 83       	st	Z, r24
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    302c:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <noteToStrike>
    3030:	8f 5f       	subi	r24, 0xFF	; 255
    3032:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <noteToStrike>
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while((notes[(int)noteToStrike]!=0 || notes2[(int)noteToStrike]!=0 ) && taskitr!=taskCount)
    3036:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	ef 5c       	subi	r30, 0xCF	; 207
    303e:	f9 4f       	sbci	r31, 0xF9	; 249
    3040:	80 81       	ld	r24, Z
    3042:	81 11       	cpse	r24, r1
    3044:	08 c0       	rjmp	.+16     	; 0x3056 <main+0xa76>
    3046:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <noteToStrike>
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	e3 5e       	subi	r30, 0xE3	; 227
    304e:	f9 4f       	sbci	r31, 0xF9	; 249
    3050:	80 81       	ld	r24, Z
    3052:	88 23       	and	r24, r24
    3054:	59 f0       	breq	.+22     	; 0x306c <main+0xa8c>
    3056:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <taskCount>
    305a:	20 91 0e 06 	lds	r18, 0x060E	; 0x80060e <taskitr>
    305e:	30 91 0f 06 	lds	r19, 0x060F	; 0x80060f <taskitr+0x1>
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	82 17       	cp	r24, r18
    3066:	93 07       	cpc	r25, r19
    3068:	09 f0       	breq	.+2      	; 0x306c <main+0xa8c>
    306a:	e2 cb       	rjmp	.-2108   	; 0x2830 <main+0x250>
			buzzer_off();
			taskitr++;
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
    306c:	8c e9       	ldi	r24, 0x9C	; 156
    306e:	95 e0       	ldi	r25, 0x05	; 5
    3070:	06 d2       	rcall	.+1036   	; 0x347e <puts>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    3072:	e0 ec       	ldi	r30, 0xC0	; 192
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	85 ff       	sbrs	r24, 5
    307a:	fd cf       	rjmp	.-6      	; 0x3076 <main+0xa96>
	UDR0 = data;
    307c:	8a e0       	ldi	r24, 0x0A	; 10
    307e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    3082:	e0 ec       	ldi	r30, 0xC0	; 192
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	85 ff       	sbrs	r24, 5
    308a:	fd cf       	rjmp	.-6      	; 0x3086 <main+0xaa6>
	UDR0 = data;
    308c:	80 e8       	ldi	r24, 0x80	; 128
    308e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
	BotEnded();
	while(botEnd!=1);
    3092:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <botEnd>
    3096:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <botEnd+0x1>
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	d1 f7       	brne	.-12     	; 0x3092 <main+0xab2>
	buzzer_on();
    309e:	0e 94 2e 0b 	call	0x165c	; 0x165c <buzzer_on>
    30a2:	ff ef       	ldi	r31, 0xFF	; 255
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	30 ee       	ldi	r19, 0xE0	; 224
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	f1 50       	subi	r31, 0x01	; 1
    30ac:	20 40       	sbci	r18, 0x00	; 0
    30ae:	30 40       	sbci	r19, 0x00	; 0
    30b0:	80 40       	sbci	r24, 0x00	; 0
    30b2:	d9 f7       	brne	.-10     	; 0x30aa <main+0xaca>
    30b4:	00 c0       	rjmp	.+0      	; 0x30b6 <main+0xad6>
    30b6:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    30b8:	0e 94 32 0b 	call	0x1664	; 0x1664 <buzzer_off>
	return 0;
}
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	26 96       	adiw	r28, 0x06	; 6
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	1f 91       	pop	r17
    30d2:	0f 91       	pop	r16
    30d4:	ff 90       	pop	r15
    30d6:	ef 90       	pop	r14
    30d8:	df 90       	pop	r13
    30da:	cf 90       	pop	r12
    30dc:	bf 90       	pop	r11
    30de:	af 90       	pop	r10
    30e0:	9f 90       	pop	r9
    30e2:	8f 90       	pop	r8
    30e4:	7f 90       	pop	r7
    30e6:	6f 90       	pop	r6
    30e8:	5f 90       	pop	r5
    30ea:	4f 90       	pop	r4
    30ec:	3f 90       	pop	r3
    30ee:	2f 90       	pop	r2
    30f0:	08 95       	ret

000030f2 <__subsf3>:
    30f2:	50 58       	subi	r21, 0x80	; 128

000030f4 <__addsf3>:
    30f4:	bb 27       	eor	r27, r27
    30f6:	aa 27       	eor	r26, r26
    30f8:	0e d0       	rcall	.+28     	; 0x3116 <__addsf3x>
    30fa:	48 c1       	rjmp	.+656    	; 0x338c <__fp_round>
    30fc:	39 d1       	rcall	.+626    	; 0x3370 <__fp_pscA>
    30fe:	30 f0       	brcs	.+12     	; 0x310c <__addsf3+0x18>
    3100:	3e d1       	rcall	.+636    	; 0x337e <__fp_pscB>
    3102:	20 f0       	brcs	.+8      	; 0x310c <__addsf3+0x18>
    3104:	31 f4       	brne	.+12     	; 0x3112 <__addsf3+0x1e>
    3106:	9f 3f       	cpi	r25, 0xFF	; 255
    3108:	11 f4       	brne	.+4      	; 0x310e <__addsf3+0x1a>
    310a:	1e f4       	brtc	.+6      	; 0x3112 <__addsf3+0x1e>
    310c:	2e c1       	rjmp	.+604    	; 0x336a <__fp_nan>
    310e:	0e f4       	brtc	.+2      	; 0x3112 <__addsf3+0x1e>
    3110:	e0 95       	com	r30
    3112:	e7 fb       	bst	r30, 7
    3114:	24 c1       	rjmp	.+584    	; 0x335e <__fp_inf>

00003116 <__addsf3x>:
    3116:	e9 2f       	mov	r30, r25
    3118:	4a d1       	rcall	.+660    	; 0x33ae <__fp_split3>
    311a:	80 f3       	brcs	.-32     	; 0x30fc <__addsf3+0x8>
    311c:	ba 17       	cp	r27, r26
    311e:	62 07       	cpc	r22, r18
    3120:	73 07       	cpc	r23, r19
    3122:	84 07       	cpc	r24, r20
    3124:	95 07       	cpc	r25, r21
    3126:	18 f0       	brcs	.+6      	; 0x312e <__addsf3x+0x18>
    3128:	71 f4       	brne	.+28     	; 0x3146 <__addsf3x+0x30>
    312a:	9e f5       	brtc	.+102    	; 0x3192 <__addsf3x+0x7c>
    312c:	62 c1       	rjmp	.+708    	; 0x33f2 <__fp_zero>
    312e:	0e f4       	brtc	.+2      	; 0x3132 <__addsf3x+0x1c>
    3130:	e0 95       	com	r30
    3132:	0b 2e       	mov	r0, r27
    3134:	ba 2f       	mov	r27, r26
    3136:	a0 2d       	mov	r26, r0
    3138:	0b 01       	movw	r0, r22
    313a:	b9 01       	movw	r22, r18
    313c:	90 01       	movw	r18, r0
    313e:	0c 01       	movw	r0, r24
    3140:	ca 01       	movw	r24, r20
    3142:	a0 01       	movw	r20, r0
    3144:	11 24       	eor	r1, r1
    3146:	ff 27       	eor	r31, r31
    3148:	59 1b       	sub	r21, r25
    314a:	99 f0       	breq	.+38     	; 0x3172 <__addsf3x+0x5c>
    314c:	59 3f       	cpi	r21, 0xF9	; 249
    314e:	50 f4       	brcc	.+20     	; 0x3164 <__addsf3x+0x4e>
    3150:	50 3e       	cpi	r21, 0xE0	; 224
    3152:	68 f1       	brcs	.+90     	; 0x31ae <__addsf3x+0x98>
    3154:	1a 16       	cp	r1, r26
    3156:	f0 40       	sbci	r31, 0x00	; 0
    3158:	a2 2f       	mov	r26, r18
    315a:	23 2f       	mov	r18, r19
    315c:	34 2f       	mov	r19, r20
    315e:	44 27       	eor	r20, r20
    3160:	58 5f       	subi	r21, 0xF8	; 248
    3162:	f3 cf       	rjmp	.-26     	; 0x314a <__addsf3x+0x34>
    3164:	46 95       	lsr	r20
    3166:	37 95       	ror	r19
    3168:	27 95       	ror	r18
    316a:	a7 95       	ror	r26
    316c:	f0 40       	sbci	r31, 0x00	; 0
    316e:	53 95       	inc	r21
    3170:	c9 f7       	brne	.-14     	; 0x3164 <__addsf3x+0x4e>
    3172:	7e f4       	brtc	.+30     	; 0x3192 <__addsf3x+0x7c>
    3174:	1f 16       	cp	r1, r31
    3176:	ba 0b       	sbc	r27, r26
    3178:	62 0b       	sbc	r22, r18
    317a:	73 0b       	sbc	r23, r19
    317c:	84 0b       	sbc	r24, r20
    317e:	ba f0       	brmi	.+46     	; 0x31ae <__addsf3x+0x98>
    3180:	91 50       	subi	r25, 0x01	; 1
    3182:	a1 f0       	breq	.+40     	; 0x31ac <__addsf3x+0x96>
    3184:	ff 0f       	add	r31, r31
    3186:	bb 1f       	adc	r27, r27
    3188:	66 1f       	adc	r22, r22
    318a:	77 1f       	adc	r23, r23
    318c:	88 1f       	adc	r24, r24
    318e:	c2 f7       	brpl	.-16     	; 0x3180 <__addsf3x+0x6a>
    3190:	0e c0       	rjmp	.+28     	; 0x31ae <__addsf3x+0x98>
    3192:	ba 0f       	add	r27, r26
    3194:	62 1f       	adc	r22, r18
    3196:	73 1f       	adc	r23, r19
    3198:	84 1f       	adc	r24, r20
    319a:	48 f4       	brcc	.+18     	; 0x31ae <__addsf3x+0x98>
    319c:	87 95       	ror	r24
    319e:	77 95       	ror	r23
    31a0:	67 95       	ror	r22
    31a2:	b7 95       	ror	r27
    31a4:	f7 95       	ror	r31
    31a6:	9e 3f       	cpi	r25, 0xFE	; 254
    31a8:	08 f0       	brcs	.+2      	; 0x31ac <__addsf3x+0x96>
    31aa:	b3 cf       	rjmp	.-154    	; 0x3112 <__addsf3+0x1e>
    31ac:	93 95       	inc	r25
    31ae:	88 0f       	add	r24, r24
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <__addsf3x+0x9e>
    31b2:	99 27       	eor	r25, r25
    31b4:	ee 0f       	add	r30, r30
    31b6:	97 95       	ror	r25
    31b8:	87 95       	ror	r24
    31ba:	08 95       	ret

000031bc <__divsf3>:
    31bc:	0c d0       	rcall	.+24     	; 0x31d6 <__divsf3x>
    31be:	e6 c0       	rjmp	.+460    	; 0x338c <__fp_round>
    31c0:	de d0       	rcall	.+444    	; 0x337e <__fp_pscB>
    31c2:	40 f0       	brcs	.+16     	; 0x31d4 <__divsf3+0x18>
    31c4:	d5 d0       	rcall	.+426    	; 0x3370 <__fp_pscA>
    31c6:	30 f0       	brcs	.+12     	; 0x31d4 <__divsf3+0x18>
    31c8:	21 f4       	brne	.+8      	; 0x31d2 <__divsf3+0x16>
    31ca:	5f 3f       	cpi	r21, 0xFF	; 255
    31cc:	19 f0       	breq	.+6      	; 0x31d4 <__divsf3+0x18>
    31ce:	c7 c0       	rjmp	.+398    	; 0x335e <__fp_inf>
    31d0:	51 11       	cpse	r21, r1
    31d2:	10 c1       	rjmp	.+544    	; 0x33f4 <__fp_szero>
    31d4:	ca c0       	rjmp	.+404    	; 0x336a <__fp_nan>

000031d6 <__divsf3x>:
    31d6:	eb d0       	rcall	.+470    	; 0x33ae <__fp_split3>
    31d8:	98 f3       	brcs	.-26     	; 0x31c0 <__divsf3+0x4>

000031da <__divsf3_pse>:
    31da:	99 23       	and	r25, r25
    31dc:	c9 f3       	breq	.-14     	; 0x31d0 <__divsf3+0x14>
    31de:	55 23       	and	r21, r21
    31e0:	b1 f3       	breq	.-20     	; 0x31ce <__divsf3+0x12>
    31e2:	95 1b       	sub	r25, r21
    31e4:	55 0b       	sbc	r21, r21
    31e6:	bb 27       	eor	r27, r27
    31e8:	aa 27       	eor	r26, r26
    31ea:	62 17       	cp	r22, r18
    31ec:	73 07       	cpc	r23, r19
    31ee:	84 07       	cpc	r24, r20
    31f0:	38 f0       	brcs	.+14     	; 0x3200 <__divsf3_pse+0x26>
    31f2:	9f 5f       	subi	r25, 0xFF	; 255
    31f4:	5f 4f       	sbci	r21, 0xFF	; 255
    31f6:	22 0f       	add	r18, r18
    31f8:	33 1f       	adc	r19, r19
    31fa:	44 1f       	adc	r20, r20
    31fc:	aa 1f       	adc	r26, r26
    31fe:	a9 f3       	breq	.-22     	; 0x31ea <__divsf3_pse+0x10>
    3200:	33 d0       	rcall	.+102    	; 0x3268 <__divsf3_pse+0x8e>
    3202:	0e 2e       	mov	r0, r30
    3204:	3a f0       	brmi	.+14     	; 0x3214 <__divsf3_pse+0x3a>
    3206:	e0 e8       	ldi	r30, 0x80	; 128
    3208:	30 d0       	rcall	.+96     	; 0x326a <__divsf3_pse+0x90>
    320a:	91 50       	subi	r25, 0x01	; 1
    320c:	50 40       	sbci	r21, 0x00	; 0
    320e:	e6 95       	lsr	r30
    3210:	00 1c       	adc	r0, r0
    3212:	ca f7       	brpl	.-14     	; 0x3206 <__divsf3_pse+0x2c>
    3214:	29 d0       	rcall	.+82     	; 0x3268 <__divsf3_pse+0x8e>
    3216:	fe 2f       	mov	r31, r30
    3218:	27 d0       	rcall	.+78     	; 0x3268 <__divsf3_pse+0x8e>
    321a:	66 0f       	add	r22, r22
    321c:	77 1f       	adc	r23, r23
    321e:	88 1f       	adc	r24, r24
    3220:	bb 1f       	adc	r27, r27
    3222:	26 17       	cp	r18, r22
    3224:	37 07       	cpc	r19, r23
    3226:	48 07       	cpc	r20, r24
    3228:	ab 07       	cpc	r26, r27
    322a:	b0 e8       	ldi	r27, 0x80	; 128
    322c:	09 f0       	breq	.+2      	; 0x3230 <__divsf3_pse+0x56>
    322e:	bb 0b       	sbc	r27, r27
    3230:	80 2d       	mov	r24, r0
    3232:	bf 01       	movw	r22, r30
    3234:	ff 27       	eor	r31, r31
    3236:	93 58       	subi	r25, 0x83	; 131
    3238:	5f 4f       	sbci	r21, 0xFF	; 255
    323a:	2a f0       	brmi	.+10     	; 0x3246 <__divsf3_pse+0x6c>
    323c:	9e 3f       	cpi	r25, 0xFE	; 254
    323e:	51 05       	cpc	r21, r1
    3240:	68 f0       	brcs	.+26     	; 0x325c <__divsf3_pse+0x82>
    3242:	8d c0       	rjmp	.+282    	; 0x335e <__fp_inf>
    3244:	d7 c0       	rjmp	.+430    	; 0x33f4 <__fp_szero>
    3246:	5f 3f       	cpi	r21, 0xFF	; 255
    3248:	ec f3       	brlt	.-6      	; 0x3244 <__divsf3_pse+0x6a>
    324a:	98 3e       	cpi	r25, 0xE8	; 232
    324c:	dc f3       	brlt	.-10     	; 0x3244 <__divsf3_pse+0x6a>
    324e:	86 95       	lsr	r24
    3250:	77 95       	ror	r23
    3252:	67 95       	ror	r22
    3254:	b7 95       	ror	r27
    3256:	f7 95       	ror	r31
    3258:	9f 5f       	subi	r25, 0xFF	; 255
    325a:	c9 f7       	brne	.-14     	; 0x324e <__divsf3_pse+0x74>
    325c:	88 0f       	add	r24, r24
    325e:	91 1d       	adc	r25, r1
    3260:	96 95       	lsr	r25
    3262:	87 95       	ror	r24
    3264:	97 f9       	bld	r25, 7
    3266:	08 95       	ret
    3268:	e1 e0       	ldi	r30, 0x01	; 1
    326a:	66 0f       	add	r22, r22
    326c:	77 1f       	adc	r23, r23
    326e:	88 1f       	adc	r24, r24
    3270:	bb 1f       	adc	r27, r27
    3272:	62 17       	cp	r22, r18
    3274:	73 07       	cpc	r23, r19
    3276:	84 07       	cpc	r24, r20
    3278:	ba 07       	cpc	r27, r26
    327a:	20 f0       	brcs	.+8      	; 0x3284 <__divsf3_pse+0xaa>
    327c:	62 1b       	sub	r22, r18
    327e:	73 0b       	sbc	r23, r19
    3280:	84 0b       	sbc	r24, r20
    3282:	ba 0b       	sbc	r27, r26
    3284:	ee 1f       	adc	r30, r30
    3286:	88 f7       	brcc	.-30     	; 0x326a <__divsf3_pse+0x90>
    3288:	e0 95       	com	r30
    328a:	08 95       	ret

0000328c <__fixunssfsi>:
    328c:	98 d0       	rcall	.+304    	; 0x33be <__fp_splitA>
    328e:	88 f0       	brcs	.+34     	; 0x32b2 <__fixunssfsi+0x26>
    3290:	9f 57       	subi	r25, 0x7F	; 127
    3292:	90 f0       	brcs	.+36     	; 0x32b8 <__fixunssfsi+0x2c>
    3294:	b9 2f       	mov	r27, r25
    3296:	99 27       	eor	r25, r25
    3298:	b7 51       	subi	r27, 0x17	; 23
    329a:	a0 f0       	brcs	.+40     	; 0x32c4 <__fixunssfsi+0x38>
    329c:	d1 f0       	breq	.+52     	; 0x32d2 <__fixunssfsi+0x46>
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	88 1f       	adc	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	1a f0       	brmi	.+6      	; 0x32ae <__fixunssfsi+0x22>
    32a8:	ba 95       	dec	r27
    32aa:	c9 f7       	brne	.-14     	; 0x329e <__fixunssfsi+0x12>
    32ac:	12 c0       	rjmp	.+36     	; 0x32d2 <__fixunssfsi+0x46>
    32ae:	b1 30       	cpi	r27, 0x01	; 1
    32b0:	81 f0       	breq	.+32     	; 0x32d2 <__fixunssfsi+0x46>
    32b2:	9f d0       	rcall	.+318    	; 0x33f2 <__fp_zero>
    32b4:	b1 e0       	ldi	r27, 0x01	; 1
    32b6:	08 95       	ret
    32b8:	9c c0       	rjmp	.+312    	; 0x33f2 <__fp_zero>
    32ba:	67 2f       	mov	r22, r23
    32bc:	78 2f       	mov	r23, r24
    32be:	88 27       	eor	r24, r24
    32c0:	b8 5f       	subi	r27, 0xF8	; 248
    32c2:	39 f0       	breq	.+14     	; 0x32d2 <__fixunssfsi+0x46>
    32c4:	b9 3f       	cpi	r27, 0xF9	; 249
    32c6:	cc f3       	brlt	.-14     	; 0x32ba <__fixunssfsi+0x2e>
    32c8:	86 95       	lsr	r24
    32ca:	77 95       	ror	r23
    32cc:	67 95       	ror	r22
    32ce:	b3 95       	inc	r27
    32d0:	d9 f7       	brne	.-10     	; 0x32c8 <__fixunssfsi+0x3c>
    32d2:	3e f4       	brtc	.+14     	; 0x32e2 <__fixunssfsi+0x56>
    32d4:	90 95       	com	r25
    32d6:	80 95       	com	r24
    32d8:	70 95       	com	r23
    32da:	61 95       	neg	r22
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	8f 4f       	sbci	r24, 0xFF	; 255
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	08 95       	ret

000032e4 <__floatunsisf>:
    32e4:	e8 94       	clt
    32e6:	09 c0       	rjmp	.+18     	; 0x32fa <__floatsisf+0x12>

000032e8 <__floatsisf>:
    32e8:	97 fb       	bst	r25, 7
    32ea:	3e f4       	brtc	.+14     	; 0x32fa <__floatsisf+0x12>
    32ec:	90 95       	com	r25
    32ee:	80 95       	com	r24
    32f0:	70 95       	com	r23
    32f2:	61 95       	neg	r22
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255
    32f6:	8f 4f       	sbci	r24, 0xFF	; 255
    32f8:	9f 4f       	sbci	r25, 0xFF	; 255
    32fa:	99 23       	and	r25, r25
    32fc:	a9 f0       	breq	.+42     	; 0x3328 <__floatsisf+0x40>
    32fe:	f9 2f       	mov	r31, r25
    3300:	96 e9       	ldi	r25, 0x96	; 150
    3302:	bb 27       	eor	r27, r27
    3304:	93 95       	inc	r25
    3306:	f6 95       	lsr	r31
    3308:	87 95       	ror	r24
    330a:	77 95       	ror	r23
    330c:	67 95       	ror	r22
    330e:	b7 95       	ror	r27
    3310:	f1 11       	cpse	r31, r1
    3312:	f8 cf       	rjmp	.-16     	; 0x3304 <__floatsisf+0x1c>
    3314:	fa f4       	brpl	.+62     	; 0x3354 <__floatsisf+0x6c>
    3316:	bb 0f       	add	r27, r27
    3318:	11 f4       	brne	.+4      	; 0x331e <__floatsisf+0x36>
    331a:	60 ff       	sbrs	r22, 0
    331c:	1b c0       	rjmp	.+54     	; 0x3354 <__floatsisf+0x6c>
    331e:	6f 5f       	subi	r22, 0xFF	; 255
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	8f 4f       	sbci	r24, 0xFF	; 255
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	16 c0       	rjmp	.+44     	; 0x3354 <__floatsisf+0x6c>
    3328:	88 23       	and	r24, r24
    332a:	11 f0       	breq	.+4      	; 0x3330 <__floatsisf+0x48>
    332c:	96 e9       	ldi	r25, 0x96	; 150
    332e:	11 c0       	rjmp	.+34     	; 0x3352 <__floatsisf+0x6a>
    3330:	77 23       	and	r23, r23
    3332:	21 f0       	breq	.+8      	; 0x333c <__floatsisf+0x54>
    3334:	9e e8       	ldi	r25, 0x8E	; 142
    3336:	87 2f       	mov	r24, r23
    3338:	76 2f       	mov	r23, r22
    333a:	05 c0       	rjmp	.+10     	; 0x3346 <__floatsisf+0x5e>
    333c:	66 23       	and	r22, r22
    333e:	71 f0       	breq	.+28     	; 0x335c <__floatsisf+0x74>
    3340:	96 e8       	ldi	r25, 0x86	; 134
    3342:	86 2f       	mov	r24, r22
    3344:	70 e0       	ldi	r23, 0x00	; 0
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	2a f0       	brmi	.+10     	; 0x3354 <__floatsisf+0x6c>
    334a:	9a 95       	dec	r25
    334c:	66 0f       	add	r22, r22
    334e:	77 1f       	adc	r23, r23
    3350:	88 1f       	adc	r24, r24
    3352:	da f7       	brpl	.-10     	; 0x334a <__floatsisf+0x62>
    3354:	88 0f       	add	r24, r24
    3356:	96 95       	lsr	r25
    3358:	87 95       	ror	r24
    335a:	97 f9       	bld	r25, 7
    335c:	08 95       	ret

0000335e <__fp_inf>:
    335e:	97 f9       	bld	r25, 7
    3360:	9f 67       	ori	r25, 0x7F	; 127
    3362:	80 e8       	ldi	r24, 0x80	; 128
    3364:	70 e0       	ldi	r23, 0x00	; 0
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	08 95       	ret

0000336a <__fp_nan>:
    336a:	9f ef       	ldi	r25, 0xFF	; 255
    336c:	80 ec       	ldi	r24, 0xC0	; 192
    336e:	08 95       	ret

00003370 <__fp_pscA>:
    3370:	00 24       	eor	r0, r0
    3372:	0a 94       	dec	r0
    3374:	16 16       	cp	r1, r22
    3376:	17 06       	cpc	r1, r23
    3378:	18 06       	cpc	r1, r24
    337a:	09 06       	cpc	r0, r25
    337c:	08 95       	ret

0000337e <__fp_pscB>:
    337e:	00 24       	eor	r0, r0
    3380:	0a 94       	dec	r0
    3382:	12 16       	cp	r1, r18
    3384:	13 06       	cpc	r1, r19
    3386:	14 06       	cpc	r1, r20
    3388:	05 06       	cpc	r0, r21
    338a:	08 95       	ret

0000338c <__fp_round>:
    338c:	09 2e       	mov	r0, r25
    338e:	03 94       	inc	r0
    3390:	00 0c       	add	r0, r0
    3392:	11 f4       	brne	.+4      	; 0x3398 <__fp_round+0xc>
    3394:	88 23       	and	r24, r24
    3396:	52 f0       	brmi	.+20     	; 0x33ac <__fp_round+0x20>
    3398:	bb 0f       	add	r27, r27
    339a:	40 f4       	brcc	.+16     	; 0x33ac <__fp_round+0x20>
    339c:	bf 2b       	or	r27, r31
    339e:	11 f4       	brne	.+4      	; 0x33a4 <__fp_round+0x18>
    33a0:	60 ff       	sbrs	r22, 0
    33a2:	04 c0       	rjmp	.+8      	; 0x33ac <__fp_round+0x20>
    33a4:	6f 5f       	subi	r22, 0xFF	; 255
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	8f 4f       	sbci	r24, 0xFF	; 255
    33aa:	9f 4f       	sbci	r25, 0xFF	; 255
    33ac:	08 95       	ret

000033ae <__fp_split3>:
    33ae:	57 fd       	sbrc	r21, 7
    33b0:	90 58       	subi	r25, 0x80	; 128
    33b2:	44 0f       	add	r20, r20
    33b4:	55 1f       	adc	r21, r21
    33b6:	59 f0       	breq	.+22     	; 0x33ce <__fp_splitA+0x10>
    33b8:	5f 3f       	cpi	r21, 0xFF	; 255
    33ba:	71 f0       	breq	.+28     	; 0x33d8 <__fp_splitA+0x1a>
    33bc:	47 95       	ror	r20

000033be <__fp_splitA>:
    33be:	88 0f       	add	r24, r24
    33c0:	97 fb       	bst	r25, 7
    33c2:	99 1f       	adc	r25, r25
    33c4:	61 f0       	breq	.+24     	; 0x33de <__fp_splitA+0x20>
    33c6:	9f 3f       	cpi	r25, 0xFF	; 255
    33c8:	79 f0       	breq	.+30     	; 0x33e8 <__fp_splitA+0x2a>
    33ca:	87 95       	ror	r24
    33cc:	08 95       	ret
    33ce:	12 16       	cp	r1, r18
    33d0:	13 06       	cpc	r1, r19
    33d2:	14 06       	cpc	r1, r20
    33d4:	55 1f       	adc	r21, r21
    33d6:	f2 cf       	rjmp	.-28     	; 0x33bc <__fp_split3+0xe>
    33d8:	46 95       	lsr	r20
    33da:	f1 df       	rcall	.-30     	; 0x33be <__fp_splitA>
    33dc:	08 c0       	rjmp	.+16     	; 0x33ee <__fp_splitA+0x30>
    33de:	16 16       	cp	r1, r22
    33e0:	17 06       	cpc	r1, r23
    33e2:	18 06       	cpc	r1, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	f1 cf       	rjmp	.-30     	; 0x33ca <__fp_splitA+0xc>
    33e8:	86 95       	lsr	r24
    33ea:	71 05       	cpc	r23, r1
    33ec:	61 05       	cpc	r22, r1
    33ee:	08 94       	sec
    33f0:	08 95       	ret

000033f2 <__fp_zero>:
    33f2:	e8 94       	clt

000033f4 <__fp_szero>:
    33f4:	bb 27       	eor	r27, r27
    33f6:	66 27       	eor	r22, r22
    33f8:	77 27       	eor	r23, r23
    33fa:	cb 01       	movw	r24, r22
    33fc:	97 f9       	bld	r25, 7
    33fe:	08 95       	ret

00003400 <__gesf2>:
    3400:	03 d0       	rcall	.+6      	; 0x3408 <__fp_cmp>
    3402:	08 f4       	brcc	.+2      	; 0x3406 <__gesf2+0x6>
    3404:	8f ef       	ldi	r24, 0xFF	; 255
    3406:	08 95       	ret

00003408 <__fp_cmp>:
    3408:	99 0f       	add	r25, r25
    340a:	00 08       	sbc	r0, r0
    340c:	55 0f       	add	r21, r21
    340e:	aa 0b       	sbc	r26, r26
    3410:	e0 e8       	ldi	r30, 0x80	; 128
    3412:	fe ef       	ldi	r31, 0xFE	; 254
    3414:	16 16       	cp	r1, r22
    3416:	17 06       	cpc	r1, r23
    3418:	e8 07       	cpc	r30, r24
    341a:	f9 07       	cpc	r31, r25
    341c:	c0 f0       	brcs	.+48     	; 0x344e <__fp_cmp+0x46>
    341e:	12 16       	cp	r1, r18
    3420:	13 06       	cpc	r1, r19
    3422:	e4 07       	cpc	r30, r20
    3424:	f5 07       	cpc	r31, r21
    3426:	98 f0       	brcs	.+38     	; 0x344e <__fp_cmp+0x46>
    3428:	62 1b       	sub	r22, r18
    342a:	73 0b       	sbc	r23, r19
    342c:	84 0b       	sbc	r24, r20
    342e:	95 0b       	sbc	r25, r21
    3430:	39 f4       	brne	.+14     	; 0x3440 <__fp_cmp+0x38>
    3432:	0a 26       	eor	r0, r26
    3434:	61 f0       	breq	.+24     	; 0x344e <__fp_cmp+0x46>
    3436:	23 2b       	or	r18, r19
    3438:	24 2b       	or	r18, r20
    343a:	25 2b       	or	r18, r21
    343c:	21 f4       	brne	.+8      	; 0x3446 <__fp_cmp+0x3e>
    343e:	08 95       	ret
    3440:	0a 26       	eor	r0, r26
    3442:	09 f4       	brne	.+2      	; 0x3446 <__fp_cmp+0x3e>
    3444:	a1 40       	sbci	r26, 0x01	; 1
    3446:	a6 95       	lsr	r26
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	81 1d       	adc	r24, r1
    344c:	81 1d       	adc	r24, r1
    344e:	08 95       	ret

00003450 <__tablejump2__>:
    3450:	ee 0f       	add	r30, r30
    3452:	ff 1f       	adc	r31, r31
    3454:	88 1f       	adc	r24, r24
    3456:	8b bf       	out	0x3b, r24	; 59
    3458:	07 90       	elpm	r0, Z+
    345a:	f6 91       	elpm	r31, Z
    345c:	e0 2d       	mov	r30, r0
    345e:	19 94       	eijmp

00003460 <__umulhisi3>:
    3460:	a2 9f       	mul	r26, r18
    3462:	b0 01       	movw	r22, r0
    3464:	b3 9f       	mul	r27, r19
    3466:	c0 01       	movw	r24, r0
    3468:	a3 9f       	mul	r26, r19
    346a:	70 0d       	add	r23, r0
    346c:	81 1d       	adc	r24, r1
    346e:	11 24       	eor	r1, r1
    3470:	91 1d       	adc	r25, r1
    3472:	b2 9f       	mul	r27, r18
    3474:	70 0d       	add	r23, r0
    3476:	81 1d       	adc	r24, r1
    3478:	11 24       	eor	r1, r1
    347a:	91 1d       	adc	r25, r1
    347c:	08 95       	ret

0000347e <puts>:
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <__iob+0x2>
    348a:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <__iob+0x3>
    348e:	23 81       	ldd	r18, Z+3	; 0x03
    3490:	21 ff       	sbrs	r18, 1
    3492:	1b c0       	rjmp	.+54     	; 0x34ca <puts+0x4c>
    3494:	8c 01       	movw	r16, r24
    3496:	d0 e0       	ldi	r29, 0x00	; 0
    3498:	c0 e0       	ldi	r28, 0x00	; 0
    349a:	f8 01       	movw	r30, r16
    349c:	81 91       	ld	r24, Z+
    349e:	8f 01       	movw	r16, r30
    34a0:	60 91 e2 09 	lds	r22, 0x09E2	; 0x8009e2 <__iob+0x2>
    34a4:	70 91 e3 09 	lds	r23, 0x09E3	; 0x8009e3 <__iob+0x3>
    34a8:	db 01       	movw	r26, r22
    34aa:	18 96       	adiw	r26, 0x08	; 8
    34ac:	ed 91       	ld	r30, X+
    34ae:	fc 91       	ld	r31, X
    34b0:	19 97       	sbiw	r26, 0x09	; 9
    34b2:	88 23       	and	r24, r24
    34b4:	31 f0       	breq	.+12     	; 0x34c2 <puts+0x44>
    34b6:	19 95       	eicall
    34b8:	89 2b       	or	r24, r25
    34ba:	79 f3       	breq	.-34     	; 0x349a <puts+0x1c>
    34bc:	df ef       	ldi	r29, 0xFF	; 255
    34be:	cf ef       	ldi	r28, 0xFF	; 255
    34c0:	ec cf       	rjmp	.-40     	; 0x349a <puts+0x1c>
    34c2:	8a e0       	ldi	r24, 0x0A	; 10
    34c4:	19 95       	eicall
    34c6:	89 2b       	or	r24, r25
    34c8:	19 f0       	breq	.+6      	; 0x34d0 <puts+0x52>
    34ca:	8f ef       	ldi	r24, 0xFF	; 255
    34cc:	9f ef       	ldi	r25, 0xFF	; 255
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <puts+0x56>
    34d0:	8d 2f       	mov	r24, r29
    34d2:	9c 2f       	mov	r25, r28
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	08 95       	ret

000034de <_exit>:
    34de:	f8 94       	cli

000034e0 <__stop_program>:
    34e0:	ff cf       	rjmp	.-2      	; 0x34e0 <__stop_program>
