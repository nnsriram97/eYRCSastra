
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000402  00800200  00003276  0000330a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f8  00800602  00800602  0000370c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030ee  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108e  00000000  00000000  00006a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000208e  00000000  00000000  00007b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  00009ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3e  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a41  00000000  00000000  0000ae22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000c863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_5>
      18:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_6>
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_25>
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_51>
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	64 09       	sbc	r22, r4
      e6:	b1 09       	sbc	r27, r1
      e8:	74 09       	sbc	r23, r4
      ea:	80 09       	sbc	r24, r0
      ec:	83 09       	sbc	r24, r3
      ee:	86 09       	sbc	r24, r6
      f0:	90 09       	sbc	r25, r0
      f2:	9a 09       	sbc	r25, r10
      f4:	a0 09       	sbc	r26, r0
      f6:	a3 09       	sbc	r26, r3

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	16 e0       	ldi	r17, 0x06	; 6
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e6 e7       	ldi	r30, 0x76	; 118
     110:	f2 e3       	ldi	r31, 0x32	; 50
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a2 30       	cpi	r26, 0x02	; 2
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	29 e0       	ldi	r18, 0x09	; 9
     124:	a2 e0       	ldi	r26, 0x02	; 2
     126:	b6 e0       	ldi	r27, 0x06	; 6
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	aa 3f       	cpi	r26, 0xFA	; 250
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 14 10 	call	0x2028	; 0x2028 <main>
     136:	0c 94 39 19 	jmp	0x3272	; 0x3272 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <uart_putchar>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     13c:	e0 ed       	ldi	r30, 0xD0	; 208
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	90 81       	ld	r25, Z
     142:	95 ff       	sbrs	r25, 5
     144:	fd cf       	rjmp	.-6      	; 0x140 <uart_putchar+0x4>
     146:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     14a:	08 95       	ret

0000014c <lcd_port_config>:
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	87 6f       	ori	r24, 0xF7	; 247
     150:	87 b9       	out	0x07, r24	; 7
     152:	88 b1       	in	r24, 0x08	; 8
     154:	80 78       	andi	r24, 0x80	; 128
     156:	88 b9       	out	0x08, r24	; 8
     158:	08 95       	ret

0000015a <lcd_set_4bit>:
     15a:	86 e6       	ldi	r24, 0x66	; 102
     15c:	9e e0       	ldi	r25, 0x0E	; 14
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x4>
     162:	00 00       	nop
     164:	40 98       	cbi	0x08, 0	; 8
     166:	41 98       	cbi	0x08, 1	; 8
     168:	80 e3       	ldi	r24, 0x30	; 48
     16a:	88 b9       	out	0x08, r24	; 8
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	ef ef       	ldi	r30, 0xFF	; 255
     170:	f7 e4       	ldi	r31, 0x47	; 71
     172:	31 97       	sbiw	r30, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <lcd_set_4bit+0x18>
     176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_set_4bit+0x1e>
     178:	00 00       	nop
     17a:	42 98       	cbi	0x08, 2	; 8
     17c:	e6 e6       	ldi	r30, 0x66	; 102
     17e:	fe e0       	ldi	r31, 0x0E	; 14
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <lcd_set_4bit+0x26>
     184:	00 00       	nop
     186:	40 98       	cbi	0x08, 0	; 8
     188:	41 98       	cbi	0x08, 1	; 8
     18a:	88 b9       	out	0x08, r24	; 8
     18c:	42 9a       	sbi	0x08, 2	; 8
     18e:	ef ef       	ldi	r30, 0xFF	; 255
     190:	f7 e4       	ldi	r31, 0x47	; 71
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x38>
     196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_set_4bit+0x3e>
     198:	00 00       	nop
     19a:	42 98       	cbi	0x08, 2	; 8
     19c:	e6 e6       	ldi	r30, 0x66	; 102
     19e:	fe e0       	ldi	r31, 0x0E	; 14
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_set_4bit+0x46>
     1a4:	00 00       	nop
     1a6:	40 98       	cbi	0x08, 0	; 8
     1a8:	41 98       	cbi	0x08, 1	; 8
     1aa:	88 b9       	out	0x08, r24	; 8
     1ac:	42 9a       	sbi	0x08, 2	; 8
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	97 e4       	ldi	r25, 0x47	; 71
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x58>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_set_4bit+0x5e>
     1b8:	00 00       	nop
     1ba:	42 98       	cbi	0x08, 2	; 8
     1bc:	e6 e6       	ldi	r30, 0x66	; 102
     1be:	fe e0       	ldi	r31, 0x0E	; 14
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_set_4bit+0x66>
     1c4:	00 00       	nop
     1c6:	40 98       	cbi	0x08, 0	; 8
     1c8:	41 98       	cbi	0x08, 1	; 8
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	88 b9       	out	0x08, r24	; 8
     1ce:	42 9a       	sbi	0x08, 2	; 8
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	97 e4       	ldi	r25, 0x47	; 71
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_set_4bit+0x7a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_set_4bit+0x80>
     1da:	00 00       	nop
     1dc:	42 98       	cbi	0x08, 2	; 8
     1de:	08 95       	ret

000001e0 <lcd_wr_command>:
     1e0:	98 b1       	in	r25, 0x08	; 8
     1e2:	9f 70       	andi	r25, 0x0F	; 15
     1e4:	98 b9       	out	0x08, r25	; 8
     1e6:	98 b1       	in	r25, 0x08	; 8
     1e8:	28 2f       	mov	r18, r24
     1ea:	20 7f       	andi	r18, 0xF0	; 240
     1ec:	92 2b       	or	r25, r18
     1ee:	98 b9       	out	0x08, r25	; 8
     1f0:	40 98       	cbi	0x08, 0	; 8
     1f2:	41 98       	cbi	0x08, 1	; 8
     1f4:	42 9a       	sbi	0x08, 2	; 8
     1f6:	ef ef       	ldi	r30, 0xFF	; 255
     1f8:	f7 e4       	ldi	r31, 0x47	; 71
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_wr_command+0x1a>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_wr_command+0x20>
     200:	00 00       	nop
     202:	42 98       	cbi	0x08, 2	; 8
     204:	98 b1       	in	r25, 0x08	; 8
     206:	9f 70       	andi	r25, 0x0F	; 15
     208:	98 b9       	out	0x08, r25	; 8
     20a:	98 b1       	in	r25, 0x08	; 8
     20c:	82 95       	swap	r24
     20e:	80 7f       	andi	r24, 0xF0	; 240
     210:	89 2b       	or	r24, r25
     212:	88 b9       	out	0x08, r24	; 8
     214:	40 98       	cbi	0x08, 0	; 8
     216:	41 98       	cbi	0x08, 1	; 8
     218:	42 9a       	sbi	0x08, 2	; 8
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	97 e4       	ldi	r25, 0x47	; 71
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <lcd_wr_command+0x3e>
     222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_wr_command+0x44>
     224:	00 00       	nop
     226:	42 98       	cbi	0x08, 2	; 8
     228:	08 95       	ret

0000022a <lcd_wr_char>:
     22a:	98 b1       	in	r25, 0x08	; 8
     22c:	9f 70       	andi	r25, 0x0F	; 15
     22e:	98 b9       	out	0x08, r25	; 8
     230:	98 b1       	in	r25, 0x08	; 8
     232:	28 2f       	mov	r18, r24
     234:	20 7f       	andi	r18, 0xF0	; 240
     236:	92 2b       	or	r25, r18
     238:	98 b9       	out	0x08, r25	; 8
     23a:	40 9a       	sbi	0x08, 0	; 8
     23c:	41 98       	cbi	0x08, 1	; 8
     23e:	42 9a       	sbi	0x08, 2	; 8
     240:	ef ef       	ldi	r30, 0xFF	; 255
     242:	f7 e4       	ldi	r31, 0x47	; 71
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_wr_char+0x1a>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_wr_char+0x20>
     24a:	00 00       	nop
     24c:	42 98       	cbi	0x08, 2	; 8
     24e:	98 b1       	in	r25, 0x08	; 8
     250:	9f 70       	andi	r25, 0x0F	; 15
     252:	98 b9       	out	0x08, r25	; 8
     254:	98 b1       	in	r25, 0x08	; 8
     256:	82 95       	swap	r24
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	89 2b       	or	r24, r25
     25c:	88 b9       	out	0x08, r24	; 8
     25e:	40 9a       	sbi	0x08, 0	; 8
     260:	41 98       	cbi	0x08, 1	; 8
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	97 e4       	ldi	r25, 0x47	; 71
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_wr_char+0x3e>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_wr_char+0x44>
     26e:	00 00       	nop
     270:	42 98       	cbi	0x08, 2	; 8
     272:	08 95       	ret

00000274 <lcd_home>:
     274:	80 e8       	ldi	r24, 0x80	; 128
     276:	b4 cf       	rjmp	.-152    	; 0x1e0 <lcd_wr_command>
     278:	08 95       	ret

0000027a <lcd_string>:
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	29 f0       	breq	.+10     	; 0x290 <lcd_string+0x16>
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	d0 df       	rcall	.-96     	; 0x22a <lcd_wr_char>
     28a:	89 91       	ld	r24, Y+
     28c:	81 11       	cpse	r24, r1
     28e:	fc cf       	rjmp	.-8      	; 0x288 <lcd_string+0xe>
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <lcd_init>:
     296:	86 e6       	ldi	r24, 0x66	; 102
     298:	9e e0       	ldi	r25, 0x0E	; 14
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x4>
     29e:	00 00       	nop
     2a0:	88 e2       	ldi	r24, 0x28	; 40
     2a2:	9e df       	rcall	.-196    	; 0x1e0 <lcd_wr_command>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	9c df       	rcall	.-200    	; 0x1e0 <lcd_wr_command>
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	9a df       	rcall	.-204    	; 0x1e0 <lcd_wr_command>
     2ac:	8e e0       	ldi	r24, 0x0E	; 14
     2ae:	98 df       	rcall	.-208    	; 0x1e0 <lcd_wr_command>
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	96 cf       	rjmp	.-212    	; 0x1e0 <lcd_wr_command>
     2b4:	08 95       	ret

000002b6 <lcd_cursor>:
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	69 f0       	breq	.+26     	; 0x2d4 <lcd_cursor+0x1e>
     2ba:	18 f4       	brcc	.+6      	; 0x2c2 <lcd_cursor+0xc>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_cursor+0x16>
     2c0:	08 95       	ret
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	59 f0       	breq	.+22     	; 0x2dc <lcd_cursor+0x26>
     2c6:	84 30       	cpi	r24, 0x04	; 4
     2c8:	69 f0       	breq	.+26     	; 0x2e4 <lcd_cursor+0x2e>
     2ca:	08 95       	ret
     2cc:	8f e7       	ldi	r24, 0x7F	; 127
     2ce:	86 0f       	add	r24, r22
     2d0:	87 cf       	rjmp	.-242    	; 0x1e0 <lcd_wr_command>
     2d2:	08 95       	ret
     2d4:	8f eb       	ldi	r24, 0xBF	; 191
     2d6:	86 0f       	add	r24, r22
     2d8:	83 cf       	rjmp	.-250    	; 0x1e0 <lcd_wr_command>
     2da:	08 95       	ret
     2dc:	83 e9       	ldi	r24, 0x93	; 147
     2de:	86 0f       	add	r24, r22
     2e0:	7f cf       	rjmp	.-258    	; 0x1e0 <lcd_wr_command>
     2e2:	08 95       	ret
     2e4:	83 ed       	ldi	r24, 0xD3	; 211
     2e6:	86 0f       	add	r24, r22
     2e8:	7b cf       	rjmp	.-266    	; 0x1e0 <lcd_wr_command>
     2ea:	08 95       	ret

000002ec <lcd_print>:
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	8a 01       	movw	r16, r20
     2f6:	e9 01       	movw	r28, r18
     2f8:	88 23       	and	r24, r24
     2fa:	11 f0       	breq	.+4      	; 0x300 <lcd_print+0x14>
     2fc:	61 11       	cpse	r22, r1
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <lcd_print+0x18>
     300:	b9 df       	rcall	.-142    	; 0x274 <lcd_home>
     302:	01 c0       	rjmp	.+2      	; 0x306 <lcd_print+0x1a>
     304:	d8 df       	rcall	.-80     	; 0x2b6 <lcd_cursor>
     306:	c5 30       	cpi	r28, 0x05	; 5
     308:	d1 05       	cpc	r29, r1
     30a:	c1 f4       	brne	.+48     	; 0x33c <lcd_print+0x50>
     30c:	98 01       	movw	r18, r16
     30e:	32 95       	swap	r19
     310:	22 95       	swap	r18
     312:	2f 70       	andi	r18, 0x0F	; 15
     314:	23 27       	eor	r18, r19
     316:	3f 70       	andi	r19, 0x0F	; 15
     318:	23 27       	eor	r18, r19
     31a:	a7 e4       	ldi	r26, 0x47	; 71
     31c:	b3 e0       	ldi	r27, 0x03	; 3
     31e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     322:	96 95       	lsr	r25
     324:	87 95       	ror	r24
     326:	96 95       	lsr	r25
     328:	87 95       	ror	r24
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	c0 96       	adiw	r24, 0x30	; 48
     330:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <million+0x1>
     334:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <million>
     338:	78 df       	rcall	.-272    	; 0x22a <lcd_wr_char>
     33a:	04 c0       	rjmp	.+8      	; 0x344 <lcd_print+0x58>
     33c:	c4 30       	cpi	r28, 0x04	; 4
     33e:	d1 05       	cpc	r29, r1
     340:	09 f0       	breq	.+2      	; 0x344 <lcd_print+0x58>
     342:	be c0       	rjmp	.+380    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     344:	98 01       	movw	r18, r16
     346:	36 95       	lsr	r19
     348:	27 95       	ror	r18
     34a:	36 95       	lsr	r19
     34c:	27 95       	ror	r18
     34e:	36 95       	lsr	r19
     350:	27 95       	ror	r18
     352:	a5 ec       	ldi	r26, 0xC5	; 197
     354:	b0 e2       	ldi	r27, 0x20	; 32
     356:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     35a:	ac 01       	movw	r20, r24
     35c:	52 95       	swap	r21
     35e:	42 95       	swap	r20
     360:	4f 70       	andi	r20, 0x0F	; 15
     362:	45 27       	eor	r20, r21
     364:	5f 70       	andi	r21, 0x0F	; 15
     366:	45 27       	eor	r20, r21
     368:	50 93 54 08 	sts	0x0854, r21	; 0x800854 <temp+0x1>
     36c:	40 93 53 08 	sts	0x0853, r20	; 0x800853 <temp>
     370:	9a 01       	movw	r18, r20
     372:	ad ec       	ldi	r26, 0xCD	; 205
     374:	bc ec       	ldi	r27, 0xCC	; 204
     376:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	96 95       	lsr	r25
     380:	87 95       	ror	r24
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	9c 01       	movw	r18, r24
     388:	22 0f       	add	r18, r18
     38a:	33 1f       	adc	r19, r19
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	9a 01       	movw	r18, r20
     39e:	28 1b       	sub	r18, r24
     3a0:	39 0b       	sbc	r19, r25
     3a2:	c9 01       	movw	r24, r18
     3a4:	c0 96       	adiw	r24, 0x30	; 48
     3a6:	90 93 f1 09 	sts	0x09F1, r25	; 0x8009f1 <thousand+0x1>
     3aa:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <thousand>
     3ae:	3d df       	rcall	.-390    	; 0x22a <lcd_wr_char>
     3b0:	98 01       	movw	r18, r16
     3b2:	36 95       	lsr	r19
     3b4:	27 95       	ror	r18
     3b6:	36 95       	lsr	r19
     3b8:	27 95       	ror	r18
     3ba:	ab e7       	ldi	r26, 0x7B	; 123
     3bc:	b4 e1       	ldi	r27, 0x14	; 20
     3be:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     3c2:	ac 01       	movw	r20, r24
     3c4:	56 95       	lsr	r21
     3c6:	47 95       	ror	r20
     3c8:	50 93 54 08 	sts	0x0854, r21	; 0x800854 <temp+0x1>
     3cc:	40 93 53 08 	sts	0x0853, r20	; 0x800853 <temp>
     3d0:	9a 01       	movw	r18, r20
     3d2:	ad ec       	ldi	r26, 0xCD	; 205
     3d4:	bc ec       	ldi	r27, 0xCC	; 204
     3d6:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	9c 01       	movw	r18, r24
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
     3fc:	9a 01       	movw	r18, r20
     3fe:	28 1b       	sub	r18, r24
     400:	39 0b       	sbc	r19, r25
     402:	c9 01       	movw	r24, r18
     404:	c0 96       	adiw	r24, 0x30	; 48
     406:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <hundred+0x1>
     40a:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <hundred>
     40e:	0d df       	rcall	.-486    	; 0x22a <lcd_wr_char>
     410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     412:	c2 30       	cpi	r28, 0x02	; 2
     414:	d1 05       	cpc	r29, r1
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	58 c0       	rjmp	.+176    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     41a:	98 01       	movw	r18, r16
     41c:	ad ec       	ldi	r26, 0xCD	; 205
     41e:	bc ec       	ldi	r27, 0xCC	; 204
     420:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     424:	ac 01       	movw	r20, r24
     426:	56 95       	lsr	r21
     428:	47 95       	ror	r20
     42a:	56 95       	lsr	r21
     42c:	47 95       	ror	r20
     42e:	56 95       	lsr	r21
     430:	47 95       	ror	r20
     432:	50 93 54 08 	sts	0x0854, r21	; 0x800854 <temp+0x1>
     436:	40 93 53 08 	sts	0x0853, r20	; 0x800853 <temp>
     43a:	9a 01       	movw	r18, r20
     43c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     440:	96 95       	lsr	r25
     442:	87 95       	ror	r24
     444:	96 95       	lsr	r25
     446:	87 95       	ror	r24
     448:	96 95       	lsr	r25
     44a:	87 95       	ror	r24
     44c:	9c 01       	movw	r18, r24
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	82 0f       	add	r24, r18
     460:	93 1f       	adc	r25, r19
     462:	9a 01       	movw	r18, r20
     464:	28 1b       	sub	r18, r24
     466:	39 0b       	sbc	r19, r25
     468:	c9 01       	movw	r24, r18
     46a:	c0 96       	adiw	r24, 0x30	; 48
     46c:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <tens+0x1>
     470:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <tens>
     474:	da de       	rcall	.-588    	; 0x22a <lcd_wr_char>
     476:	98 01       	movw	r18, r16
     478:	ad ec       	ldi	r26, 0xCD	; 205
     47a:	bc ec       	ldi	r27, 0xCC	; 204
     47c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__umulhisi3>
     480:	96 95       	lsr	r25
     482:	87 95       	ror	r24
     484:	96 95       	lsr	r25
     486:	87 95       	ror	r24
     488:	96 95       	lsr	r25
     48a:	87 95       	ror	r24
     48c:	9c 01       	movw	r18, r24
     48e:	22 0f       	add	r18, r18
     490:	33 1f       	adc	r19, r19
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	82 0f       	add	r24, r18
     4a0:	93 1f       	adc	r25, r19
     4a2:	98 01       	movw	r18, r16
     4a4:	28 1b       	sub	r18, r24
     4a6:	39 0b       	sbc	r19, r25
     4a8:	c9 01       	movw	r24, r18
     4aa:	c0 96       	adiw	r24, 0x30	; 48
     4ac:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <unit+0x1>
     4b0:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <unit>
     4b4:	ba de       	rcall	.-652    	; 0x22a <lcd_wr_char>
     4b6:	26 97       	sbiw	r28, 0x06	; 6
     4b8:	64 f0       	brlt	.+24     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ba:	85 e4       	ldi	r24, 0x45	; 69
     4bc:	b6 de       	rcall	.-660    	; 0x22a <lcd_wr_char>
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4c0:	c3 30       	cpi	r28, 0x03	; 3
     4c2:	d1 05       	cpc	r29, r1
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	a5 cf       	rjmp	.-182    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     4c8:	73 cf       	rjmp	.-282    	; 0x3b0 <lcd_print+0xc4>
     4ca:	c1 30       	cpi	r28, 0x01	; 1
     4cc:	d1 05       	cpc	r29, r1
     4ce:	99 f7       	brne	.-26     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4d0:	d2 cf       	rjmp	.-92     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <lcd_clear>:
     4dc:	80 e8       	ldi	r24, 0x80	; 128
     4de:	80 de       	rcall	.-768    	; 0x1e0 <lcd_wr_command>
     4e0:	84 e3       	ldi	r24, 0x34	; 52
     4e2:	95 e0       	ldi	r25, 0x05	; 5
     4e4:	ca de       	rcall	.-620    	; 0x27a <lcd_string>
     4e6:	80 ec       	ldi	r24, 0xC0	; 192
     4e8:	7b de       	rcall	.-778    	; 0x1e0 <lcd_wr_command>
     4ea:	84 e3       	ldi	r24, 0x34	; 52
     4ec:	95 e0       	ldi	r25, 0x05	; 5
     4ee:	c5 de       	rcall	.-630    	; 0x27a <lcd_string>
     4f0:	c1 ce       	rjmp	.-638    	; 0x274 <lcd_home>
     4f2:	08 95       	ret

000004f4 <declare_constants>:
     4f4:	2f 92       	push	r2
     4f6:	3f 92       	push	r3
     4f8:	4f 92       	push	r4
     4fa:	5f 92       	push	r5
     4fc:	6f 92       	push	r6
     4fe:	7f 92       	push	r7
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec e6       	ldi	r30, 0x6C	; 108
     51a:	f8 e0       	ldi	r31, 0x08	; 8
     51c:	0f 2e       	mov	r0, r31
     51e:	fb e4       	ldi	r31, 0x4B	; 75
     520:	af 2e       	mov	r10, r31
     522:	b1 2c       	mov	r11, r1
     524:	f0 2d       	mov	r31, r0
     526:	b1 82       	std	Z+1, r11	; 0x01
     528:	a0 82       	st	Z, r10
     52a:	0f 2e       	mov	r0, r31
     52c:	fd e1       	ldi	r31, 0x1D	; 29
     52e:	4f 2e       	mov	r4, r31
     530:	55 24       	eor	r5, r5
     532:	53 94       	inc	r5
     534:	f0 2d       	mov	r31, r0
     536:	53 82       	std	Z+3, r5	; 0x03
     538:	42 82       	std	Z+2, r4	; 0x02
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	95 83       	std	Z+5, r25	; 0x05
     540:	84 83       	std	Z+4, r24	; 0x04
     542:	97 83       	std	Z+7, r25	; 0x07
     544:	86 83       	std	Z+6, r24	; 0x06
     546:	cc 24       	eor	r12, r12
     548:	ca 94       	dec	r12
     54a:	d1 2c       	mov	r13, r1
     54c:	d1 86       	std	Z+9, r13	; 0x09
     54e:	c0 86       	std	Z+8, r12	; 0x08
     550:	ac e3       	ldi	r26, 0x3C	; 60
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	b3 87       	std	Z+11, r27	; 0x0b
     556:	a2 87       	std	Z+10, r26	; 0x0a
     558:	95 87       	std	Z+13, r25	; 0x0d
     55a:	84 87       	std	Z+12, r24	; 0x0c
     55c:	97 87       	std	Z+15, r25	; 0x0f
     55e:	86 87       	std	Z+14, r24	; 0x0e
     560:	20 ef       	ldi	r18, 0xF0	; 240
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	31 8b       	std	Z+17, r19	; 0x11
     566:	20 8b       	std	Z+16, r18	; 0x10
     568:	0f 2e       	mov	r0, r31
     56a:	fd e2       	ldi	r31, 0x2D	; 45
     56c:	2f 2e       	mov	r2, r31
     56e:	31 2c       	mov	r3, r1
     570:	f0 2d       	mov	r31, r0
     572:	33 8a       	std	Z+19, r3	; 0x13
     574:	22 8a       	std	Z+18, r2	; 0x12
     576:	15 8a       	std	Z+21, r1	; 0x15
     578:	14 8a       	std	Z+20, r1	; 0x14
     57a:	6c e2       	ldi	r22, 0x2C	; 44
     57c:	71 e0       	ldi	r23, 0x01	; 1
     57e:	77 8b       	std	Z+23, r23	; 0x17
     580:	66 8b       	std	Z+22, r22	; 0x16
     582:	0f 2e       	mov	r0, r31
     584:	f1 ee       	ldi	r31, 0xE1	; 225
     586:	8f 2e       	mov	r8, r31
     588:	91 2c       	mov	r9, r1
     58a:	f0 2d       	mov	r31, r0
     58c:	91 8e       	std	Z+25, r9	; 0x19
     58e:	80 8e       	std	Z+24, r8	; 0x18
     590:	0e e1       	ldi	r16, 0x1E	; 30
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	13 8f       	std	Z+27, r17	; 0x1b
     596:	02 8f       	std	Z+26, r16	; 0x1a
     598:	95 8f       	std	Z+29, r25	; 0x1d
     59a:	84 8f       	std	Z+28, r24	; 0x1c
     59c:	97 8f       	std	Z+31, r25	; 0x1f
     59e:	86 8f       	std	Z+30, r24	; 0x1e
     5a0:	42 ed       	ldi	r20, 0xD2	; 210
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	51 a3       	std	Z+33, r21	; 0x21
     5a6:	40 a3       	std	Z+32, r20	; 0x20
     5a8:	cf e0       	ldi	r28, 0x0F	; 15
     5aa:	d0 e0       	ldi	r29, 0x00	; 0
     5ac:	d3 a3       	std	Z+35, r29	; 0x23
     5ae:	c2 a3       	std	Z+34, r28	; 0x22
     5b0:	95 a3       	std	Z+37, r25	; 0x25
     5b2:	84 a3       	std	Z+36, r24	; 0x24
     5b4:	97 a3       	std	Z+39, r25	; 0x27
     5b6:	86 a3       	std	Z+38, r24	; 0x26
     5b8:	03 ec       	ldi	r16, 0xC3	; 195
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	11 a7       	std	Z+41, r17	; 0x29
     5be:	00 a7       	std	Z+40, r16	; 0x28
     5c0:	13 a6       	std	Z+43, r1	; 0x2b
     5c2:	12 a6       	std	Z+42, r1	; 0x2a
     5c4:	95 a7       	std	Z+45, r25	; 0x2d
     5c6:	84 a7       	std	Z+44, r24	; 0x2c
     5c8:	97 a7       	std	Z+47, r25	; 0x2f
     5ca:	86 a7       	std	Z+46, r24	; 0x2e
     5cc:	44 eb       	ldi	r20, 0xB4	; 180
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	51 ab       	std	Z+49, r21	; 0x31
     5d2:	40 ab       	std	Z+48, r20	; 0x30
     5d4:	09 e5       	ldi	r16, 0x59	; 89
     5d6:	11 e0       	ldi	r17, 0x01	; 1
     5d8:	13 ab       	std	Z+51, r17	; 0x33
     5da:	02 ab       	std	Z+50, r16	; 0x32
     5dc:	35 ab       	std	Z+53, r19	; 0x35
     5de:	24 ab       	std	Z+52, r18	; 0x34
     5e0:	77 ab       	std	Z+55, r23	; 0x37
     5e2:	66 ab       	std	Z+54, r22	; 0x36
     5e4:	05 ea       	ldi	r16, 0xA5	; 165
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	11 af       	std	Z+57, r17	; 0x39
     5ea:	00 af       	std	Z+56, r16	; 0x38
     5ec:	0a e4       	ldi	r16, 0x4A	; 74
     5ee:	11 e0       	ldi	r17, 0x01	; 1
     5f0:	13 af       	std	Z+59, r17	; 0x3b
     5f2:	02 af       	std	Z+58, r16	; 0x3a
     5f4:	95 af       	std	Z+61, r25	; 0x3d
     5f6:	84 af       	std	Z+60, r24	; 0x3c
     5f8:	90 93 ab 08 	sts	0x08AB, r25	; 0x8008ab <angle+0x3f>
     5fc:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <angle+0x3e>
     600:	e6 e9       	ldi	r30, 0x96	; 150
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	f0 93 ad 08 	sts	0x08AD, r31	; 0x8008ad <angle+0x41>
     608:	e0 93 ac 08 	sts	0x08AC, r30	; 0x8008ac <angle+0x40>
     60c:	0b e3       	ldi	r16, 0x3B	; 59
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	10 93 af 08 	sts	0x08AF, r17	; 0x8008af <angle+0x43>
     614:	00 93 ae 08 	sts	0x08AE, r16	; 0x8008ae <angle+0x42>
     618:	90 93 b1 08 	sts	0x08B1, r25	; 0x8008b1 <angle+0x45>
     61c:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <angle+0x44>
     620:	90 93 b3 08 	sts	0x08B3, r25	; 0x8008b3 <angle+0x47>
     624:	80 93 b2 08 	sts	0x08B2, r24	; 0x8008b2 <angle+0x46>
     628:	0f 2e       	mov	r0, r31
     62a:	f7 e8       	ldi	r31, 0x87	; 135
     62c:	6f 2e       	mov	r6, r31
     62e:	71 2c       	mov	r7, r1
     630:	f0 2d       	mov	r31, r0
     632:	70 92 b5 08 	sts	0x08B5, r7	; 0x8008b5 <angle+0x49>
     636:	60 92 b4 08 	sts	0x08B4, r6	; 0x8008b4 <angle+0x48>
     63a:	70 93 b7 08 	sts	0x08B7, r23	; 0x8008b7 <angle+0x4b>
     63e:	60 93 b6 08 	sts	0x08B6, r22	; 0x8008b6 <angle+0x4a>
     642:	90 93 b9 08 	sts	0x08B9, r25	; 0x8008b9 <angle+0x4d>
     646:	80 93 b8 08 	sts	0x08B8, r24	; 0x8008b8 <angle+0x4c>
     64a:	90 93 bb 08 	sts	0x08BB, r25	; 0x8008bb <angle+0x4f>
     64e:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <angle+0x4e>
     652:	e8 e7       	ldi	r30, 0x78	; 120
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	f0 93 bd 08 	sts	0x08BD, r31	; 0x8008bd <angle+0x51>
     65a:	e0 93 bc 08 	sts	0x08BC, r30	; 0x8008bc <angle+0x50>
     65e:	50 92 bf 08 	sts	0x08BF, r5	; 0x8008bf <angle+0x53>
     662:	40 92 be 08 	sts	0x08BE, r4	; 0x8008be <angle+0x52>
     666:	50 93 c1 08 	sts	0x08C1, r21	; 0x8008c1 <angle+0x55>
     66a:	40 93 c0 08 	sts	0x08C0, r20	; 0x8008c0 <angle+0x54>
     66e:	30 93 c3 08 	sts	0x08C3, r19	; 0x8008c3 <angle+0x57>
     672:	20 93 c2 08 	sts	0x08C2, r18	; 0x8008c2 <angle+0x56>
     676:	0f 2e       	mov	r0, r31
     678:	f9 e6       	ldi	r31, 0x69	; 105
     67a:	ef 2e       	mov	r14, r31
     67c:	f1 2c       	mov	r15, r1
     67e:	f0 2d       	mov	r31, r0
     680:	f0 92 c5 08 	sts	0x08C5, r15	; 0x8008c5 <angle+0x59>
     684:	e0 92 c4 08 	sts	0x08C4, r14	; 0x8008c4 <angle+0x58>
     688:	0e e0       	ldi	r16, 0x0E	; 14
     68a:	11 e0       	ldi	r17, 0x01	; 1
     68c:	10 93 c7 08 	sts	0x08C7, r17	; 0x8008c7 <angle+0x5b>
     690:	00 93 c6 08 	sts	0x08C6, r16	; 0x8008c6 <angle+0x5a>
     694:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <angle+0x5d>
     698:	80 93 c8 08 	sts	0x08C8, r24	; 0x8008c8 <angle+0x5c>
     69c:	90 93 cb 08 	sts	0x08CB, r25	; 0x8008cb <angle+0x5f>
     6a0:	80 93 ca 08 	sts	0x08CA, r24	; 0x8008ca <angle+0x5e>
     6a4:	0a e5       	ldi	r16, 0x5A	; 90
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	10 93 cd 08 	sts	0x08CD, r17	; 0x8008cd <angle+0x61>
     6ac:	00 93 cc 08 	sts	0x08CC, r16	; 0x8008cc <angle+0x60>
     6b0:	d0 92 cf 08 	sts	0x08CF, r13	; 0x8008cf <angle+0x63>
     6b4:	c0 92 ce 08 	sts	0x08CE, r12	; 0x8008ce <angle+0x62>
     6b8:	90 93 d1 08 	sts	0x08D1, r25	; 0x8008d1 <angle+0x65>
     6bc:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <angle+0x64>
     6c0:	90 93 d3 08 	sts	0x08D3, r25	; 0x8008d3 <angle+0x67>
     6c4:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <angle+0x66>
     6c8:	b0 92 d5 08 	sts	0x08D5, r11	; 0x8008d5 <angle+0x69>
     6cc:	a0 92 d4 08 	sts	0x08D4, r10	; 0x8008d4 <angle+0x68>
     6d0:	30 93 d7 08 	sts	0x08D7, r19	; 0x8008d7 <angle+0x6b>
     6d4:	20 93 d6 08 	sts	0x08D6, r18	; 0x8008d6 <angle+0x6a>
     6d8:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <angle+0x6d>
     6dc:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <angle+0x6c>
     6e0:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <angle+0x6f>
     6e4:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <angle+0x6e>
     6e8:	b0 93 dd 08 	sts	0x08DD, r27	; 0x8008dd <angle+0x71>
     6ec:	a0 93 dc 08 	sts	0x08DC, r26	; 0x8008dc <angle+0x70>
     6f0:	90 92 df 08 	sts	0x08DF, r9	; 0x8008df <angle+0x73>
     6f4:	80 92 de 08 	sts	0x08DE, r8	; 0x8008de <angle+0x72>
     6f8:	f0 93 e1 08 	sts	0x08E1, r31	; 0x8008e1 <angle+0x75>
     6fc:	e0 93 e0 08 	sts	0x08E0, r30	; 0x8008e0 <angle+0x74>
     700:	50 93 e3 08 	sts	0x08E3, r21	; 0x8008e3 <angle+0x77>
     704:	40 93 e2 08 	sts	0x08E2, r20	; 0x8008e2 <angle+0x76>
     708:	30 92 e5 08 	sts	0x08E5, r3	; 0x8008e5 <angle+0x79>
     70c:	20 92 e4 08 	sts	0x08E4, r2	; 0x8008e4 <angle+0x78>
     710:	0f 2e       	mov	r0, r31
     712:	f2 ed       	ldi	r31, 0xD2	; 210
     714:	cf 2e       	mov	r12, r31
     716:	d1 2c       	mov	r13, r1
     718:	f0 2d       	mov	r31, r0
     71a:	d0 92 e7 08 	sts	0x08E7, r13	; 0x8008e7 <angle+0x7b>
     71e:	c0 92 e6 08 	sts	0x08E6, r12	; 0x8008e6 <angle+0x7a>
     722:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <angle+0x7d>
     726:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <angle+0x7c>
     72a:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <angle+0x7f>
     72e:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <angle+0x7e>
     732:	0f 2e       	mov	r0, r31
     734:	fe e1       	ldi	r31, 0x1E	; 30
     736:	cf 2e       	mov	r12, r31
     738:	d1 2c       	mov	r13, r1
     73a:	f0 2d       	mov	r31, r0
     73c:	d0 92 ed 08 	sts	0x08ED, r13	; 0x8008ed <angle+0x81>
     740:	c0 92 ec 08 	sts	0x08EC, r12	; 0x8008ec <angle+0x80>
     744:	0f 2e       	mov	r0, r31
     746:	f3 ec       	ldi	r31, 0xC3	; 195
     748:	cf 2e       	mov	r12, r31
     74a:	d1 2c       	mov	r13, r1
     74c:	f0 2d       	mov	r31, r0
     74e:	d0 92 ef 08 	sts	0x08EF, r13	; 0x8008ef <angle+0x83>
     752:	c0 92 ee 08 	sts	0x08EE, r12	; 0x8008ee <angle+0x82>
     756:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <angle+0x85>
     75a:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <angle+0x84>
     75e:	90 93 f3 08 	sts	0x08F3, r25	; 0x8008f3 <angle+0x87>
     762:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <angle+0x86>
     766:	d0 93 f5 08 	sts	0x08F5, r29	; 0x8008f5 <angle+0x89>
     76a:	c0 93 f4 08 	sts	0x08F4, r28	; 0x8008f4 <angle+0x88>
     76e:	50 93 f7 08 	sts	0x08F7, r21	; 0x8008f7 <angle+0x8b>
     772:	40 93 f6 08 	sts	0x08F6, r20	; 0x8008f6 <angle+0x8a>
     776:	90 93 f9 08 	sts	0x08F9, r25	; 0x8008f9 <angle+0x8d>
     77a:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <angle+0x8c>
     77e:	90 93 fb 08 	sts	0x08FB, r25	; 0x8008fb <angle+0x8f>
     782:	80 93 fa 08 	sts	0x08FA, r24	; 0x8008fa <angle+0x8e>
     786:	10 92 fd 08 	sts	0x08FD, r1	; 0x8008fd <angle+0x91>
     78a:	10 92 fc 08 	sts	0x08FC, r1	; 0x8008fc <angle+0x90>
     78e:	0f 2e       	mov	r0, r31
     790:	f5 ea       	ldi	r31, 0xA5	; 165
     792:	cf 2e       	mov	r12, r31
     794:	d1 2c       	mov	r13, r1
     796:	f0 2d       	mov	r31, r0
     798:	d0 92 ff 08 	sts	0x08FF, r13	; 0x8008ff <angle+0x93>
     79c:	c0 92 fe 08 	sts	0x08FE, r12	; 0x8008fe <angle+0x92>
     7a0:	b0 93 01 09 	sts	0x0901, r27	; 0x800901 <angle+0x95>
     7a4:	a0 93 00 09 	sts	0x0900, r26	; 0x800900 <angle+0x94>
     7a8:	f0 93 03 09 	sts	0x0903, r31	; 0x800903 <angle+0x97>
     7ac:	e0 93 02 09 	sts	0x0902, r30	; 0x800902 <angle+0x96>
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f9 e5       	ldi	r31, 0x59	; 89
     7b4:	cf 2e       	mov	r12, r31
     7b6:	dd 24       	eor	r13, r13
     7b8:	d3 94       	inc	r13
     7ba:	f0 2d       	mov	r31, r0
     7bc:	d0 92 05 09 	sts	0x0905, r13	; 0x800905 <angle+0x99>
     7c0:	c0 92 04 09 	sts	0x0904, r12	; 0x800904 <angle+0x98>
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f6 e9       	ldi	r31, 0x96	; 150
     7c8:	cf 2e       	mov	r12, r31
     7ca:	d1 2c       	mov	r13, r1
     7cc:	f0 2d       	mov	r31, r0
     7ce:	d0 92 07 09 	sts	0x0907, r13	; 0x800907 <angle+0x9b>
     7d2:	c0 92 06 09 	sts	0x0906, r12	; 0x800906 <angle+0x9a>
     7d6:	90 93 09 09 	sts	0x0909, r25	; 0x800909 <angle+0x9d>
     7da:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <angle+0x9c>
     7de:	90 93 0b 09 	sts	0x090B, r25	; 0x80090b <angle+0x9f>
     7e2:	80 93 0a 09 	sts	0x090A, r24	; 0x80090a <angle+0x9e>
     7e6:	0f 2e       	mov	r0, r31
     7e8:	fa e4       	ldi	r31, 0x4A	; 74
     7ea:	cf 2e       	mov	r12, r31
     7ec:	dd 24       	eor	r13, r13
     7ee:	d3 94       	inc	r13
     7f0:	f0 2d       	mov	r31, r0
     7f2:	d0 92 0d 09 	sts	0x090D, r13	; 0x80090d <angle+0xa1>
     7f6:	c0 92 0c 09 	sts	0x090C, r12	; 0x80090c <angle+0xa0>
     7fa:	70 92 0f 09 	sts	0x090F, r7	; 0x80090f <angle+0xa3>
     7fe:	60 92 0e 09 	sts	0x090E, r6	; 0x80090e <angle+0xa2>
     802:	90 93 11 09 	sts	0x0911, r25	; 0x800911 <angle+0xa5>
     806:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <angle+0xa4>
     80a:	90 93 13 09 	sts	0x0913, r25	; 0x800913 <angle+0xa7>
     80e:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <angle+0xa6>
     812:	0f 2e       	mov	r0, r31
     814:	fb e3       	ldi	r31, 0x3B	; 59
     816:	cf 2e       	mov	r12, r31
     818:	dd 24       	eor	r13, r13
     81a:	d3 94       	inc	r13
     81c:	f0 2d       	mov	r31, r0
     81e:	d0 92 15 09 	sts	0x0915, r13	; 0x800915 <angle+0xa9>
     822:	c0 92 14 09 	sts	0x0914, r12	; 0x800914 <angle+0xa8>
     826:	f0 93 17 09 	sts	0x0917, r31	; 0x800917 <angle+0xab>
     82a:	e0 93 16 09 	sts	0x0916, r30	; 0x800916 <angle+0xaa>
     82e:	90 93 19 09 	sts	0x0919, r25	; 0x800919 <angle+0xad>
     832:	80 93 18 09 	sts	0x0918, r24	; 0x800918 <angle+0xac>
     836:	90 93 1b 09 	sts	0x091B, r25	; 0x80091b <angle+0xaf>
     83a:	80 93 1a 09 	sts	0x091A, r24	; 0x80091a <angle+0xae>
     83e:	70 93 1d 09 	sts	0x091D, r23	; 0x80091d <angle+0xb1>
     842:	60 93 1c 09 	sts	0x091C, r22	; 0x80091c <angle+0xb0>
     846:	f0 92 1f 09 	sts	0x091F, r15	; 0x80091f <angle+0xb3>
     84a:	e0 92 1e 09 	sts	0x091E, r14	; 0x80091e <angle+0xb2>
     84e:	10 92 21 09 	sts	0x0921, r1	; 0x800921 <angle+0xb5>
     852:	10 92 20 09 	sts	0x0920, r1	; 0x800920 <angle+0xb4>
     856:	b0 93 23 09 	sts	0x0923, r27	; 0x800923 <angle+0xb7>
     85a:	a0 93 22 09 	sts	0x0922, r26	; 0x800922 <angle+0xb6>
     85e:	10 93 25 09 	sts	0x0925, r17	; 0x800925 <angle+0xb9>
     862:	00 93 24 09 	sts	0x0924, r16	; 0x800924 <angle+0xb8>
     866:	50 92 27 09 	sts	0x0927, r5	; 0x800927 <angle+0xbb>
     86a:	40 92 26 09 	sts	0x0926, r4	; 0x800926 <angle+0xba>
     86e:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <angle+0xbd>
     872:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <angle+0xbc>
     876:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <angle+0xbf>
     87a:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <angle+0xbe>
     87e:	50 93 2d 09 	sts	0x092D, r21	; 0x80092d <angle+0xc1>
     882:	40 93 2c 09 	sts	0x092C, r20	; 0x80092c <angle+0xc0>
     886:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <angle+0xc3>
     88a:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <angle+0xc2>
     88e:	30 93 31 09 	sts	0x0931, r19	; 0x800931 <angle+0xc5>
     892:	20 93 30 09 	sts	0x0930, r18	; 0x800930 <angle+0xc4>
     896:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <angle+0xc7>
     89a:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <angle+0xc6>
     89e:	50 93 35 09 	sts	0x0935, r21	; 0x800935 <angle+0xc9>
     8a2:	40 93 34 09 	sts	0x0934, r20	; 0x800934 <angle+0xc8>
     8a6:	10 92 37 09 	sts	0x0937, r1	; 0x800937 <angle+0xcb>
     8aa:	10 92 36 09 	sts	0x0936, r1	; 0x800936 <angle+0xca>
     8ae:	b0 93 39 09 	sts	0x0939, r27	; 0x800939 <angle+0xcd>
     8b2:	a0 93 38 09 	sts	0x0938, r26	; 0x800938 <angle+0xcc>
     8b6:	70 93 3b 09 	sts	0x093B, r23	; 0x80093b <angle+0xcf>
     8ba:	60 93 3a 09 	sts	0x093A, r22	; 0x80093a <angle+0xce>
     8be:	50 93 3d 09 	sts	0x093D, r21	; 0x80093d <angle+0xd1>
     8c2:	40 93 3c 09 	sts	0x093C, r20	; 0x80093c <angle+0xd0>
     8c6:	10 92 3f 09 	sts	0x093F, r1	; 0x80093f <angle+0xd3>
     8ca:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <angle+0xd2>
     8ce:	f0 93 41 09 	sts	0x0941, r31	; 0x800941 <angle+0xd5>
     8d2:	e0 93 40 09 	sts	0x0940, r30	; 0x800940 <angle+0xd4>
     8d6:	30 93 43 09 	sts	0x0943, r19	; 0x800943 <angle+0xd7>
     8da:	20 93 42 09 	sts	0x0942, r18	; 0x800942 <angle+0xd6>
     8de:	10 92 45 09 	sts	0x0945, r1	; 0x800945 <angle+0xd9>
     8e2:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <angle+0xd8>
     8e6:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <angle+0xdb>
     8ea:	40 93 46 09 	sts	0x0946, r20	; 0x800946 <angle+0xda>
     8ee:	70 93 49 09 	sts	0x0949, r23	; 0x800949 <angle+0xdd>
     8f2:	60 93 48 09 	sts	0x0948, r22	; 0x800948 <angle+0xdc>
     8f6:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <angle+0xdf>
     8fa:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <angle+0xde>
     8fe:	b0 93 4d 09 	sts	0x094D, r27	; 0x80094d <angle+0xe1>
     902:	a0 93 4c 09 	sts	0x094C, r26	; 0x80094c <angle+0xe0>
     906:	f0 93 4f 09 	sts	0x094F, r31	; 0x80094f <angle+0xe3>
     90a:	e0 93 4e 09 	sts	0x094E, r30	; 0x80094e <angle+0xe2>
     90e:	30 93 51 09 	sts	0x0951, r19	; 0x800951 <angle+0xe5>
     912:	20 93 50 09 	sts	0x0950, r18	; 0x800950 <angle+0xe4>
     916:	90 93 53 09 	sts	0x0953, r25	; 0x800953 <angle+0xe7>
     91a:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <angle+0xe6>
     91e:	b0 93 55 09 	sts	0x0955, r27	; 0x800955 <angle+0xe9>
     922:	a0 93 54 09 	sts	0x0954, r26	; 0x800954 <angle+0xe8>
     926:	30 93 57 09 	sts	0x0957, r19	; 0x800957 <angle+0xeb>
     92a:	20 93 56 09 	sts	0x0956, r18	; 0x800956 <angle+0xea>
     92e:	70 93 59 09 	sts	0x0959, r23	; 0x800959 <angle+0xed>
     932:	60 93 58 09 	sts	0x0958, r22	; 0x800958 <angle+0xec>
     936:	50 93 5b 09 	sts	0x095B, r21	; 0x80095b <angle+0xef>
     93a:	40 93 5a 09 	sts	0x095A, r20	; 0x80095a <angle+0xee>
     93e:	b0 93 5d 09 	sts	0x095D, r27	; 0x80095d <angle+0xf1>
     942:	a0 93 5c 09 	sts	0x095C, r26	; 0x80095c <angle+0xf0>
     946:	30 93 5f 09 	sts	0x095F, r19	; 0x80095f <angle+0xf3>
     94a:	20 93 5e 09 	sts	0x095E, r18	; 0x80095e <angle+0xf2>
     94e:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <angle+0xf5>
     952:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <angle+0xf4>
     956:	f0 93 63 09 	sts	0x0963, r31	; 0x800963 <angle+0xf7>
     95a:	e0 93 62 09 	sts	0x0962, r30	; 0x800962 <angle+0xf6>
     95e:	30 93 65 09 	sts	0x0965, r19	; 0x800965 <angle+0xf9>
     962:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <angle+0xf8>
     966:	b0 93 67 09 	sts	0x0967, r27	; 0x800967 <angle+0xfb>
     96a:	a0 93 66 09 	sts	0x0966, r26	; 0x800966 <angle+0xfa>
     96e:	50 93 69 09 	sts	0x0969, r21	; 0x800969 <angle+0xfd>
     972:	40 93 68 09 	sts	0x0968, r20	; 0x800968 <angle+0xfc>
     976:	90 93 6b 09 	sts	0x096B, r25	; 0x80096b <angle+0xff>
     97a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <angle+0xfe>
     97e:	70 93 6d 09 	sts	0x096D, r23	; 0x80096d <angle+0x101>
     982:	60 93 6c 09 	sts	0x096C, r22	; 0x80096c <angle+0x100>
     986:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <angle+0x103>
     98a:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <angle+0x102>
     98e:	f0 93 71 09 	sts	0x0971, r31	; 0x800971 <angle+0x105>
     992:	e0 93 70 09 	sts	0x0970, r30	; 0x800970 <angle+0x104>
     996:	90 93 73 09 	sts	0x0973, r25	; 0x800973 <angle+0x107>
     99a:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <angle+0x106>
     99e:	70 93 75 09 	sts	0x0975, r23	; 0x800975 <angle+0x109>
     9a2:	60 93 74 09 	sts	0x0974, r22	; 0x800974 <angle+0x108>
     9a6:	f0 93 77 09 	sts	0x0977, r31	; 0x800977 <angle+0x10b>
     9aa:	e0 93 76 09 	sts	0x0976, r30	; 0x800976 <angle+0x10a>
     9ae:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <angle+0x10d>
     9b2:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <angle+0x10c>
     9b6:	b0 93 7b 09 	sts	0x097B, r27	; 0x80097b <angle+0x10f>
     9ba:	a0 93 7a 09 	sts	0x097A, r26	; 0x80097a <angle+0x10e>
     9be:	70 93 7d 09 	sts	0x097D, r23	; 0x80097d <angle+0x111>
     9c2:	60 93 7c 09 	sts	0x097C, r22	; 0x80097c <angle+0x110>
     9c6:	f0 93 7f 09 	sts	0x097F, r31	; 0x80097f <angle+0x113>
     9ca:	e0 93 7e 09 	sts	0x097E, r30	; 0x80097e <angle+0x112>
     9ce:	30 93 81 09 	sts	0x0981, r19	; 0x800981 <angle+0x115>
     9d2:	20 93 80 09 	sts	0x0980, r18	; 0x800980 <angle+0x114>
     9d6:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <angle+0x117>
     9da:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <angle+0x116>
     9de:	f0 93 85 09 	sts	0x0985, r31	; 0x800985 <angle+0x119>
     9e2:	e0 93 84 09 	sts	0x0984, r30	; 0x800984 <angle+0x118>
     9e6:	b0 93 87 09 	sts	0x0987, r27	; 0x800987 <angle+0x11b>
     9ea:	a0 93 86 09 	sts	0x0986, r26	; 0x800986 <angle+0x11a>
     9ee:	70 93 89 09 	sts	0x0989, r23	; 0x800989 <angle+0x11d>
     9f2:	60 93 88 09 	sts	0x0988, r22	; 0x800988 <angle+0x11c>
     9f6:	90 93 8b 09 	sts	0x098B, r25	; 0x80098b <angle+0x11f>
     9fa:	80 93 8a 09 	sts	0x098A, r24	; 0x80098a <angle+0x11e>
     9fe:	b0 93 8d 09 	sts	0x098D, r27	; 0x80098d <angle+0x121>
     a02:	a0 93 8c 09 	sts	0x098C, r26	; 0x80098c <angle+0x120>
     a06:	30 93 8f 09 	sts	0x098F, r19	; 0x80098f <angle+0x123>
     a0a:	20 93 8e 09 	sts	0x098E, r18	; 0x80098e <angle+0x122>
     a0e:	90 93 91 09 	sts	0x0991, r25	; 0x800991 <angle+0x125>
     a12:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <angle+0x124>
     a16:	90 93 93 09 	sts	0x0993, r25	; 0x800993 <angle+0x127>
     a1a:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <angle+0x126>
     a1e:	f0 93 95 09 	sts	0x0995, r31	; 0x800995 <angle+0x129>
     a22:	e0 93 94 09 	sts	0x0994, r30	; 0x800994 <angle+0x128>
     a26:	70 93 97 09 	sts	0x0997, r23	; 0x800997 <angle+0x12b>
     a2a:	60 93 96 09 	sts	0x0996, r22	; 0x800996 <angle+0x12a>
     a2e:	90 93 99 09 	sts	0x0999, r25	; 0x800999 <angle+0x12d>
     a32:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <angle+0x12c>
     a36:	90 93 9b 09 	sts	0x099B, r25	; 0x80099b <angle+0x12f>
     a3a:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <angle+0x12e>
     a3e:	70 93 9d 09 	sts	0x099D, r23	; 0x80099d <angle+0x131>
     a42:	60 93 9c 09 	sts	0x099C, r22	; 0x80099c <angle+0x130>
     a46:	f0 93 9f 09 	sts	0x099F, r31	; 0x80099f <angle+0x133>
     a4a:	e0 93 9e 09 	sts	0x099E, r30	; 0x80099e <angle+0x132>
     a4e:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <angle+0x135>
     a52:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <angle+0x134>
     a56:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <angle+0x137>
     a5a:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <angle+0x136>
     a5e:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <angle+0x139>
     a62:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <angle+0x138>
     a66:	50 93 a7 09 	sts	0x09A7, r21	; 0x8009a7 <angle+0x13b>
     a6a:	40 93 a6 09 	sts	0x09A6, r20	; 0x8009a6 <angle+0x13a>
     a6e:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <angle+0x13d>
     a72:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <angle+0x13c>
     a76:	90 93 ab 09 	sts	0x09AB, r25	; 0x8009ab <angle+0x13f>
     a7a:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <angle+0x13e>
     a7e:	50 93 ad 09 	sts	0x09AD, r21	; 0x8009ad <angle+0x141>
     a82:	40 93 ac 09 	sts	0x09AC, r20	; 0x8009ac <angle+0x140>
     a86:	10 92 af 09 	sts	0x09AF, r1	; 0x8009af <angle+0x143>
     a8a:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <angle+0x142>
     a8e:	90 93 b1 09 	sts	0x09B1, r25	; 0x8009b1 <angle+0x145>
     a92:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <angle+0x144>
     a96:	90 93 b3 09 	sts	0x09B3, r25	; 0x8009b3 <angle+0x147>
     a9a:	80 93 b2 09 	sts	0x09B2, r24	; 0x8009b2 <angle+0x146>
     a9e:	30 93 b5 09 	sts	0x09B5, r19	; 0x8009b5 <angle+0x149>
     aa2:	20 93 b4 09 	sts	0x09B4, r18	; 0x8009b4 <angle+0x148>
     aa6:	b0 93 b7 09 	sts	0x09B7, r27	; 0x8009b7 <angle+0x14b>
     aaa:	a0 93 b6 09 	sts	0x09B6, r26	; 0x8009b6 <angle+0x14a>
     aae:	90 93 b9 09 	sts	0x09B9, r25	; 0x8009b9 <angle+0x14d>
     ab2:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <angle+0x14c>
     ab6:	90 93 bb 09 	sts	0x09BB, r25	; 0x8009bb <angle+0x14f>
     aba:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <angle+0x14e>
     abe:	50 93 bd 09 	sts	0x09BD, r21	; 0x8009bd <angle+0x151>
     ac2:	40 93 bc 09 	sts	0x09BC, r20	; 0x8009bc <angle+0x150>
     ac6:	b0 93 bf 09 	sts	0x09BF, r27	; 0x8009bf <angle+0x153>
     aca:	a0 93 be 09 	sts	0x09BE, r26	; 0x8009be <angle+0x152>
     ace:	90 93 c1 09 	sts	0x09C1, r25	; 0x8009c1 <angle+0x155>
     ad2:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <angle+0x154>
     ad6:	90 93 c3 09 	sts	0x09C3, r25	; 0x8009c3 <angle+0x157>
     ada:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <angle+0x156>
     ade:	f0 93 c5 09 	sts	0x09C5, r31	; 0x8009c5 <angle+0x159>
     ae2:	e0 93 c4 09 	sts	0x09C4, r30	; 0x8009c4 <angle+0x158>
     ae6:	30 93 c7 09 	sts	0x09C7, r19	; 0x8009c7 <angle+0x15b>
     aea:	20 93 c6 09 	sts	0x09C6, r18	; 0x8009c6 <angle+0x15a>
     aee:	90 93 c9 09 	sts	0x09C9, r25	; 0x8009c9 <angle+0x15d>
     af2:	80 93 c8 09 	sts	0x09C8, r24	; 0x8009c8 <angle+0x15c>
     af6:	90 93 cb 09 	sts	0x09CB, r25	; 0x8009cb <angle+0x15f>
     afa:	80 93 ca 09 	sts	0x09CA, r24	; 0x8009ca <angle+0x15e>
     afe:	b0 93 cd 09 	sts	0x09CD, r27	; 0x8009cd <angle+0x161>
     b02:	a0 93 cc 09 	sts	0x09CC, r26	; 0x8009cc <angle+0x160>
     b06:	70 93 cf 09 	sts	0x09CF, r23	; 0x8009cf <angle+0x163>
     b0a:	60 93 ce 09 	sts	0x09CE, r22	; 0x8009ce <angle+0x162>
     b0e:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <angle+0x165>
     b12:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <angle+0x164>
     b16:	90 93 d3 09 	sts	0x09D3, r25	; 0x8009d3 <angle+0x167>
     b1a:	80 93 d2 09 	sts	0x09D2, r24	; 0x8009d2 <angle+0x166>
     b1e:	10 92 d5 09 	sts	0x09D5, r1	; 0x8009d5 <angle+0x169>
     b22:	10 92 d4 09 	sts	0x09D4, r1	; 0x8009d4 <angle+0x168>
     b26:	f0 93 d7 09 	sts	0x09D7, r31	; 0x8009d7 <angle+0x16b>
     b2a:	e0 93 d6 09 	sts	0x09D6, r30	; 0x8009d6 <angle+0x16a>
     b2e:	90 93 d9 09 	sts	0x09D9, r25	; 0x8009d9 <angle+0x16d>
     b32:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <angle+0x16c>
     b36:	90 93 db 09 	sts	0x09DB, r25	; 0x8009db <angle+0x16f>
     b3a:	80 93 da 09 	sts	0x09DA, r24	; 0x8009da <angle+0x16e>
     b3e:	70 93 dd 09 	sts	0x09DD, r23	; 0x8009dd <angle+0x171>
     b42:	60 93 dc 09 	sts	0x09DC, r22	; 0x8009dc <angle+0x170>
     b46:	50 93 df 09 	sts	0x09DF, r21	; 0x8009df <angle+0x173>
     b4a:	40 93 de 09 	sts	0x09DE, r20	; 0x8009de <angle+0x172>
     b4e:	90 93 e1 09 	sts	0x09E1, r25	; 0x8009e1 <angle+0x175>
     b52:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <angle+0x174>
     b56:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <angle+0x177>
     b5a:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <angle+0x176>
     b5e:	30 93 e5 09 	sts	0x09E5, r19	; 0x8009e5 <angle+0x179>
     b62:	20 93 e4 09 	sts	0x09E4, r18	; 0x8009e4 <angle+0x178>
     b66:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <angle+0x17b>
     b6a:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <angle+0x17a>
     b6e:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <angle+0x17d>
     b72:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <angle+0x17c>
     b76:	90 93 eb 09 	sts	0x09EB, r25	; 0x8009eb <angle+0x17f>
     b7a:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <angle+0x17e>
     b7e:	e3 ed       	ldi	r30, 0xD3	; 211
     b80:	f6 e0       	ldi	r31, 0x06	; 6
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	80 83       	st	Z, r24
     b8a:	28 e1       	ldi	r18, 0x18	; 24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	33 83       	std	Z+3, r19	; 0x03
     b90:	22 83       	std	Z+2, r18	; 0x02
     b92:	15 82       	std	Z+5, r1	; 0x05
     b94:	14 82       	std	Z+4, r1	; 0x04
     b96:	17 82       	std	Z+7, r1	; 0x07
     b98:	16 82       	std	Z+6, r1	; 0x06
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	31 87       	std	Z+9, r19	; 0x09
     ba0:	20 87       	std	Z+8, r18	; 0x08
     ba2:	23 e0       	ldi	r18, 0x03	; 3
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	33 87       	std	Z+11, r19	; 0x0b
     ba8:	22 87       	std	Z+10, r18	; 0x0a
     baa:	15 86       	std	Z+13, r1	; 0x0d
     bac:	14 86       	std	Z+12, r1	; 0x0c
     bae:	17 86       	std	Z+15, r1	; 0x0f
     bb0:	16 86       	std	Z+14, r1	; 0x0e
     bb2:	91 8b       	std	Z+17, r25	; 0x11
     bb4:	80 8b       	std	Z+16, r24	; 0x10
     bb6:	84 e0       	ldi	r24, 0x04	; 4
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	93 8b       	std	Z+19, r25	; 0x13
     bbc:	82 8b       	std	Z+18, r24	; 0x12
     bbe:	49 e1       	ldi	r20, 0x19	; 25
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	55 8b       	std	Z+21, r21	; 0x15
     bc4:	44 8b       	std	Z+20, r20	; 0x14
     bc6:	44 e2       	ldi	r20, 0x24	; 36
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	57 8b       	std	Z+23, r21	; 0x17
     bcc:	46 8b       	std	Z+22, r20	; 0x16
     bce:	31 8f       	std	Z+25, r19	; 0x19
     bd0:	20 8f       	std	Z+24, r18	; 0x18
     bd2:	25 e0       	ldi	r18, 0x05	; 5
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	33 8f       	std	Z+27, r19	; 0x1b
     bd8:	22 8f       	std	Z+26, r18	; 0x1a
     bda:	15 8e       	std	Z+29, r1	; 0x1d
     bdc:	14 8e       	std	Z+28, r1	; 0x1c
     bde:	17 8e       	std	Z+31, r1	; 0x1f
     be0:	16 8e       	std	Z+30, r1	; 0x1e
     be2:	91 a3       	std	Z+33, r25	; 0x21
     be4:	80 a3       	std	Z+32, r24	; 0x20
     be6:	86 e0       	ldi	r24, 0x06	; 6
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	93 a3       	std	Z+35, r25	; 0x23
     bec:	82 a3       	std	Z+34, r24	; 0x22
     bee:	15 a2       	std	Z+37, r1	; 0x25
     bf0:	14 a2       	std	Z+36, r1	; 0x24
     bf2:	17 a2       	std	Z+39, r1	; 0x27
     bf4:	16 a2       	std	Z+38, r1	; 0x26
     bf6:	31 a7       	std	Z+41, r19	; 0x29
     bf8:	20 a7       	std	Z+40, r18	; 0x28
     bfa:	27 e0       	ldi	r18, 0x07	; 7
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	33 a7       	std	Z+43, r19	; 0x2b
     c00:	22 a7       	std	Z+42, r18	; 0x2a
     c02:	15 a6       	std	Z+45, r1	; 0x2d
     c04:	14 a6       	std	Z+44, r1	; 0x2c
     c06:	17 a6       	std	Z+47, r1	; 0x2f
     c08:	16 a6       	std	Z+46, r1	; 0x2e
     c0a:	91 ab       	std	Z+49, r25	; 0x31
     c0c:	80 ab       	std	Z+48, r24	; 0x30
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	93 ab       	std	Z+51, r25	; 0x33
     c14:	82 ab       	std	Z+50, r24	; 0x32
     c16:	45 e2       	ldi	r20, 0x25	; 37
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	55 ab       	std	Z+53, r21	; 0x35
     c1c:	44 ab       	std	Z+52, r20	; 0x34
     c1e:	46 e2       	ldi	r20, 0x26	; 38
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	57 ab       	std	Z+55, r21	; 0x37
     c24:	46 ab       	std	Z+54, r20	; 0x36
     c26:	31 af       	std	Z+57, r19	; 0x39
     c28:	20 af       	std	Z+56, r18	; 0x38
     c2a:	29 e0       	ldi	r18, 0x09	; 9
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	33 af       	std	Z+59, r19	; 0x3b
     c30:	22 af       	std	Z+58, r18	; 0x3a
     c32:	15 ae       	std	Z+61, r1	; 0x3d
     c34:	14 ae       	std	Z+60, r1	; 0x3c
     c36:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <node+0x3f>
     c3a:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <node+0x3e>
     c3e:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <node+0x41>
     c42:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <node+0x40>
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <node+0x43>
     c4e:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <node+0x42>
     c52:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <node+0x45>
     c56:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <node+0x44>
     c5a:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <node+0x47>
     c5e:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <node+0x46>
     c62:	30 93 1c 07 	sts	0x071C, r19	; 0x80071c <node+0x49>
     c66:	20 93 1b 07 	sts	0x071B, r18	; 0x80071b <node+0x48>
     c6a:	2b e0       	ldi	r18, 0x0B	; 11
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	30 93 1e 07 	sts	0x071E, r19	; 0x80071e <node+0x4b>
     c72:	20 93 1d 07 	sts	0x071D, r18	; 0x80071d <node+0x4a>
     c76:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <node+0x4d>
     c7a:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <node+0x4c>
     c7e:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <node+0x4f>
     c82:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <node+0x4e>
     c86:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <node+0x51>
     c8a:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <node+0x50>
     c8e:	8c e0       	ldi	r24, 0x0C	; 12
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <node+0x53>
     c96:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <node+0x52>
     c9a:	4c e1       	ldi	r20, 0x1C	; 28
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	50 93 28 07 	sts	0x0728, r21	; 0x800728 <node+0x55>
     ca2:	40 93 27 07 	sts	0x0727, r20	; 0x800727 <node+0x54>
     ca6:	4d e1       	ldi	r20, 0x1D	; 29
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	50 93 2a 07 	sts	0x072A, r21	; 0x80072a <node+0x57>
     cae:	40 93 29 07 	sts	0x0729, r20	; 0x800729 <node+0x56>
     cb2:	30 93 2c 07 	sts	0x072C, r19	; 0x80072c <node+0x59>
     cb6:	20 93 2b 07 	sts	0x072B, r18	; 0x80072b <node+0x58>
     cba:	2d e0       	ldi	r18, 0x0D	; 13
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	30 93 2e 07 	sts	0x072E, r19	; 0x80072e <node+0x5b>
     cc2:	20 93 2d 07 	sts	0x072D, r18	; 0x80072d <node+0x5a>
     cc6:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <node+0x5d>
     cca:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <node+0x5c>
     cce:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <node+0x5f>
     cd2:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <node+0x5e>
     cd6:	90 93 34 07 	sts	0x0734, r25	; 0x800734 <node+0x61>
     cda:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <node+0x60>
     cde:	8e e0       	ldi	r24, 0x0E	; 14
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <node+0x63>
     ce6:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <node+0x62>
     cea:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <node+0x65>
     cee:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <node+0x64>
     cf2:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <node+0x67>
     cf6:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <node+0x66>
     cfa:	30 93 3c 07 	sts	0x073C, r19	; 0x80073c <node+0x69>
     cfe:	20 93 3b 07 	sts	0x073B, r18	; 0x80073b <node+0x68>
     d02:	d0 93 3e 07 	sts	0x073E, r29	; 0x80073e <node+0x6b>
     d06:	c0 93 3d 07 	sts	0x073D, r28	; 0x80073d <node+0x6a>
     d0a:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <node+0x6d>
     d0e:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <node+0x6c>
     d12:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <node+0x6f>
     d16:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <node+0x6e>
     d1a:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <node+0x71>
     d1e:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <node+0x70>
     d22:	20 e1       	ldi	r18, 0x10	; 16
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	30 93 46 07 	sts	0x0746, r19	; 0x800746 <node+0x73>
     d2a:	20 93 45 07 	sts	0x0745, r18	; 0x800745 <node+0x72>
     d2e:	87 e2       	ldi	r24, 0x27	; 39
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <node+0x75>
     d36:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <node+0x74>
     d3a:	88 e2       	ldi	r24, 0x28	; 40
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <node+0x77>
     d42:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <node+0x76>
     d46:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <node+0x79>
     d4a:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <node+0x78>
     d4e:	81 e1       	ldi	r24, 0x11	; 17
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <node+0x7b>
     d56:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <node+0x7a>
     d5a:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <node+0x7d>
     d5e:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <node+0x7c>
     d62:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <node+0x7f>
     d66:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <node+0x7e>
     d6a:	30 93 54 07 	sts	0x0754, r19	; 0x800754 <node+0x81>
     d6e:	20 93 53 07 	sts	0x0753, r18	; 0x800753 <node+0x80>
     d72:	22 e1       	ldi	r18, 0x12	; 18
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	30 93 56 07 	sts	0x0756, r19	; 0x800756 <node+0x83>
     d7a:	20 93 55 07 	sts	0x0755, r18	; 0x800755 <node+0x82>
     d7e:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <node+0x85>
     d82:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <node+0x84>
     d86:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <node+0x87>
     d8a:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <node+0x86>
     d8e:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <node+0x89>
     d92:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <node+0x88>
     d96:	83 e1       	ldi	r24, 0x13	; 19
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <node+0x8b>
     d9e:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <node+0x8a>
     da2:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <node+0x8d>
     da6:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <node+0x8c>
     daa:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <node+0x8f>
     dae:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <node+0x8e>
     db2:	30 93 64 07 	sts	0x0764, r19	; 0x800764 <node+0x91>
     db6:	20 93 63 07 	sts	0x0763, r18	; 0x800763 <node+0x90>
     dba:	24 e1       	ldi	r18, 0x14	; 20
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	30 93 66 07 	sts	0x0766, r19	; 0x800766 <node+0x93>
     dc2:	20 93 65 07 	sts	0x0765, r18	; 0x800765 <node+0x92>
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	50 93 68 07 	sts	0x0768, r21	; 0x800768 <node+0x95>
     dce:	40 93 67 07 	sts	0x0767, r20	; 0x800767 <node+0x94>
     dd2:	41 e2       	ldi	r20, 0x21	; 33
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	50 93 6a 07 	sts	0x076A, r21	; 0x80076a <node+0x97>
     dda:	40 93 69 07 	sts	0x0769, r20	; 0x800769 <node+0x96>
     dde:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <node+0x99>
     de2:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <node+0x98>
     de6:	85 e1       	ldi	r24, 0x15	; 21
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 6e 07 	sts	0x076E, r25	; 0x80076e <node+0x9b>
     dee:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <node+0x9a>
     df2:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <node+0x9d>
     df6:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <node+0x9c>
     dfa:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <node+0x9f>
     dfe:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <node+0x9e>
     e02:	30 93 74 07 	sts	0x0774, r19	; 0x800774 <node+0xa1>
     e06:	20 93 73 07 	sts	0x0773, r18	; 0x800773 <node+0xa0>
     e0a:	26 e1       	ldi	r18, 0x16	; 22
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	30 93 76 07 	sts	0x0776, r19	; 0x800776 <node+0xa3>
     e12:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <node+0xa2>
     e16:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <node+0xa5>
     e1a:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <node+0xa4>
     e1e:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <node+0xa7>
     e22:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <node+0xa6>
     e26:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <node+0xa9>
     e2a:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <node+0xa8>
     e2e:	87 e1       	ldi	r24, 0x17	; 23
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 7e 07 	sts	0x077E, r25	; 0x80077e <node+0xab>
     e36:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <node+0xaa>
     e3a:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <node+0xad>
     e3e:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <node+0xac>
     e42:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <node+0xaf>
     e46:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <node+0xae>
     e4a:	86 e1       	ldi	r24, 0x16	; 22
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <node+0xb1>
     e52:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <node+0xb0>
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 86 07 	sts	0x0786, r25	; 0x800786 <node+0xb3>
     e5e:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <node+0xb2>
     e62:	c9 e2       	ldi	r28, 0x29	; 41
     e64:	d0 e0       	ldi	r29, 0x00	; 0
     e66:	d0 93 88 07 	sts	0x0788, r29	; 0x800788 <node+0xb5>
     e6a:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <node+0xb4>
     e6e:	0f 2e       	mov	r0, r31
     e70:	fa e2       	ldi	r31, 0x2A	; 42
     e72:	af 2e       	mov	r10, r31
     e74:	b1 2c       	mov	r11, r1
     e76:	f0 2d       	mov	r31, r0
     e78:	b0 92 8a 07 	sts	0x078A, r11	; 0x80078a <node+0xb7>
     e7c:	a0 92 89 07 	sts	0x0789, r10	; 0x800789 <node+0xb6>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	90 93 8c 07 	sts	0x078C, r25	; 0x80078c <node+0xb9>
     e88:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <node+0xb8>
     e8c:	e7 e1       	ldi	r30, 0x17	; 23
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	f0 93 8e 07 	sts	0x078E, r31	; 0x80078e <node+0xbb>
     e94:	e0 93 8d 07 	sts	0x078D, r30	; 0x80078d <node+0xba>
     e98:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <node+0xbd>
     e9c:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <node+0xbc>
     ea0:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <node+0xbf>
     ea4:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <node+0xbe>
     ea8:	0f 2e       	mov	r0, r31
     eaa:	f3 e0       	ldi	r31, 0x03	; 3
     eac:	8f 2e       	mov	r8, r31
     eae:	91 2c       	mov	r9, r1
     eb0:	f0 2d       	mov	r31, r0
     eb2:	90 92 94 07 	sts	0x0794, r9	; 0x800794 <node+0xc1>
     eb6:	80 92 93 07 	sts	0x0793, r8	; 0x800793 <node+0xc0>
     eba:	6a e1       	ldi	r22, 0x1A	; 26
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	70 93 96 07 	sts	0x0796, r23	; 0x800796 <node+0xc3>
     ec2:	60 93 95 07 	sts	0x0795, r22	; 0x800795 <node+0xc2>
     ec6:	a4 e2       	ldi	r26, 0x24	; 36
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	b0 93 98 07 	sts	0x0798, r27	; 0x800798 <node+0xc5>
     ece:	a0 93 97 07 	sts	0x0797, r26	; 0x800797 <node+0xc4>
     ed2:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <node+0xc7>
     ed6:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <node+0xc6>
     eda:	0f 2e       	mov	r0, r31
     edc:	f9 e1       	ldi	r31, 0x19	; 25
     ede:	6f 2e       	mov	r6, r31
     ee0:	71 2c       	mov	r7, r1
     ee2:	f0 2d       	mov	r31, r0
     ee4:	70 92 9c 07 	sts	0x079C, r7	; 0x80079c <node+0xc9>
     ee8:	60 92 9b 07 	sts	0x079B, r6	; 0x80079b <node+0xc8>
     eec:	4b e1       	ldi	r20, 0x1B	; 27
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	50 93 9e 07 	sts	0x079E, r21	; 0x80079e <node+0xcb>
     ef4:	40 93 9d 07 	sts	0x079D, r20	; 0x80079d <node+0xca>
     ef8:	85 e2       	ldi	r24, 0x25	; 37
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <node+0xcd>
     f00:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <node+0xcc>
     f04:	0f 2e       	mov	r0, r31
     f06:	fc e2       	ldi	r31, 0x2C	; 44
     f08:	4f 2e       	mov	r4, r31
     f0a:	51 2c       	mov	r5, r1
     f0c:	f0 2d       	mov	r31, r0
     f0e:	50 92 a2 07 	sts	0x07A2, r5	; 0x8007a2 <node+0xcf>
     f12:	40 92 a1 07 	sts	0x07A1, r4	; 0x8007a1 <node+0xce>
     f16:	70 93 a4 07 	sts	0x07A4, r23	; 0x8007a4 <node+0xd1>
     f1a:	60 93 a3 07 	sts	0x07A3, r22	; 0x8007a3 <node+0xd0>
     f1e:	2c e1       	ldi	r18, 0x1C	; 28
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	30 93 a6 07 	sts	0x07A6, r19	; 0x8007a6 <node+0xd3>
     f26:	20 93 a5 07 	sts	0x07A5, r18	; 0x8007a5 <node+0xd2>
     f2a:	86 e2       	ldi	r24, 0x26	; 38
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 93 a8 07 	sts	0x07A8, r25	; 0x8007a8 <node+0xd5>
     f32:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <node+0xd4>
     f36:	0d e2       	ldi	r16, 0x2D	; 45
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	10 93 aa 07 	sts	0x07AA, r17	; 0x8007aa <node+0xd7>
     f3e:	00 93 a9 07 	sts	0x07A9, r16	; 0x8007a9 <node+0xd6>
     f42:	0b e0       	ldi	r16, 0x0B	; 11
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	10 93 ac 07 	sts	0x07AC, r17	; 0x8007ac <node+0xd9>
     f4a:	00 93 ab 07 	sts	0x07AB, r16	; 0x8007ab <node+0xd8>
     f4e:	50 93 ae 07 	sts	0x07AE, r21	; 0x8007ae <node+0xdb>
     f52:	40 93 ad 07 	sts	0x07AD, r20	; 0x8007ad <node+0xda>
     f56:	8d e1       	ldi	r24, 0x1D	; 29
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	90 93 b0 07 	sts	0x07B0, r25	; 0x8007b0 <node+0xdd>
     f5e:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <node+0xdc>
     f62:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <node+0xdf>
     f66:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <node+0xde>
     f6a:	10 93 b4 07 	sts	0x07B4, r17	; 0x8007b4 <node+0xe1>
     f6e:	00 93 b3 07 	sts	0x07B3, r16	; 0x8007b3 <node+0xe0>
     f72:	30 93 b6 07 	sts	0x07B6, r19	; 0x8007b6 <node+0xe3>
     f76:	20 93 b5 07 	sts	0x07B5, r18	; 0x8007b5 <node+0xe2>
     f7a:	2e e1       	ldi	r18, 0x1E	; 30
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	30 93 b8 07 	sts	0x07B8, r19	; 0x8007b8 <node+0xe5>
     f82:	20 93 b7 07 	sts	0x07B7, r18	; 0x8007b7 <node+0xe4>
     f86:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <node+0xe7>
     f8a:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <node+0xe6>
     f8e:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <node+0xe9>
     f92:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <node+0xe8>
     f96:	8f e1       	ldi	r24, 0x1F	; 31
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <node+0xeb>
     f9e:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <node+0xea>
     fa2:	07 e2       	ldi	r16, 0x27	; 39
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	10 93 c0 07 	sts	0x07C0, r17	; 0x8007c0 <node+0xed>
     faa:	00 93 bf 07 	sts	0x07BF, r16	; 0x8007bf <node+0xec>
     fae:	0f 2e       	mov	r0, r31
     fb0:	fe e2       	ldi	r31, 0x2E	; 46
     fb2:	2f 2e       	mov	r2, r31
     fb4:	31 2c       	mov	r3, r1
     fb6:	f0 2d       	mov	r31, r0
     fb8:	30 92 c2 07 	sts	0x07C2, r3	; 0x8007c2 <node+0xef>
     fbc:	20 92 c1 07 	sts	0x07C1, r2	; 0x8007c1 <node+0xee>
     fc0:	30 93 c4 07 	sts	0x07C4, r19	; 0x8007c4 <node+0xf1>
     fc4:	20 93 c3 07 	sts	0x07C3, r18	; 0x8007c3 <node+0xf0>
     fc8:	68 94       	set
     fca:	ee 24       	eor	r14, r14
     fcc:	e5 f8       	bld	r14, 5
     fce:	f1 2c       	mov	r15, r1
     fd0:	f0 92 c6 07 	sts	0x07C6, r15	; 0x8007c6 <node+0xf3>
     fd4:	e0 92 c5 07 	sts	0x07C5, r14	; 0x8007c5 <node+0xf2>
     fd8:	08 e2       	ldi	r16, 0x28	; 40
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	10 93 c8 07 	sts	0x07C8, r17	; 0x8007c8 <node+0xf5>
     fe0:	00 93 c7 07 	sts	0x07C7, r16	; 0x8007c7 <node+0xf4>
     fe4:	0f 2e       	mov	r0, r31
     fe6:	ff e2       	ldi	r31, 0x2F	; 47
     fe8:	cf 2e       	mov	r12, r31
     fea:	d1 2c       	mov	r13, r1
     fec:	f0 2d       	mov	r31, r0
     fee:	d0 92 ca 07 	sts	0x07CA, r13	; 0x8007ca <node+0xf7>
     ff2:	c0 92 c9 07 	sts	0x07C9, r12	; 0x8007c9 <node+0xf6>
     ff6:	0f 2e       	mov	r0, r31
     ff8:	f3 e1       	ldi	r31, 0x13	; 19
     ffa:	cf 2e       	mov	r12, r31
     ffc:	d1 2c       	mov	r13, r1
     ffe:	f0 2d       	mov	r31, r0
    1000:	d0 92 cc 07 	sts	0x07CC, r13	; 0x8007cc <node+0xf9>
    1004:	c0 92 cb 07 	sts	0x07CB, r12	; 0x8007cb <node+0xf8>
    1008:	90 93 ce 07 	sts	0x07CE, r25	; 0x8007ce <node+0xfb>
    100c:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <node+0xfa>
    1010:	01 e2       	ldi	r16, 0x21	; 33
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	10 93 d0 07 	sts	0x07D0, r17	; 0x8007d0 <node+0xfd>
    1018:	00 93 cf 07 	sts	0x07CF, r16	; 0x8007cf <node+0xfc>
    101c:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <node+0xff>
    1020:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <node+0xfe>
    1024:	d0 92 d4 07 	sts	0x07D4, r13	; 0x8007d4 <node+0x101>
    1028:	c0 92 d3 07 	sts	0x07D3, r12	; 0x8007d3 <node+0x100>
    102c:	f0 92 d6 07 	sts	0x07D6, r15	; 0x8007d6 <node+0x103>
    1030:	e0 92 d5 07 	sts	0x07D5, r14	; 0x8007d5 <node+0x102>
    1034:	0f 2e       	mov	r0, r31
    1036:	f2 e2       	ldi	r31, 0x22	; 34
    1038:	ef 2e       	mov	r14, r31
    103a:	f1 2c       	mov	r15, r1
    103c:	f0 2d       	mov	r31, r0
    103e:	f0 92 d8 07 	sts	0x07D8, r15	; 0x8007d8 <node+0x105>
    1042:	e0 92 d7 07 	sts	0x07D7, r14	; 0x8007d7 <node+0x104>
    1046:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <node+0x107>
    104a:	10 92 d9 07 	sts	0x07D9, r1	; 0x8007d9 <node+0x106>
    104e:	10 93 dc 07 	sts	0x07DC, r17	; 0x8007dc <node+0x109>
    1052:	00 93 db 07 	sts	0x07DB, r16	; 0x8007db <node+0x108>
    1056:	03 e2       	ldi	r16, 0x23	; 35
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	10 93 de 07 	sts	0x07DE, r17	; 0x8007de <node+0x10b>
    105e:	00 93 dd 07 	sts	0x07DD, r16	; 0x8007dd <node+0x10a>
    1062:	d0 93 e0 07 	sts	0x07E0, r29	; 0x8007e0 <node+0x10d>
    1066:	c0 93 df 07 	sts	0x07DF, r28	; 0x8007df <node+0x10c>
    106a:	c0 e3       	ldi	r28, 0x30	; 48
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	d0 93 e2 07 	sts	0x07E2, r29	; 0x8007e2 <node+0x10f>
    1072:	c0 93 e1 07 	sts	0x07E1, r28	; 0x8007e1 <node+0x10e>
    1076:	f0 92 e4 07 	sts	0x07E4, r15	; 0x8007e4 <node+0x111>
    107a:	e0 92 e3 07 	sts	0x07E3, r14	; 0x8007e3 <node+0x110>
    107e:	b0 93 e6 07 	sts	0x07E6, r27	; 0x8007e6 <node+0x113>
    1082:	a0 93 e5 07 	sts	0x07E5, r26	; 0x8007e5 <node+0x112>
    1086:	b0 92 e8 07 	sts	0x07E8, r11	; 0x8007e8 <node+0x115>
    108a:	a0 92 e7 07 	sts	0x07E7, r10	; 0x8007e7 <node+0x114>
    108e:	ab e2       	ldi	r26, 0x2B	; 43
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	b0 93 ea 07 	sts	0x07EA, r27	; 0x8007ea <node+0x117>
    1096:	a0 93 e9 07 	sts	0x07E9, r26	; 0x8007e9 <node+0x116>
    109a:	90 92 ec 07 	sts	0x07EC, r9	; 0x8007ec <node+0x119>
    109e:	80 92 eb 07 	sts	0x07EB, r8	; 0x8007eb <node+0x118>
    10a2:	70 92 ee 07 	sts	0x07EE, r7	; 0x8007ee <node+0x11b>
    10a6:	60 92 ed 07 	sts	0x07ED, r6	; 0x8007ed <node+0x11a>
    10aa:	10 93 f0 07 	sts	0x07F0, r17	; 0x8007f0 <node+0x11d>
    10ae:	00 93 ef 07 	sts	0x07EF, r16	; 0x8007ef <node+0x11c>
    10b2:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <node+0x11f>
    10b6:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <node+0x11e>
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f7 e0       	ldi	r31, 0x07	; 7
    10be:	cf 2e       	mov	r12, r31
    10c0:	d1 2c       	mov	r13, r1
    10c2:	f0 2d       	mov	r31, r0
    10c4:	d0 92 f4 07 	sts	0x07F4, r13	; 0x8007f4 <node+0x121>
    10c8:	c0 92 f3 07 	sts	0x07F3, r12	; 0x8007f3 <node+0x120>
    10cc:	70 93 f6 07 	sts	0x07F6, r23	; 0x8007f6 <node+0x123>
    10d0:	60 93 f5 07 	sts	0x07F5, r22	; 0x8007f5 <node+0x122>
    10d4:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <node+0x125>
    10d8:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <node+0x124>
    10dc:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <node+0x127>
    10e0:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <node+0x126>
    10e4:	d0 92 fc 07 	sts	0x07FC, r13	; 0x8007fc <node+0x129>
    10e8:	c0 92 fb 07 	sts	0x07FB, r12	; 0x8007fb <node+0x128>
    10ec:	50 93 fe 07 	sts	0x07FE, r21	; 0x8007fe <node+0x12b>
    10f0:	40 93 fd 07 	sts	0x07FD, r20	; 0x8007fd <node+0x12a>
    10f4:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <node+0x12d>
    10f8:	10 92 ff 07 	sts	0x07FF, r1	; 0x8007ff <node+0x12c>
    10fc:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <node+0x12f>
    1100:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <node+0x12e>
    1104:	0f 2e       	mov	r0, r31
    1106:	ff e0       	ldi	r31, 0x0F	; 15
    1108:	cf 2e       	mov	r12, r31
    110a:	d1 2c       	mov	r13, r1
    110c:	f0 2d       	mov	r31, r0
    110e:	d0 92 04 08 	sts	0x0804, r13	; 0x800804 <node+0x131>
    1112:	c0 92 03 08 	sts	0x0803, r12	; 0x800803 <node+0x130>
    1116:	30 93 06 08 	sts	0x0806, r19	; 0x800806 <node+0x133>
    111a:	20 93 05 08 	sts	0x0805, r18	; 0x800805 <node+0x132>
    111e:	10 92 08 08 	sts	0x0808, r1	; 0x800808 <node+0x135>
    1122:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <node+0x134>
    1126:	10 92 0a 08 	sts	0x080A, r1	; 0x80080a <node+0x137>
    112a:	10 92 09 08 	sts	0x0809, r1	; 0x800809 <node+0x136>
    112e:	d0 92 0c 08 	sts	0x080C, r13	; 0x80080c <node+0x139>
    1132:	c0 92 0b 08 	sts	0x080B, r12	; 0x80080b <node+0x138>
    1136:	90 93 0e 08 	sts	0x080E, r25	; 0x80080e <node+0x13b>
    113a:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <node+0x13a>
    113e:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <node+0x13d>
    1142:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <node+0x13c>
    1146:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <node+0x13f>
    114a:	10 92 11 08 	sts	0x0811, r1	; 0x800811 <node+0x13e>
    114e:	f0 93 14 08 	sts	0x0814, r31	; 0x800814 <node+0x141>
    1152:	e0 93 13 08 	sts	0x0813, r30	; 0x800813 <node+0x140>
    1156:	f0 92 16 08 	sts	0x0816, r15	; 0x800816 <node+0x143>
    115a:	e0 92 15 08 	sts	0x0815, r14	; 0x800815 <node+0x142>
    115e:	10 92 18 08 	sts	0x0818, r1	; 0x800818 <node+0x145>
    1162:	10 92 17 08 	sts	0x0817, r1	; 0x800817 <node+0x144>
    1166:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <node+0x147>
    116a:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <node+0x146>
    116e:	f0 93 1c 08 	sts	0x081C, r31	; 0x80081c <node+0x149>
    1172:	e0 93 1b 08 	sts	0x081B, r30	; 0x80081b <node+0x148>
    1176:	10 93 1e 08 	sts	0x081E, r17	; 0x80081e <node+0x14b>
    117a:	00 93 1d 08 	sts	0x081D, r16	; 0x80081d <node+0x14a>
    117e:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <node+0x14d>
    1182:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <node+0x14c>
    1186:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <node+0x14f>
    118a:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <node+0x14e>
    118e:	10 93 24 08 	sts	0x0824, r17	; 0x800824 <node+0x151>
    1192:	00 93 23 08 	sts	0x0823, r16	; 0x800823 <node+0x150>
    1196:	50 92 26 08 	sts	0x0826, r5	; 0x800826 <node+0x153>
    119a:	40 92 25 08 	sts	0x0825, r4	; 0x800825 <node+0x152>
    119e:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <node+0x155>
    11a2:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <node+0x154>
    11a6:	10 92 2a 08 	sts	0x082A, r1	; 0x80082a <node+0x157>
    11aa:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <node+0x156>
    11ae:	70 93 2c 08 	sts	0x082C, r23	; 0x80082c <node+0x159>
    11b2:	60 93 2b 08 	sts	0x082B, r22	; 0x80082b <node+0x158>
    11b6:	b0 93 2e 08 	sts	0x082E, r27	; 0x80082e <node+0x15b>
    11ba:	a0 93 2d 08 	sts	0x082D, r26	; 0x80082d <node+0x15a>
    11be:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <node+0x15d>
    11c2:	10 92 2f 08 	sts	0x082F, r1	; 0x80082f <node+0x15c>
    11c6:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <node+0x15f>
    11ca:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <node+0x15e>
    11ce:	50 93 34 08 	sts	0x0834, r21	; 0x800834 <node+0x161>
    11d2:	40 93 33 08 	sts	0x0833, r20	; 0x800833 <node+0x160>
    11d6:	30 92 36 08 	sts	0x0836, r3	; 0x800836 <node+0x163>
    11da:	20 92 35 08 	sts	0x0835, r2	; 0x800835 <node+0x162>
    11de:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <node+0x165>
    11e2:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <node+0x164>
    11e6:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <node+0x167>
    11ea:	10 92 39 08 	sts	0x0839, r1	; 0x800839 <node+0x166>
    11ee:	30 93 3c 08 	sts	0x083C, r19	; 0x80083c <node+0x169>
    11f2:	20 93 3b 08 	sts	0x083B, r18	; 0x80083b <node+0x168>
    11f6:	0d e2       	ldi	r16, 0x2D	; 45
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	10 93 3e 08 	sts	0x083E, r17	; 0x80083e <node+0x16b>
    11fe:	00 93 3d 08 	sts	0x083D, r16	; 0x80083d <node+0x16a>
    1202:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <node+0x16d>
    1206:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <node+0x16c>
    120a:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <node+0x16f>
    120e:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <node+0x16e>
    1212:	90 93 44 08 	sts	0x0844, r25	; 0x800844 <node+0x171>
    1216:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <node+0x170>
    121a:	d0 93 46 08 	sts	0x0846, r29	; 0x800846 <node+0x173>
    121e:	c0 93 45 08 	sts	0x0845, r28	; 0x800845 <node+0x172>
    1222:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <node+0x175>
    1226:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <node+0x174>
    122a:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <node+0x177>
    122e:	10 92 49 08 	sts	0x0849, r1	; 0x800849 <node+0x176>
    1232:	f0 92 4c 08 	sts	0x084C, r15	; 0x80084c <node+0x179>
    1236:	e0 92 4b 08 	sts	0x084B, r14	; 0x80084b <node+0x178>
    123a:	2f e2       	ldi	r18, 0x2F	; 47
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	30 93 4e 08 	sts	0x084E, r19	; 0x80084e <node+0x17b>
    1242:	20 93 4d 08 	sts	0x084D, r18	; 0x80084d <node+0x17a>
    1246:	10 92 50 08 	sts	0x0850, r1	; 0x800850 <node+0x17d>
    124a:	10 92 4f 08 	sts	0x084F, r1	; 0x80084f <node+0x17c>
    124e:	10 92 52 08 	sts	0x0852, r1	; 0x800852 <node+0x17f>
    1252:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <node+0x17e>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	9f 90       	pop	r9
    126c:	8f 90       	pop	r8
    126e:	7f 90       	pop	r7
    1270:	6f 90       	pop	r6
    1272:	5f 90       	pop	r5
    1274:	4f 90       	pop	r4
    1276:	3f 90       	pop	r3
    1278:	2f 90       	pop	r2
    127a:	08 95       	ret

0000127c <__vector_25>:
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    129e:	88 23       	and	r24, r24
    12a0:	0c f0       	brlt	.+2      	; 0x12a4 <__vector_25+0x28>
    12a2:	58 c0       	rjmp	.+176    	; 0x1354 <__vector_25+0xd8>
    12a4:	98 2f       	mov	r25, r24
    12a6:	9f 77       	andi	r25, 0x7F	; 127
    12a8:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <lastCommand>
    12ac:	4e 2f       	mov	r20, r30
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	fa 01       	movw	r30, r20
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	ea 30       	cpi	r30, 0x0A	; 10
    12b6:	f1 05       	cpc	r31, r1
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__vector_25+0x40>
    12ba:	53 c0       	rjmp	.+166    	; 0x1362 <__vector_25+0xe6>
    12bc:	88 27       	eor	r24, r24
    12be:	ee 58       	subi	r30, 0x8E	; 142
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__tablejump2__>
    12c8:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <noteCount>
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	e3 5a       	subi	r30, 0xA3	; 163
    12d0:	f9 4f       	sbci	r31, 0xF9	; 249
    12d2:	90 83       	st	Z, r25
    12d4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <noteCount>
    12de:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    12e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    12e6:	3d c0       	rjmp	.+122    	; 0x1362 <__vector_25+0xe6>
    12e8:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	e9 5b       	subi	r30, 0xB9	; 185
    12f0:	f9 4f       	sbci	r31, 0xF9	; 249
    12f2:	90 83       	st	Z, r25
    12f4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <taskCount>
    12fe:	31 c0       	rjmp	.+98     	; 0x1362 <__vector_25+0xe6>
    1300:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <otherBotLocation>
    1304:	2e c0       	rjmp	.+92     	; 0x1362 <__vector_25+0xe6>
    1306:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <otherBotMovingTo>
    130a:	2b c0       	rjmp	.+86     	; 0x1362 <__vector_25+0xe6>
    130c:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    1310:	89 13       	cpse	r24, r25
    1312:	27 c0       	rjmp	.+78     	; 0x1362 <__vector_25+0xe6>
    1314:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <noteToStrike>
    131e:	21 c0       	rjmp	.+66     	; 0x1362 <__vector_25+0xe6>
    1320:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <noteToProcess>
    1324:	89 13       	cpse	r24, r25
    1326:	1d c0       	rjmp	.+58     	; 0x1362 <__vector_25+0xe6>
    1328:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <noteToProcess>
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <noteToProcess>
    1332:	17 c0       	rjmp	.+46     	; 0x1362 <__vector_25+0xe6>
    1334:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <taskCost>
    1338:	89 0f       	add	r24, r25
    133a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <taskCost>
    133e:	11 c0       	rjmp	.+34     	; 0x1362 <__vector_25+0xe6>
    1340:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <otherBotLastTaskIndex>
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <__vector_25+0xe6>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <botEnd+0x1>
    134e:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <botEnd>
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__vector_25+0xe6>
    1354:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <lastCommand>
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	19 f4       	brne	.+6      	; 0x1362 <__vector_25+0xe6>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <notesReceived>
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	0f 90       	pop	r0
    1374:	0b be       	out	0x3b, r0	; 59
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_51>:
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	0b b6       	in	r0, 0x3b	; 59
    138c:	0f 92       	push	r0
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    139a:	90 91 3f 06 	lds	r25, 0x063F	; 0x80063f <notesReceived>
    139e:	91 11       	cpse	r25, r1
    13a0:	18 c0       	rjmp	.+48     	; 0x13d2 <__vector_51+0x52>
    13a2:	8f 3f       	cpi	r24, 0xFF	; 255
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <__vector_51+0x46>
    13a6:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <noteCount>
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	e3 5a       	subi	r30, 0xA3	; 163
    13ae:	f9 4f       	sbci	r31, 0xF9	; 249
    13b0:	80 83       	st	Z, r24
    13b2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <noteCount>
    13bc:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    13c0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    13c4:	1d c0       	rjmp	.+58     	; 0x1400 <__vector_51+0x80>
    13c6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <notesReceived>
    13d0:	17 c0       	rjmp	.+46     	; 0x1400 <__vector_51+0x80>
    13d2:	8f 3f       	cpi	r24, 0xFF	; 255
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <__vector_51+0x76>
    13d6:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <noteCount2>
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	eb 5a       	subi	r30, 0xAB	; 171
    13de:	f7 4f       	sbci	r31, 0xF7	; 247
    13e0:	80 83       	st	Z, r24
    13e2:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <noteCount2>
    13ec:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    13f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <__vector_51+0x80>
    13f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <notesReceived2>
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <servo1_pin_config>:
    1416:	25 9a       	sbi	0x04, 5	; 4
    1418:	2d 9a       	sbi	0x05, 5	; 5
    141a:	08 95       	ret

0000141c <timer1_init>:
    141c:	e1 e8       	ldi	r30, 0x81	; 129
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	10 82       	st	Z, r1
    1422:	8c ef       	ldi	r24, 0xFC	; 252
    1424:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    143a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    143e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    1442:	8b ea       	ldi	r24, 0xAB	; 171
    1444:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1448:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    144c:	8c e0       	ldi	r24, 0x0C	; 12
    144e:	80 83       	st	Z, r24
    1450:	08 95       	ret

00001452 <servo_1>:
    1452:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1456:	68 2f       	mov	r22, r24
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatunsisf>
    1462:	2b e7       	ldi	r18, 0x7B	; 123
    1464:	34 e1       	ldi	r19, 0x14	; 20
    1466:	4e ee       	ldi	r20, 0xEE	; 238
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__divsf3>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4c e0       	ldi	r20, 0x0C	; 12
    1474:	52 e4       	ldi	r21, 0x42	; 66
    1476:	0e 94 97 14 	call	0x292e	; 0x292e <__addsf3>
    147a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fixunssfsi>
    147e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    1482:	08 95       	ret

00001484 <buzzer_pin_config>:
    1484:	3b 9a       	sbi	0x07, 3	; 7
    1486:	43 98       	cbi	0x08, 3	; 8
    1488:	08 95       	ret

0000148a <buzzer_on>:
    148a:	86 b1       	in	r24, 0x06	; 6
    148c:	88 60       	ori	r24, 0x08	; 8
    148e:	88 b9       	out	0x08, r24	; 8
    1490:	08 95       	ret

00001492 <buzzer_off>:
    1492:	86 b1       	in	r24, 0x06	; 6
    1494:	87 7f       	andi	r24, 0xF7	; 247
    1496:	88 b9       	out	0x08, r24	; 8
    1498:	08 95       	ret

0000149a <adc_pin_config>:
    149a:	10 ba       	out	0x10, r1	; 16
    149c:	11 ba       	out	0x11, r1	; 17
    149e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    14a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    14a6:	08 95       	ret

000014a8 <motion_pin_config>:
    14a8:	81 b1       	in	r24, 0x01	; 1
    14aa:	8f 60       	ori	r24, 0x0F	; 15
    14ac:	81 b9       	out	0x01, r24	; 1
    14ae:	82 b1       	in	r24, 0x02	; 2
    14b0:	80 7f       	andi	r24, 0xF0	; 240
    14b2:	82 b9       	out	0x02, r24	; 2
    14b4:	ea e0       	ldi	r30, 0x0A	; 10
    14b6:	f1 e0       	ldi	r31, 0x01	; 1
    14b8:	80 81       	ld	r24, Z
    14ba:	88 61       	ori	r24, 0x18	; 24
    14bc:	80 83       	st	Z, r24
    14be:	eb e0       	ldi	r30, 0x0B	; 11
    14c0:	f1 e0       	ldi	r31, 0x01	; 1
    14c2:	80 81       	ld	r24, Z
    14c4:	88 61       	ori	r24, 0x18	; 24
    14c6:	80 83       	st	Z, r24
    14c8:	08 95       	ret

000014ca <left_encoder_pin_config>:
    14ca:	6c 98       	cbi	0x0d, 4	; 13
    14cc:	74 9a       	sbi	0x0e, 4	; 14
    14ce:	08 95       	ret

000014d0 <right_encoder_pin_config>:
    14d0:	6d 98       	cbi	0x0d, 5	; 13
    14d2:	75 9a       	sbi	0x0e, 5	; 14
    14d4:	08 95       	ret

000014d6 <port_init>:
    14d6:	e8 df       	rcall	.-48     	; 0x14a8 <motion_pin_config>
    14d8:	f8 df       	rcall	.-16     	; 0x14ca <left_encoder_pin_config>
    14da:	fa df       	rcall	.-12     	; 0x14d0 <right_encoder_pin_config>
    14dc:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_port_config>
    14e0:	dc df       	rcall	.-72     	; 0x149a <adc_pin_config>
    14e2:	d0 cf       	rjmp	.-96     	; 0x1484 <buzzer_pin_config>
    14e4:	08 95       	ret

000014e6 <timer5_init>:
    14e6:	e1 e2       	ldi	r30, 0x21	; 33
    14e8:	f1 e0       	ldi	r31, 0x01	; 1
    14ea:	10 82       	st	Z, r1
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    14f8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    14fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1500:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1504:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1508:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    150c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    1510:	89 ea       	ldi	r24, 0xA9	; 169
    1512:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1516:	8b e0       	ldi	r24, 0x0B	; 11
    1518:	80 83       	st	Z, r24
    151a:	08 95       	ret

0000151c <adc_init>:
    151c:	ea e7       	ldi	r30, 0x7A	; 122
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	10 82       	st	Z, r1
    1522:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1526:	80 e2       	ldi	r24, 0x20	; 32
    1528:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    152c:	80 e8       	ldi	r24, 0x80	; 128
    152e:	80 bf       	out	0x30, r24	; 48
    1530:	86 e8       	ldi	r24, 0x86	; 134
    1532:	80 83       	st	Z, r24
    1534:	08 95       	ret

00001536 <ADC_Conversion>:
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	18 f0       	brcs	.+6      	; 0x1540 <ADC_Conversion+0xa>
    153a:	98 e0       	ldi	r25, 0x08	; 8
    153c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1540:	87 70       	andi	r24, 0x07	; 7
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1548:	ea e7       	ldi	r30, 0x7A	; 122
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	80 83       	st	Z, r24
    1552:	80 81       	ld	r24, Z
    1554:	84 ff       	sbrs	r24, 4
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <ADC_Conversion+0x1c>
    1558:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    155c:	ea e7       	ldi	r30, 0x7A	; 122
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	90 81       	ld	r25, Z
    1562:	90 61       	ori	r25, 0x10	; 16
    1564:	90 83       	st	Z, r25
    1566:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    156a:	08 95       	ret

0000156c <left_position_encoder_interrupt_init>:
    156c:	f8 94       	cli
    156e:	ea e6       	ldi	r30, 0x6A	; 106
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	82 60       	ori	r24, 0x02	; 2
    1576:	80 83       	st	Z, r24
    1578:	ec 9a       	sbi	0x1d, 4	; 29
    157a:	78 94       	sei
    157c:	08 95       	ret

0000157e <right_position_encoder_interrupt_init>:
    157e:	f8 94       	cli
    1580:	ea e6       	ldi	r30, 0x6A	; 106
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	88 60       	ori	r24, 0x08	; 8
    1588:	80 83       	st	Z, r24
    158a:	ed 9a       	sbi	0x1d, 5	; 29
    158c:	78 94       	sei
    158e:	08 95       	ret

00001590 <__vector_6>:
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    15a6:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    15aa:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    15ae:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	a1 1d       	adc	r26, r1
    15b6:	b1 1d       	adc	r27, r1
    15b8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <ShaftCountRight>
    15bc:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <ShaftCountRight+0x1>
    15c0:	a0 93 08 06 	sts	0x0608, r26	; 0x800608 <ShaftCountRight+0x2>
    15c4:	b0 93 09 06 	sts	0x0609, r27	; 0x800609 <ShaftCountRight+0x3>
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <__vector_5>:
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <ShaftCountLeft>
    15f0:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <ShaftCountLeft+0x1>
    15f4:	a0 91 0c 06 	lds	r26, 0x060C	; 0x80060c <ShaftCountLeft+0x2>
    15f8:	b0 91 0d 06 	lds	r27, 0x060D	; 0x80060d <ShaftCountLeft+0x3>
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	a1 1d       	adc	r26, r1
    1600:	b1 1d       	adc	r27, r1
    1602:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <ShaftCountLeft>
    1606:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <ShaftCountLeft+0x1>
    160a:	a0 93 0c 06 	sts	0x060C, r26	; 0x80060c <ShaftCountLeft+0x2>
    160e:	b0 93 0d 06 	sts	0x060D, r27	; 0x80060d <ShaftCountLeft+0x3>
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <motion_set>:
    1624:	92 b1       	in	r25, 0x02	; 2
    1626:	90 7f       	andi	r25, 0xF0	; 240
    1628:	8f 70       	andi	r24, 0x0F	; 15
    162a:	98 2b       	or	r25, r24
    162c:	92 b9       	out	0x02, r25	; 2
    162e:	08 95       	ret

00001630 <forward>:
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	f8 cf       	rjmp	.-16     	; 0x1624 <motion_set>
    1634:	08 95       	ret

00001636 <left>:
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	f5 cf       	rjmp	.-22     	; 0x1624 <motion_set>
    163a:	08 95       	ret

0000163c <right>:
    163c:	8a e0       	ldi	r24, 0x0A	; 10
    163e:	f2 cf       	rjmp	.-28     	; 0x1624 <motion_set>
    1640:	08 95       	ret

00001642 <stop>:
}

void stop (void)
{
	motion_set(0x00);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	ef cf       	rjmp	.-34     	; 0x1624 <motion_set>
    1646:	08 95       	ret

00001648 <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1654:	bc 01       	movw	r22, r24
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatunsisf>
    165e:	28 e4       	ldi	r18, 0x48	; 72
    1660:	31 ee       	ldi	r19, 0xE1	; 225
    1662:	42 e8       	ldi	r20, 0x82	; 130
    1664:	50 e4       	ldi	r21, 0x40	; 64
    1666:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    166a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fixunssfsi>
    166e:	ab 01       	movw	r20, r22
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
	ShaftCountRight = 0;
    1674:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <ShaftCountRight>
    1678:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ShaftCountRight+0x1>
    167c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <ShaftCountRight+0x2>
    1680:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
    1684:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <ShaftCountLeft>
    1688:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <ShaftCountLeft+0x1>
    168c:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <ShaftCountLeft+0x2>
    1690:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <ShaftCountLeft+0x3>

	while (1)
	{
		//lcd_print(1,5,ShaftCountRight,3);
		//lcd_print(2,10,ShaftCountRight,2);
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	e0 e0       	ldi	r30, 0x00	; 0
    1698:	c0 90 06 06 	lds	r12, 0x0606	; 0x800606 <ShaftCountRight>
    169c:	d0 90 07 06 	lds	r13, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    16a0:	e0 90 08 06 	lds	r14, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    16a4:	f0 90 09 06 	lds	r15, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    16a8:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <ShaftCountLeft>
    16ac:	10 91 0b 06 	lds	r17, 0x060B	; 0x80060b <ShaftCountLeft+0x1>
    16b0:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <ShaftCountLeft+0x2>
    16b4:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <ShaftCountLeft+0x3>
    16b8:	89 2f       	mov	r24, r25
    16ba:	04 17       	cp	r16, r20
    16bc:	15 07       	cpc	r17, r21
    16be:	26 07       	cpc	r18, r22
    16c0:	37 07       	cpc	r19, r23
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <angle_rotate+0x7e>
    16c4:	8e 2f       	mov	r24, r30
    16c6:	81 11       	cpse	r24, r1
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <angle_rotate+0x94>
    16ca:	89 2f       	mov	r24, r25
    16cc:	c4 16       	cp	r12, r20
    16ce:	d5 06       	cpc	r13, r21
    16d0:	e6 06       	cpc	r14, r22
    16d2:	f7 06       	cpc	r15, r23
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <angle_rotate+0x90>
    16d6:	8e 2f       	mov	r24, r30
    16d8:	88 23       	and	r24, r24
    16da:	f1 f2       	breq	.-68     	; 0x1698 <angle_rotate+0x50>
		break;
	}
	//stop(); //Stop robot
	stop();
    16dc:	b2 df       	rcall	.-156    	; 0x1642 <stop>
}
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	08 95       	ret

000016ec <left_degrees>:



void left_degrees(unsigned int Degrees)
{
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    16f2:	a1 df       	rcall	.-190    	; 0x1636 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
    16f6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    16fa:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	velocity(255,255);
	angle_rotate(Degrees);
    16fe:	ce 01       	movw	r24, r28
    1700:	a3 df       	rcall	.-186    	; 0x1648 <angle_rotate>
}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    170e:	96 df       	rcall	.-212    	; 0x163c <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1716:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	velocity(255,255);
	angle_rotate(Degrees);
    171a:	ce 01       	movw	r24, r28
    171c:	95 df       	rcall	.-214    	; 0x1648 <angle_rotate>
}
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    172a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    172e:	08 95       	ret

00001730 <init_devices>:
}

void init_devices()
{
	cli(); //Clears the global interrupt
    1730:	f8 94       	cli
	port_init();  //Initializes all the ports
    1732:	d1 de       	rcall	.-606    	; 0x14d6 <port_init>
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    1734:	e1 ec       	ldi	r30, 0xC1	; 193
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    173a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    173e:	26 e0       	ldi	r18, 0x06	; 6
    1740:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    1744:	9f e5       	ldi	r25, 0x5F	; 95
    1746:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    174a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    174e:	88 e9       	ldi	r24, 0x98	; 152
    1750:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    1752:	e1 ed       	ldi	r30, 0xD1	; 209
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    1758:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    175c:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    1760:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    1764:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    1768:	80 83       	st	Z, r24
{
	cli(); //Clears the global interrupt
	port_init();  //Initializes all the ports
	uart0_init();	//init Zigbee comm
	uart2_init();	//init PC - USB comm
	left_position_encoder_interrupt_init();
    176a:	00 df       	rcall	.-512    	; 0x156c <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    176c:	08 df       	rcall	.-496    	; 0x157e <right_position_encoder_interrupt_init>
	adc_init();
    176e:	d6 de       	rcall	.-596    	; 0x151c <adc_init>
	timer5_init();
    1770:	ba de       	rcall	.-652    	; 0x14e6 <timer5_init>
	lcd_set_4bit();
    1772:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_set_4bit>
	lcd_init();
    1776:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_init>
	servo1_pin_config();
    177a:	4d de       	rcall	.-870    	; 0x1416 <servo1_pin_config>
	timer1_init();
    177c:	4f de       	rcall	.-866    	; 0x141c <timer1_init>
	LED_bargraph_config();
    177e:	d2 df       	rcall	.-92     	; 0x1724 <LED_bargraph_config>
	sei();   // Enables the global interrupt
    1780:	78 94       	sei
    1782:	08 95       	ret

00001784 <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1784:	bc 01       	movw	r22, r24
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__floatunsisf>
    178e:	25 ee       	ldi	r18, 0xE5	; 229
    1790:	30 ed       	ldi	r19, 0xD0	; 208
    1792:	4a ea       	ldi	r20, 0xAA	; 170
    1794:	50 e4       	ldi	r21, 0x40	; 64
    1796:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    179a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fixunssfsi>
    179e:	ab 01       	movw	r20, r22
    17a0:	bc 01       	movw	r22, r24
	ShaftCountRight = 0;
    17a2:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <ShaftCountRight>
    17a6:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ShaftCountRight+0x1>
    17aa:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <ShaftCountRight+0x2>
    17ae:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <ShaftCountRight+0x3>
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    17b2:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    17b6:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    17ba:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    17be:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    17c2:	48 17       	cp	r20, r24
    17c4:	59 07       	cpc	r21, r25
    17c6:	6a 07       	cpc	r22, r26
    17c8:	7b 07       	cpc	r23, r27
    17ca:	98 f7       	brcc	.-26     	; 0x17b2 <linear_distance_mm+0x2e>
		{
			break;
		}
	}
	stop(); //Stop robot
    17cc:	3a cf       	rjmp	.-396    	; 0x1642 <stop>
    17ce:	08 95       	ret

000017d0 <forward_mm>:
}


void forward_mm(unsigned int DistanceInMM)
{
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
	forward();
    17d6:	2c df       	rcall	.-424    	; 0x1630 <forward>
	velocity(speed,speed);
    17d8:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    17dc:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    17e0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(speed,speed);
	linear_distance_mm(DistanceInMM);
    17e4:	ce 01       	movw	r24, r28
    17e6:	ce df       	rcall	.-100    	; 0x1784 <linear_distance_mm>
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    17ee:	4f 92       	push	r4
    17f0:	5f 92       	push	r5
    17f2:	6f 92       	push	r6
    17f4:	7f 92       	push	r7
    17f6:	8f 92       	push	r8
    17f8:	9f 92       	push	r9
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	c0 5c       	subi	r28, 0xC0	; 192
    1814:	d1 09       	sbc	r29, r1
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
    1820:	de 01       	movw	r26, r28
    1822:	af 59       	subi	r26, 0x9F	; 159
    1824:	bf 4f       	sbci	r27, 0xFF	; 255
    1826:	20 e6       	ldi	r18, 0x60	; 96
    1828:	fd 01       	movw	r30, r26
    182a:	11 92       	st	Z+, r1
    182c:	2a 95       	dec	r18
    182e:	e9 f7       	brne	.-6      	; 0x182a <costplan+0x3c>
    1830:	e3 e7       	ldi	r30, 0x73	; 115
    1832:	f6 e0       	ldi	r31, 0x06	; 6
    1834:	8e 01       	movw	r16, r28
    1836:	0f 5f       	subi	r16, 0xFF	; 255
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	78 01       	movw	r14, r16
    183c:	6d 01       	movw	r12, r26
    183e:	03 ed       	ldi	r16, 0xD3	; 211
    1840:	16 e0       	ldi	r17, 0x06	; 6
    1842:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    1844:	63 e6       	ldi	r22, 0x63	; 99
    1846:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    1848:	4f ef       	ldi	r20, 0xFF	; 255
    184a:	5f ef       	ldi	r21, 0xFF	; 255
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    184c:	61 93       	st	Z+, r22
    184e:	71 93       	st	Z+, r23
		list[j]=-1;
    1850:	d9 01       	movw	r26, r18
    1852:	4d 93       	st	X+, r20
    1854:	5d 93       	st	X+, r21
    1856:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    1858:	d6 01       	movw	r26, r12
    185a:	1d 92       	st	X+, r1
    185c:	1d 92       	st	X+, r1
    185e:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    1860:	e0 17       	cp	r30, r16
    1862:	f1 07       	cpc	r31, r17
    1864:	99 f7       	brne	.-26     	; 0x184c <costplan+0x5e>
    1866:	fc 01       	movw	r30, r24
    1868:	ac 01       	movw	r20, r24
    186a:	44 5f       	subi	r20, 0xF4	; 244
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{
			cost[note_loc[j]-1]=0;
			k=k+1;
			list[k]=note_loc[j];   // It is the list of nodes to explore
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    1876:	20 81       	ld	r18, Z
    1878:	31 81       	ldd	r19, Z+1	; 0x01
    187a:	21 15       	cp	r18, r1
    187c:	31 05       	cpc	r19, r1
    187e:	09 f1       	breq	.+66     	; 0x18c2 <costplan+0xd4>
		{
			cost[note_loc[j]-1]=0;
    1880:	22 0f       	add	r18, r18
    1882:	33 1f       	adc	r19, r19
    1884:	d9 01       	movw	r26, r18
    1886:	af 58       	subi	r26, 0x8F	; 143
    1888:	b9 4f       	sbci	r27, 0xF9	; 249
    188a:	1d 92       	st	X+, r1
    188c:	1c 92       	st	X, r1
			k=k+1;
    188e:	01 96       	adiw	r24, 0x01	; 1
			list[k]=note_loc[j];   // It is the list of nodes to explore
    1890:	20 81       	ld	r18, Z
    1892:	31 81       	ldd	r19, Z+1	; 0x01
    1894:	dc 01       	movw	r26, r24
    1896:	aa 0f       	add	r26, r26
    1898:	bb 1f       	adc	r27, r27
    189a:	01 e0       	ldi	r16, 0x01	; 1
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	0c 0f       	add	r16, r28
    18a0:	1d 1f       	adc	r17, r29
    18a2:	a0 0f       	add	r26, r16
    18a4:	b1 1f       	adc	r27, r17
    18a6:	2d 93       	st	X+, r18
    18a8:	3c 93       	st	X, r19
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    18aa:	d9 01       	movw	r26, r18
    18ac:	11 97       	sbiw	r26, 0x01	; 1
    18ae:	aa 0f       	add	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	21 e6       	ldi	r18, 0x61	; 97
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	2c 0f       	add	r18, r28
    18b8:	3d 1f       	adc	r19, r29
    18ba:	a2 0f       	add	r26, r18
    18bc:	b3 1f       	adc	r27, r19
    18be:	6d 93       	st	X+, r22
    18c0:	7c 93       	st	X, r23
    18c2:	32 96       	adiw	r30, 0x02	; 2
	{
		cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    18c4:	e4 17       	cp	r30, r20
    18c6:	f5 07       	cpc	r31, r21
    18c8:	b1 f6       	brne	.-84     	; 0x1876 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    18ca:	ae 2c       	mov	r10, r14
    18cc:	9f 2c       	mov	r9, r15
    18ce:	81 2c       	mov	r8, r1
    18d0:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}
		k=k-1;
    18d2:	68 94       	set
    18d4:	bb 24       	eor	r11, r11
    18d6:	b2 f8       	bld	r11, 2
    18d8:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
				cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    18da:	cc 24       	eor	r12, r12
    18dc:	c3 94       	inc	r12
    18de:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    18e0:	a9 81       	ldd	r26, Y+1	; 0x01
    18e2:	ba 81       	ldd	r27, Y+2	; 0x02
    18e4:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    18e6:	99 23       	and	r25, r25
    18e8:	6c f0       	brlt	.+26     	; 0x1904 <costplan+0x116>
    18ea:	ea 2d       	mov	r30, r10
    18ec:	f9 2d       	mov	r31, r9
    18ee:	28 2d       	mov	r18, r8
    18f0:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	42 81       	ldd	r20, Z+2	; 0x02
    18f8:	53 81       	ldd	r21, Z+3	; 0x03
    18fa:	41 93       	st	Z+, r20
    18fc:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    18fe:	82 17       	cp	r24, r18
    1900:	93 07       	cpc	r25, r19
    1902:	bc f7       	brge	.-18     	; 0x18f2 <costplan+0x104>
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	fd 01       	movw	r30, r26
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	ed 52       	subi	r30, 0x2D	; 45
    1916:	f9 4f       	sbci	r31, 0xF9	; 249
    1918:	2b 2d       	mov	r18, r11
    191a:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    191c:	aa 0f       	add	r26, r26
    191e:	bb 1f       	adc	r27, r27
    1920:	ad 01       	movw	r20, r26
    1922:	4d 58       	subi	r20, 0x8D	; 141
    1924:	59 4f       	sbci	r21, 0xF9	; 249
    1926:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    1928:	61 91       	ld	r22, Z+
    192a:	71 91       	ld	r23, Z+
    192c:	61 15       	cp	r22, r1
    192e:	71 05       	cpc	r23, r1
    1930:	d1 f1       	breq	.+116    	; 0x19a6 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    1932:	d2 01       	movw	r26, r4
    1934:	0d 91       	ld	r16, X+
    1936:	1c 91       	ld	r17, X
    1938:	0f 5f       	subi	r16, 0xFF	; 255
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	ab 01       	movw	r20, r22
    193e:	41 50       	subi	r20, 0x01	; 1
    1940:	51 09       	sbc	r21, r1
    1942:	7a 01       	movw	r14, r20
    1944:	ee 0c       	add	r14, r14
    1946:	ff 1c       	adc	r15, r15
    1948:	d7 01       	movw	r26, r14
    194a:	ad 58       	subi	r26, 0x8D	; 141
    194c:	b9 4f       	sbci	r27, 0xF9	; 249
    194e:	ed 90       	ld	r14, X+
    1950:	fc 90       	ld	r15, X
    1952:	e0 16       	cp	r14, r16
    1954:	f1 06       	cpc	r15, r17
    1956:	44 f0       	brlt	.+16     	; 0x1968 <costplan+0x17a>
				cost[node[s][i]-1]=(cost[s]+1);
    1958:	7a 01       	movw	r14, r20
    195a:	ee 0c       	add	r14, r14
    195c:	ff 1c       	adc	r15, r15
    195e:	d7 01       	movw	r26, r14
    1960:	ad 58       	subi	r26, 0x8D	; 141
    1962:	b9 4f       	sbci	r27, 0xF9	; 249
    1964:	0d 93       	st	X+, r16
    1966:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    1968:	8a 01       	movw	r16, r20
    196a:	00 0f       	add	r16, r16
    196c:	11 1f       	adc	r17, r17
    196e:	a1 e6       	ldi	r26, 0x61	; 97
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ac 0f       	add	r26, r28
    1974:	bd 1f       	adc	r27, r29
    1976:	0a 0f       	add	r16, r26
    1978:	1b 1f       	adc	r17, r27
    197a:	d8 01       	movw	r26, r16
    197c:	0d 91       	ld	r16, X+
    197e:	1c 91       	ld	r17, X
    1980:	11 97       	sbiw	r26, 0x01	; 1
    1982:	01 30       	cpi	r16, 0x01	; 1
    1984:	11 05       	cpc	r17, r1
    1986:	79 f0       	breq	.+30     	; 0x19a6 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    1988:	cd 92       	st	X+, r12
    198a:	dc 92       	st	X, r13
					k=k+1;
    198c:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    198e:	ac 01       	movw	r20, r24
    1990:	44 0f       	add	r20, r20
    1992:	55 1f       	adc	r21, r21
    1994:	01 e0       	ldi	r16, 0x01	; 1
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	0c 0f       	add	r16, r28
    199a:	1d 1f       	adc	r17, r29
    199c:	40 0f       	add	r20, r16
    199e:	51 1f       	adc	r21, r17
    19a0:	da 01       	movw	r26, r20
    19a2:	6d 93       	st	X+, r22
    19a4:	7c 93       	st	X, r23
    19a6:	21 50       	subi	r18, 0x01	; 1
    19a8:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
		{
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    19aa:	09 f0       	breq	.+2      	; 0x19ae <costplan+0x1c0>
    19ac:	bd cf       	rjmp	.-134    	; 0x1928 <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 || k!=-1);
    19ae:	29 81       	ldd	r18, Y+1	; 0x01
    19b0:	3a 81       	ldd	r19, Y+2	; 0x02
    19b2:	2f 3f       	cpi	r18, 0xFF	; 255
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	09 f0       	breq	.+2      	; 0x19ba <costplan+0x1cc>
    19b8:	93 cf       	rjmp	.-218    	; 0x18e0 <costplan+0xf2>
    19ba:	8f 3f       	cpi	r24, 0xFF	; 255
    19bc:	ef ef       	ldi	r30, 0xFF	; 255
    19be:	9e 07       	cpc	r25, r30
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <costplan+0x1d6>
    19c2:	8e cf       	rjmp	.-228    	; 0x18e0 <costplan+0xf2>
}
    19c4:	c0 54       	subi	r28, 0x40	; 64
    19c6:	df 4f       	sbci	r29, 0xFF	; 255
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	bf 90       	pop	r11
    19e4:	af 90       	pop	r10
    19e6:	9f 90       	pop	r9
    19e8:	8f 90       	pop	r8
    19ea:	7f 90       	pop	r7
    19ec:	6f 90       	pop	r6
    19ee:	5f 90       	pop	r5
    19f0:	4f 90       	pop	r4
    19f2:	08 95       	ret

000019f4 <rotate>:

void rotate(int turnang)
{
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
	int f=0;
	if(turnang<0)
    1a02:	99 23       	and	r25, r25
    1a04:	c4 f4       	brge	.+48     	; 0x1a36 <rotate+0x42>
	{
		turnang=-turnang;
    1a06:	22 27       	eor	r18, r18
    1a08:	33 27       	eor	r19, r19
    1a0a:	28 1b       	sub	r18, r24
    1a0c:	39 0b       	sbc	r19, r25
		if(turnang>180)
    1a0e:	25 3b       	cpi	r18, 0xB5	; 181
    1a10:	31 05       	cpc	r19, r1
    1a12:	34 f0       	brlt	.+12     	; 0x1a20 <rotate+0x2c>
		{
			turnang=360-turnang;
			left_degrees((turnang-20));
    1a14:	8c 5a       	subi	r24, 0xAC	; 172
    1a16:	9e 4f       	sbci	r25, 0xFE	; 254
    1a18:	69 de       	rcall	.-814    	; 0x16ec <left_degrees>
	}while(list[0]!=-1 || k!=-1);
}

void rotate(int turnang)
{
	int f=0;
    1a1a:	e1 2c       	mov	r14, r1
    1a1c:	f1 2c       	mov	r15, r1
    1a1e:	1d c0       	rjmp	.+58     	; 0x1a5a <rotate+0x66>
			left_degrees((turnang-20));
		}
		else
		{
			f=1;
			right_degrees((turnang-20));
    1a20:	2c ee       	ldi	r18, 0xEC	; 236
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	a9 01       	movw	r20, r18
    1a26:	48 1b       	sub	r20, r24
    1a28:	59 0b       	sbc	r21, r25
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	6d de       	rcall	.-806    	; 0x1708 <right_degrees>
			turnang=360-turnang;
			left_degrees((turnang-20));
		}
		else
		{
			f=1;
    1a2e:	ee 24       	eor	r14, r14
    1a30:	e3 94       	inc	r14
    1a32:	f1 2c       	mov	r15, r1
    1a34:	12 c0       	rjmp	.+36     	; 0x1a5a <rotate+0x66>
			right_degrees((turnang-20));
		}
	}
	else
	{
		if(turnang>180)
    1a36:	85 3b       	cpi	r24, 0xB5	; 181
    1a38:	91 05       	cpc	r25, r1
    1a3a:	5c f0       	brlt	.+22     	; 0x1a52 <rotate+0x5e>
		{
			f=1;
			turnang=360-turnang;
			right_degrees((turnang-20));
    1a3c:	24 e5       	ldi	r18, 0x54	; 84
    1a3e:	31 e0       	ldi	r19, 0x01	; 1
    1a40:	f9 01       	movw	r30, r18
    1a42:	e8 1b       	sub	r30, r24
    1a44:	f9 0b       	sbc	r31, r25
    1a46:	cf 01       	movw	r24, r30
    1a48:	5f de       	rcall	.-834    	; 0x1708 <right_degrees>
	}
	else
	{
		if(turnang>180)
		{
			f=1;
    1a4a:	ee 24       	eor	r14, r14
    1a4c:	e3 94       	inc	r14
    1a4e:	f1 2c       	mov	r15, r1
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <rotate+0x66>
			turnang=360-turnang;
			right_degrees((turnang-20));
		}
		else
		{
			left_degrees((turnang-20));
    1a52:	44 97       	sbiw	r24, 0x14	; 20
    1a54:	4b de       	rcall	.-874    	; 0x16ec <left_degrees>
	}while(list[0]!=-1 || k!=-1);
}

void rotate(int turnang)
{
	int f=0;
    1a56:	e1 2c       	mov	r14, r1
    1a58:	f1 2c       	mov	r15, r1
		else
		{
			left_degrees((turnang-20));
		}
	}
	stop();
    1a5a:	f3 dd       	rcall	.-1050   	; 0x1642 <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a5c:	ff ef       	ldi	r31, 0xFF	; 255
    1a5e:	2f e3       	ldi	r18, 0x3F	; 63
    1a60:	42 e0       	ldi	r20, 0x02	; 2
    1a62:	f1 50       	subi	r31, 0x01	; 1
    1a64:	20 40       	sbci	r18, 0x00	; 0
    1a66:	40 40       	sbci	r20, 0x00	; 0
    1a68:	e1 f7       	brne	.-8      	; 0x1a62 <rotate+0x6e>
    1a6a:	00 c0       	rjmp	.+0      	; 0x1a6c <rotate+0x78>
    1a6c:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1a6e:	08 e2       	ldi	r16, 0x28	; 40
    1a70:	11 e0       	ldi	r17, 0x01	; 1
    1a72:	0f 2e       	mov	r0, r31
    1a74:	f4 e6       	ldi	r31, 0x64	; 100
    1a76:	df 2e       	mov	r13, r31
    1a78:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1a7a:	ca e2       	ldi	r28, 0x2A	; 42
    1a7c:	d1 e0       	ldi	r29, 0x01	; 1
	}
	stop();
	_delay_ms(50);
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	5a dd       	rcall	.-1356   	; 0x1536 <ADC_Conversion>
    1a82:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	56 dd       	rcall	.-1364   	; 0x1536 <ADC_Conversion>
    1a8a:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	52 dd       	rcall	.-1372   	; 0x1536 <ADC_Conversion>
    1a92:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <Right_white_line>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1a96:	40 91 05 06 	lds	r20, 0x0605	; 0x800605 <Left_white_line>
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	23 e0       	ldi	r18, 0x03	; 3
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1aa8:	40 91 04 06 	lds	r20, 0x0604	; 0x800604 <Center_white_line>
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	23 e0       	ldi	r18, 0x03	; 3
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	65 e0       	ldi	r22, 0x05	; 5
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1aba:	40 91 03 06 	lds	r20, 0x0603	; 0x800603 <Right_white_line>
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	23 e0       	ldi	r18, 0x03	; 3
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	69 e0       	ldi	r22, 0x09	; 9
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		//forward();
		if(f==0)
    1acc:	e1 14       	cp	r14, r1
    1ace:	f1 04       	cpc	r15, r1
    1ad0:	29 f4       	brne	.+10     	; 0x1adc <rotate+0xe8>
		{
			left();
    1ad2:	b1 dd       	rcall	.-1182   	; 0x1636 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1ad8:	d8 82       	st	Y, r13
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <rotate+0xf0>
			left();
			velocity(100,100);
		}
		else
		{
			right();
    1adc:	af dd       	rcall	.-1186   	; 0x163c <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ade:	f8 01       	movw	r30, r16
    1ae0:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1ae2:	d8 82       	st	Y, r13
		else
		{
			right();
			velocity(100,100);
		}
		if(Center_white_line>55 || Left_white_line>120 || Right_white_line>120)
    1ae4:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <Center_white_line>
    1ae8:	88 33       	cpi	r24, 0x38	; 56
    1aea:	48 f4       	brcc	.+18     	; 0x1afe <rotate+0x10a>
    1aec:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <Left_white_line>
    1af0:	89 37       	cpi	r24, 0x79	; 121
    1af2:	28 f4       	brcc	.+10     	; 0x1afe <rotate+0x10a>
    1af4:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <Right_white_line>
    1af8:	89 37       	cpi	r24, 0x79	; 121
    1afa:	08 f4       	brcc	.+2      	; 0x1afe <rotate+0x10a>
    1afc:	c0 cf       	rjmp	.-128    	; 0x1a7e <rotate+0x8a>
		{	
			stop();
    1afe:	a1 dd       	rcall	.-1214   	; 0x1642 <stop>
		}
		
		
	}
	//velocity(0,0);
}
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	08 95       	ret

00001b10 <servoStrike>:

void servoStrike(int side)
{
    1b10:	cf 93       	push	r28
	if(!side)
    1b12:	89 2b       	or	r24, r25
    1b14:	29 f5       	brne	.+74     	; 0x1b60 <servoStrike+0x50>
    1b16:	ca e5       	ldi	r28, 0x5A	; 90
	{
		for(int i=90;i>=0;i--)
		{
			servo_1(i);
    1b18:	8c 2f       	mov	r24, r28
    1b1a:	9b dc       	rcall	.-1738   	; 0x1452 <servo_1>
    1b1c:	29 e9       	ldi	r18, 0x99	; 153
    1b1e:	89 e5       	ldi	r24, 0x59	; 89
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	21 50       	subi	r18, 0x01	; 1
    1b24:	80 40       	sbci	r24, 0x00	; 0
    1b26:	90 40       	sbci	r25, 0x00	; 0
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <servoStrike+0x12>
    1b2a:	00 00       	nop
    1b2c:	c1 50       	subi	r28, 0x01	; 1
    1b2e:	a0 f7       	brcc	.-24     	; 0x1b18 <servoStrike+0x8>
    1b30:	2f ef       	ldi	r18, 0xFF	; 255
    1b32:	8f e7       	ldi	r24, 0x7F	; 127
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	21 50       	subi	r18, 0x01	; 1
    1b38:	80 40       	sbci	r24, 0x00	; 0
    1b3a:	90 40       	sbci	r25, 0x00	; 0
    1b3c:	e1 f7       	brne	.-8      	; 0x1b36 <servoStrike+0x26>
    1b3e:	00 c0       	rjmp	.+0      	; 0x1b40 <servoStrike+0x30>
    1b40:	00 00       	nop
    1b42:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=0;i<=90;i++)
		{
			servo_1(i);
    1b44:	8c 2f       	mov	r24, r28
    1b46:	85 dc       	rcall	.-1782   	; 0x1452 <servo_1>
    1b48:	29 e9       	ldi	r18, 0x99	; 153
    1b4a:	89 e5       	ldi	r24, 0x59	; 89
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	21 50       	subi	r18, 0x01	; 1
    1b50:	80 40       	sbci	r24, 0x00	; 0
    1b52:	90 40       	sbci	r25, 0x00	; 0
    1b54:	e1 f7       	brne	.-8      	; 0x1b4e <servoStrike+0x3e>
    1b56:	00 00       	nop
    1b58:	cf 5f       	subi	r28, 0xFF	; 255
		{
			servo_1(i);
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=0;i<=90;i++)
    1b5a:	cb 35       	cpi	r28, 0x5B	; 91
    1b5c:	99 f7       	brne	.-26     	; 0x1b44 <servoStrike+0x34>
    1b5e:	25 c0       	rjmp	.+74     	; 0x1baa <servoStrike+0x9a>
    1b60:	ca e5       	ldi	r28, 0x5A	; 90
	}
	else
	{
		for(int i=90; i<=180; i++)
		{
			servo_1(i);
    1b62:	8c 2f       	mov	r24, r28
    1b64:	76 dc       	rcall	.-1812   	; 0x1452 <servo_1>
    1b66:	29 e9       	ldi	r18, 0x99	; 153
    1b68:	89 e5       	ldi	r24, 0x59	; 89
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	21 50       	subi	r18, 0x01	; 1
    1b6e:	80 40       	sbci	r24, 0x00	; 0
    1b70:	90 40       	sbci	r25, 0x00	; 0
    1b72:	e1 f7       	brne	.-8      	; 0x1b6c <servoStrike+0x5c>
    1b74:	00 00       	nop
    1b76:	cf 5f       	subi	r28, 0xFF	; 255
			_delay_ms(30);
		}
	}
	else
	{
		for(int i=90; i<=180; i++)
    1b78:	c5 3b       	cpi	r28, 0xB5	; 181
    1b7a:	99 f7       	brne	.-26     	; 0x1b62 <servoStrike+0x52>
    1b7c:	2f ef       	ldi	r18, 0xFF	; 255
    1b7e:	8f e7       	ldi	r24, 0x7F	; 127
    1b80:	94 e0       	ldi	r25, 0x04	; 4
    1b82:	21 50       	subi	r18, 0x01	; 1
    1b84:	80 40       	sbci	r24, 0x00	; 0
    1b86:	90 40       	sbci	r25, 0x00	; 0
    1b88:	e1 f7       	brne	.-8      	; 0x1b82 <servoStrike+0x72>
    1b8a:	00 c0       	rjmp	.+0      	; 0x1b8c <servoStrike+0x7c>
    1b8c:	00 00       	nop
    1b8e:	c4 eb       	ldi	r28, 0xB4	; 180
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=180;i>=90;i--)
		{
			servo_1(i);
    1b90:	8c 2f       	mov	r24, r28
    1b92:	5f dc       	rcall	.-1858   	; 0x1452 <servo_1>
    1b94:	29 e9       	ldi	r18, 0x99	; 153
    1b96:	89 e5       	ldi	r24, 0x59	; 89
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	21 50       	subi	r18, 0x01	; 1
    1b9c:	80 40       	sbci	r24, 0x00	; 0
    1b9e:	90 40       	sbci	r25, 0x00	; 0
    1ba0:	e1 f7       	brne	.-8      	; 0x1b9a <servoStrike+0x8a>
    1ba2:	00 00       	nop
    1ba4:	c1 50       	subi	r28, 0x01	; 1
		{
			servo_1(i);
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=180;i>=90;i--)
    1ba6:	c9 35       	cpi	r28, 0x59	; 89
    1ba8:	99 f7       	brne	.-26     	; 0x1b90 <servoStrike+0x80>
		{
			servo_1(i);
			_delay_ms(30);
		}
	}
}
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <move>:

int move(int n)
{
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1bbc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1bc0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

int move(int n)
{
	velocity(0,0);
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    1bc4:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    1bc8:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    1bcc:	31 97       	sbiw	r30, 0x01	; 1
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31
    1bd6:	e8 0f       	add	r30, r24
    1bd8:	f9 1f       	adc	r31, r25
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	e4 59       	subi	r30, 0x94	; 148
    1be0:	f7 4f       	sbci	r31, 0xF7	; 247
    1be2:	00 81       	ld	r16, Z
    1be4:	11 81       	ldd	r17, Z+1	; 0x01
    1be6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <botang>
    1bea:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <botang+0x1>
    1bee:	08 1b       	sub	r16, r24
    1bf0:	19 0b       	sbc	r17, r25
	if(fabs(turnang)>45)
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	01 2e       	mov	r0, r17
    1bf6:	00 0c       	add	r0, r0
    1bf8:	88 0b       	sbc	r24, r24
    1bfa:	99 0b       	sbc	r25, r25
    1bfc:	92 d7       	rcall	.+3876   	; 0x2b22 <__floatsisf>
    1bfe:	9f 77       	andi	r25, 0x7F	; 127
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	44 e3       	ldi	r20, 0x34	; 52
    1c06:	52 e4       	ldi	r21, 0x42	; 66
    1c08:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__gesf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <move+0x6c>
	{
		forward_mm(70);
    1c10:	86 e4       	ldi	r24, 0x46	; 70
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	dd dd       	rcall	.-1094   	; 0x17d0 <forward_mm>
		rotate(turnang);
    1c16:	c8 01       	movw	r24, r16
    1c18:	ed de       	rcall	.-550    	; 0x19f4 <rotate>
	}
	botang=angle[botloc-1][n];
    1c1a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <botloc>
    1c1e:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <botloc+0x1>
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	c8 0f       	add	r28, r24
    1c2e:	d9 1f       	adc	r29, r25
    1c30:	cc 0f       	add	r28, r28
    1c32:	dd 1f       	adc	r29, r29
    1c34:	c4 59       	subi	r28, 0x94	; 148
    1c36:	d7 4f       	sbci	r29, 0xF7	; 247
    1c38:	88 81       	ld	r24, Y
    1c3a:	99 81       	ldd	r25, Y+1	; 0x01
    1c3c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <botang+0x1>
    1c40:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <botang>
	
	if(strike==1)
    1c44:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <strike>
    1c48:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <strike+0x1>
    1c4c:	21 30       	cpi	r18, 0x01	; 1
    1c4e:	31 05       	cpc	r19, r1
    1c50:	e9 f4       	brne	.+58     	; 0x1c8c <move+0xde>
	{
		if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang)
    1c52:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	e3 5a       	subi	r30, 0xA3	; 163
    1c5a:	f9 4f       	sbci	r31, 0xF9	; 249
    1c5c:	e0 81       	ld	r30, Z
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	e0 5e       	subi	r30, 0xE0	; 224
    1c6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c6c:	20 81       	ld	r18, Z
    1c6e:	31 81       	ldd	r19, Z+1	; 0x01
    1c70:	82 17       	cp	r24, r18
    1c72:	93 07       	cpc	r25, r19
    1c74:	21 f4       	brne	.+8      	; 0x1c7e <move+0xd0>
			servoStrike(0);//Strike Left
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	4a df       	rcall	.-364    	; 0x1b10 <servoStrike>
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <move+0xd6>
		else
			servoStrike(1);//Strike Right
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	46 df       	rcall	.-372    	; 0x1b10 <servoStrike>
		
		// Servo Motor Control
		// Strike the Note
		strike=0;
    1c84:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <strike+0x1>
    1c88:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <strike>
	}
	
	forward();
    1c8c:	d1 dc       	rcall	.-1630   	; 0x1630 <forward>
	int flag=0;
	ShaftCountRight=0;
    1c8e:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <ShaftCountRight>
    1c92:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ShaftCountRight+0x1>
    1c96:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <ShaftCountRight+0x2>
    1c9a:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <ShaftCountRight+0x3>
	while(ShaftCountRight<10)
    1c9e:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1ca2:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1ca6:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1caa:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1cae:	0a 97       	sbiw	r24, 0x0a	; 10
    1cb0:	a1 05       	cpc	r26, r1
    1cb2:	b1 05       	cpc	r27, r1
    1cb4:	a0 f4       	brcc	.+40     	; 0x1cde <move+0x130>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1cb6:	a8 e2       	ldi	r26, 0x28	; 40
    1cb8:	b1 e0       	ldi	r27, 0x01	; 1
    1cba:	84 e6       	ldi	r24, 0x64	; 100
	OCR5BL = (unsigned char)right_motor;
    1cbc:	ea e2       	ldi	r30, 0x2A	; 42
    1cbe:	f1 e0       	ldi	r31, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1cc0:	8c 93       	st	X, r24
	OCR5BL = (unsigned char)right_motor;
    1cc2:	80 83       	st	Z, r24
	}
	
	forward();
	int flag=0;
	ShaftCountRight=0;
	while(ShaftCountRight<10)
    1cc4:	40 91 06 06 	lds	r20, 0x0606	; 0x800606 <ShaftCountRight>
    1cc8:	50 91 07 06 	lds	r21, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1ccc:	60 91 08 06 	lds	r22, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1cd0:	70 91 09 06 	lds	r23, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1cd4:	4a 30       	cpi	r20, 0x0A	; 10
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	61 05       	cpc	r22, r1
    1cda:	71 05       	cpc	r23, r1
    1cdc:	88 f3       	brcs	.-30     	; 0x1cc0 <move+0x112>
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(speed,0);
    1cde:	0f 2e       	mov	r0, r31
    1ce0:	fe e0       	ldi	r31, 0x0E	; 14
    1ce2:	ef 2e       	mov	r14, r31
    1ce4:	f2 e0       	ldi	r31, 0x02	; 2
    1ce6:	ff 2e       	mov	r15, r31
    1ce8:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1cea:	08 e2       	ldi	r16, 0x28	; 40
    1cec:	11 e0       	ldi	r17, 0x01	; 1
	OCR5BL = (unsigned char)right_motor;
    1cee:	ca e2       	ldi	r28, 0x2A	; 42
    1cf0:	d1 e0       	ldi	r29, 0x01	; 1
	while(ShaftCountRight<10)
		velocity(100,100);
	while(1)
	{
		flag=0;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	20 dc       	rcall	.-1984   	; 0x1536 <ADC_Conversion>
    1cf6:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	1c dc       	rcall	.-1992   	; 0x1536 <ADC_Conversion>
    1cfe:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	18 dc       	rcall	.-2000   	; 0x1536 <ADC_Conversion>
    1d06:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    1d0a:	86 e0       	ldi	r24, 0x06	; 6
    1d0c:	14 dc       	rcall	.-2008   	; 0x1536 <ADC_Conversion>
    1d0e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__data_end>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1d12:	40 91 05 06 	lds	r20, 0x0605	; 0x800605 <Left_white_line>
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	23 e0       	ldi	r18, 0x03	; 3
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1d24:	40 91 04 06 	lds	r20, 0x0604	; 0x800604 <Center_white_line>
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	23 e0       	ldi	r18, 0x03	; 3
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	65 e0       	ldi	r22, 0x05	; 5
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1d36:	40 91 03 06 	lds	r20, 0x0603	; 0x800603 <Right_white_line>
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	23 e0       	ldi	r18, 0x03	; 3
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	69 e0       	ldi	r22, 0x09	; 9
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		lcd_print(1,12,(int)Front_IR_Sensor,3);	//Front ir sensor Value
    1d48:	40 91 02 06 	lds	r20, 0x0602	; 0x800602 <__data_end>
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	23 e0       	ldi	r18, 0x03	; 3
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	6c e0       	ldi	r22, 0x0C	; 12
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
					break;
				}
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    1d5a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <thresh>
    1d5e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <thresh+0x1>
    1d62:	20 91 04 06 	lds	r18, 0x0604	; 0x800604 <Center_white_line>
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	82 17       	cp	r24, r18
    1d6a:	93 07       	cpc	r25, r19
    1d6c:	74 f4       	brge	.+28     	; 0x1d8a <move+0x1dc>
    1d6e:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <Left_white_line>
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	82 17       	cp	r24, r18
    1d76:	93 07       	cpc	r25, r19
    1d78:	e4 f1       	brlt	.+120    	; 0x1df2 <move+0x244>
    1d7a:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <Right_white_line>
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	82 17       	cp	r24, r18
    1d82:	93 07       	cpc	r25, r19
    1d84:	0c f4       	brge	.+2      	; 0x1d88 <move+0x1da>
    1d86:	42 c0       	rjmp	.+132    	; 0x1e0c <move+0x25e>
    1d88:	4e c0       	rjmp	.+156    	; 0x1e26 <move+0x278>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1d8a:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <Left_white_line>
    1d8e:	42 2f       	mov	r20, r18
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	84 17       	cp	r24, r20
    1d94:	95 07       	cpc	r25, r21
    1d96:	0c f0       	brlt	.+2      	; 0x1d9a <move+0x1ec>
    1d98:	55 c0       	rjmp	.+170    	; 0x1e44 <move+0x296>
		{
			//flag=1;
			forward();
    1d9a:	4a dc       	rcall	.-1900   	; 0x1630 <forward>
			lcd_print(2,1,1,3);
    1d9c:	23 e0       	ldi	r18, 0x03	; 3
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			velocity(0,speed);
    1dac:	f7 01       	movw	r30, r14
    1dae:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1db0:	f8 01       	movw	r30, r16
    1db2:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1db4:	88 83       	st	Y, r24
    1db6:	9d cf       	rjmp	.-198    	; 0x1cf2 <move+0x144>
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
    1db8:	3b dc       	rcall	.-1930   	; 0x1630 <forward>
			lcd_print(2,1,2,3);
    1dba:	23 e0       	ldi	r18, 0x03	; 3
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	42 e0       	ldi	r20, 0x02	; 2
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			velocity(speed,0);
    1dca:	f7 01       	movw	r30, r14
    1dcc:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1dce:	f8 01       	movw	r30, r16
    1dd0:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1dd2:	18 82       	st	Y, r1
    1dd4:	8e cf       	rjmp	.-228    	; 0x1cf2 <move+0x144>
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
			//flag=1;
		}
		else if(Left_white_line>Right_white_line)
    1dd6:	32 17       	cp	r19, r18
    1dd8:	30 f4       	brcc	.+12     	; 0x1de6 <move+0x238>
		{
			velocity(0,speed);
    1dda:	f7 01       	movw	r30, r14
    1ddc:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1dde:	f8 01       	movw	r30, r16
    1de0:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1de2:	88 83       	st	Y, r24
    1de4:	86 cf       	rjmp	.-244    	; 0x1cf2 <move+0x144>
		{
			velocity(0,speed);
		}
		else
		{
			velocity(speed,0);
    1de6:	f7 01       	movw	r30, r14
    1de8:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1dea:	f8 01       	movw	r30, r16
    1dec:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1dee:	18 82       	st	Y, r1
    1df0:	80 cf       	rjmp	.-256    	; 0x1cf2 <move+0x144>
					break;
				}
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    1df2:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1df6:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1dfa:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1dfe:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1e02:	45 97       	sbiw	r24, 0x15	; 21
    1e04:	a1 05       	cpc	r26, r1
    1e06:	b1 05       	cpc	r27, r1
    1e08:	40 f2       	brcs	.-112    	; 0x1d9a <move+0x1ec>
    1e0a:	24 c0       	rjmp	.+72     	; 0x1e54 <move+0x2a6>
    1e0c:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1e10:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1e14:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1e18:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1e1c:	45 97       	sbiw	r24, 0x15	; 21
    1e1e:	a1 05       	cpc	r26, r1
    1e20:	b1 05       	cpc	r27, r1
    1e22:	50 f2       	brcs	.-108    	; 0x1db8 <move+0x20a>
    1e24:	17 c0       	rjmp	.+46     	; 0x1e54 <move+0x2a6>
			lcd_print(2,1,2,3);
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
		{
			forward();
    1e26:	04 dc       	rcall	.-2040   	; 0x1630 <forward>
			velocity(speed,speed);
    1e28:	f7 01       	movw	r30, r14
    1e2a:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1e30:	88 83       	st	Y, r24
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
    1e32:	23 e0       	ldi	r18, 0x03	; 3
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
    1e42:	57 cf       	rjmp	.-338    	; 0x1cf2 <move+0x144>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
    1e44:	30 91 03 06 	lds	r19, 0x0603	; 0x800603 <Right_white_line>
    1e48:	43 2f       	mov	r20, r19
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	84 17       	cp	r24, r20
    1e4e:	95 07       	cpc	r25, r21
    1e50:	14 f6       	brge	.-124    	; 0x1dd6 <move+0x228>
    1e52:	b2 cf       	rjmp	.-156    	; 0x1db8 <move+0x20a>
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
		{
			forward();
    1e54:	ed db       	rcall	.-2086   	; 0x1630 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e56:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1e5a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
		{
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
    1e5e:	23 e0       	ldi	r18, 0x03	; 3
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	44 e6       	ldi	r20, 0x64	; 100
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		{
			velocity(speed,0);
		}
	}
	return suc;
}
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	08 95       	ret

00001e80 <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	9c 01       	movw	r18, r24
	int i;
	if (cost[loc - 1] == 0)
    1e86:	bc 01       	movw	r22, r24
    1e88:	61 50       	subi	r22, 0x01	; 1
    1e8a:	71 09       	sbc	r23, r1
    1e8c:	db 01       	movw	r26, r22
    1e8e:	aa 0f       	add	r26, r26
    1e90:	bb 1f       	adc	r27, r27
    1e92:	ad 58       	subi	r26, 0x8D	; 141
    1e94:	b9 4f       	sbci	r27, 0xF9	; 249
    1e96:	8d 91       	ld	r24, X+
    1e98:	9c 91       	ld	r25, X
    1e9a:	89 2b       	or	r24, r25
    1e9c:	39 f4       	brne	.+14     	; 0x1eac <BotEndLocation+0x2c>
	{
		LastLocation = loc;
    1e9e:	30 93 f3 09 	sts	0x09F3, r19	; 0x8009f3 <LastLocation+0x1>
    1ea2:	20 93 f2 09 	sts	0x09F2, r18	; 0x8009f2 <LastLocation>
		return LastLocation;
    1ea6:	82 2f       	mov	r24, r18
    1ea8:	93 2f       	mov	r25, r19
    1eaa:	3c c0       	rjmp	.+120    	; 0x1f24 <BotEndLocation+0xa4>
	}
	int mCost = cost[node[loc - 1][0] - 1];
    1eac:	db 01       	movw	r26, r22
    1eae:	aa 0f       	add	r26, r26
    1eb0:	bb 1f       	adc	r27, r27
    1eb2:	aa 0f       	add	r26, r26
    1eb4:	bb 1f       	adc	r27, r27
    1eb6:	aa 0f       	add	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	fd 01       	movw	r30, r26
    1ebc:	ed 52       	subi	r30, 0x2D	; 45
    1ebe:	f9 4f       	sbci	r31, 0xF9	; 249
    1ec0:	01 90       	ld	r0, Z+
    1ec2:	f0 81       	ld	r31, Z
    1ec4:	e0 2d       	mov	r30, r0
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	ef 58       	subi	r30, 0x8F	; 143
    1ecc:	f9 4f       	sbci	r31, 0xF9	; 249
    1ece:	c0 81       	ld	r28, Z
    1ed0:	d1 81       	ldd	r29, Z+1	; 0x01
    1ed2:	ab 52       	subi	r26, 0x2B	; 43
    1ed4:	b9 4f       	sbci	r27, 0xF9	; 249
	int pos = 0;
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 1; i<4; i++)
    1eda:	21 e0       	ldi	r18, 0x01	; 1
    1edc:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (node[loc - 1][i]!=0)
    1ede:	8d 91       	ld	r24, X+
    1ee0:	9d 91       	ld	r25, X+
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <BotEndLocation+0x7e>
			if (cost[node[loc - 1][i] - 1]<mCost)
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	fc 01       	movw	r30, r24
    1eec:	ef 58       	subi	r30, 0x8F	; 143
    1eee:	f9 4f       	sbci	r31, 0xF9	; 249
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	8c 17       	cp	r24, r28
    1ef6:	9d 07       	cpc	r25, r29
    1ef8:	14 f4       	brge	.+4      	; 0x1efe <BotEndLocation+0x7e>
    1efa:	a9 01       	movw	r20, r18
			{
				mCost = cost[node[loc - 1][i] - 1];
    1efc:	ec 01       	movw	r28, r24
		LastLocation = loc;
		return LastLocation;
	}
	int mCost = cost[node[loc - 1][0] - 1];
	int pos = 0;
	for (i = 1; i<4; i++)
    1efe:	2f 5f       	subi	r18, 0xFF	; 255
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	24 30       	cpi	r18, 0x04	; 4
    1f04:	31 05       	cpc	r19, r1
    1f06:	59 f7       	brne	.-42     	; 0x1ede <BotEndLocation+0x5e>
			{
				mCost = cost[node[loc - 1][i] - 1];
				pos = i;
			}
	}
	return BotEndLocation(node[loc - 1][pos]);
    1f08:	fb 01       	movw	r30, r22
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	e4 0f       	add	r30, r20
    1f14:	f5 1f       	adc	r31, r21
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	ed 52       	subi	r30, 0x2D	; 45
    1f1c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	ae df       	rcall	.-164    	; 0x1e80 <BotEndLocation>
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	08 95       	ret

00001f2a <processNotes>:
FILE uart_debug = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
///////////////////////////////////////////////////////


void processNotes()
{
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    1f2e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    1f32:	88 23       	and	r24, r24
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <processNotes+0xe>
    1f36:	75 c0       	rjmp	.+234    	; 0x2022 <processNotes+0xf8>
    1f38:	c0 e0       	ldi	r28, 0x00	; 0
    1f3a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e3 5a       	subi	r30, 0xA3	; 163
    1f40:	f9 4f       	sbci	r31, 0xF9	; 249
    1f42:	80 81       	ld	r24, Z
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9c 01       	movw	r18, r24
    1f4a:	22 0f       	add	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	82 0f       	add	r24, r18
    1f50:	93 1f       	adc	r25, r19
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	88 55       	subi	r24, 0x58	; 88
    1f5c:	9c 4f       	sbci	r25, 0xFC	; 252
    1f5e:	47 dc       	rcall	.-1906   	; 0x17ee <costplan>
		if((taskCost+cost[botLastIndex-1])>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1]))
    1f60:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <taskCost>
    1f64:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <botLastIndex>
    1f68:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <botLastIndex+0x1>
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	ee 0f       	add	r30, r30
    1f70:	ff 1f       	adc	r31, r31
    1f72:	ef 58       	subi	r30, 0x8F	; 143
    1f74:	f9 4f       	sbci	r31, 0xF9	; 249
    1f76:	40 81       	ld	r20, Z
    1f78:	51 81       	ldd	r21, Z+1	; 0x01
    1f7a:	a0 91 40 06 	lds	r26, 0x0640	; 0x800640 <otherBotTaskCost>
    1f7e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    1f82:	ba 01       	movw	r22, r20
    1f84:	62 0f       	add	r22, r18
    1f86:	71 1d       	adc	r23, r1
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ef 58       	subi	r30, 0x8F	; 143
    1f90:	f9 4f       	sbci	r31, 0xF9	; 249
    1f92:	20 81       	ld	r18, Z
    1f94:	31 81       	ldd	r19, Z+1	; 0x01
    1f96:	2a 0f       	add	r18, r26
    1f98:	31 1d       	adc	r19, r1
    1f9a:	26 17       	cp	r18, r22
    1f9c:	37 07       	cpc	r19, r23
    1f9e:	24 f5       	brge	.+72     	; 0x1fe8 <processNotes+0xbe>
		{
			otherBotTaskCost+=cost[otherBotLastTaskIndex-1];
    1fa0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    1fa4:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <otherBotTaskCost>
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	ef 58       	subi	r30, 0x8F	; 143
    1fb0:	f9 4f       	sbci	r31, 0xF9	; 249
    1fb2:	80 81       	ld	r24, Z
    1fb4:	89 0f       	add	r24, r25
    1fb6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <otherBotTaskCost>
			otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);
    1fba:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	5f df       	rcall	.-322    	; 0x1e80 <BotEndLocation>
    1fc2:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <otherBotLastTaskIndex>
			otherBotTask[otherBotTaskCount]=noteToProcess;
    1fc6:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCount>
    1fca:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <otherBotTaskCount+0x1>
    1fce:	fc 01       	movw	r30, r24
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	ea 5e       	subi	r30, 0xEA	; 234
    1fd6:	f9 4f       	sbci	r31, 0xF9	; 249
    1fd8:	d1 83       	std	Z+1, r29	; 0x01
    1fda:	c0 83       	st	Z, r28
			otherBotTaskCount++;
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <otherBotTaskCount+0x1>
    1fe2:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <otherBotTaskCount>
    1fe6:	15 c0       	rjmp	.+42     	; 0x2012 <processNotes+0xe8>
		}
		else
		{
			taskCost+=cost[botLastIndex-1];
    1fe8:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <taskCost>
    1fec:	42 0f       	add	r20, r18
    1fee:	40 93 41 06 	sts	0x0641, r20	; 0x800641 <taskCost>
			botLastIndex=BotEndLocation(botLastIndex);
    1ff2:	46 df       	rcall	.-372    	; 0x1e80 <BotEndLocation>
    1ff4:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <botLastIndex+0x1>
    1ff8:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <botLastIndex>
			tasks[(int)taskCount]=noteToProcess;
    1ffc:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	e9 5b       	subi	r30, 0xB9	; 185
    2004:	f9 4f       	sbci	r31, 0xF9	; 249
    2006:	c0 83       	st	Z, r28
			taskCount++;
    2008:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <taskCount>
		}
		noteToProcess++;
    2012:	21 96       	adiw	r28, 0x01	; 1


void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    2014:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	8c 17       	cp	r24, r28
    201c:	9d 07       	cpc	r25, r29
    201e:	09 f0       	breq	.+2      	; 0x2022 <processNotes+0xf8>
    2020:	8d cf       	rjmp	.-230    	; 0x1f3c <processNotes+0x12>
		}
		noteToProcess++;
		
	}
	
}
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <main>:


int main()
{
    2028:	2f 92       	push	r2
    202a:	3f 92       	push	r3
    202c:	4f 92       	push	r4
    202e:	5f 92       	push	r5
    2030:	6f 92       	push	r6
    2032:	7f 92       	push	r7
    2034:	8f 92       	push	r8
    2036:	9f 92       	push	r9
    2038:	af 92       	push	r10
    203a:	bf 92       	push	r11
    203c:	cf 92       	push	r12
    203e:	df 92       	push	r13
    2040:	ef 92       	push	r14
    2042:	ff 92       	push	r15
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	00 d0       	rcall	.+0      	; 0x204e <main+0x26>
    204e:	1f 92       	push	r1
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
	declare_constants();
    2054:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <declare_constants>
	init_devices();
    2058:	6b db       	rcall	.-2346   	; 0x1730 <init_devices>
	servo_1(90);
    205a:	8a e5       	ldi	r24, 0x5A	; 90
    205c:	fa d9       	rcall	.-3084   	; 0x1452 <servo_1>
	PORTJ = 0x00;
    205e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    2062:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <notesReceived>
	lcd_string("Waiting...");
    2066:	8d e5       	ldi	r24, 0x5D	; 93
    2068:	95 e0       	ldi	r25, 0x05	; 5
    206a:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	while(!notesReceived2);
    206e:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <notesReceived2>
    2072:	88 23       	and	r24, r24
    2074:	e1 f3       	breq	.-8      	; 0x206e <main+0x46>
	lcd_clear();
    2076:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Received!");
    207a:	88 e6       	ldi	r24, 0x68	; 104
    207c:	95 e0       	ldi	r25, 0x05	; 5
    207e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	PORTJ = 0xFF;
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2088:	e0 ec       	ldi	r30, 0xC0	; 192
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	85 ff       	sbrs	r24, 5
    2090:	fd cf       	rjmp	.-6      	; 0x208c <main+0x64>
	UDR0 = data;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	//_delay_ms(300);
	int i;
	for(i = 0; i<noteCount; i++)
    2098:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    209c:	88 23       	and	r24, r24
    209e:	c1 f0       	breq	.+48     	; 0x20d0 <main+0xa8>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    20a4:	e0 ec       	ldi	r30, 0xC0	; 192
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    20a8:	46 ec       	ldi	r20, 0xC6	; 198
    20aa:	50 e0       	ldi	r21, 0x00	; 0
	//lcd_string("Start");
	//_delay_ms(300);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    20ac:	d9 01       	movw	r26, r18
    20ae:	a3 5a       	subi	r26, 0xA3	; 163
    20b0:	b9 4f       	sbci	r27, 0xF9	; 249
    20b2:	9c 91       	ld	r25, X
    20b4:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    20b6:	80 81       	ld	r24, Z
    20b8:	85 ff       	sbrs	r24, 5
    20ba:	fd cf       	rjmp	.-6      	; 0x20b6 <main+0x8e>
	UDR0 = data;
    20bc:	da 01       	movw	r26, r20
    20be:	9c 93       	st	X, r25
{
	SendByteToSlave(RC_NOT_S);
	//lcd_string("Start");
	//_delay_ms(300);
	int i;
	for(i = 0; i<noteCount; i++)
    20c0:	2f 5f       	subi	r18, 0xFF	; 255
    20c2:	3f 4f       	sbci	r19, 0xFF	; 255
    20c4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	28 17       	cp	r18, r24
    20cc:	39 07       	cpc	r19, r25
    20ce:	74 f3       	brlt	.-36     	; 0x20ac <main+0x84>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    20d0:	e0 ec       	ldi	r30, 0xC0	; 192
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	85 ff       	sbrs	r24, 5
    20d8:	fd cf       	rjmp	.-6      	; 0x20d4 <main+0xac>
	UDR0 = data;
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	lcd_string("Received!");
	PORTJ = 0xFF;
	
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    20e0:	8f e0       	ldi	r24, 0x0F	; 15
    20e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	lcd_clear();
    20e6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Sent!");
    20ea:	82 e7       	ldi	r24, 0x72	; 114
    20ec:	95 e0       	ldi	r25, 0x05	; 5
    20ee:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	lcd_clear();
    20f2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Sending Tasks");
    20f6:	88 e7       	ldi	r24, 0x78	; 120
    20f8:	95 e0       	ldi	r25, 0x05	; 5
    20fa:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	processNotes();
    20fe:	15 df       	rcall	.-470    	; 0x1f2a <processNotes>
	lcd_clear();
    2100:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Processed");
    2104:	86 e8       	ldi	r24, 0x86	; 134
    2106:	95 e0       	ldi	r25, 0x05	; 5
    2108:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	//_delay_ms(1000);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    210c:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCount>
    2110:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <otherBotTaskCount+0x1>
    2114:	18 16       	cp	r1, r24
    2116:	19 06       	cpc	r1, r25
    2118:	2c f5       	brge	.+74     	; 0x2164 <main+0x13c>
    211a:	a6 e1       	ldi	r26, 0x16	; 22
    211c:	b6 e0       	ldi	r27, 0x06	; 6
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2122:	e0 ec       	ldi	r30, 0xC0	; 192
    2124:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2126:	66 ec       	ldi	r22, 0xC6	; 198
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	53 e0       	ldi	r21, 0x03	; 3
    212c:	8d 01       	movw	r16, r26
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
    212e:	d8 01       	movw	r26, r16
    2130:	9c 91       	ld	r25, X
    2132:	0e 5f       	subi	r16, 0xFE	; 254
    2134:	1f 4f       	sbci	r17, 0xFF	; 255

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2136:	80 81       	ld	r24, Z
    2138:	85 ff       	sbrs	r24, 5
    213a:	fd cf       	rjmp	.-6      	; 0x2136 <main+0x10e>
	UDR0 = data;
    213c:	db 01       	movw	r26, r22
    213e:	5c 93       	st	X, r21

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    2140:	49 2f       	mov	r20, r25
    2142:	40 68       	ori	r20, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2144:	80 81       	ld	r24, Z
    2146:	85 ff       	sbrs	r24, 5
    2148:	fd cf       	rjmp	.-6      	; 0x2144 <main+0x11c>
	UDR0 = data;
    214a:	db 01       	movw	r26, r22
    214c:	4c 93       	st	X, r20
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    214e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <otherBotLastTaskIndex>
	//_delay_ms(1000);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    2152:	2f 5f       	subi	r18, 0xFF	; 255
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCount>
    215a:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <otherBotTaskCount+0x1>
    215e:	28 17       	cp	r18, r24
    2160:	39 07       	cpc	r19, r25
    2162:	2c f3       	brlt	.-54     	; 0x212e <main+0x106>
	lcd_string("Sending Tasks");
	processNotes();
	lcd_clear();
	lcd_string("Processed");
	SendTaskArray();
	lcd_clear();
    2164:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
	lcd_string("Task Sent");
    2168:	80 e9       	ldi	r24, 0x90	; 144
    216a:	95 e0       	ldi	r25, 0x05	; 5
    216c:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	#endif

	while(taskCount==0);
    2170:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    2174:	88 23       	and	r24, r24
    2176:	e1 f3       	breq	.-8      	; 0x2170 <main+0x148>
	
	//PC Debug (printf)
	stdout = &uart_debug;
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	92 e0       	ldi	r25, 0x02	; 2
    217c:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <__iob+0x3>
    2180:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <__iob+0x2>
		
	int i=0;
	for(i=0;i<noteCount;i++)
    2184:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    2188:	88 23       	and	r24, r24
    218a:	f1 f0       	breq	.+60     	; 0x21c8 <main+0x1a0>
    218c:	00 e0       	ldi	r16, 0x00	; 0
    218e:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_print(2,1,(int)notes[i],2);
    2190:	f8 01       	movw	r30, r16
    2192:	e3 5a       	subi	r30, 0xA3	; 163
    2194:	f9 4f       	sbci	r31, 0xF9	; 249
    2196:	40 81       	ld	r20, Z
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	22 e0       	ldi	r18, 0x02	; 2
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	61 e0       	ldi	r22, 0x01	; 1
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
    21a6:	bf ef       	ldi	r27, 0xFF	; 255
    21a8:	ef ef       	ldi	r30, 0xFF	; 255
    21aa:	fc e2       	ldi	r31, 0x2C	; 44
    21ac:	b1 50       	subi	r27, 0x01	; 1
    21ae:	e0 40       	sbci	r30, 0x00	; 0
    21b0:	f0 40       	sbci	r31, 0x00	; 0
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <main+0x184>
    21b4:	00 c0       	rjmp	.+0      	; 0x21b6 <main+0x18e>
    21b6:	00 00       	nop
	
	//PC Debug (printf)
	stdout = &uart_debug;
		
	int i=0;
	for(i=0;i<noteCount;i++)
    21b8:	0f 5f       	subi	r16, 0xFF	; 255
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	08 17       	cp	r16, r24
    21c4:	19 07       	cpc	r17, r25
    21c6:	24 f3       	brlt	.-56     	; 0x2190 <main+0x168>
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
    21c8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_clear>
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    21cc:	a1 2c       	mov	r10, r1
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    21ce:	0f 2e       	mov	r0, r31
    21d0:	f6 ec       	ldi	r31, 0xC6	; 198
    21d2:	cf 2e       	mov	r12, r31
    21d4:	d1 2c       	mov	r13, r1
    21d6:	f0 2d       	mov	r31, r0
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    21d8:	19 82       	std	Y+1, r1	; 0x01
    21da:	aa 82       	std	Y+2, r10	; 0x02
			for(i=1;i<4;i++)
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	2b 83       	std	Y+3, r18	; 0x03
    21e0:	1c 82       	std	Y+4, r1	; 0x04
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    21e2:	31 2c       	mov	r3, r1
    21e4:	41 2c       	mov	r4, r1
			for(i=1;i<4;i++)
    21e6:	55 24       	eor	r5, r5
    21e8:	53 94       	inc	r5
    21ea:	b1 2c       	mov	r11, r1
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while(notes[(int)noteToStrike]!=0 && taskitr!=taskCount)
    21ec:	48 c3       	rjmp	.+1680   	; 0x287e <__stack+0x67f>
	{	
		printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
    21ee:	fc 01       	movw	r30, r24
    21f0:	e9 5b       	subi	r30, 0xB9	; 185
    21f2:	f9 4f       	sbci	r31, 0xF9	; 249
    21f4:	e0 81       	ld	r30, Z
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	e3 5a       	subi	r30, 0xA3	; 163
    21fa:	f9 4f       	sbci	r31, 0xF9	; 249
    21fc:	80 81       	ld	r24, Z
    21fe:	1f 92       	push	r1
    2200:	8f 93       	push	r24
    2202:	aa e9       	ldi	r26, 0x9A	; 154
    2204:	b5 e0       	ldi	r27, 0x05	; 5
    2206:	bf 93       	push	r27
    2208:	af 93       	push	r26
    220a:	56 d5       	rcall	.+2732   	; 0x2cb8 <printf>
		int taskDone=0;
		int i,minCost,nxtNode,pos;
		costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    220c:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2210:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2214:	e9 5b       	subi	r30, 0xB9	; 185
    2216:	f9 4f       	sbci	r31, 0xF9	; 249
    2218:	e0 81       	ld	r30, Z
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	e3 5a       	subi	r30, 0xA3	; 163
    221e:	f9 4f       	sbci	r31, 0xF9	; 249
    2220:	80 81       	ld	r24, Z
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	9c 01       	movw	r18, r24
    2228:	22 0f       	add	r18, r18
    222a:	33 1f       	adc	r19, r19
    222c:	82 0f       	add	r24, r18
    222e:	93 1f       	adc	r25, r19
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	88 55       	subi	r24, 0x58	; 88
    223a:	9c 4f       	sbci	r25, 0xFC	; 252
    223c:	d8 da       	rcall	.-2640   	; 0x17ee <costplan>
		lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
    223e:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2242:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2246:	e9 5b       	subi	r30, 0xB9	; 185
    2248:	f9 4f       	sbci	r31, 0xF9	; 249
    224a:	e0 81       	ld	r30, Z
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	e3 5a       	subi	r30, 0xA3	; 163
    2250:	f9 4f       	sbci	r31, 0xF9	; 249
    2252:	40 81       	ld	r20, Z
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	22 e0       	ldi	r18, 0x02	; 2
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	6c e0       	ldi	r22, 0x0C	; 12
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
		printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
    2262:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2266:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    226a:	a0 91 0e 06 	lds	r26, 0x060E	; 0x80060e <taskitr>
    226e:	b0 91 0f 06 	lds	r27, 0x060F	; 0x80060f <taskitr+0x1>
    2272:	a9 5b       	subi	r26, 0xB9	; 185
    2274:	b9 4f       	sbci	r27, 0xF9	; 249
    2276:	8c 91       	ld	r24, X
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	ef 58       	subi	r30, 0x8F	; 143
    227e:	f9 4f       	sbci	r31, 0xF9	; 249
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	9f 93       	push	r25
    2284:	90 81       	ld	r25, Z
    2286:	9f 93       	push	r25
    2288:	1f 92       	push	r1
    228a:	8f 93       	push	r24
    228c:	a1 eb       	ldi	r26, 0xB1	; 177
    228e:	b5 e0       	ldi	r27, 0x05	; 5
    2290:	bf 93       	push	r27
    2292:	af 93       	push	r26
    2294:	11 d5       	rcall	.+2594   	; 0x2cb8 <printf>
		while(cost[botloc-1]!=0)
    2296:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    229a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ef 58       	subi	r30, 0x8F	; 143
    22a4:	f9 4f       	sbci	r31, 0xF9	; 249
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	89 2b       	or	r24, r25
    22b6:	09 f4       	brne	.+2      	; 0x22ba <__stack+0xbb>
    22b8:	49 c1       	rjmp	.+658    	; 0x254c <__stack+0x34d>
		{
			lcd_print(2,5,botloc,2);
    22ba:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <botloc>
    22be:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <botloc+0x1>
    22c2:	22 e0       	ldi	r18, 0x02	; 2
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	65 e0       	ldi	r22, 0x05	; 5
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			minCost=cost[node[botloc-1][0]-1];
    22ce:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    22d2:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	e5 53       	subi	r30, 0x35	; 53
    22e4:	f9 4f       	sbci	r31, 0xF9	; 249
    22e6:	01 90       	ld	r0, Z+
    22e8:	f0 81       	ld	r31, Z
    22ea:	e0 2d       	mov	r30, r0
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	ef 58       	subi	r30, 0x8F	; 143
    22f2:	f9 4f       	sbci	r31, 0xF9	; 249
    22f4:	20 81       	ld	r18, Z
    22f6:	31 81       	ldd	r19, Z+1	; 0x01
			nxtNode=node[botloc-1][0];
    22f8:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    22fc:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	e5 53       	subi	r30, 0x35	; 53
    230e:	f9 4f       	sbci	r31, 0xF9	; 249
    2310:	60 80       	ld	r6, Z
    2312:	71 80       	ldd	r7, Z+1	; 0x01
			pos=0;
    2314:	e3 2c       	mov	r14, r3
    2316:	f4 2c       	mov	r15, r4
			for(i=1;i<4;i++)
    2318:	85 2d       	mov	r24, r5
    231a:	9b 2d       	mov	r25, r11
			{
				if(node[botloc-1][i]!=0)
    231c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2320:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2324:	31 97       	sbiw	r30, 0x01	; 1
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e8 0f       	add	r30, r24
    2330:	f9 1f       	adc	r31, r25
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ed 52       	subi	r30, 0x2D	; 45
    2338:	f9 4f       	sbci	r31, 0xF9	; 249
    233a:	40 81       	ld	r20, Z
    233c:	51 81       	ldd	r21, Z+1	; 0x01
    233e:	45 2b       	or	r20, r21
    2340:	09 f4       	brne	.+2      	; 0x2344 <__stack+0x145>
    2342:	45 c0       	rjmp	.+138    	; 0x23ce <__stack+0x1cf>
					if(cost[node[botloc-1][i]-1]<minCost)
    2344:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2348:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    234c:	31 97       	sbiw	r30, 0x01	; 1
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	e8 0f       	add	r30, r24
    2358:	f9 1f       	adc	r31, r25
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	ed 52       	subi	r30, 0x2D	; 45
    2360:	f9 4f       	sbci	r31, 0xF9	; 249
    2362:	01 90       	ld	r0, Z+
    2364:	f0 81       	ld	r31, Z
    2366:	e0 2d       	mov	r30, r0
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	ef 58       	subi	r30, 0x8F	; 143
    236e:	f9 4f       	sbci	r31, 0xF9	; 249
    2370:	40 81       	ld	r20, Z
    2372:	51 81       	ldd	r21, Z+1	; 0x01
    2374:	42 17       	cp	r20, r18
    2376:	53 07       	cpc	r21, r19
    2378:	54 f5       	brge	.+84     	; 0x23ce <__stack+0x1cf>
					{
						minCost=cost[node[botloc-1][i]-1];
    237a:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    237e:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2382:	31 97       	sbiw	r30, 0x01	; 1
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	e8 0f       	add	r30, r24
    238e:	f9 1f       	adc	r31, r25
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ed 52       	subi	r30, 0x2D	; 45
    2396:	f9 4f       	sbci	r31, 0xF9	; 249
    2398:	01 90       	ld	r0, Z+
    239a:	f0 81       	ld	r31, Z
    239c:	e0 2d       	mov	r30, r0
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ef 58       	subi	r30, 0x8F	; 143
    23a4:	f9 4f       	sbci	r31, 0xF9	; 249
    23a6:	20 81       	ld	r18, Z
    23a8:	31 81       	ldd	r19, Z+1	; 0x01
						nxtNode=node[botloc-1][i];
    23aa:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    23ae:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    23b2:	31 97       	sbiw	r30, 0x01	; 1
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	ee 0f       	add	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	e8 0f       	add	r30, r24
    23be:	f9 1f       	adc	r31, r25
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ed 52       	subi	r30, 0x2D	; 45
    23c6:	f9 4f       	sbci	r31, 0xF9	; 249
    23c8:	60 80       	ld	r6, Z
    23ca:	71 80       	ldd	r7, Z+1	; 0x01
    23cc:	7c 01       	movw	r14, r24
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
			for(i=1;i<4;i++)
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	91 05       	cpc	r25, r1
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <__stack+0x1d9>
    23d6:	a2 cf       	rjmp	.-188    	; 0x231c <__stack+0x11d>
    23d8:	47 01       	movw	r8, r14
    23da:	83 01       	movw	r16, r6
						minCost=cost[node[botloc-1][i]-1];
						nxtNode=node[botloc-1][i];
						pos=i;
					}
			}
			lcd_print(2,8,nxtNode,2);
    23dc:	22 e0       	ldi	r18, 0x02	; 2
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	a3 01       	movw	r20, r6
    23e2:	68 e0       	ldi	r22, 0x08	; 8
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_print>
			while((int)otherBotMovingTo==nxtNode);
    23ea:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <otherBotMovingTo>
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	80 17       	cp	r24, r16
    23f2:	91 07       	cpc	r25, r17
    23f4:	d1 f3       	breq	.-12     	; 0x23ea <__stack+0x1eb>
			while((int)otherBotLocation==nxtNode);
    23f6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <otherBotLocation>
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	80 17       	cp	r24, r16
    23fe:	91 07       	cpc	r25, r17
    2400:	d1 f3       	breq	.-12     	; 0x23f6 <__stack+0x1f7>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2402:	a0 ec       	ldi	r26, 0xC0	; 192
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	8c 91       	ld	r24, X
    2408:	85 ff       	sbrs	r24, 5
    240a:	fb cf       	rjmp	.-10     	; 0x2402 <__stack+0x203>
	UDR0 = data;
    240c:	85 e0       	ldi	r24, 0x05	; 5
    240e:	f6 01       	movw	r30, r12
    2410:	80 83       	st	Z, r24

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    2412:	00 68       	ori	r16, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2414:	a0 ec       	ldi	r26, 0xC0	; 192
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	8c 91       	ld	r24, X
    241a:	85 ff       	sbrs	r24, 5
    241c:	fb cf       	rjmp	.-10     	; 0x2414 <__stack+0x215>
	UDR0 = data;
    241e:	f6 01       	movw	r30, r12
    2420:	00 83       	st	Z, r16
			}
			lcd_print(2,8,nxtNode,2);
			while((int)otherBotMovingTo==nxtNode);
			while((int)otherBotLocation==nxtNode);
			SendNextNode(nxtNode);
			taskDone=move(pos);
    2422:	c4 01       	movw	r24, r8
    2424:	c4 db       	rcall	.-2168   	; 0x1bae <move>
			if(taskDone==0)
    2426:	89 2b       	or	r24, r25
    2428:	09 f0       	breq	.+2      	; 0x242c <__stack+0x22d>
    242a:	5b c0       	rjmp	.+182    	; 0x24e2 <__stack+0x2e3>
    242c:	93 01       	movw	r18, r6
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
			{
				for(i=0;i<4;i++)
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
    2432:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2436:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    243a:	31 97       	sbiw	r30, 0x01	; 1
    243c:	ee 0f       	add	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	ee 0d       	add	r30, r14
    2446:	ff 1d       	adc	r31, r15
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	ed 52       	subi	r30, 0x2D	; 45
    244e:	f9 4f       	sbci	r31, 0xF9	; 249
    2450:	01 90       	ld	r0, Z+
    2452:	f0 81       	ld	r31, Z
    2454:	e0 2d       	mov	r30, r0
    2456:	31 97       	sbiw	r30, 0x01	; 1
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	e8 0f       	add	r30, r24
    2462:	f9 1f       	adc	r31, r25
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ed 52       	subi	r30, 0x2D	; 45
    246a:	f9 4f       	sbci	r31, 0xF9	; 249
    246c:	40 81       	ld	r20, Z
    246e:	51 81       	ldd	r21, Z+1	; 0x01
    2470:	42 17       	cp	r20, r18
    2472:	53 07       	cpc	r21, r19
    2474:	f9 f4       	brne	.+62     	; 0x24b4 <__stack+0x2b5>
						node[node[botloc-1][pos]-1][i]=0;
    2476:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    247a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    247e:	31 97       	sbiw	r30, 0x01	; 1
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	ee 0d       	add	r30, r14
    248a:	ff 1d       	adc	r31, r15
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	ed 52       	subi	r30, 0x2D	; 45
    2492:	f9 4f       	sbci	r31, 0xF9	; 249
    2494:	01 90       	ld	r0, Z+
    2496:	f0 81       	ld	r31, Z
    2498:	e0 2d       	mov	r30, r0
    249a:	31 97       	sbiw	r30, 0x01	; 1
    249c:	ee 0f       	add	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	e8 0f       	add	r30, r24
    24a6:	f9 1f       	adc	r31, r25
    24a8:	ee 0f       	add	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	ed 52       	subi	r30, 0x2D	; 45
    24ae:	f9 4f       	sbci	r31, 0xF9	; 249
    24b0:	11 82       	std	Z+1, r1	; 0x01
    24b2:	10 82       	st	Z, r1
			while((int)otherBotLocation==nxtNode);
			SendNextNode(nxtNode);
			taskDone=move(pos);
			if(taskDone==0)
			{
				for(i=0;i<4;i++)
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	84 30       	cpi	r24, 0x04	; 4
    24b8:	91 05       	cpc	r25, r1
    24ba:	09 f0       	breq	.+2      	; 0x24be <__stack+0x2bf>
    24bc:	ba cf       	rjmp	.-140    	; 0x2432 <__stack+0x233>
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
						node[node[botloc-1][pos]-1][i]=0;
				node[botloc-1][pos]=0;
    24be:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    24c2:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    24c6:	31 97       	sbiw	r30, 0x01	; 1
    24c8:	ee 0f       	add	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	ee 0d       	add	r30, r14
    24d2:	ff 1d       	adc	r31, r15
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	ed 52       	subi	r30, 0x2D	; 45
    24da:	f9 4f       	sbci	r31, 0xF9	; 249
    24dc:	11 82       	std	Z+1, r1	; 0x01
    24de:	10 82       	st	Z, r1
				break;
    24e0:	35 c0       	rjmp	.+106    	; 0x254c <__stack+0x34d>
			}
			else
			{

				botloc=node[botloc-1][pos];
    24e2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    24e6:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    24ea:	31 97       	sbiw	r30, 0x01	; 1
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	e8 0d       	add	r30, r8
    24f6:	f9 1d       	adc	r31, r9
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ed 52       	subi	r30, 0x2D	; 45
    24fe:	f9 4f       	sbci	r31, 0xF9	; 249
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <botloc+0x1>
    2508:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <botloc>
				SendNodeReached(botloc);
    250c:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    2510:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2514:	a0 ec       	ldi	r26, 0xC0	; 192
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	8c 91       	ld	r24, X
    251a:	85 ff       	sbrs	r24, 5
    251c:	fb cf       	rjmp	.-10     	; 0x2514 <__stack+0x315>
	UDR0 = data;
    251e:	f6 01       	movw	r30, r12
    2520:	20 82       	st	Z, r2

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    2522:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2524:	a0 ec       	ldi	r26, 0xC0	; 192
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	8c 91       	ld	r24, X
    252a:	85 ff       	sbrs	r24, 5
    252c:	fb cf       	rjmp	.-10     	; 0x2524 <__stack+0x325>
	UDR0 = data;
    252e:	f6 01       	movw	r30, r12
    2530:	20 83       	st	Z, r18
		int taskDone=0;
		int i,minCost,nxtNode,pos;
		costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
		lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
		printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    2532:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2536:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    253a:	ee 0f       	add	r30, r30
    253c:	ff 1f       	adc	r31, r31
    253e:	ef 58       	subi	r30, 0x8F	; 143
    2540:	f9 4f       	sbci	r31, 0xF9	; 249
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	89 2b       	or	r24, r25
    2548:	09 f0       	breq	.+2      	; 0x254c <__stack+0x34d>
    254a:	b7 ce       	rjmp	.-658    	; 0x22ba <__stack+0xbb>
				botloc=node[botloc-1][pos];
				SendNodeReached(botloc);
			}
		}
			
		if(cost[botloc-1]==0)
    254c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2550:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ef 58       	subi	r30, 0x8F	; 143
    255a:	f9 4f       	sbci	r31, 0xF9	; 249
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	89 2b       	or	r24, r25
    2562:	09 f0       	breq	.+2      	; 0x2566 <__stack+0x367>
    2564:	8f c1       	rjmp	.+798    	; 0x2884 <__stack+0x685>
		{
			while(noteToStrike!=tasks[taskitr]);
    2566:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    256a:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    256e:	e9 5b       	subi	r30, 0xB9	; 185
    2570:	f9 4f       	sbci	r31, 0xF9	; 249
    2572:	90 81       	ld	r25, Z
    2574:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    2578:	98 13       	cpse	r25, r24
    257a:	fb cf       	rjmp	.-10     	; 0x2572 <__stack+0x373>
			if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang || noteangles[(int)notes[(int)noteToStrike]-1][1]==botang)
    257c:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	e3 5a       	subi	r30, 0xA3	; 163
    2584:	f9 4f       	sbci	r31, 0xF9	; 249
    2586:	e0 81       	ld	r30, Z
    2588:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <botang>
    258c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <botang+0x1>
    2590:	24 e0       	ldi	r18, 0x04	; 4
    2592:	e2 9f       	mul	r30, r18
    2594:	f0 01       	movw	r30, r0
    2596:	11 24       	eor	r1, r1
    2598:	e0 5e       	subi	r30, 0xE0	; 224
    259a:	fc 4f       	sbci	r31, 0xFC	; 252
    259c:	20 81       	ld	r18, Z
    259e:	31 81       	ldd	r19, Z+1	; 0x01
    25a0:	28 17       	cp	r18, r24
    25a2:	39 07       	cpc	r19, r25
    25a4:	89 f0       	breq	.+34     	; 0x25c8 <__stack+0x3c9>
    25a6:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	e3 5a       	subi	r30, 0xA3	; 163
    25ae:	f9 4f       	sbci	r31, 0xF9	; 249
    25b0:	e0 81       	ld	r30, Z
    25b2:	34 e0       	ldi	r19, 0x04	; 4
    25b4:	e3 9f       	mul	r30, r19
    25b6:	f0 01       	movw	r30, r0
    25b8:	11 24       	eor	r1, r1
    25ba:	e0 5e       	subi	r30, 0xE0	; 224
    25bc:	fc 4f       	sbci	r31, 0xFC	; 252
    25be:	22 81       	ldd	r18, Z+2	; 0x02
    25c0:	33 81       	ldd	r19, Z+3	; 0x03
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	c9 f4       	brne	.+50     	; 0x25fa <__stack+0x3fb>
			{
				if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang)
    25c8:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	e3 5a       	subi	r30, 0xA3	; 163
    25d0:	f9 4f       	sbci	r31, 0xF9	; 249
    25d2:	e0 81       	ld	r30, Z
    25d4:	a4 e0       	ldi	r26, 0x04	; 4
    25d6:	ea 9f       	mul	r30, r26
    25d8:	f0 01       	movw	r30, r0
    25da:	11 24       	eor	r1, r1
    25dc:	e0 5e       	subi	r30, 0xE0	; 224
    25de:	fc 4f       	sbci	r31, 0xFC	; 252
    25e0:	20 81       	ld	r18, Z
    25e2:	31 81       	ldd	r19, Z+1	; 0x01
    25e4:	82 17       	cp	r24, r18
    25e6:	93 07       	cpc	r25, r19
    25e8:	21 f4       	brne	.+8      	; 0x25f2 <__stack+0x3f3>
					servoStrike(0); // Strike Left
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	9a 2d       	mov	r25, r10
    25ee:	90 da       	rcall	.-2784   	; 0x1b10 <servoStrike>
    25f0:	03 c1       	rjmp	.+518    	; 0x27f8 <__stack+0x5f9>
				else
					servoStrike(1);//Strike Right
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	8c da       	rcall	.-2792   	; 0x1b10 <servoStrike>
    25f8:	ff c0       	rjmp	.+510    	; 0x27f8 <__stack+0x5f9>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	9a 2d       	mov	r25, r10
			else
			{
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
				{
					if(nodesnear[(int)notes[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes[(int)noteToStrike]-1][j])
    25fe:	a6 e0       	ldi	r26, 0x06	; 6
    2600:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	e3 5a       	subi	r30, 0xA3	; 163
    2608:	f9 4f       	sbci	r31, 0xF9	; 249
    260a:	20 81       	ld	r18, Z
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	21 50       	subi	r18, 0x01	; 1
    2610:	31 09       	sbc	r19, r1
    2612:	f9 01       	movw	r30, r18
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	e8 0f       	add	r30, r24
    2622:	f9 1f       	adc	r31, r25
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	e8 55       	subi	r30, 0x58	; 88
    262a:	fc 4f       	sbci	r31, 0xFC	; 252
    262c:	20 81       	ld	r18, Z
    262e:	31 81       	ldd	r19, Z+1	; 0x01
    2630:	23 2b       	or	r18, r19
    2632:	e9 f0       	breq	.+58     	; 0x266e <__stack+0x46f>
    2634:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	e3 5a       	subi	r30, 0xA3	; 163
    263c:	f9 4f       	sbci	r31, 0xF9	; 249
    263e:	40 81       	ld	r20, Z
    2640:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    2644:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	41 50       	subi	r20, 0x01	; 1
    264c:	51 09       	sbc	r21, r1
    264e:	a4 9f       	mul	r26, r20
    2650:	f0 01       	movw	r30, r0
    2652:	a5 9f       	mul	r26, r21
    2654:	f0 0d       	add	r31, r0
    2656:	11 24       	eor	r1, r1
    2658:	e8 0f       	add	r30, r24
    265a:	f9 1f       	adc	r31, r25
    265c:	ee 0f       	add	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	e8 55       	subi	r30, 0x58	; 88
    2662:	fc 4f       	sbci	r31, 0xFC	; 252
    2664:	40 81       	ld	r20, Z
    2666:	51 81       	ldd	r21, Z+1	; 0x01
    2668:	42 17       	cp	r20, r18
    266a:	53 07       	cpc	r21, r19
    266c:	31 f0       	breq	.+12     	; 0x267a <__stack+0x47b>
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	84 30       	cpi	r24, 0x04	; 4
    2672:	91 05       	cpc	r25, r1
    2674:	29 f6       	brne	.-118    	; 0x2600 <__stack+0x401>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	9a 2d       	mov	r25, r10
						break;
					}
				}
				for(int j=0;j<4;j++)
				{
					if(node[botloc-1][j]==movToDestNote[(int)notes[(int)noteToStrike]-1][tpos])
    267a:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    267e:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>
    2682:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	e3 5a       	subi	r30, 0xA3	; 163
    268a:	f9 4f       	sbci	r31, 0xF9	; 249
    268c:	e0 81       	ld	r30, Z
    268e:	22 0f       	add	r18, r18
    2690:	33 1f       	adc	r19, r19
    2692:	22 0f       	add	r18, r18
    2694:	33 1f       	adc	r19, r19
    2696:	22 0f       	add	r18, r18
    2698:	33 1f       	adc	r19, r19
    269a:	d9 01       	movw	r26, r18
    269c:	a5 53       	subi	r26, 0x35	; 53
    269e:	b9 4f       	sbci	r27, 0xF9	; 249
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	31 97       	sbiw	r30, 0x01	; 1
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	e8 0f       	add	r30, r24
    26ae:	f9 1f       	adc	r31, r25
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	e4 5e       	subi	r30, 0xE4	; 228
    26b6:	fd 4f       	sbci	r31, 0xFD	; 253
    26b8:	2d 91       	ld	r18, X+
    26ba:	3c 91       	ld	r19, X
    26bc:	40 81       	ld	r20, Z
    26be:	51 81       	ldd	r21, Z+1	; 0x01
    26c0:	24 17       	cp	r18, r20
    26c2:	35 07       	cpc	r19, r21
    26c4:	59 f1       	breq	.+86     	; 0x271c <__stack+0x51d>
    26c6:	01 e0       	ldi	r16, 0x01	; 1
    26c8:	10 e0       	ldi	r17, 0x00	; 0
    26ca:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <botloc>
    26ce:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <botloc+0x1>
    26d2:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	e3 5a       	subi	r30, 0xA3	; 163
    26da:	f9 4f       	sbci	r31, 0xF9	; 249
    26dc:	e0 81       	ld	r30, Z
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	aa 0f       	add	r26, r26
    26e2:	bb 1f       	adc	r27, r27
    26e4:	aa 0f       	add	r26, r26
    26e6:	bb 1f       	adc	r27, r27
    26e8:	a0 0f       	add	r26, r16
    26ea:	b1 1f       	adc	r27, r17
    26ec:	aa 0f       	add	r26, r26
    26ee:	bb 1f       	adc	r27, r27
    26f0:	ad 52       	subi	r26, 0x2D	; 45
    26f2:	b9 4f       	sbci	r27, 0xF9	; 249
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	31 97       	sbiw	r30, 0x01	; 1
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	e8 0f       	add	r30, r24
    2702:	f9 1f       	adc	r31, r25
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	e4 5e       	subi	r30, 0xE4	; 228
    270a:	fd 4f       	sbci	r31, 0xFD	; 253
    270c:	4d 91       	ld	r20, X+
    270e:	5c 91       	ld	r21, X
    2710:	20 81       	ld	r18, Z
    2712:	31 81       	ldd	r19, Z+1	; 0x01
    2714:	42 17       	cp	r20, r18
    2716:	53 07       	cpc	r21, r19
    2718:	a9 f4       	brne	.+42     	; 0x2744 <__stack+0x545>
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <__stack+0x521>
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    271c:	00 e0       	ldi	r16, 0x00	; 0
    271e:	1a 2d       	mov	r17, r10
				{
					if(node[botloc-1][j]==movToDestNote[(int)notes[(int)noteToStrike]-1][tpos])
					{
						p=j;
						nxtNode=node[botloc-1][j];
    2720:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2724:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2728:	31 97       	sbiw	r30, 0x01	; 1
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	e0 0f       	add	r30, r16
    2734:	f1 1f       	adc	r31, r17
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	ed 52       	subi	r30, 0x2D	; 45
    273c:	f9 4f       	sbci	r31, 0xF9	; 249
    273e:	60 80       	ld	r6, Z
    2740:	71 80       	ldd	r7, Z+1	; 0x01
						break;
    2742:	08 c0       	rjmp	.+16     	; 0x2754 <__stack+0x555>
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    2744:	0f 5f       	subi	r16, 0xFF	; 255
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	04 30       	cpi	r16, 0x04	; 4
    274a:	11 05       	cpc	r17, r1
    274c:	09 f0       	breq	.+2      	; 0x2750 <__stack+0x551>
    274e:	bd cf       	rjmp	.-134    	; 0x26ca <__stack+0x4cb>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
    2750:	00 e0       	ldi	r16, 0x00	; 0
    2752:	1a 2d       	mov	r17, r10
						p=j;
						nxtNode=node[botloc-1][j];
						break;
					}
				}
				strike=1;
    2754:	bb 81       	ldd	r27, Y+3	; 0x03
    2756:	b0 93 10 06 	sts	0x0610, r27	; 0x800610 <strike>
    275a:	ec 81       	ldd	r30, Y+4	; 0x04
    275c:	e0 93 11 06 	sts	0x0611, r30	; 0x800611 <strike+0x1>
				while((int)otherBotMovingTo==nxtNode);
    2760:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <otherBotMovingTo>
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	86 15       	cp	r24, r6
    2768:	97 05       	cpc	r25, r7
    276a:	d1 f3       	breq	.-12     	; 0x2760 <__stack+0x561>
				while((int)otherBotLocation==nxtNode);
    276c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <otherBotLocation>
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	86 15       	cp	r24, r6
    2774:	97 05       	cpc	r25, r7
    2776:	d1 f3       	breq	.-12     	; 0x276c <__stack+0x56d>
				SendNextNode(nxtNode);
    2778:	86 2d       	mov	r24, r6

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    277a:	a0 ec       	ldi	r26, 0xC0	; 192
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	9c 91       	ld	r25, X
    2780:	95 ff       	sbrs	r25, 5
    2782:	fb cf       	rjmp	.-10     	; 0x277a <__stack+0x57b>
	UDR0 = data;
    2784:	95 e0       	ldi	r25, 0x05	; 5
    2786:	f6 01       	movw	r30, r12
    2788:	90 83       	st	Z, r25

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    278a:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    278c:	a0 ec       	ldi	r26, 0xC0	; 192
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	9c 91       	ld	r25, X
    2792:	95 ff       	sbrs	r25, 5
    2794:	fb cf       	rjmp	.-10     	; 0x278c <__stack+0x58d>
	UDR0 = data;
    2796:	f6 01       	movw	r30, r12
    2798:	80 83       	st	Z, r24
				}
				strike=1;
				while((int)otherBotMovingTo==nxtNode);
				while((int)otherBotLocation==nxtNode);
				SendNextNode(nxtNode);
				taskDone=move(p);
    279a:	c8 01       	movw	r24, r16
    279c:	08 da       	rcall	.-3056   	; 0x1bae <move>
				if(taskDone==1)
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	59 f5       	brne	.+86     	; 0x27f8 <__stack+0x5f9>
				{
					botloc=node[botloc-1][p];
    27a2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    27a6:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    27aa:	31 97       	sbiw	r30, 0x01	; 1
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	ee 0f       	add	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	e0 0f       	add	r30, r16
    27b6:	f1 1f       	adc	r31, r17
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	ed 52       	subi	r30, 0x2D	; 45
    27be:	f9 4f       	sbci	r31, 0xF9	; 249
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <botloc+0x1>
    27c8:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <botloc>
					SendNodeReached(botloc);
    27cc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <botloc>
    27d0:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <botloc+0x1>
    27d4:	9c 01       	movw	r18, r24

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    27d6:	a0 ec       	ldi	r26, 0xC0	; 192
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	9c 91       	ld	r25, X
    27dc:	95 ff       	sbrs	r25, 5
    27de:	fb cf       	rjmp	.-10     	; 0x27d6 <__stack+0x5d7>
    27e0:	c9 01       	movw	r24, r18
	UDR0 = data;
    27e2:	94 e0       	ldi	r25, 0x04	; 4
    27e4:	f6 01       	movw	r30, r12
    27e6:	90 83       	st	Z, r25

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    27e8:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    27ea:	a0 ec       	ldi	r26, 0xC0	; 192
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	9c 91       	ld	r25, X
    27f0:	95 ff       	sbrs	r25, 5
    27f2:	fb cf       	rjmp	.-10     	; 0x27ea <__stack+0x5eb>
	UDR0 = data;
    27f4:	f6 01       	movw	r30, r12
    27f6:	80 83       	st	Z, r24
				{
					botloc=node[botloc-1][p];
					SendNodeReached(botloc);
				}
			}
			printf("Reached Destination node=%d \n",(int)notes[(int)tasks[taskitr]]);
    27f8:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    27fc:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2800:	e9 5b       	subi	r30, 0xB9	; 185
    2802:	f9 4f       	sbci	r31, 0xF9	; 249
    2804:	e0 81       	ld	r30, Z
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	e3 5a       	subi	r30, 0xA3	; 163
    280a:	f9 4f       	sbci	r31, 0xF9	; 249
    280c:	80 81       	ld	r24, Z
    280e:	1f 92       	push	r1
    2810:	8f 93       	push	r24
    2812:	83 ed       	ldi	r24, 0xD3	; 211
    2814:	95 e0       	ldi	r25, 0x05	; 5
    2816:	9f 93       	push	r25
    2818:	8f 93       	push	r24
    281a:	4e d2       	rcall	.+1180   	; 0x2cb8 <printf>
			buzzer_on();
    281c:	0e 94 45 0a 	call	0x148a	; 0x148a <buzzer_on>
    2820:	ff ef       	ldi	r31, 0xFF	; 255
    2822:	2f e7       	ldi	r18, 0x7F	; 127
    2824:	36 e1       	ldi	r19, 0x16	; 22
    2826:	f1 50       	subi	r31, 0x01	; 1
    2828:	20 40       	sbci	r18, 0x00	; 0
    282a:	30 40       	sbci	r19, 0x00	; 0
    282c:	e1 f7       	brne	.-8      	; 0x2826 <__stack+0x627>
    282e:	00 c0       	rjmp	.+0      	; 0x2830 <__stack+0x631>
    2830:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    2832:	0e 94 49 0a 	call	0x1492	; 0x1492 <buzzer_off>
			taskitr++;
    2836:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <taskitr>
    283a:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <taskitr+0x1>
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <taskitr+0x1>
    2844:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <taskitr>
			SendNoteStruck(noteToStrike);
    2848:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2854:	a0 ec       	ldi	r26, 0xC0	; 192
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	9c 91       	ld	r25, X
    285a:	95 ff       	sbrs	r25, 5
    285c:	fb cf       	rjmp	.-10     	; 0x2854 <__stack+0x655>
	UDR0 = data;
    285e:	96 e0       	ldi	r25, 0x06	; 6
    2860:	f6 01       	movw	r30, r12
    2862:	90 83       	st	Z, r25

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    2864:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2866:	a0 ec       	ldi	r26, 0xC0	; 192
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	9c 91       	ld	r25, X
    286c:	95 ff       	sbrs	r25, 5
    286e:	fb cf       	rjmp	.-10     	; 0x2866 <__stack+0x667>
	UDR0 = data;
    2870:	f6 01       	movw	r30, r12
    2872:	80 83       	st	Z, r24
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    2874:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <noteToStrike>
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    287e:	68 94       	set
    2880:	22 24       	eor	r2, r2
    2882:	22 f8       	bld	r2, 2
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while(notes[(int)noteToStrike]!=0 && taskitr!=taskCount)
    2884:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	e3 5a       	subi	r30, 0xA3	; 163
    288c:	f9 4f       	sbci	r31, 0xF9	; 249
    288e:	80 81       	ld	r24, Z
    2890:	88 23       	and	r24, r24
    2892:	59 f0       	breq	.+22     	; 0x28aa <__stack+0x6ab>
    2894:	20 91 42 06 	lds	r18, 0x0642	; 0x800642 <taskCount>
    2898:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <taskitr>
    289c:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <taskitr+0x1>
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	28 17       	cp	r18, r24
    28a4:	39 07       	cpc	r19, r25
    28a6:	09 f0       	breq	.+2      	; 0x28aa <__stack+0x6ab>
    28a8:	a2 cc       	rjmp	.-1724   	; 0x21ee <main+0x1c6>
			buzzer_off();
			taskitr++;
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
    28aa:	81 ef       	ldi	r24, 0xF1	; 241
    28ac:	95 e0       	ldi	r25, 0x05	; 5
    28ae:	17 d2       	rcall	.+1070   	; 0x2cde <puts>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    28b0:	e0 ec       	ldi	r30, 0xC0	; 192
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	85 ff       	sbrs	r24, 5
    28b8:	fd cf       	rjmp	.-6      	; 0x28b4 <__stack+0x6b5>
	UDR0 = data;
    28ba:	8a e0       	ldi	r24, 0x0A	; 10
    28bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    28c0:	e0 ec       	ldi	r30, 0xC0	; 192
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	85 ff       	sbrs	r24, 5
    28c8:	fd cf       	rjmp	.-6      	; 0x28c4 <__stack+0x6c5>
	UDR0 = data;
    28ca:	80 e8       	ldi	r24, 0x80	; 128
    28cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
	BotEnded();
	while(botEnd!=1);
    28d0:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <botEnd>
    28d4:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <botEnd+0x1>
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	d1 f7       	brne	.-12     	; 0x28d0 <__stack+0x6d1>
	buzzer_on();
    28dc:	0e 94 45 0a 	call	0x148a	; 0x148a <buzzer_on>
    28e0:	ff ef       	ldi	r31, 0xFF	; 255
    28e2:	2f ef       	ldi	r18, 0xFF	; 255
    28e4:	30 ee       	ldi	r19, 0xE0	; 224
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	f1 50       	subi	r31, 0x01	; 1
    28ea:	20 40       	sbci	r18, 0x00	; 0
    28ec:	30 40       	sbci	r19, 0x00	; 0
    28ee:	80 40       	sbci	r24, 0x00	; 0
    28f0:	d9 f7       	brne	.-10     	; 0x28e8 <__stack+0x6e9>
    28f2:	00 c0       	rjmp	.+0      	; 0x28f4 <__stack+0x6f5>
    28f4:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    28f6:	0e 94 49 0a 	call	0x1492	; 0x1492 <buzzer_off>
	return 0;
}
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
    2910:	ef 90       	pop	r14
    2912:	df 90       	pop	r13
    2914:	cf 90       	pop	r12
    2916:	bf 90       	pop	r11
    2918:	af 90       	pop	r10
    291a:	9f 90       	pop	r9
    291c:	8f 90       	pop	r8
    291e:	7f 90       	pop	r7
    2920:	6f 90       	pop	r6
    2922:	5f 90       	pop	r5
    2924:	4f 90       	pop	r4
    2926:	3f 90       	pop	r3
    2928:	2f 90       	pop	r2
    292a:	08 95       	ret

0000292c <__subsf3>:
    292c:	50 58       	subi	r21, 0x80	; 128

0000292e <__addsf3>:
    292e:	bb 27       	eor	r27, r27
    2930:	aa 27       	eor	r26, r26
    2932:	0e d0       	rcall	.+28     	; 0x2950 <__addsf3x>
    2934:	48 c1       	rjmp	.+656    	; 0x2bc6 <__fp_round>
    2936:	39 d1       	rcall	.+626    	; 0x2baa <__fp_pscA>
    2938:	30 f0       	brcs	.+12     	; 0x2946 <__addsf3+0x18>
    293a:	3e d1       	rcall	.+636    	; 0x2bb8 <__fp_pscB>
    293c:	20 f0       	brcs	.+8      	; 0x2946 <__addsf3+0x18>
    293e:	31 f4       	brne	.+12     	; 0x294c <__addsf3+0x1e>
    2940:	9f 3f       	cpi	r25, 0xFF	; 255
    2942:	11 f4       	brne	.+4      	; 0x2948 <__addsf3+0x1a>
    2944:	1e f4       	brtc	.+6      	; 0x294c <__addsf3+0x1e>
    2946:	2e c1       	rjmp	.+604    	; 0x2ba4 <__fp_nan>
    2948:	0e f4       	brtc	.+2      	; 0x294c <__addsf3+0x1e>
    294a:	e0 95       	com	r30
    294c:	e7 fb       	bst	r30, 7
    294e:	24 c1       	rjmp	.+584    	; 0x2b98 <__fp_inf>

00002950 <__addsf3x>:
    2950:	e9 2f       	mov	r30, r25
    2952:	4a d1       	rcall	.+660    	; 0x2be8 <__fp_split3>
    2954:	80 f3       	brcs	.-32     	; 0x2936 <__addsf3+0x8>
    2956:	ba 17       	cp	r27, r26
    2958:	62 07       	cpc	r22, r18
    295a:	73 07       	cpc	r23, r19
    295c:	84 07       	cpc	r24, r20
    295e:	95 07       	cpc	r25, r21
    2960:	18 f0       	brcs	.+6      	; 0x2968 <__addsf3x+0x18>
    2962:	71 f4       	brne	.+28     	; 0x2980 <__addsf3x+0x30>
    2964:	9e f5       	brtc	.+102    	; 0x29cc <__addsf3x+0x7c>
    2966:	62 c1       	rjmp	.+708    	; 0x2c2c <__fp_zero>
    2968:	0e f4       	brtc	.+2      	; 0x296c <__addsf3x+0x1c>
    296a:	e0 95       	com	r30
    296c:	0b 2e       	mov	r0, r27
    296e:	ba 2f       	mov	r27, r26
    2970:	a0 2d       	mov	r26, r0
    2972:	0b 01       	movw	r0, r22
    2974:	b9 01       	movw	r22, r18
    2976:	90 01       	movw	r18, r0
    2978:	0c 01       	movw	r0, r24
    297a:	ca 01       	movw	r24, r20
    297c:	a0 01       	movw	r20, r0
    297e:	11 24       	eor	r1, r1
    2980:	ff 27       	eor	r31, r31
    2982:	59 1b       	sub	r21, r25
    2984:	99 f0       	breq	.+38     	; 0x29ac <__addsf3x+0x5c>
    2986:	59 3f       	cpi	r21, 0xF9	; 249
    2988:	50 f4       	brcc	.+20     	; 0x299e <__addsf3x+0x4e>
    298a:	50 3e       	cpi	r21, 0xE0	; 224
    298c:	68 f1       	brcs	.+90     	; 0x29e8 <__addsf3x+0x98>
    298e:	1a 16       	cp	r1, r26
    2990:	f0 40       	sbci	r31, 0x00	; 0
    2992:	a2 2f       	mov	r26, r18
    2994:	23 2f       	mov	r18, r19
    2996:	34 2f       	mov	r19, r20
    2998:	44 27       	eor	r20, r20
    299a:	58 5f       	subi	r21, 0xF8	; 248
    299c:	f3 cf       	rjmp	.-26     	; 0x2984 <__addsf3x+0x34>
    299e:	46 95       	lsr	r20
    29a0:	37 95       	ror	r19
    29a2:	27 95       	ror	r18
    29a4:	a7 95       	ror	r26
    29a6:	f0 40       	sbci	r31, 0x00	; 0
    29a8:	53 95       	inc	r21
    29aa:	c9 f7       	brne	.-14     	; 0x299e <__addsf3x+0x4e>
    29ac:	7e f4       	brtc	.+30     	; 0x29cc <__addsf3x+0x7c>
    29ae:	1f 16       	cp	r1, r31
    29b0:	ba 0b       	sbc	r27, r26
    29b2:	62 0b       	sbc	r22, r18
    29b4:	73 0b       	sbc	r23, r19
    29b6:	84 0b       	sbc	r24, r20
    29b8:	ba f0       	brmi	.+46     	; 0x29e8 <__addsf3x+0x98>
    29ba:	91 50       	subi	r25, 0x01	; 1
    29bc:	a1 f0       	breq	.+40     	; 0x29e6 <__addsf3x+0x96>
    29be:	ff 0f       	add	r31, r31
    29c0:	bb 1f       	adc	r27, r27
    29c2:	66 1f       	adc	r22, r22
    29c4:	77 1f       	adc	r23, r23
    29c6:	88 1f       	adc	r24, r24
    29c8:	c2 f7       	brpl	.-16     	; 0x29ba <__addsf3x+0x6a>
    29ca:	0e c0       	rjmp	.+28     	; 0x29e8 <__addsf3x+0x98>
    29cc:	ba 0f       	add	r27, r26
    29ce:	62 1f       	adc	r22, r18
    29d0:	73 1f       	adc	r23, r19
    29d2:	84 1f       	adc	r24, r20
    29d4:	48 f4       	brcc	.+18     	; 0x29e8 <__addsf3x+0x98>
    29d6:	87 95       	ror	r24
    29d8:	77 95       	ror	r23
    29da:	67 95       	ror	r22
    29dc:	b7 95       	ror	r27
    29de:	f7 95       	ror	r31
    29e0:	9e 3f       	cpi	r25, 0xFE	; 254
    29e2:	08 f0       	brcs	.+2      	; 0x29e6 <__addsf3x+0x96>
    29e4:	b3 cf       	rjmp	.-154    	; 0x294c <__addsf3+0x1e>
    29e6:	93 95       	inc	r25
    29e8:	88 0f       	add	r24, r24
    29ea:	08 f0       	brcs	.+2      	; 0x29ee <__addsf3x+0x9e>
    29ec:	99 27       	eor	r25, r25
    29ee:	ee 0f       	add	r30, r30
    29f0:	97 95       	ror	r25
    29f2:	87 95       	ror	r24
    29f4:	08 95       	ret

000029f6 <__divsf3>:
    29f6:	0c d0       	rcall	.+24     	; 0x2a10 <__divsf3x>
    29f8:	e6 c0       	rjmp	.+460    	; 0x2bc6 <__fp_round>
    29fa:	de d0       	rcall	.+444    	; 0x2bb8 <__fp_pscB>
    29fc:	40 f0       	brcs	.+16     	; 0x2a0e <__divsf3+0x18>
    29fe:	d5 d0       	rcall	.+426    	; 0x2baa <__fp_pscA>
    2a00:	30 f0       	brcs	.+12     	; 0x2a0e <__divsf3+0x18>
    2a02:	21 f4       	brne	.+8      	; 0x2a0c <__divsf3+0x16>
    2a04:	5f 3f       	cpi	r21, 0xFF	; 255
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <__divsf3+0x18>
    2a08:	c7 c0       	rjmp	.+398    	; 0x2b98 <__fp_inf>
    2a0a:	51 11       	cpse	r21, r1
    2a0c:	10 c1       	rjmp	.+544    	; 0x2c2e <__fp_szero>
    2a0e:	ca c0       	rjmp	.+404    	; 0x2ba4 <__fp_nan>

00002a10 <__divsf3x>:
    2a10:	eb d0       	rcall	.+470    	; 0x2be8 <__fp_split3>
    2a12:	98 f3       	brcs	.-26     	; 0x29fa <__divsf3+0x4>

00002a14 <__divsf3_pse>:
    2a14:	99 23       	and	r25, r25
    2a16:	c9 f3       	breq	.-14     	; 0x2a0a <__divsf3+0x14>
    2a18:	55 23       	and	r21, r21
    2a1a:	b1 f3       	breq	.-20     	; 0x2a08 <__divsf3+0x12>
    2a1c:	95 1b       	sub	r25, r21
    2a1e:	55 0b       	sbc	r21, r21
    2a20:	bb 27       	eor	r27, r27
    2a22:	aa 27       	eor	r26, r26
    2a24:	62 17       	cp	r22, r18
    2a26:	73 07       	cpc	r23, r19
    2a28:	84 07       	cpc	r24, r20
    2a2a:	38 f0       	brcs	.+14     	; 0x2a3a <__divsf3_pse+0x26>
    2a2c:	9f 5f       	subi	r25, 0xFF	; 255
    2a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	44 1f       	adc	r20, r20
    2a36:	aa 1f       	adc	r26, r26
    2a38:	a9 f3       	breq	.-22     	; 0x2a24 <__divsf3_pse+0x10>
    2a3a:	33 d0       	rcall	.+102    	; 0x2aa2 <__divsf3_pse+0x8e>
    2a3c:	0e 2e       	mov	r0, r30
    2a3e:	3a f0       	brmi	.+14     	; 0x2a4e <__divsf3_pse+0x3a>
    2a40:	e0 e8       	ldi	r30, 0x80	; 128
    2a42:	30 d0       	rcall	.+96     	; 0x2aa4 <__divsf3_pse+0x90>
    2a44:	91 50       	subi	r25, 0x01	; 1
    2a46:	50 40       	sbci	r21, 0x00	; 0
    2a48:	e6 95       	lsr	r30
    2a4a:	00 1c       	adc	r0, r0
    2a4c:	ca f7       	brpl	.-14     	; 0x2a40 <__divsf3_pse+0x2c>
    2a4e:	29 d0       	rcall	.+82     	; 0x2aa2 <__divsf3_pse+0x8e>
    2a50:	fe 2f       	mov	r31, r30
    2a52:	27 d0       	rcall	.+78     	; 0x2aa2 <__divsf3_pse+0x8e>
    2a54:	66 0f       	add	r22, r22
    2a56:	77 1f       	adc	r23, r23
    2a58:	88 1f       	adc	r24, r24
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	26 17       	cp	r18, r22
    2a5e:	37 07       	cpc	r19, r23
    2a60:	48 07       	cpc	r20, r24
    2a62:	ab 07       	cpc	r26, r27
    2a64:	b0 e8       	ldi	r27, 0x80	; 128
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <__divsf3_pse+0x56>
    2a68:	bb 0b       	sbc	r27, r27
    2a6a:	80 2d       	mov	r24, r0
    2a6c:	bf 01       	movw	r22, r30
    2a6e:	ff 27       	eor	r31, r31
    2a70:	93 58       	subi	r25, 0x83	; 131
    2a72:	5f 4f       	sbci	r21, 0xFF	; 255
    2a74:	2a f0       	brmi	.+10     	; 0x2a80 <__divsf3_pse+0x6c>
    2a76:	9e 3f       	cpi	r25, 0xFE	; 254
    2a78:	51 05       	cpc	r21, r1
    2a7a:	68 f0       	brcs	.+26     	; 0x2a96 <__divsf3_pse+0x82>
    2a7c:	8d c0       	rjmp	.+282    	; 0x2b98 <__fp_inf>
    2a7e:	d7 c0       	rjmp	.+430    	; 0x2c2e <__fp_szero>
    2a80:	5f 3f       	cpi	r21, 0xFF	; 255
    2a82:	ec f3       	brlt	.-6      	; 0x2a7e <__divsf3_pse+0x6a>
    2a84:	98 3e       	cpi	r25, 0xE8	; 232
    2a86:	dc f3       	brlt	.-10     	; 0x2a7e <__divsf3_pse+0x6a>
    2a88:	86 95       	lsr	r24
    2a8a:	77 95       	ror	r23
    2a8c:	67 95       	ror	r22
    2a8e:	b7 95       	ror	r27
    2a90:	f7 95       	ror	r31
    2a92:	9f 5f       	subi	r25, 0xFF	; 255
    2a94:	c9 f7       	brne	.-14     	; 0x2a88 <__divsf3_pse+0x74>
    2a96:	88 0f       	add	r24, r24
    2a98:	91 1d       	adc	r25, r1
    2a9a:	96 95       	lsr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	97 f9       	bld	r25, 7
    2aa0:	08 95       	ret
    2aa2:	e1 e0       	ldi	r30, 0x01	; 1
    2aa4:	66 0f       	add	r22, r22
    2aa6:	77 1f       	adc	r23, r23
    2aa8:	88 1f       	adc	r24, r24
    2aaa:	bb 1f       	adc	r27, r27
    2aac:	62 17       	cp	r22, r18
    2aae:	73 07       	cpc	r23, r19
    2ab0:	84 07       	cpc	r24, r20
    2ab2:	ba 07       	cpc	r27, r26
    2ab4:	20 f0       	brcs	.+8      	; 0x2abe <__divsf3_pse+0xaa>
    2ab6:	62 1b       	sub	r22, r18
    2ab8:	73 0b       	sbc	r23, r19
    2aba:	84 0b       	sbc	r24, r20
    2abc:	ba 0b       	sbc	r27, r26
    2abe:	ee 1f       	adc	r30, r30
    2ac0:	88 f7       	brcc	.-30     	; 0x2aa4 <__divsf3_pse+0x90>
    2ac2:	e0 95       	com	r30
    2ac4:	08 95       	ret

00002ac6 <__fixunssfsi>:
    2ac6:	98 d0       	rcall	.+304    	; 0x2bf8 <__fp_splitA>
    2ac8:	88 f0       	brcs	.+34     	; 0x2aec <__fixunssfsi+0x26>
    2aca:	9f 57       	subi	r25, 0x7F	; 127
    2acc:	90 f0       	brcs	.+36     	; 0x2af2 <__fixunssfsi+0x2c>
    2ace:	b9 2f       	mov	r27, r25
    2ad0:	99 27       	eor	r25, r25
    2ad2:	b7 51       	subi	r27, 0x17	; 23
    2ad4:	a0 f0       	brcs	.+40     	; 0x2afe <__fixunssfsi+0x38>
    2ad6:	d1 f0       	breq	.+52     	; 0x2b0c <__fixunssfsi+0x46>
    2ad8:	66 0f       	add	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	88 1f       	adc	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	1a f0       	brmi	.+6      	; 0x2ae8 <__fixunssfsi+0x22>
    2ae2:	ba 95       	dec	r27
    2ae4:	c9 f7       	brne	.-14     	; 0x2ad8 <__fixunssfsi+0x12>
    2ae6:	12 c0       	rjmp	.+36     	; 0x2b0c <__fixunssfsi+0x46>
    2ae8:	b1 30       	cpi	r27, 0x01	; 1
    2aea:	81 f0       	breq	.+32     	; 0x2b0c <__fixunssfsi+0x46>
    2aec:	9f d0       	rcall	.+318    	; 0x2c2c <__fp_zero>
    2aee:	b1 e0       	ldi	r27, 0x01	; 1
    2af0:	08 95       	ret
    2af2:	9c c0       	rjmp	.+312    	; 0x2c2c <__fp_zero>
    2af4:	67 2f       	mov	r22, r23
    2af6:	78 2f       	mov	r23, r24
    2af8:	88 27       	eor	r24, r24
    2afa:	b8 5f       	subi	r27, 0xF8	; 248
    2afc:	39 f0       	breq	.+14     	; 0x2b0c <__fixunssfsi+0x46>
    2afe:	b9 3f       	cpi	r27, 0xF9	; 249
    2b00:	cc f3       	brlt	.-14     	; 0x2af4 <__fixunssfsi+0x2e>
    2b02:	86 95       	lsr	r24
    2b04:	77 95       	ror	r23
    2b06:	67 95       	ror	r22
    2b08:	b3 95       	inc	r27
    2b0a:	d9 f7       	brne	.-10     	; 0x2b02 <__fixunssfsi+0x3c>
    2b0c:	3e f4       	brtc	.+14     	; 0x2b1c <__fixunssfsi+0x56>
    2b0e:	90 95       	com	r25
    2b10:	80 95       	com	r24
    2b12:	70 95       	com	r23
    2b14:	61 95       	neg	r22
    2b16:	7f 4f       	sbci	r23, 0xFF	; 255
    2b18:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1c:	08 95       	ret

00002b1e <__floatunsisf>:
    2b1e:	e8 94       	clt
    2b20:	09 c0       	rjmp	.+18     	; 0x2b34 <__floatsisf+0x12>

00002b22 <__floatsisf>:
    2b22:	97 fb       	bst	r25, 7
    2b24:	3e f4       	brtc	.+14     	; 0x2b34 <__floatsisf+0x12>
    2b26:	90 95       	com	r25
    2b28:	80 95       	com	r24
    2b2a:	70 95       	com	r23
    2b2c:	61 95       	neg	r22
    2b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b30:	8f 4f       	sbci	r24, 0xFF	; 255
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	99 23       	and	r25, r25
    2b36:	a9 f0       	breq	.+42     	; 0x2b62 <__floatsisf+0x40>
    2b38:	f9 2f       	mov	r31, r25
    2b3a:	96 e9       	ldi	r25, 0x96	; 150
    2b3c:	bb 27       	eor	r27, r27
    2b3e:	93 95       	inc	r25
    2b40:	f6 95       	lsr	r31
    2b42:	87 95       	ror	r24
    2b44:	77 95       	ror	r23
    2b46:	67 95       	ror	r22
    2b48:	b7 95       	ror	r27
    2b4a:	f1 11       	cpse	r31, r1
    2b4c:	f8 cf       	rjmp	.-16     	; 0x2b3e <__floatsisf+0x1c>
    2b4e:	fa f4       	brpl	.+62     	; 0x2b8e <__floatsisf+0x6c>
    2b50:	bb 0f       	add	r27, r27
    2b52:	11 f4       	brne	.+4      	; 0x2b58 <__floatsisf+0x36>
    2b54:	60 ff       	sbrs	r22, 0
    2b56:	1b c0       	rjmp	.+54     	; 0x2b8e <__floatsisf+0x6c>
    2b58:	6f 5f       	subi	r22, 0xFF	; 255
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	16 c0       	rjmp	.+44     	; 0x2b8e <__floatsisf+0x6c>
    2b62:	88 23       	and	r24, r24
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <__floatsisf+0x48>
    2b66:	96 e9       	ldi	r25, 0x96	; 150
    2b68:	11 c0       	rjmp	.+34     	; 0x2b8c <__floatsisf+0x6a>
    2b6a:	77 23       	and	r23, r23
    2b6c:	21 f0       	breq	.+8      	; 0x2b76 <__floatsisf+0x54>
    2b6e:	9e e8       	ldi	r25, 0x8E	; 142
    2b70:	87 2f       	mov	r24, r23
    2b72:	76 2f       	mov	r23, r22
    2b74:	05 c0       	rjmp	.+10     	; 0x2b80 <__floatsisf+0x5e>
    2b76:	66 23       	and	r22, r22
    2b78:	71 f0       	breq	.+28     	; 0x2b96 <__floatsisf+0x74>
    2b7a:	96 e8       	ldi	r25, 0x86	; 134
    2b7c:	86 2f       	mov	r24, r22
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	2a f0       	brmi	.+10     	; 0x2b8e <__floatsisf+0x6c>
    2b84:	9a 95       	dec	r25
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	da f7       	brpl	.-10     	; 0x2b84 <__floatsisf+0x62>
    2b8e:	88 0f       	add	r24, r24
    2b90:	96 95       	lsr	r25
    2b92:	87 95       	ror	r24
    2b94:	97 f9       	bld	r25, 7
    2b96:	08 95       	ret

00002b98 <__fp_inf>:
    2b98:	97 f9       	bld	r25, 7
    2b9a:	9f 67       	ori	r25, 0x7F	; 127
    2b9c:	80 e8       	ldi	r24, 0x80	; 128
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	08 95       	ret

00002ba4 <__fp_nan>:
    2ba4:	9f ef       	ldi	r25, 0xFF	; 255
    2ba6:	80 ec       	ldi	r24, 0xC0	; 192
    2ba8:	08 95       	ret

00002baa <__fp_pscA>:
    2baa:	00 24       	eor	r0, r0
    2bac:	0a 94       	dec	r0
    2bae:	16 16       	cp	r1, r22
    2bb0:	17 06       	cpc	r1, r23
    2bb2:	18 06       	cpc	r1, r24
    2bb4:	09 06       	cpc	r0, r25
    2bb6:	08 95       	ret

00002bb8 <__fp_pscB>:
    2bb8:	00 24       	eor	r0, r0
    2bba:	0a 94       	dec	r0
    2bbc:	12 16       	cp	r1, r18
    2bbe:	13 06       	cpc	r1, r19
    2bc0:	14 06       	cpc	r1, r20
    2bc2:	05 06       	cpc	r0, r21
    2bc4:	08 95       	ret

00002bc6 <__fp_round>:
    2bc6:	09 2e       	mov	r0, r25
    2bc8:	03 94       	inc	r0
    2bca:	00 0c       	add	r0, r0
    2bcc:	11 f4       	brne	.+4      	; 0x2bd2 <__fp_round+0xc>
    2bce:	88 23       	and	r24, r24
    2bd0:	52 f0       	brmi	.+20     	; 0x2be6 <__fp_round+0x20>
    2bd2:	bb 0f       	add	r27, r27
    2bd4:	40 f4       	brcc	.+16     	; 0x2be6 <__fp_round+0x20>
    2bd6:	bf 2b       	or	r27, r31
    2bd8:	11 f4       	brne	.+4      	; 0x2bde <__fp_round+0x18>
    2bda:	60 ff       	sbrs	r22, 0
    2bdc:	04 c0       	rjmp	.+8      	; 0x2be6 <__fp_round+0x20>
    2bde:	6f 5f       	subi	r22, 0xFF	; 255
    2be0:	7f 4f       	sbci	r23, 0xFF	; 255
    2be2:	8f 4f       	sbci	r24, 0xFF	; 255
    2be4:	9f 4f       	sbci	r25, 0xFF	; 255
    2be6:	08 95       	ret

00002be8 <__fp_split3>:
    2be8:	57 fd       	sbrc	r21, 7
    2bea:	90 58       	subi	r25, 0x80	; 128
    2bec:	44 0f       	add	r20, r20
    2bee:	55 1f       	adc	r21, r21
    2bf0:	59 f0       	breq	.+22     	; 0x2c08 <__fp_splitA+0x10>
    2bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bf4:	71 f0       	breq	.+28     	; 0x2c12 <__fp_splitA+0x1a>
    2bf6:	47 95       	ror	r20

00002bf8 <__fp_splitA>:
    2bf8:	88 0f       	add	r24, r24
    2bfa:	97 fb       	bst	r25, 7
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	61 f0       	breq	.+24     	; 0x2c18 <__fp_splitA+0x20>
    2c00:	9f 3f       	cpi	r25, 0xFF	; 255
    2c02:	79 f0       	breq	.+30     	; 0x2c22 <__fp_splitA+0x2a>
    2c04:	87 95       	ror	r24
    2c06:	08 95       	ret
    2c08:	12 16       	cp	r1, r18
    2c0a:	13 06       	cpc	r1, r19
    2c0c:	14 06       	cpc	r1, r20
    2c0e:	55 1f       	adc	r21, r21
    2c10:	f2 cf       	rjmp	.-28     	; 0x2bf6 <__fp_split3+0xe>
    2c12:	46 95       	lsr	r20
    2c14:	f1 df       	rcall	.-30     	; 0x2bf8 <__fp_splitA>
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <__fp_splitA+0x30>
    2c18:	16 16       	cp	r1, r22
    2c1a:	17 06       	cpc	r1, r23
    2c1c:	18 06       	cpc	r1, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	f1 cf       	rjmp	.-30     	; 0x2c04 <__fp_splitA+0xc>
    2c22:	86 95       	lsr	r24
    2c24:	71 05       	cpc	r23, r1
    2c26:	61 05       	cpc	r22, r1
    2c28:	08 94       	sec
    2c2a:	08 95       	ret

00002c2c <__fp_zero>:
    2c2c:	e8 94       	clt

00002c2e <__fp_szero>:
    2c2e:	bb 27       	eor	r27, r27
    2c30:	66 27       	eor	r22, r22
    2c32:	77 27       	eor	r23, r23
    2c34:	cb 01       	movw	r24, r22
    2c36:	97 f9       	bld	r25, 7
    2c38:	08 95       	ret

00002c3a <__gesf2>:
    2c3a:	03 d0       	rcall	.+6      	; 0x2c42 <__fp_cmp>
    2c3c:	08 f4       	brcc	.+2      	; 0x2c40 <__gesf2+0x6>
    2c3e:	8f ef       	ldi	r24, 0xFF	; 255
    2c40:	08 95       	ret

00002c42 <__fp_cmp>:
    2c42:	99 0f       	add	r25, r25
    2c44:	00 08       	sbc	r0, r0
    2c46:	55 0f       	add	r21, r21
    2c48:	aa 0b       	sbc	r26, r26
    2c4a:	e0 e8       	ldi	r30, 0x80	; 128
    2c4c:	fe ef       	ldi	r31, 0xFE	; 254
    2c4e:	16 16       	cp	r1, r22
    2c50:	17 06       	cpc	r1, r23
    2c52:	e8 07       	cpc	r30, r24
    2c54:	f9 07       	cpc	r31, r25
    2c56:	c0 f0       	brcs	.+48     	; 0x2c88 <__fp_cmp+0x46>
    2c58:	12 16       	cp	r1, r18
    2c5a:	13 06       	cpc	r1, r19
    2c5c:	e4 07       	cpc	r30, r20
    2c5e:	f5 07       	cpc	r31, r21
    2c60:	98 f0       	brcs	.+38     	; 0x2c88 <__fp_cmp+0x46>
    2c62:	62 1b       	sub	r22, r18
    2c64:	73 0b       	sbc	r23, r19
    2c66:	84 0b       	sbc	r24, r20
    2c68:	95 0b       	sbc	r25, r21
    2c6a:	39 f4       	brne	.+14     	; 0x2c7a <__fp_cmp+0x38>
    2c6c:	0a 26       	eor	r0, r26
    2c6e:	61 f0       	breq	.+24     	; 0x2c88 <__fp_cmp+0x46>
    2c70:	23 2b       	or	r18, r19
    2c72:	24 2b       	or	r18, r20
    2c74:	25 2b       	or	r18, r21
    2c76:	21 f4       	brne	.+8      	; 0x2c80 <__fp_cmp+0x3e>
    2c78:	08 95       	ret
    2c7a:	0a 26       	eor	r0, r26
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <__fp_cmp+0x3e>
    2c7e:	a1 40       	sbci	r26, 0x01	; 1
    2c80:	a6 95       	lsr	r26
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	81 1d       	adc	r24, r1
    2c86:	81 1d       	adc	r24, r1
    2c88:	08 95       	ret

00002c8a <__tablejump2__>:
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	88 1f       	adc	r24, r24
    2c90:	8b bf       	out	0x3b, r24	; 59
    2c92:	07 90       	elpm	r0, Z+
    2c94:	f6 91       	elpm	r31, Z
    2c96:	e0 2d       	mov	r30, r0
    2c98:	19 94       	eijmp

00002c9a <__umulhisi3>:
    2c9a:	a2 9f       	mul	r26, r18
    2c9c:	b0 01       	movw	r22, r0
    2c9e:	b3 9f       	mul	r27, r19
    2ca0:	c0 01       	movw	r24, r0
    2ca2:	a3 9f       	mul	r26, r19
    2ca4:	70 0d       	add	r23, r0
    2ca6:	81 1d       	adc	r24, r1
    2ca8:	11 24       	eor	r1, r1
    2caa:	91 1d       	adc	r25, r1
    2cac:	b2 9f       	mul	r27, r18
    2cae:	70 0d       	add	r23, r0
    2cb0:	81 1d       	adc	r24, r1
    2cb2:	11 24       	eor	r1, r1
    2cb4:	91 1d       	adc	r25, r1
    2cb6:	08 95       	ret

00002cb8 <printf>:
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	ae 01       	movw	r20, r28
    2cc2:	4a 5f       	subi	r20, 0xFA	; 250
    2cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc6:	fa 01       	movw	r30, r20
    2cc8:	61 91       	ld	r22, Z+
    2cca:	71 91       	ld	r23, Z+
    2ccc:	af 01       	movw	r20, r30
    2cce:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <__iob+0x2>
    2cd2:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <__iob+0x3>
    2cd6:	33 d0       	rcall	.+102    	; 0x2d3e <vfprintf>
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <puts>:
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	e0 91 f6 09 	lds	r30, 0x09F6	; 0x8009f6 <__iob+0x2>
    2cea:	f0 91 f7 09 	lds	r31, 0x09F7	; 0x8009f7 <__iob+0x3>
    2cee:	23 81       	ldd	r18, Z+3	; 0x03
    2cf0:	21 ff       	sbrs	r18, 1
    2cf2:	1b c0       	rjmp	.+54     	; 0x2d2a <puts+0x4c>
    2cf4:	8c 01       	movw	r16, r24
    2cf6:	d0 e0       	ldi	r29, 0x00	; 0
    2cf8:	c0 e0       	ldi	r28, 0x00	; 0
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	81 91       	ld	r24, Z+
    2cfe:	8f 01       	movw	r16, r30
    2d00:	60 91 f6 09 	lds	r22, 0x09F6	; 0x8009f6 <__iob+0x2>
    2d04:	70 91 f7 09 	lds	r23, 0x09F7	; 0x8009f7 <__iob+0x3>
    2d08:	db 01       	movw	r26, r22
    2d0a:	18 96       	adiw	r26, 0x08	; 8
    2d0c:	ed 91       	ld	r30, X+
    2d0e:	fc 91       	ld	r31, X
    2d10:	19 97       	sbiw	r26, 0x09	; 9
    2d12:	88 23       	and	r24, r24
    2d14:	31 f0       	breq	.+12     	; 0x2d22 <puts+0x44>
    2d16:	19 95       	eicall
    2d18:	89 2b       	or	r24, r25
    2d1a:	79 f3       	breq	.-34     	; 0x2cfa <puts+0x1c>
    2d1c:	df ef       	ldi	r29, 0xFF	; 255
    2d1e:	cf ef       	ldi	r28, 0xFF	; 255
    2d20:	ec cf       	rjmp	.-40     	; 0x2cfa <puts+0x1c>
    2d22:	8a e0       	ldi	r24, 0x0A	; 10
    2d24:	19 95       	eicall
    2d26:	89 2b       	or	r24, r25
    2d28:	19 f0       	breq	.+6      	; 0x2d30 <puts+0x52>
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	9f ef       	ldi	r25, 0xFF	; 255
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <puts+0x56>
    2d30:	8d 2f       	mov	r24, r29
    2d32:	9c 2f       	mov	r25, r28
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <vfprintf>:
    2d3e:	2f 92       	push	r2
    2d40:	3f 92       	push	r3
    2d42:	4f 92       	push	r4
    2d44:	5f 92       	push	r5
    2d46:	6f 92       	push	r6
    2d48:	7f 92       	push	r7
    2d4a:	8f 92       	push	r8
    2d4c:	9f 92       	push	r9
    2d4e:	af 92       	push	r10
    2d50:	bf 92       	push	r11
    2d52:	cf 92       	push	r12
    2d54:	df 92       	push	r13
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	2c 97       	sbiw	r28, 0x0c	; 12
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	7c 01       	movw	r14, r24
    2d74:	6b 01       	movw	r12, r22
    2d76:	8a 01       	movw	r16, r20
    2d78:	fc 01       	movw	r30, r24
    2d7a:	17 82       	std	Z+7, r1	; 0x07
    2d7c:	16 82       	std	Z+6, r1	; 0x06
    2d7e:	83 81       	ldd	r24, Z+3	; 0x03
    2d80:	81 ff       	sbrs	r24, 1
    2d82:	b0 c1       	rjmp	.+864    	; 0x30e4 <vfprintf+0x3a6>
    2d84:	ce 01       	movw	r24, r28
    2d86:	01 96       	adiw	r24, 0x01	; 1
    2d88:	4c 01       	movw	r8, r24
    2d8a:	f7 01       	movw	r30, r14
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	f6 01       	movw	r30, r12
    2d90:	93 fd       	sbrc	r25, 3
    2d92:	85 91       	lpm	r24, Z+
    2d94:	93 ff       	sbrs	r25, 3
    2d96:	81 91       	ld	r24, Z+
    2d98:	6f 01       	movw	r12, r30
    2d9a:	88 23       	and	r24, r24
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <vfprintf+0x62>
    2d9e:	9e c1       	rjmp	.+828    	; 0x30dc <vfprintf+0x39e>
    2da0:	85 32       	cpi	r24, 0x25	; 37
    2da2:	39 f4       	brne	.+14     	; 0x2db2 <vfprintf+0x74>
    2da4:	93 fd       	sbrc	r25, 3
    2da6:	85 91       	lpm	r24, Z+
    2da8:	93 ff       	sbrs	r25, 3
    2daa:	81 91       	ld	r24, Z+
    2dac:	6f 01       	movw	r12, r30
    2dae:	85 32       	cpi	r24, 0x25	; 37
    2db0:	21 f4       	brne	.+8      	; 0x2dba <vfprintf+0x7c>
    2db2:	b7 01       	movw	r22, r14
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	c7 d1       	rcall	.+910    	; 0x3146 <fputc>
    2db8:	e8 cf       	rjmp	.-48     	; 0x2d8a <vfprintf+0x4c>
    2dba:	51 2c       	mov	r5, r1
    2dbc:	31 2c       	mov	r3, r1
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	20 32       	cpi	r18, 0x20	; 32
    2dc2:	a0 f4       	brcc	.+40     	; 0x2dec <vfprintf+0xae>
    2dc4:	8b 32       	cpi	r24, 0x2B	; 43
    2dc6:	69 f0       	breq	.+26     	; 0x2de2 <vfprintf+0xa4>
    2dc8:	30 f4       	brcc	.+12     	; 0x2dd6 <vfprintf+0x98>
    2dca:	80 32       	cpi	r24, 0x20	; 32
    2dcc:	59 f0       	breq	.+22     	; 0x2de4 <vfprintf+0xa6>
    2dce:	83 32       	cpi	r24, 0x23	; 35
    2dd0:	69 f4       	brne	.+26     	; 0x2dec <vfprintf+0xae>
    2dd2:	20 61       	ori	r18, 0x10	; 16
    2dd4:	2c c0       	rjmp	.+88     	; 0x2e2e <vfprintf+0xf0>
    2dd6:	8d 32       	cpi	r24, 0x2D	; 45
    2dd8:	39 f0       	breq	.+14     	; 0x2de8 <vfprintf+0xaa>
    2dda:	80 33       	cpi	r24, 0x30	; 48
    2ddc:	39 f4       	brne	.+14     	; 0x2dec <vfprintf+0xae>
    2dde:	21 60       	ori	r18, 0x01	; 1
    2de0:	26 c0       	rjmp	.+76     	; 0x2e2e <vfprintf+0xf0>
    2de2:	22 60       	ori	r18, 0x02	; 2
    2de4:	24 60       	ori	r18, 0x04	; 4
    2de6:	23 c0       	rjmp	.+70     	; 0x2e2e <vfprintf+0xf0>
    2de8:	28 60       	ori	r18, 0x08	; 8
    2dea:	21 c0       	rjmp	.+66     	; 0x2e2e <vfprintf+0xf0>
    2dec:	27 fd       	sbrc	r18, 7
    2dee:	27 c0       	rjmp	.+78     	; 0x2e3e <vfprintf+0x100>
    2df0:	30 ed       	ldi	r19, 0xD0	; 208
    2df2:	38 0f       	add	r19, r24
    2df4:	3a 30       	cpi	r19, 0x0A	; 10
    2df6:	78 f4       	brcc	.+30     	; 0x2e16 <vfprintf+0xd8>
    2df8:	26 ff       	sbrs	r18, 6
    2dfa:	06 c0       	rjmp	.+12     	; 0x2e08 <vfprintf+0xca>
    2dfc:	fa e0       	ldi	r31, 0x0A	; 10
    2dfe:	5f 9e       	mul	r5, r31
    2e00:	30 0d       	add	r19, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	53 2e       	mov	r5, r19
    2e06:	13 c0       	rjmp	.+38     	; 0x2e2e <vfprintf+0xf0>
    2e08:	8a e0       	ldi	r24, 0x0A	; 10
    2e0a:	38 9e       	mul	r3, r24
    2e0c:	30 0d       	add	r19, r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	33 2e       	mov	r3, r19
    2e12:	20 62       	ori	r18, 0x20	; 32
    2e14:	0c c0       	rjmp	.+24     	; 0x2e2e <vfprintf+0xf0>
    2e16:	8e 32       	cpi	r24, 0x2E	; 46
    2e18:	21 f4       	brne	.+8      	; 0x2e22 <vfprintf+0xe4>
    2e1a:	26 fd       	sbrc	r18, 6
    2e1c:	5f c1       	rjmp	.+702    	; 0x30dc <vfprintf+0x39e>
    2e1e:	20 64       	ori	r18, 0x40	; 64
    2e20:	06 c0       	rjmp	.+12     	; 0x2e2e <vfprintf+0xf0>
    2e22:	8c 36       	cpi	r24, 0x6C	; 108
    2e24:	11 f4       	brne	.+4      	; 0x2e2a <vfprintf+0xec>
    2e26:	20 68       	ori	r18, 0x80	; 128
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <vfprintf+0xf0>
    2e2a:	88 36       	cpi	r24, 0x68	; 104
    2e2c:	41 f4       	brne	.+16     	; 0x2e3e <vfprintf+0x100>
    2e2e:	f6 01       	movw	r30, r12
    2e30:	93 fd       	sbrc	r25, 3
    2e32:	85 91       	lpm	r24, Z+
    2e34:	93 ff       	sbrs	r25, 3
    2e36:	81 91       	ld	r24, Z+
    2e38:	6f 01       	movw	r12, r30
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	c1 cf       	rjmp	.-126    	; 0x2dc0 <vfprintf+0x82>
    2e3e:	98 2f       	mov	r25, r24
    2e40:	9f 7d       	andi	r25, 0xDF	; 223
    2e42:	95 54       	subi	r25, 0x45	; 69
    2e44:	93 30       	cpi	r25, 0x03	; 3
    2e46:	28 f4       	brcc	.+10     	; 0x2e52 <vfprintf+0x114>
    2e48:	0c 5f       	subi	r16, 0xFC	; 252
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	ff e3       	ldi	r31, 0x3F	; 63
    2e4e:	f9 83       	std	Y+1, r31	; 0x01
    2e50:	0d c0       	rjmp	.+26     	; 0x2e6c <vfprintf+0x12e>
    2e52:	83 36       	cpi	r24, 0x63	; 99
    2e54:	31 f0       	breq	.+12     	; 0x2e62 <vfprintf+0x124>
    2e56:	83 37       	cpi	r24, 0x73	; 115
    2e58:	71 f0       	breq	.+28     	; 0x2e76 <vfprintf+0x138>
    2e5a:	83 35       	cpi	r24, 0x53	; 83
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <vfprintf+0x122>
    2e5e:	57 c0       	rjmp	.+174    	; 0x2f0e <vfprintf+0x1d0>
    2e60:	21 c0       	rjmp	.+66     	; 0x2ea4 <vfprintf+0x166>
    2e62:	f8 01       	movw	r30, r16
    2e64:	80 81       	ld	r24, Z
    2e66:	89 83       	std	Y+1, r24	; 0x01
    2e68:	0e 5f       	subi	r16, 0xFE	; 254
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	44 24       	eor	r4, r4
    2e6e:	43 94       	inc	r4
    2e70:	51 2c       	mov	r5, r1
    2e72:	54 01       	movw	r10, r8
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <vfprintf+0x160>
    2e76:	38 01       	movw	r6, r16
    2e78:	f2 e0       	ldi	r31, 0x02	; 2
    2e7a:	6f 0e       	add	r6, r31
    2e7c:	71 1c       	adc	r7, r1
    2e7e:	f8 01       	movw	r30, r16
    2e80:	a0 80       	ld	r10, Z
    2e82:	b1 80       	ldd	r11, Z+1	; 0x01
    2e84:	26 ff       	sbrs	r18, 6
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <vfprintf+0x150>
    2e88:	65 2d       	mov	r22, r5
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <vfprintf+0x154>
    2e8e:	6f ef       	ldi	r22, 0xFF	; 255
    2e90:	7f ef       	ldi	r23, 0xFF	; 255
    2e92:	c5 01       	movw	r24, r10
    2e94:	2c 87       	std	Y+12, r18	; 0x0c
    2e96:	4c d1       	rcall	.+664    	; 0x3130 <strnlen>
    2e98:	2c 01       	movw	r4, r24
    2e9a:	83 01       	movw	r16, r6
    2e9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e9e:	2f 77       	andi	r18, 0x7F	; 127
    2ea0:	22 2e       	mov	r2, r18
    2ea2:	16 c0       	rjmp	.+44     	; 0x2ed0 <vfprintf+0x192>
    2ea4:	38 01       	movw	r6, r16
    2ea6:	f2 e0       	ldi	r31, 0x02	; 2
    2ea8:	6f 0e       	add	r6, r31
    2eaa:	71 1c       	adc	r7, r1
    2eac:	f8 01       	movw	r30, r16
    2eae:	a0 80       	ld	r10, Z
    2eb0:	b1 80       	ldd	r11, Z+1	; 0x01
    2eb2:	26 ff       	sbrs	r18, 6
    2eb4:	03 c0       	rjmp	.+6      	; 0x2ebc <vfprintf+0x17e>
    2eb6:	65 2d       	mov	r22, r5
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <vfprintf+0x182>
    2ebc:	6f ef       	ldi	r22, 0xFF	; 255
    2ebe:	7f ef       	ldi	r23, 0xFF	; 255
    2ec0:	c5 01       	movw	r24, r10
    2ec2:	2c 87       	std	Y+12, r18	; 0x0c
    2ec4:	2a d1       	rcall	.+596    	; 0x311a <strnlen_P>
    2ec6:	2c 01       	movw	r4, r24
    2ec8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eca:	20 68       	ori	r18, 0x80	; 128
    2ecc:	22 2e       	mov	r2, r18
    2ece:	83 01       	movw	r16, r6
    2ed0:	23 fc       	sbrc	r2, 3
    2ed2:	19 c0       	rjmp	.+50     	; 0x2f06 <vfprintf+0x1c8>
    2ed4:	83 2d       	mov	r24, r3
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	48 16       	cp	r4, r24
    2eda:	59 06       	cpc	r5, r25
    2edc:	a0 f4       	brcc	.+40     	; 0x2f06 <vfprintf+0x1c8>
    2ede:	b7 01       	movw	r22, r14
    2ee0:	80 e2       	ldi	r24, 0x20	; 32
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	30 d1       	rcall	.+608    	; 0x3146 <fputc>
    2ee6:	3a 94       	dec	r3
    2ee8:	f5 cf       	rjmp	.-22     	; 0x2ed4 <vfprintf+0x196>
    2eea:	f5 01       	movw	r30, r10
    2eec:	27 fc       	sbrc	r2, 7
    2eee:	85 91       	lpm	r24, Z+
    2ef0:	27 fe       	sbrs	r2, 7
    2ef2:	81 91       	ld	r24, Z+
    2ef4:	5f 01       	movw	r10, r30
    2ef6:	b7 01       	movw	r22, r14
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	25 d1       	rcall	.+586    	; 0x3146 <fputc>
    2efc:	31 10       	cpse	r3, r1
    2efe:	3a 94       	dec	r3
    2f00:	f1 e0       	ldi	r31, 0x01	; 1
    2f02:	4f 1a       	sub	r4, r31
    2f04:	51 08       	sbc	r5, r1
    2f06:	41 14       	cp	r4, r1
    2f08:	51 04       	cpc	r5, r1
    2f0a:	79 f7       	brne	.-34     	; 0x2eea <vfprintf+0x1ac>
    2f0c:	de c0       	rjmp	.+444    	; 0x30ca <vfprintf+0x38c>
    2f0e:	84 36       	cpi	r24, 0x64	; 100
    2f10:	11 f0       	breq	.+4      	; 0x2f16 <vfprintf+0x1d8>
    2f12:	89 36       	cpi	r24, 0x69	; 105
    2f14:	31 f5       	brne	.+76     	; 0x2f62 <vfprintf+0x224>
    2f16:	f8 01       	movw	r30, r16
    2f18:	27 ff       	sbrs	r18, 7
    2f1a:	07 c0       	rjmp	.+14     	; 0x2f2a <vfprintf+0x1ec>
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	0c 5f       	subi	r16, 0xFC	; 252
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	08 c0       	rjmp	.+16     	; 0x2f3a <vfprintf+0x1fc>
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	07 2e       	mov	r0, r23
    2f30:	00 0c       	add	r0, r0
    2f32:	88 0b       	sbc	r24, r24
    2f34:	99 0b       	sbc	r25, r25
    2f36:	0e 5f       	subi	r16, 0xFE	; 254
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	2f 76       	andi	r18, 0x6F	; 111
    2f3c:	72 2e       	mov	r7, r18
    2f3e:	97 ff       	sbrs	r25, 7
    2f40:	09 c0       	rjmp	.+18     	; 0x2f54 <vfprintf+0x216>
    2f42:	90 95       	com	r25
    2f44:	80 95       	com	r24
    2f46:	70 95       	com	r23
    2f48:	61 95       	neg	r22
    2f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f50:	20 68       	ori	r18, 0x80	; 128
    2f52:	72 2e       	mov	r7, r18
    2f54:	2a e0       	ldi	r18, 0x0A	; 10
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	a4 01       	movw	r20, r8
    2f5a:	2d d1       	rcall	.+602    	; 0x31b6 <__ultoa_invert>
    2f5c:	a8 2e       	mov	r10, r24
    2f5e:	a8 18       	sub	r10, r8
    2f60:	43 c0       	rjmp	.+134    	; 0x2fe8 <vfprintf+0x2aa>
    2f62:	85 37       	cpi	r24, 0x75	; 117
    2f64:	29 f4       	brne	.+10     	; 0x2f70 <vfprintf+0x232>
    2f66:	2f 7e       	andi	r18, 0xEF	; 239
    2f68:	b2 2e       	mov	r11, r18
    2f6a:	2a e0       	ldi	r18, 0x0A	; 10
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	25 c0       	rjmp	.+74     	; 0x2fba <vfprintf+0x27c>
    2f70:	f2 2f       	mov	r31, r18
    2f72:	f9 7f       	andi	r31, 0xF9	; 249
    2f74:	bf 2e       	mov	r11, r31
    2f76:	8f 36       	cpi	r24, 0x6F	; 111
    2f78:	c1 f0       	breq	.+48     	; 0x2faa <vfprintf+0x26c>
    2f7a:	18 f4       	brcc	.+6      	; 0x2f82 <vfprintf+0x244>
    2f7c:	88 35       	cpi	r24, 0x58	; 88
    2f7e:	79 f0       	breq	.+30     	; 0x2f9e <vfprintf+0x260>
    2f80:	ad c0       	rjmp	.+346    	; 0x30dc <vfprintf+0x39e>
    2f82:	80 37       	cpi	r24, 0x70	; 112
    2f84:	19 f0       	breq	.+6      	; 0x2f8c <vfprintf+0x24e>
    2f86:	88 37       	cpi	r24, 0x78	; 120
    2f88:	21 f0       	breq	.+8      	; 0x2f92 <vfprintf+0x254>
    2f8a:	a8 c0       	rjmp	.+336    	; 0x30dc <vfprintf+0x39e>
    2f8c:	2f 2f       	mov	r18, r31
    2f8e:	20 61       	ori	r18, 0x10	; 16
    2f90:	b2 2e       	mov	r11, r18
    2f92:	b4 fe       	sbrs	r11, 4
    2f94:	0d c0       	rjmp	.+26     	; 0x2fb0 <vfprintf+0x272>
    2f96:	8b 2d       	mov	r24, r11
    2f98:	84 60       	ori	r24, 0x04	; 4
    2f9a:	b8 2e       	mov	r11, r24
    2f9c:	09 c0       	rjmp	.+18     	; 0x2fb0 <vfprintf+0x272>
    2f9e:	24 ff       	sbrs	r18, 4
    2fa0:	0a c0       	rjmp	.+20     	; 0x2fb6 <vfprintf+0x278>
    2fa2:	9f 2f       	mov	r25, r31
    2fa4:	96 60       	ori	r25, 0x06	; 6
    2fa6:	b9 2e       	mov	r11, r25
    2fa8:	06 c0       	rjmp	.+12     	; 0x2fb6 <vfprintf+0x278>
    2faa:	28 e0       	ldi	r18, 0x08	; 8
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	05 c0       	rjmp	.+10     	; 0x2fba <vfprintf+0x27c>
    2fb0:	20 e1       	ldi	r18, 0x10	; 16
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <vfprintf+0x27c>
    2fb6:	20 e1       	ldi	r18, 0x10	; 16
    2fb8:	32 e0       	ldi	r19, 0x02	; 2
    2fba:	f8 01       	movw	r30, r16
    2fbc:	b7 fe       	sbrs	r11, 7
    2fbe:	07 c0       	rjmp	.+14     	; 0x2fce <vfprintf+0x290>
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	0c 5f       	subi	r16, 0xFC	; 252
    2fca:	1f 4f       	sbci	r17, 0xFF	; 255
    2fcc:	06 c0       	rjmp	.+12     	; 0x2fda <vfprintf+0x29c>
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 5f       	subi	r16, 0xFE	; 254
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	a4 01       	movw	r20, r8
    2fdc:	ec d0       	rcall	.+472    	; 0x31b6 <__ultoa_invert>
    2fde:	a8 2e       	mov	r10, r24
    2fe0:	a8 18       	sub	r10, r8
    2fe2:	fb 2d       	mov	r31, r11
    2fe4:	ff 77       	andi	r31, 0x7F	; 127
    2fe6:	7f 2e       	mov	r7, r31
    2fe8:	76 fe       	sbrs	r7, 6
    2fea:	0b c0       	rjmp	.+22     	; 0x3002 <vfprintf+0x2c4>
    2fec:	37 2d       	mov	r19, r7
    2fee:	3e 7f       	andi	r19, 0xFE	; 254
    2ff0:	a5 14       	cp	r10, r5
    2ff2:	50 f4       	brcc	.+20     	; 0x3008 <vfprintf+0x2ca>
    2ff4:	74 fe       	sbrs	r7, 4
    2ff6:	0a c0       	rjmp	.+20     	; 0x300c <vfprintf+0x2ce>
    2ff8:	72 fc       	sbrc	r7, 2
    2ffa:	08 c0       	rjmp	.+16     	; 0x300c <vfprintf+0x2ce>
    2ffc:	37 2d       	mov	r19, r7
    2ffe:	3e 7e       	andi	r19, 0xEE	; 238
    3000:	05 c0       	rjmp	.+10     	; 0x300c <vfprintf+0x2ce>
    3002:	ba 2c       	mov	r11, r10
    3004:	37 2d       	mov	r19, r7
    3006:	03 c0       	rjmp	.+6      	; 0x300e <vfprintf+0x2d0>
    3008:	ba 2c       	mov	r11, r10
    300a:	01 c0       	rjmp	.+2      	; 0x300e <vfprintf+0x2d0>
    300c:	b5 2c       	mov	r11, r5
    300e:	34 ff       	sbrs	r19, 4
    3010:	0d c0       	rjmp	.+26     	; 0x302c <vfprintf+0x2ee>
    3012:	fe 01       	movw	r30, r28
    3014:	ea 0d       	add	r30, r10
    3016:	f1 1d       	adc	r31, r1
    3018:	80 81       	ld	r24, Z
    301a:	80 33       	cpi	r24, 0x30	; 48
    301c:	11 f4       	brne	.+4      	; 0x3022 <vfprintf+0x2e4>
    301e:	39 7e       	andi	r19, 0xE9	; 233
    3020:	09 c0       	rjmp	.+18     	; 0x3034 <vfprintf+0x2f6>
    3022:	32 ff       	sbrs	r19, 2
    3024:	06 c0       	rjmp	.+12     	; 0x3032 <vfprintf+0x2f4>
    3026:	b3 94       	inc	r11
    3028:	b3 94       	inc	r11
    302a:	04 c0       	rjmp	.+8      	; 0x3034 <vfprintf+0x2f6>
    302c:	83 2f       	mov	r24, r19
    302e:	86 78       	andi	r24, 0x86	; 134
    3030:	09 f0       	breq	.+2      	; 0x3034 <vfprintf+0x2f6>
    3032:	b3 94       	inc	r11
    3034:	33 fd       	sbrc	r19, 3
    3036:	12 c0       	rjmp	.+36     	; 0x305c <vfprintf+0x31e>
    3038:	30 ff       	sbrs	r19, 0
    303a:	06 c0       	rjmp	.+12     	; 0x3048 <vfprintf+0x30a>
    303c:	5a 2c       	mov	r5, r10
    303e:	b3 14       	cp	r11, r3
    3040:	18 f4       	brcc	.+6      	; 0x3048 <vfprintf+0x30a>
    3042:	53 0c       	add	r5, r3
    3044:	5b 18       	sub	r5, r11
    3046:	b3 2c       	mov	r11, r3
    3048:	b3 14       	cp	r11, r3
    304a:	60 f4       	brcc	.+24     	; 0x3064 <vfprintf+0x326>
    304c:	b7 01       	movw	r22, r14
    304e:	80 e2       	ldi	r24, 0x20	; 32
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	3c 87       	std	Y+12, r19	; 0x0c
    3054:	78 d0       	rcall	.+240    	; 0x3146 <fputc>
    3056:	b3 94       	inc	r11
    3058:	3c 85       	ldd	r19, Y+12	; 0x0c
    305a:	f6 cf       	rjmp	.-20     	; 0x3048 <vfprintf+0x30a>
    305c:	b3 14       	cp	r11, r3
    305e:	10 f4       	brcc	.+4      	; 0x3064 <vfprintf+0x326>
    3060:	3b 18       	sub	r3, r11
    3062:	01 c0       	rjmp	.+2      	; 0x3066 <vfprintf+0x328>
    3064:	31 2c       	mov	r3, r1
    3066:	34 ff       	sbrs	r19, 4
    3068:	11 c0       	rjmp	.+34     	; 0x308c <vfprintf+0x34e>
    306a:	b7 01       	movw	r22, r14
    306c:	80 e3       	ldi	r24, 0x30	; 48
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	3c 87       	std	Y+12, r19	; 0x0c
    3072:	69 d0       	rcall	.+210    	; 0x3146 <fputc>
    3074:	3c 85       	ldd	r19, Y+12	; 0x0c
    3076:	32 ff       	sbrs	r19, 2
    3078:	16 c0       	rjmp	.+44     	; 0x30a6 <vfprintf+0x368>
    307a:	31 fd       	sbrc	r19, 1
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <vfprintf+0x346>
    307e:	88 e7       	ldi	r24, 0x78	; 120
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <vfprintf+0x34a>
    3084:	88 e5       	ldi	r24, 0x58	; 88
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	b7 01       	movw	r22, r14
    308a:	0c c0       	rjmp	.+24     	; 0x30a4 <vfprintf+0x366>
    308c:	83 2f       	mov	r24, r19
    308e:	86 78       	andi	r24, 0x86	; 134
    3090:	51 f0       	breq	.+20     	; 0x30a6 <vfprintf+0x368>
    3092:	31 ff       	sbrs	r19, 1
    3094:	02 c0       	rjmp	.+4      	; 0x309a <vfprintf+0x35c>
    3096:	8b e2       	ldi	r24, 0x2B	; 43
    3098:	01 c0       	rjmp	.+2      	; 0x309c <vfprintf+0x35e>
    309a:	80 e2       	ldi	r24, 0x20	; 32
    309c:	37 fd       	sbrc	r19, 7
    309e:	8d e2       	ldi	r24, 0x2D	; 45
    30a0:	b7 01       	movw	r22, r14
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	50 d0       	rcall	.+160    	; 0x3146 <fputc>
    30a6:	a5 14       	cp	r10, r5
    30a8:	30 f4       	brcc	.+12     	; 0x30b6 <vfprintf+0x378>
    30aa:	b7 01       	movw	r22, r14
    30ac:	80 e3       	ldi	r24, 0x30	; 48
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	4a d0       	rcall	.+148    	; 0x3146 <fputc>
    30b2:	5a 94       	dec	r5
    30b4:	f8 cf       	rjmp	.-16     	; 0x30a6 <vfprintf+0x368>
    30b6:	aa 94       	dec	r10
    30b8:	f4 01       	movw	r30, r8
    30ba:	ea 0d       	add	r30, r10
    30bc:	f1 1d       	adc	r31, r1
    30be:	80 81       	ld	r24, Z
    30c0:	b7 01       	movw	r22, r14
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	40 d0       	rcall	.+128    	; 0x3146 <fputc>
    30c6:	a1 10       	cpse	r10, r1
    30c8:	f6 cf       	rjmp	.-20     	; 0x30b6 <vfprintf+0x378>
    30ca:	33 20       	and	r3, r3
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <vfprintf+0x392>
    30ce:	5d ce       	rjmp	.-838    	; 0x2d8a <vfprintf+0x4c>
    30d0:	b7 01       	movw	r22, r14
    30d2:	80 e2       	ldi	r24, 0x20	; 32
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	37 d0       	rcall	.+110    	; 0x3146 <fputc>
    30d8:	3a 94       	dec	r3
    30da:	f7 cf       	rjmp	.-18     	; 0x30ca <vfprintf+0x38c>
    30dc:	f7 01       	movw	r30, r14
    30de:	86 81       	ldd	r24, Z+6	; 0x06
    30e0:	97 81       	ldd	r25, Z+7	; 0x07
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <vfprintf+0x3aa>
    30e4:	8f ef       	ldi	r24, 0xFF	; 255
    30e6:	9f ef       	ldi	r25, 0xFF	; 255
    30e8:	2c 96       	adiw	r28, 0x0c	; 12
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	bf 90       	pop	r11
    3106:	af 90       	pop	r10
    3108:	9f 90       	pop	r9
    310a:	8f 90       	pop	r8
    310c:	7f 90       	pop	r7
    310e:	6f 90       	pop	r6
    3110:	5f 90       	pop	r5
    3112:	4f 90       	pop	r4
    3114:	3f 90       	pop	r3
    3116:	2f 90       	pop	r2
    3118:	08 95       	ret

0000311a <strnlen_P>:
    311a:	fc 01       	movw	r30, r24
    311c:	05 90       	lpm	r0, Z+
    311e:	61 50       	subi	r22, 0x01	; 1
    3120:	70 40       	sbci	r23, 0x00	; 0
    3122:	01 10       	cpse	r0, r1
    3124:	d8 f7       	brcc	.-10     	; 0x311c <strnlen_P+0x2>
    3126:	80 95       	com	r24
    3128:	90 95       	com	r25
    312a:	8e 0f       	add	r24, r30
    312c:	9f 1f       	adc	r25, r31
    312e:	08 95       	ret

00003130 <strnlen>:
    3130:	fc 01       	movw	r30, r24
    3132:	61 50       	subi	r22, 0x01	; 1
    3134:	70 40       	sbci	r23, 0x00	; 0
    3136:	01 90       	ld	r0, Z+
    3138:	01 10       	cpse	r0, r1
    313a:	d8 f7       	brcc	.-10     	; 0x3132 <strnlen+0x2>
    313c:	80 95       	com	r24
    313e:	90 95       	com	r25
    3140:	8e 0f       	add	r24, r30
    3142:	9f 1f       	adc	r25, r31
    3144:	08 95       	ret

00003146 <fputc>:
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	fb 01       	movw	r30, r22
    3150:	23 81       	ldd	r18, Z+3	; 0x03
    3152:	21 fd       	sbrc	r18, 1
    3154:	03 c0       	rjmp	.+6      	; 0x315c <fputc+0x16>
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	9f ef       	ldi	r25, 0xFF	; 255
    315a:	28 c0       	rjmp	.+80     	; 0x31ac <fputc+0x66>
    315c:	22 ff       	sbrs	r18, 2
    315e:	16 c0       	rjmp	.+44     	; 0x318c <fputc+0x46>
    3160:	46 81       	ldd	r20, Z+6	; 0x06
    3162:	57 81       	ldd	r21, Z+7	; 0x07
    3164:	24 81       	ldd	r18, Z+4	; 0x04
    3166:	35 81       	ldd	r19, Z+5	; 0x05
    3168:	42 17       	cp	r20, r18
    316a:	53 07       	cpc	r21, r19
    316c:	44 f4       	brge	.+16     	; 0x317e <fputc+0x38>
    316e:	a0 81       	ld	r26, Z
    3170:	b1 81       	ldd	r27, Z+1	; 0x01
    3172:	9d 01       	movw	r18, r26
    3174:	2f 5f       	subi	r18, 0xFF	; 255
    3176:	3f 4f       	sbci	r19, 0xFF	; 255
    3178:	31 83       	std	Z+1, r19	; 0x01
    317a:	20 83       	st	Z, r18
    317c:	8c 93       	st	X, r24
    317e:	26 81       	ldd	r18, Z+6	; 0x06
    3180:	37 81       	ldd	r19, Z+7	; 0x07
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	37 83       	std	Z+7, r19	; 0x07
    3188:	26 83       	std	Z+6, r18	; 0x06
    318a:	10 c0       	rjmp	.+32     	; 0x31ac <fputc+0x66>
    318c:	eb 01       	movw	r28, r22
    318e:	09 2f       	mov	r16, r25
    3190:	18 2f       	mov	r17, r24
    3192:	00 84       	ldd	r0, Z+8	; 0x08
    3194:	f1 85       	ldd	r31, Z+9	; 0x09
    3196:	e0 2d       	mov	r30, r0
    3198:	19 95       	eicall
    319a:	89 2b       	or	r24, r25
    319c:	e1 f6       	brne	.-72     	; 0x3156 <fputc+0x10>
    319e:	8e 81       	ldd	r24, Y+6	; 0x06
    31a0:	9f 81       	ldd	r25, Y+7	; 0x07
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	9f 83       	std	Y+7, r25	; 0x07
    31a6:	8e 83       	std	Y+6, r24	; 0x06
    31a8:	81 2f       	mov	r24, r17
    31aa:	90 2f       	mov	r25, r16
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	08 95       	ret

000031b6 <__ultoa_invert>:
    31b6:	fa 01       	movw	r30, r20
    31b8:	aa 27       	eor	r26, r26
    31ba:	28 30       	cpi	r18, 0x08	; 8
    31bc:	51 f1       	breq	.+84     	; 0x3212 <__ultoa_invert+0x5c>
    31be:	20 31       	cpi	r18, 0x10	; 16
    31c0:	81 f1       	breq	.+96     	; 0x3222 <__ultoa_invert+0x6c>
    31c2:	e8 94       	clt
    31c4:	6f 93       	push	r22
    31c6:	6e 7f       	andi	r22, 0xFE	; 254
    31c8:	6e 5f       	subi	r22, 0xFE	; 254
    31ca:	7f 4f       	sbci	r23, 0xFF	; 255
    31cc:	8f 4f       	sbci	r24, 0xFF	; 255
    31ce:	9f 4f       	sbci	r25, 0xFF	; 255
    31d0:	af 4f       	sbci	r26, 0xFF	; 255
    31d2:	b1 e0       	ldi	r27, 0x01	; 1
    31d4:	3e d0       	rcall	.+124    	; 0x3252 <__ultoa_invert+0x9c>
    31d6:	b4 e0       	ldi	r27, 0x04	; 4
    31d8:	3c d0       	rcall	.+120    	; 0x3252 <__ultoa_invert+0x9c>
    31da:	67 0f       	add	r22, r23
    31dc:	78 1f       	adc	r23, r24
    31de:	89 1f       	adc	r24, r25
    31e0:	9a 1f       	adc	r25, r26
    31e2:	a1 1d       	adc	r26, r1
    31e4:	68 0f       	add	r22, r24
    31e6:	79 1f       	adc	r23, r25
    31e8:	8a 1f       	adc	r24, r26
    31ea:	91 1d       	adc	r25, r1
    31ec:	a1 1d       	adc	r26, r1
    31ee:	6a 0f       	add	r22, r26
    31f0:	71 1d       	adc	r23, r1
    31f2:	81 1d       	adc	r24, r1
    31f4:	91 1d       	adc	r25, r1
    31f6:	a1 1d       	adc	r26, r1
    31f8:	20 d0       	rcall	.+64     	; 0x323a <__ultoa_invert+0x84>
    31fa:	09 f4       	brne	.+2      	; 0x31fe <__ultoa_invert+0x48>
    31fc:	68 94       	set
    31fe:	3f 91       	pop	r19
    3200:	2a e0       	ldi	r18, 0x0A	; 10
    3202:	26 9f       	mul	r18, r22
    3204:	11 24       	eor	r1, r1
    3206:	30 19       	sub	r19, r0
    3208:	30 5d       	subi	r19, 0xD0	; 208
    320a:	31 93       	st	Z+, r19
    320c:	de f6       	brtc	.-74     	; 0x31c4 <__ultoa_invert+0xe>
    320e:	cf 01       	movw	r24, r30
    3210:	08 95       	ret
    3212:	46 2f       	mov	r20, r22
    3214:	47 70       	andi	r20, 0x07	; 7
    3216:	40 5d       	subi	r20, 0xD0	; 208
    3218:	41 93       	st	Z+, r20
    321a:	b3 e0       	ldi	r27, 0x03	; 3
    321c:	0f d0       	rcall	.+30     	; 0x323c <__ultoa_invert+0x86>
    321e:	c9 f7       	brne	.-14     	; 0x3212 <__ultoa_invert+0x5c>
    3220:	f6 cf       	rjmp	.-20     	; 0x320e <__ultoa_invert+0x58>
    3222:	46 2f       	mov	r20, r22
    3224:	4f 70       	andi	r20, 0x0F	; 15
    3226:	40 5d       	subi	r20, 0xD0	; 208
    3228:	4a 33       	cpi	r20, 0x3A	; 58
    322a:	18 f0       	brcs	.+6      	; 0x3232 <__ultoa_invert+0x7c>
    322c:	49 5d       	subi	r20, 0xD9	; 217
    322e:	31 fd       	sbrc	r19, 1
    3230:	40 52       	subi	r20, 0x20	; 32
    3232:	41 93       	st	Z+, r20
    3234:	02 d0       	rcall	.+4      	; 0x323a <__ultoa_invert+0x84>
    3236:	a9 f7       	brne	.-22     	; 0x3222 <__ultoa_invert+0x6c>
    3238:	ea cf       	rjmp	.-44     	; 0x320e <__ultoa_invert+0x58>
    323a:	b4 e0       	ldi	r27, 0x04	; 4
    323c:	a6 95       	lsr	r26
    323e:	97 95       	ror	r25
    3240:	87 95       	ror	r24
    3242:	77 95       	ror	r23
    3244:	67 95       	ror	r22
    3246:	ba 95       	dec	r27
    3248:	c9 f7       	brne	.-14     	; 0x323c <__ultoa_invert+0x86>
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	61 05       	cpc	r22, r1
    324e:	71 05       	cpc	r23, r1
    3250:	08 95       	ret
    3252:	9b 01       	movw	r18, r22
    3254:	ac 01       	movw	r20, r24
    3256:	0a 2e       	mov	r0, r26
    3258:	06 94       	lsr	r0
    325a:	57 95       	ror	r21
    325c:	47 95       	ror	r20
    325e:	37 95       	ror	r19
    3260:	27 95       	ror	r18
    3262:	ba 95       	dec	r27
    3264:	c9 f7       	brne	.-14     	; 0x3258 <__ultoa_invert+0xa2>
    3266:	62 0f       	add	r22, r18
    3268:	73 1f       	adc	r23, r19
    326a:	84 1f       	adc	r24, r20
    326c:	95 1f       	adc	r25, r21
    326e:	a0 1d       	adc	r26, r0
    3270:	08 95       	ret

00003272 <_exit>:
    3272:	f8 94       	cli

00003274 <__stop_program>:
    3274:	ff cf       	rjmp	.-2      	; 0x3274 <__stop_program>
