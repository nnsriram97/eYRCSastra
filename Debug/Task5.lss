
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000402  00800200  00003350  000033e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040c  00800602  00800602  000037e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003169  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108e  00000000  00000000  00006bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000211c  00000000  00000000  00007c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  00009d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c45  00000000  00000000  0000a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ae2  00000000  00000000  0000b00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000caef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__vector_5>
      18:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_6>
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c0       	rjmp	.+250    	; 0x140 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_25>
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c0       	rjmp	.+174    	; 0x140 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_51>
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	67 09       	sbc	r22, r7
      e6:	e5 09       	sbc	r30, r5
      e8:	87 09       	sbc	r24, r7
      ea:	ad 09       	sbc	r26, r13
      ec:	b0 09       	sbc	r27, r0
      ee:	b3 09       	sbc	r27, r3
      f0:	bd 09       	sbc	r27, r13
      f2:	c7 09       	sbc	r28, r7
      f4:	cd 09       	sbc	r28, r13
      f6:	d0 09       	sbc	r29, r0
      f8:	77 09       	sbc	r23, r7
      fa:	e5 09       	sbc	r30, r5
      fc:	9a 09       	sbc	r25, r10

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	16 e0       	ldi	r17, 0x06	; 6
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e0 e5       	ldi	r30, 0x50	; 80
     116:	f3 e3       	ldi	r31, 0x33	; 51
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	2a e0       	ldi	r18, 0x0A	; 10
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b6 e0       	ldi	r27, 0x06	; 6
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ae 30       	cpi	r26, 0x0E	; 14
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 55 10 	call	0x20aa	; 0x20aa <main>
     13c:	0c 94 a6 19 	jmp	0x334c	; 0x334c <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <uart_putchar>:
	motion_set(0x01);
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     142:	e0 ed       	ldi	r30, 0xD0	; 208
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	90 81       	ld	r25, Z
     148:	95 ff       	sbrs	r25, 5
     14a:	fd cf       	rjmp	.-6      	; 0x146 <uart_putchar+0x4>
     14c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     150:	08 95       	ret

00000152 <lcd_port_config>:
     152:	87 b1       	in	r24, 0x07	; 7
     154:	87 6f       	ori	r24, 0xF7	; 247
     156:	87 b9       	out	0x07, r24	; 7
     158:	88 b1       	in	r24, 0x08	; 8
     15a:	80 78       	andi	r24, 0x80	; 128
     15c:	88 b9       	out	0x08, r24	; 8
     15e:	08 95       	ret

00000160 <lcd_set_4bit>:
     160:	86 e6       	ldi	r24, 0x66	; 102
     162:	9e e0       	ldi	r25, 0x0E	; 14
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <lcd_set_4bit+0x4>
     168:	00 00       	nop
     16a:	40 98       	cbi	0x08, 0	; 8
     16c:	41 98       	cbi	0x08, 1	; 8
     16e:	80 e3       	ldi	r24, 0x30	; 48
     170:	88 b9       	out	0x08, r24	; 8
     172:	42 9a       	sbi	0x08, 2	; 8
     174:	ef ef       	ldi	r30, 0xFF	; 255
     176:	f7 e4       	ldi	r31, 0x47	; 71
     178:	31 97       	sbiw	r30, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_set_4bit+0x18>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_set_4bit+0x1e>
     17e:	00 00       	nop
     180:	42 98       	cbi	0x08, 2	; 8
     182:	e6 e6       	ldi	r30, 0x66	; 102
     184:	fe e0       	ldi	r31, 0x0E	; 14
     186:	31 97       	sbiw	r30, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x26>
     18a:	00 00       	nop
     18c:	40 98       	cbi	0x08, 0	; 8
     18e:	41 98       	cbi	0x08, 1	; 8
     190:	88 b9       	out	0x08, r24	; 8
     192:	42 9a       	sbi	0x08, 2	; 8
     194:	ef ef       	ldi	r30, 0xFF	; 255
     196:	f7 e4       	ldi	r31, 0x47	; 71
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_set_4bit+0x38>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_set_4bit+0x3e>
     19e:	00 00       	nop
     1a0:	42 98       	cbi	0x08, 2	; 8
     1a2:	e6 e6       	ldi	r30, 0x66	; 102
     1a4:	fe e0       	ldi	r31, 0x0E	; 14
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x46>
     1aa:	00 00       	nop
     1ac:	40 98       	cbi	0x08, 0	; 8
     1ae:	41 98       	cbi	0x08, 1	; 8
     1b0:	88 b9       	out	0x08, r24	; 8
     1b2:	42 9a       	sbi	0x08, 2	; 8
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	97 e4       	ldi	r25, 0x47	; 71
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x58>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_set_4bit+0x5e>
     1be:	00 00       	nop
     1c0:	42 98       	cbi	0x08, 2	; 8
     1c2:	e6 e6       	ldi	r30, 0x66	; 102
     1c4:	fe e0       	ldi	r31, 0x0E	; 14
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x66>
     1ca:	00 00       	nop
     1cc:	40 98       	cbi	0x08, 0	; 8
     1ce:	41 98       	cbi	0x08, 1	; 8
     1d0:	80 e2       	ldi	r24, 0x20	; 32
     1d2:	88 b9       	out	0x08, r24	; 8
     1d4:	42 9a       	sbi	0x08, 2	; 8
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	97 e4       	ldi	r25, 0x47	; 71
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_set_4bit+0x7a>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_set_4bit+0x80>
     1e0:	00 00       	nop
     1e2:	42 98       	cbi	0x08, 2	; 8
     1e4:	08 95       	ret

000001e6 <lcd_wr_command>:
     1e6:	98 b1       	in	r25, 0x08	; 8
     1e8:	9f 70       	andi	r25, 0x0F	; 15
     1ea:	98 b9       	out	0x08, r25	; 8
     1ec:	98 b1       	in	r25, 0x08	; 8
     1ee:	28 2f       	mov	r18, r24
     1f0:	20 7f       	andi	r18, 0xF0	; 240
     1f2:	92 2b       	or	r25, r18
     1f4:	98 b9       	out	0x08, r25	; 8
     1f6:	40 98       	cbi	0x08, 0	; 8
     1f8:	41 98       	cbi	0x08, 1	; 8
     1fa:	42 9a       	sbi	0x08, 2	; 8
     1fc:	ef ef       	ldi	r30, 0xFF	; 255
     1fe:	f7 e4       	ldi	r31, 0x47	; 71
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <lcd_wr_command+0x1a>
     204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_wr_command+0x20>
     206:	00 00       	nop
     208:	42 98       	cbi	0x08, 2	; 8
     20a:	98 b1       	in	r25, 0x08	; 8
     20c:	9f 70       	andi	r25, 0x0F	; 15
     20e:	98 b9       	out	0x08, r25	; 8
     210:	98 b1       	in	r25, 0x08	; 8
     212:	82 95       	swap	r24
     214:	80 7f       	andi	r24, 0xF0	; 240
     216:	89 2b       	or	r24, r25
     218:	88 b9       	out	0x08, r24	; 8
     21a:	40 98       	cbi	0x08, 0	; 8
     21c:	41 98       	cbi	0x08, 1	; 8
     21e:	42 9a       	sbi	0x08, 2	; 8
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	97 e4       	ldi	r25, 0x47	; 71
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <lcd_wr_command+0x3e>
     228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_wr_command+0x44>
     22a:	00 00       	nop
     22c:	42 98       	cbi	0x08, 2	; 8
     22e:	08 95       	ret

00000230 <lcd_wr_char>:
     230:	98 b1       	in	r25, 0x08	; 8
     232:	9f 70       	andi	r25, 0x0F	; 15
     234:	98 b9       	out	0x08, r25	; 8
     236:	98 b1       	in	r25, 0x08	; 8
     238:	28 2f       	mov	r18, r24
     23a:	20 7f       	andi	r18, 0xF0	; 240
     23c:	92 2b       	or	r25, r18
     23e:	98 b9       	out	0x08, r25	; 8
     240:	40 9a       	sbi	0x08, 0	; 8
     242:	41 98       	cbi	0x08, 1	; 8
     244:	42 9a       	sbi	0x08, 2	; 8
     246:	ef ef       	ldi	r30, 0xFF	; 255
     248:	f7 e4       	ldi	r31, 0x47	; 71
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_char+0x1a>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_wr_char+0x20>
     250:	00 00       	nop
     252:	42 98       	cbi	0x08, 2	; 8
     254:	98 b1       	in	r25, 0x08	; 8
     256:	9f 70       	andi	r25, 0x0F	; 15
     258:	98 b9       	out	0x08, r25	; 8
     25a:	98 b1       	in	r25, 0x08	; 8
     25c:	82 95       	swap	r24
     25e:	80 7f       	andi	r24, 0xF0	; 240
     260:	89 2b       	or	r24, r25
     262:	88 b9       	out	0x08, r24	; 8
     264:	40 9a       	sbi	0x08, 0	; 8
     266:	41 98       	cbi	0x08, 1	; 8
     268:	42 9a       	sbi	0x08, 2	; 8
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	97 e4       	ldi	r25, 0x47	; 71
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_wr_char+0x3e>
     272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_wr_char+0x44>
     274:	00 00       	nop
     276:	42 98       	cbi	0x08, 2	; 8
     278:	08 95       	ret

0000027a <lcd_home>:
     27a:	80 e8       	ldi	r24, 0x80	; 128
     27c:	b4 cf       	rjmp	.-152    	; 0x1e6 <lcd_wr_command>
     27e:	08 95       	ret

00000280 <lcd_string>:
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
     286:	88 81       	ld	r24, Y
     288:	88 23       	and	r24, r24
     28a:	29 f0       	breq	.+10     	; 0x296 <lcd_string+0x16>
     28c:	21 96       	adiw	r28, 0x01	; 1
     28e:	d0 df       	rcall	.-96     	; 0x230 <lcd_wr_char>
     290:	89 91       	ld	r24, Y+
     292:	81 11       	cpse	r24, r1
     294:	fc cf       	rjmp	.-8      	; 0x28e <lcd_string+0xe>
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <lcd_init>:
     29c:	86 e6       	ldi	r24, 0x66	; 102
     29e:	9e e0       	ldi	r25, 0x0E	; 14
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0x4>
     2a4:	00 00       	nop
     2a6:	88 e2       	ldi	r24, 0x28	; 40
     2a8:	9e df       	rcall	.-196    	; 0x1e6 <lcd_wr_command>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	9c df       	rcall	.-200    	; 0x1e6 <lcd_wr_command>
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	9a df       	rcall	.-204    	; 0x1e6 <lcd_wr_command>
     2b2:	8e e0       	ldi	r24, 0x0E	; 14
     2b4:	98 df       	rcall	.-208    	; 0x1e6 <lcd_wr_command>
     2b6:	80 e8       	ldi	r24, 0x80	; 128
     2b8:	96 cf       	rjmp	.-212    	; 0x1e6 <lcd_wr_command>
     2ba:	08 95       	ret

000002bc <lcd_cursor>:
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	69 f0       	breq	.+26     	; 0x2da <lcd_cursor+0x1e>
     2c0:	18 f4       	brcc	.+6      	; 0x2c8 <lcd_cursor+0xc>
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	31 f0       	breq	.+12     	; 0x2d2 <lcd_cursor+0x16>
     2c6:	08 95       	ret
     2c8:	83 30       	cpi	r24, 0x03	; 3
     2ca:	59 f0       	breq	.+22     	; 0x2e2 <lcd_cursor+0x26>
     2cc:	84 30       	cpi	r24, 0x04	; 4
     2ce:	69 f0       	breq	.+26     	; 0x2ea <lcd_cursor+0x2e>
     2d0:	08 95       	ret
     2d2:	8f e7       	ldi	r24, 0x7F	; 127
     2d4:	86 0f       	add	r24, r22
     2d6:	87 cf       	rjmp	.-242    	; 0x1e6 <lcd_wr_command>
     2d8:	08 95       	ret
     2da:	8f eb       	ldi	r24, 0xBF	; 191
     2dc:	86 0f       	add	r24, r22
     2de:	83 cf       	rjmp	.-250    	; 0x1e6 <lcd_wr_command>
     2e0:	08 95       	ret
     2e2:	83 e9       	ldi	r24, 0x93	; 147
     2e4:	86 0f       	add	r24, r22
     2e6:	7f cf       	rjmp	.-258    	; 0x1e6 <lcd_wr_command>
     2e8:	08 95       	ret
     2ea:	83 ed       	ldi	r24, 0xD3	; 211
     2ec:	86 0f       	add	r24, r22
     2ee:	7b cf       	rjmp	.-266    	; 0x1e6 <lcd_wr_command>
     2f0:	08 95       	ret

000002f2 <lcd_print>:
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	8a 01       	movw	r16, r20
     2fc:	e9 01       	movw	r28, r18
     2fe:	88 23       	and	r24, r24
     300:	11 f0       	breq	.+4      	; 0x306 <lcd_print+0x14>
     302:	61 11       	cpse	r22, r1
     304:	02 c0       	rjmp	.+4      	; 0x30a <lcd_print+0x18>
     306:	b9 df       	rcall	.-142    	; 0x27a <lcd_home>
     308:	01 c0       	rjmp	.+2      	; 0x30c <lcd_print+0x1a>
     30a:	d8 df       	rcall	.-80     	; 0x2bc <lcd_cursor>
     30c:	c5 30       	cpi	r28, 0x05	; 5
     30e:	d1 05       	cpc	r29, r1
     310:	c1 f4       	brne	.+48     	; 0x342 <lcd_print+0x50>
     312:	98 01       	movw	r18, r16
     314:	32 95       	swap	r19
     316:	22 95       	swap	r18
     318:	2f 70       	andi	r18, 0x0F	; 15
     31a:	23 27       	eor	r18, r19
     31c:	3f 70       	andi	r19, 0x0F	; 15
     31e:	23 27       	eor	r18, r19
     320:	a7 e4       	ldi	r26, 0x47	; 71
     322:	b3 e0       	ldi	r27, 0x03	; 3
     324:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	c0 96       	adiw	r24, 0x30	; 48
     336:	90 93 86 06 	sts	0x0686, r25	; 0x800686 <million+0x1>
     33a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <million>
     33e:	78 df       	rcall	.-272    	; 0x230 <lcd_wr_char>
     340:	04 c0       	rjmp	.+8      	; 0x34a <lcd_print+0x58>
     342:	c4 30       	cpi	r28, 0x04	; 4
     344:	d1 05       	cpc	r29, r1
     346:	09 f0       	breq	.+2      	; 0x34a <lcd_print+0x58>
     348:	be c0       	rjmp	.+380    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     34a:	98 01       	movw	r18, r16
     34c:	36 95       	lsr	r19
     34e:	27 95       	ror	r18
     350:	36 95       	lsr	r19
     352:	27 95       	ror	r18
     354:	36 95       	lsr	r19
     356:	27 95       	ror	r18
     358:	a5 ec       	ldi	r26, 0xC5	; 197
     35a:	b0 e2       	ldi	r27, 0x20	; 32
     35c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     360:	ac 01       	movw	r20, r24
     362:	52 95       	swap	r21
     364:	42 95       	swap	r20
     366:	4f 70       	andi	r20, 0x0F	; 15
     368:	45 27       	eor	r20, r21
     36a:	5f 70       	andi	r21, 0x0F	; 15
     36c:	45 27       	eor	r20, r21
     36e:	50 93 68 08 	sts	0x0868, r21	; 0x800868 <temp+0x1>
     372:	40 93 67 08 	sts	0x0867, r20	; 0x800867 <temp>
     376:	9a 01       	movw	r18, r20
     378:	ad ec       	ldi	r26, 0xCD	; 205
     37a:	bc ec       	ldi	r27, 0xCC	; 204
     37c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     380:	96 95       	lsr	r25
     382:	87 95       	ror	r24
     384:	96 95       	lsr	r25
     386:	87 95       	ror	r24
     388:	96 95       	lsr	r25
     38a:	87 95       	ror	r24
     38c:	9c 01       	movw	r18, r24
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	82 0f       	add	r24, r18
     3a0:	93 1f       	adc	r25, r19
     3a2:	9a 01       	movw	r18, r20
     3a4:	28 1b       	sub	r18, r24
     3a6:	39 0b       	sbc	r19, r25
     3a8:	c9 01       	movw	r24, r18
     3aa:	c0 96       	adiw	r24, 0x30	; 48
     3ac:	90 93 05 0a 	sts	0x0A05, r25	; 0x800a05 <thousand+0x1>
     3b0:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <thousand>
     3b4:	3d df       	rcall	.-390    	; 0x230 <lcd_wr_char>
     3b6:	98 01       	movw	r18, r16
     3b8:	36 95       	lsr	r19
     3ba:	27 95       	ror	r18
     3bc:	36 95       	lsr	r19
     3be:	27 95       	ror	r18
     3c0:	ab e7       	ldi	r26, 0x7B	; 123
     3c2:	b4 e1       	ldi	r27, 0x14	; 20
     3c4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     3c8:	ac 01       	movw	r20, r24
     3ca:	56 95       	lsr	r21
     3cc:	47 95       	ror	r20
     3ce:	50 93 68 08 	sts	0x0868, r21	; 0x800868 <temp+0x1>
     3d2:	40 93 67 08 	sts	0x0867, r20	; 0x800867 <temp>
     3d6:	9a 01       	movw	r18, r20
     3d8:	ad ec       	ldi	r26, 0xCD	; 205
     3da:	bc ec       	ldi	r27, 0xCC	; 204
     3dc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     3e0:	96 95       	lsr	r25
     3e2:	87 95       	ror	r24
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	96 95       	lsr	r25
     3ea:	87 95       	ror	r24
     3ec:	9c 01       	movw	r18, r24
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	9a 01       	movw	r18, r20
     404:	28 1b       	sub	r18, r24
     406:	39 0b       	sbc	r19, r25
     408:	c9 01       	movw	r24, r18
     40a:	c0 96       	adiw	r24, 0x30	; 48
     40c:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <hundred+0x1>
     410:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <hundred>
     414:	0d df       	rcall	.-486    	; 0x230 <lcd_wr_char>
     416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     418:	c2 30       	cpi	r28, 0x02	; 2
     41a:	d1 05       	cpc	r29, r1
     41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	58 c0       	rjmp	.+176    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     420:	98 01       	movw	r18, r16
     422:	ad ec       	ldi	r26, 0xCD	; 205
     424:	bc ec       	ldi	r27, 0xCC	; 204
     426:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     42a:	ac 01       	movw	r20, r24
     42c:	56 95       	lsr	r21
     42e:	47 95       	ror	r20
     430:	56 95       	lsr	r21
     432:	47 95       	ror	r20
     434:	56 95       	lsr	r21
     436:	47 95       	ror	r20
     438:	50 93 68 08 	sts	0x0868, r21	; 0x800868 <temp+0x1>
     43c:	40 93 67 08 	sts	0x0867, r20	; 0x800867 <temp>
     440:	9a 01       	movw	r18, r20
     442:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     446:	96 95       	lsr	r25
     448:	87 95       	ror	r24
     44a:	96 95       	lsr	r25
     44c:	87 95       	ror	r24
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	9c 01       	movw	r18, r24
     454:	22 0f       	add	r18, r18
     456:	33 1f       	adc	r19, r19
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	9a 01       	movw	r18, r20
     46a:	28 1b       	sub	r18, r24
     46c:	39 0b       	sbc	r19, r25
     46e:	c9 01       	movw	r24, r18
     470:	c0 96       	adiw	r24, 0x30	; 48
     472:	90 93 7f 08 	sts	0x087F, r25	; 0x80087f <tens+0x1>
     476:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <tens>
     47a:	da de       	rcall	.-588    	; 0x230 <lcd_wr_char>
     47c:	98 01       	movw	r18, r16
     47e:	ad ec       	ldi	r26, 0xCD	; 205
     480:	bc ec       	ldi	r27, 0xCC	; 204
     482:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__umulhisi3>
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
     48a:	96 95       	lsr	r25
     48c:	87 95       	ror	r24
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	9c 01       	movw	r18, r24
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	98 01       	movw	r18, r16
     4aa:	28 1b       	sub	r18, r24
     4ac:	39 0b       	sbc	r19, r25
     4ae:	c9 01       	movw	r24, r18
     4b0:	c0 96       	adiw	r24, 0x30	; 48
     4b2:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <unit+0x1>
     4b6:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <unit>
     4ba:	ba de       	rcall	.-652    	; 0x230 <lcd_wr_char>
     4bc:	26 97       	sbiw	r28, 0x06	; 6
     4be:	64 f0       	brlt	.+24     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c0:	85 e4       	ldi	r24, 0x45	; 69
     4c2:	b6 de       	rcall	.-660    	; 0x230 <lcd_wr_char>
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c6:	c3 30       	cpi	r28, 0x03	; 3
     4c8:	d1 05       	cpc	r29, r1
     4ca:	09 f0       	breq	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	a5 cf       	rjmp	.-182    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     4ce:	73 cf       	rjmp	.-282    	; 0x3b6 <lcd_print+0xc4>
     4d0:	c1 30       	cpi	r28, 0x01	; 1
     4d2:	d1 05       	cpc	r29, r1
     4d4:	99 f7       	brne	.-26     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4d6:	d2 cf       	rjmp	.-92     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <lcd_clear>:
     4e2:	80 e8       	ldi	r24, 0x80	; 128
     4e4:	80 de       	rcall	.-768    	; 0x1e6 <lcd_wr_command>
     4e6:	84 e3       	ldi	r24, 0x34	; 52
     4e8:	95 e0       	ldi	r25, 0x05	; 5
     4ea:	ca de       	rcall	.-620    	; 0x280 <lcd_string>
     4ec:	80 ec       	ldi	r24, 0xC0	; 192
     4ee:	7b de       	rcall	.-778    	; 0x1e6 <lcd_wr_command>
     4f0:	84 e3       	ldi	r24, 0x34	; 52
     4f2:	95 e0       	ldi	r25, 0x05	; 5
     4f4:	c5 de       	rcall	.-630    	; 0x280 <lcd_string>
     4f6:	c1 ce       	rjmp	.-638    	; 0x27a <lcd_home>
     4f8:	08 95       	ret

000004fa <declare_constants>:
     4fa:	2f 92       	push	r2
     4fc:	3f 92       	push	r3
     4fe:	4f 92       	push	r4
     500:	5f 92       	push	r5
     502:	6f 92       	push	r6
     504:	7f 92       	push	r7
     506:	8f 92       	push	r8
     508:	9f 92       	push	r9
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	e0 e8       	ldi	r30, 0x80	; 128
     520:	f8 e0       	ldi	r31, 0x08	; 8
     522:	0f 2e       	mov	r0, r31
     524:	fb e4       	ldi	r31, 0x4B	; 75
     526:	af 2e       	mov	r10, r31
     528:	b1 2c       	mov	r11, r1
     52a:	f0 2d       	mov	r31, r0
     52c:	b1 82       	std	Z+1, r11	; 0x01
     52e:	a0 82       	st	Z, r10
     530:	0f 2e       	mov	r0, r31
     532:	fd e1       	ldi	r31, 0x1D	; 29
     534:	4f 2e       	mov	r4, r31
     536:	55 24       	eor	r5, r5
     538:	53 94       	inc	r5
     53a:	f0 2d       	mov	r31, r0
     53c:	53 82       	std	Z+3, r5	; 0x03
     53e:	42 82       	std	Z+2, r4	; 0x02
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	95 83       	std	Z+5, r25	; 0x05
     546:	84 83       	std	Z+4, r24	; 0x04
     548:	97 83       	std	Z+7, r25	; 0x07
     54a:	86 83       	std	Z+6, r24	; 0x06
     54c:	cc 24       	eor	r12, r12
     54e:	ca 94       	dec	r12
     550:	d1 2c       	mov	r13, r1
     552:	d1 86       	std	Z+9, r13	; 0x09
     554:	c0 86       	std	Z+8, r12	; 0x08
     556:	ac e3       	ldi	r26, 0x3C	; 60
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	b3 87       	std	Z+11, r27	; 0x0b
     55c:	a2 87       	std	Z+10, r26	; 0x0a
     55e:	95 87       	std	Z+13, r25	; 0x0d
     560:	84 87       	std	Z+12, r24	; 0x0c
     562:	97 87       	std	Z+15, r25	; 0x0f
     564:	86 87       	std	Z+14, r24	; 0x0e
     566:	20 ef       	ldi	r18, 0xF0	; 240
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	31 8b       	std	Z+17, r19	; 0x11
     56c:	20 8b       	std	Z+16, r18	; 0x10
     56e:	0f 2e       	mov	r0, r31
     570:	fd e2       	ldi	r31, 0x2D	; 45
     572:	2f 2e       	mov	r2, r31
     574:	31 2c       	mov	r3, r1
     576:	f0 2d       	mov	r31, r0
     578:	33 8a       	std	Z+19, r3	; 0x13
     57a:	22 8a       	std	Z+18, r2	; 0x12
     57c:	15 8a       	std	Z+21, r1	; 0x15
     57e:	14 8a       	std	Z+20, r1	; 0x14
     580:	6c e2       	ldi	r22, 0x2C	; 44
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	77 8b       	std	Z+23, r23	; 0x17
     586:	66 8b       	std	Z+22, r22	; 0x16
     588:	0f 2e       	mov	r0, r31
     58a:	f1 ee       	ldi	r31, 0xE1	; 225
     58c:	8f 2e       	mov	r8, r31
     58e:	91 2c       	mov	r9, r1
     590:	f0 2d       	mov	r31, r0
     592:	91 8e       	std	Z+25, r9	; 0x19
     594:	80 8e       	std	Z+24, r8	; 0x18
     596:	0e e1       	ldi	r16, 0x1E	; 30
     598:	10 e0       	ldi	r17, 0x00	; 0
     59a:	13 8f       	std	Z+27, r17	; 0x1b
     59c:	02 8f       	std	Z+26, r16	; 0x1a
     59e:	95 8f       	std	Z+29, r25	; 0x1d
     5a0:	84 8f       	std	Z+28, r24	; 0x1c
     5a2:	97 8f       	std	Z+31, r25	; 0x1f
     5a4:	86 8f       	std	Z+30, r24	; 0x1e
     5a6:	42 ed       	ldi	r20, 0xD2	; 210
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	51 a3       	std	Z+33, r21	; 0x21
     5ac:	40 a3       	std	Z+32, r20	; 0x20
     5ae:	cf e0       	ldi	r28, 0x0F	; 15
     5b0:	d0 e0       	ldi	r29, 0x00	; 0
     5b2:	d3 a3       	std	Z+35, r29	; 0x23
     5b4:	c2 a3       	std	Z+34, r28	; 0x22
     5b6:	95 a3       	std	Z+37, r25	; 0x25
     5b8:	84 a3       	std	Z+36, r24	; 0x24
     5ba:	97 a3       	std	Z+39, r25	; 0x27
     5bc:	86 a3       	std	Z+38, r24	; 0x26
     5be:	03 ec       	ldi	r16, 0xC3	; 195
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	11 a7       	std	Z+41, r17	; 0x29
     5c4:	00 a7       	std	Z+40, r16	; 0x28
     5c6:	13 a6       	std	Z+43, r1	; 0x2b
     5c8:	12 a6       	std	Z+42, r1	; 0x2a
     5ca:	95 a7       	std	Z+45, r25	; 0x2d
     5cc:	84 a7       	std	Z+44, r24	; 0x2c
     5ce:	97 a7       	std	Z+47, r25	; 0x2f
     5d0:	86 a7       	std	Z+46, r24	; 0x2e
     5d2:	44 eb       	ldi	r20, 0xB4	; 180
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	51 ab       	std	Z+49, r21	; 0x31
     5d8:	40 ab       	std	Z+48, r20	; 0x30
     5da:	09 e5       	ldi	r16, 0x59	; 89
     5dc:	11 e0       	ldi	r17, 0x01	; 1
     5de:	13 ab       	std	Z+51, r17	; 0x33
     5e0:	02 ab       	std	Z+50, r16	; 0x32
     5e2:	35 ab       	std	Z+53, r19	; 0x35
     5e4:	24 ab       	std	Z+52, r18	; 0x34
     5e6:	77 ab       	std	Z+55, r23	; 0x37
     5e8:	66 ab       	std	Z+54, r22	; 0x36
     5ea:	05 ea       	ldi	r16, 0xA5	; 165
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	11 af       	std	Z+57, r17	; 0x39
     5f0:	00 af       	std	Z+56, r16	; 0x38
     5f2:	0a e4       	ldi	r16, 0x4A	; 74
     5f4:	11 e0       	ldi	r17, 0x01	; 1
     5f6:	13 af       	std	Z+59, r17	; 0x3b
     5f8:	02 af       	std	Z+58, r16	; 0x3a
     5fa:	95 af       	std	Z+61, r25	; 0x3d
     5fc:	84 af       	std	Z+60, r24	; 0x3c
     5fe:	90 93 bf 08 	sts	0x08BF, r25	; 0x8008bf <angle+0x3f>
     602:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <angle+0x3e>
     606:	e6 e9       	ldi	r30, 0x96	; 150
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	f0 93 c1 08 	sts	0x08C1, r31	; 0x8008c1 <angle+0x41>
     60e:	e0 93 c0 08 	sts	0x08C0, r30	; 0x8008c0 <angle+0x40>
     612:	0b e3       	ldi	r16, 0x3B	; 59
     614:	11 e0       	ldi	r17, 0x01	; 1
     616:	10 93 c3 08 	sts	0x08C3, r17	; 0x8008c3 <angle+0x43>
     61a:	00 93 c2 08 	sts	0x08C2, r16	; 0x8008c2 <angle+0x42>
     61e:	90 93 c5 08 	sts	0x08C5, r25	; 0x8008c5 <angle+0x45>
     622:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <angle+0x44>
     626:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <angle+0x47>
     62a:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <angle+0x46>
     62e:	0f 2e       	mov	r0, r31
     630:	f7 e8       	ldi	r31, 0x87	; 135
     632:	6f 2e       	mov	r6, r31
     634:	71 2c       	mov	r7, r1
     636:	f0 2d       	mov	r31, r0
     638:	70 92 c9 08 	sts	0x08C9, r7	; 0x8008c9 <angle+0x49>
     63c:	60 92 c8 08 	sts	0x08C8, r6	; 0x8008c8 <angle+0x48>
     640:	70 93 cb 08 	sts	0x08CB, r23	; 0x8008cb <angle+0x4b>
     644:	60 93 ca 08 	sts	0x08CA, r22	; 0x8008ca <angle+0x4a>
     648:	90 93 cd 08 	sts	0x08CD, r25	; 0x8008cd <angle+0x4d>
     64c:	80 93 cc 08 	sts	0x08CC, r24	; 0x8008cc <angle+0x4c>
     650:	90 93 cf 08 	sts	0x08CF, r25	; 0x8008cf <angle+0x4f>
     654:	80 93 ce 08 	sts	0x08CE, r24	; 0x8008ce <angle+0x4e>
     658:	e8 e7       	ldi	r30, 0x78	; 120
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	f0 93 d1 08 	sts	0x08D1, r31	; 0x8008d1 <angle+0x51>
     660:	e0 93 d0 08 	sts	0x08D0, r30	; 0x8008d0 <angle+0x50>
     664:	50 92 d3 08 	sts	0x08D3, r5	; 0x8008d3 <angle+0x53>
     668:	40 92 d2 08 	sts	0x08D2, r4	; 0x8008d2 <angle+0x52>
     66c:	50 93 d5 08 	sts	0x08D5, r21	; 0x8008d5 <angle+0x55>
     670:	40 93 d4 08 	sts	0x08D4, r20	; 0x8008d4 <angle+0x54>
     674:	30 93 d7 08 	sts	0x08D7, r19	; 0x8008d7 <angle+0x57>
     678:	20 93 d6 08 	sts	0x08D6, r18	; 0x8008d6 <angle+0x56>
     67c:	0f 2e       	mov	r0, r31
     67e:	f9 e6       	ldi	r31, 0x69	; 105
     680:	ef 2e       	mov	r14, r31
     682:	f1 2c       	mov	r15, r1
     684:	f0 2d       	mov	r31, r0
     686:	f0 92 d9 08 	sts	0x08D9, r15	; 0x8008d9 <angle+0x59>
     68a:	e0 92 d8 08 	sts	0x08D8, r14	; 0x8008d8 <angle+0x58>
     68e:	0e e0       	ldi	r16, 0x0E	; 14
     690:	11 e0       	ldi	r17, 0x01	; 1
     692:	10 93 db 08 	sts	0x08DB, r17	; 0x8008db <angle+0x5b>
     696:	00 93 da 08 	sts	0x08DA, r16	; 0x8008da <angle+0x5a>
     69a:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <angle+0x5d>
     69e:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <angle+0x5c>
     6a2:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <angle+0x5f>
     6a6:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <angle+0x5e>
     6aa:	0a e5       	ldi	r16, 0x5A	; 90
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	10 93 e1 08 	sts	0x08E1, r17	; 0x8008e1 <angle+0x61>
     6b2:	00 93 e0 08 	sts	0x08E0, r16	; 0x8008e0 <angle+0x60>
     6b6:	d0 92 e3 08 	sts	0x08E3, r13	; 0x8008e3 <angle+0x63>
     6ba:	c0 92 e2 08 	sts	0x08E2, r12	; 0x8008e2 <angle+0x62>
     6be:	90 93 e5 08 	sts	0x08E5, r25	; 0x8008e5 <angle+0x65>
     6c2:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <angle+0x64>
     6c6:	90 93 e7 08 	sts	0x08E7, r25	; 0x8008e7 <angle+0x67>
     6ca:	80 93 e6 08 	sts	0x08E6, r24	; 0x8008e6 <angle+0x66>
     6ce:	b0 92 e9 08 	sts	0x08E9, r11	; 0x8008e9 <angle+0x69>
     6d2:	a0 92 e8 08 	sts	0x08E8, r10	; 0x8008e8 <angle+0x68>
     6d6:	30 93 eb 08 	sts	0x08EB, r19	; 0x8008eb <angle+0x6b>
     6da:	20 93 ea 08 	sts	0x08EA, r18	; 0x8008ea <angle+0x6a>
     6de:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <angle+0x6d>
     6e2:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <angle+0x6c>
     6e6:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <angle+0x6f>
     6ea:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <angle+0x6e>
     6ee:	b0 93 f1 08 	sts	0x08F1, r27	; 0x8008f1 <angle+0x71>
     6f2:	a0 93 f0 08 	sts	0x08F0, r26	; 0x8008f0 <angle+0x70>
     6f6:	90 92 f3 08 	sts	0x08F3, r9	; 0x8008f3 <angle+0x73>
     6fa:	80 92 f2 08 	sts	0x08F2, r8	; 0x8008f2 <angle+0x72>
     6fe:	f0 93 f5 08 	sts	0x08F5, r31	; 0x8008f5 <angle+0x75>
     702:	e0 93 f4 08 	sts	0x08F4, r30	; 0x8008f4 <angle+0x74>
     706:	50 93 f7 08 	sts	0x08F7, r21	; 0x8008f7 <angle+0x77>
     70a:	40 93 f6 08 	sts	0x08F6, r20	; 0x8008f6 <angle+0x76>
     70e:	30 92 f9 08 	sts	0x08F9, r3	; 0x8008f9 <angle+0x79>
     712:	20 92 f8 08 	sts	0x08F8, r2	; 0x8008f8 <angle+0x78>
     716:	0f 2e       	mov	r0, r31
     718:	f2 ed       	ldi	r31, 0xD2	; 210
     71a:	cf 2e       	mov	r12, r31
     71c:	d1 2c       	mov	r13, r1
     71e:	f0 2d       	mov	r31, r0
     720:	d0 92 fb 08 	sts	0x08FB, r13	; 0x8008fb <angle+0x7b>
     724:	c0 92 fa 08 	sts	0x08FA, r12	; 0x8008fa <angle+0x7a>
     728:	90 93 fd 08 	sts	0x08FD, r25	; 0x8008fd <angle+0x7d>
     72c:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <angle+0x7c>
     730:	90 93 ff 08 	sts	0x08FF, r25	; 0x8008ff <angle+0x7f>
     734:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <angle+0x7e>
     738:	0f 2e       	mov	r0, r31
     73a:	fe e1       	ldi	r31, 0x1E	; 30
     73c:	cf 2e       	mov	r12, r31
     73e:	d1 2c       	mov	r13, r1
     740:	f0 2d       	mov	r31, r0
     742:	d0 92 01 09 	sts	0x0901, r13	; 0x800901 <angle+0x81>
     746:	c0 92 00 09 	sts	0x0900, r12	; 0x800900 <angle+0x80>
     74a:	0f 2e       	mov	r0, r31
     74c:	f3 ec       	ldi	r31, 0xC3	; 195
     74e:	cf 2e       	mov	r12, r31
     750:	d1 2c       	mov	r13, r1
     752:	f0 2d       	mov	r31, r0
     754:	d0 92 03 09 	sts	0x0903, r13	; 0x800903 <angle+0x83>
     758:	c0 92 02 09 	sts	0x0902, r12	; 0x800902 <angle+0x82>
     75c:	90 93 05 09 	sts	0x0905, r25	; 0x800905 <angle+0x85>
     760:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <angle+0x84>
     764:	90 93 07 09 	sts	0x0907, r25	; 0x800907 <angle+0x87>
     768:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <angle+0x86>
     76c:	d0 93 09 09 	sts	0x0909, r29	; 0x800909 <angle+0x89>
     770:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <angle+0x88>
     774:	50 93 0b 09 	sts	0x090B, r21	; 0x80090b <angle+0x8b>
     778:	40 93 0a 09 	sts	0x090A, r20	; 0x80090a <angle+0x8a>
     77c:	90 93 0d 09 	sts	0x090D, r25	; 0x80090d <angle+0x8d>
     780:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <angle+0x8c>
     784:	90 93 0f 09 	sts	0x090F, r25	; 0x80090f <angle+0x8f>
     788:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <angle+0x8e>
     78c:	10 92 11 09 	sts	0x0911, r1	; 0x800911 <angle+0x91>
     790:	10 92 10 09 	sts	0x0910, r1	; 0x800910 <angle+0x90>
     794:	0f 2e       	mov	r0, r31
     796:	f5 ea       	ldi	r31, 0xA5	; 165
     798:	cf 2e       	mov	r12, r31
     79a:	d1 2c       	mov	r13, r1
     79c:	f0 2d       	mov	r31, r0
     79e:	d0 92 13 09 	sts	0x0913, r13	; 0x800913 <angle+0x93>
     7a2:	c0 92 12 09 	sts	0x0912, r12	; 0x800912 <angle+0x92>
     7a6:	b0 93 15 09 	sts	0x0915, r27	; 0x800915 <angle+0x95>
     7aa:	a0 93 14 09 	sts	0x0914, r26	; 0x800914 <angle+0x94>
     7ae:	f0 93 17 09 	sts	0x0917, r31	; 0x800917 <angle+0x97>
     7b2:	e0 93 16 09 	sts	0x0916, r30	; 0x800916 <angle+0x96>
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f9 e5       	ldi	r31, 0x59	; 89
     7ba:	cf 2e       	mov	r12, r31
     7bc:	dd 24       	eor	r13, r13
     7be:	d3 94       	inc	r13
     7c0:	f0 2d       	mov	r31, r0
     7c2:	d0 92 19 09 	sts	0x0919, r13	; 0x800919 <angle+0x99>
     7c6:	c0 92 18 09 	sts	0x0918, r12	; 0x800918 <angle+0x98>
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f6 e9       	ldi	r31, 0x96	; 150
     7ce:	cf 2e       	mov	r12, r31
     7d0:	d1 2c       	mov	r13, r1
     7d2:	f0 2d       	mov	r31, r0
     7d4:	d0 92 1b 09 	sts	0x091B, r13	; 0x80091b <angle+0x9b>
     7d8:	c0 92 1a 09 	sts	0x091A, r12	; 0x80091a <angle+0x9a>
     7dc:	90 93 1d 09 	sts	0x091D, r25	; 0x80091d <angle+0x9d>
     7e0:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <angle+0x9c>
     7e4:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <angle+0x9f>
     7e8:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <angle+0x9e>
     7ec:	0f 2e       	mov	r0, r31
     7ee:	fa e4       	ldi	r31, 0x4A	; 74
     7f0:	cf 2e       	mov	r12, r31
     7f2:	dd 24       	eor	r13, r13
     7f4:	d3 94       	inc	r13
     7f6:	f0 2d       	mov	r31, r0
     7f8:	d0 92 21 09 	sts	0x0921, r13	; 0x800921 <angle+0xa1>
     7fc:	c0 92 20 09 	sts	0x0920, r12	; 0x800920 <angle+0xa0>
     800:	70 92 23 09 	sts	0x0923, r7	; 0x800923 <angle+0xa3>
     804:	60 92 22 09 	sts	0x0922, r6	; 0x800922 <angle+0xa2>
     808:	90 93 25 09 	sts	0x0925, r25	; 0x800925 <angle+0xa5>
     80c:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <angle+0xa4>
     810:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <angle+0xa7>
     814:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <angle+0xa6>
     818:	0f 2e       	mov	r0, r31
     81a:	fb e3       	ldi	r31, 0x3B	; 59
     81c:	cf 2e       	mov	r12, r31
     81e:	dd 24       	eor	r13, r13
     820:	d3 94       	inc	r13
     822:	f0 2d       	mov	r31, r0
     824:	d0 92 29 09 	sts	0x0929, r13	; 0x800929 <angle+0xa9>
     828:	c0 92 28 09 	sts	0x0928, r12	; 0x800928 <angle+0xa8>
     82c:	f0 93 2b 09 	sts	0x092B, r31	; 0x80092b <angle+0xab>
     830:	e0 93 2a 09 	sts	0x092A, r30	; 0x80092a <angle+0xaa>
     834:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <angle+0xad>
     838:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <angle+0xac>
     83c:	90 93 2f 09 	sts	0x092F, r25	; 0x80092f <angle+0xaf>
     840:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <angle+0xae>
     844:	70 93 31 09 	sts	0x0931, r23	; 0x800931 <angle+0xb1>
     848:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <angle+0xb0>
     84c:	f0 92 33 09 	sts	0x0933, r15	; 0x800933 <angle+0xb3>
     850:	e0 92 32 09 	sts	0x0932, r14	; 0x800932 <angle+0xb2>
     854:	10 92 35 09 	sts	0x0935, r1	; 0x800935 <angle+0xb5>
     858:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <angle+0xb4>
     85c:	b0 93 37 09 	sts	0x0937, r27	; 0x800937 <angle+0xb7>
     860:	a0 93 36 09 	sts	0x0936, r26	; 0x800936 <angle+0xb6>
     864:	10 93 39 09 	sts	0x0939, r17	; 0x800939 <angle+0xb9>
     868:	00 93 38 09 	sts	0x0938, r16	; 0x800938 <angle+0xb8>
     86c:	50 92 3b 09 	sts	0x093B, r5	; 0x80093b <angle+0xbb>
     870:	40 92 3a 09 	sts	0x093A, r4	; 0x80093a <angle+0xba>
     874:	90 93 3d 09 	sts	0x093D, r25	; 0x80093d <angle+0xbd>
     878:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <angle+0xbc>
     87c:	90 93 3f 09 	sts	0x093F, r25	; 0x80093f <angle+0xbf>
     880:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <angle+0xbe>
     884:	50 93 41 09 	sts	0x0941, r21	; 0x800941 <angle+0xc1>
     888:	40 93 40 09 	sts	0x0940, r20	; 0x800940 <angle+0xc0>
     88c:	10 92 43 09 	sts	0x0943, r1	; 0x800943 <angle+0xc3>
     890:	10 92 42 09 	sts	0x0942, r1	; 0x800942 <angle+0xc2>
     894:	30 93 45 09 	sts	0x0945, r19	; 0x800945 <angle+0xc5>
     898:	20 93 44 09 	sts	0x0944, r18	; 0x800944 <angle+0xc4>
     89c:	90 93 47 09 	sts	0x0947, r25	; 0x800947 <angle+0xc7>
     8a0:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <angle+0xc6>
     8a4:	50 93 49 09 	sts	0x0949, r21	; 0x800949 <angle+0xc9>
     8a8:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <angle+0xc8>
     8ac:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <angle+0xcb>
     8b0:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <angle+0xca>
     8b4:	b0 93 4d 09 	sts	0x094D, r27	; 0x80094d <angle+0xcd>
     8b8:	a0 93 4c 09 	sts	0x094C, r26	; 0x80094c <angle+0xcc>
     8bc:	70 93 4f 09 	sts	0x094F, r23	; 0x80094f <angle+0xcf>
     8c0:	60 93 4e 09 	sts	0x094E, r22	; 0x80094e <angle+0xce>
     8c4:	50 93 51 09 	sts	0x0951, r21	; 0x800951 <angle+0xd1>
     8c8:	40 93 50 09 	sts	0x0950, r20	; 0x800950 <angle+0xd0>
     8cc:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <angle+0xd3>
     8d0:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <angle+0xd2>
     8d4:	f0 93 55 09 	sts	0x0955, r31	; 0x800955 <angle+0xd5>
     8d8:	e0 93 54 09 	sts	0x0954, r30	; 0x800954 <angle+0xd4>
     8dc:	30 93 57 09 	sts	0x0957, r19	; 0x800957 <angle+0xd7>
     8e0:	20 93 56 09 	sts	0x0956, r18	; 0x800956 <angle+0xd6>
     8e4:	10 92 59 09 	sts	0x0959, r1	; 0x800959 <angle+0xd9>
     8e8:	10 92 58 09 	sts	0x0958, r1	; 0x800958 <angle+0xd8>
     8ec:	50 93 5b 09 	sts	0x095B, r21	; 0x80095b <angle+0xdb>
     8f0:	40 93 5a 09 	sts	0x095A, r20	; 0x80095a <angle+0xda>
     8f4:	70 93 5d 09 	sts	0x095D, r23	; 0x80095d <angle+0xdd>
     8f8:	60 93 5c 09 	sts	0x095C, r22	; 0x80095c <angle+0xdc>
     8fc:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <angle+0xdf>
     900:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <angle+0xde>
     904:	b0 93 61 09 	sts	0x0961, r27	; 0x800961 <angle+0xe1>
     908:	a0 93 60 09 	sts	0x0960, r26	; 0x800960 <angle+0xe0>
     90c:	f0 93 63 09 	sts	0x0963, r31	; 0x800963 <angle+0xe3>
     910:	e0 93 62 09 	sts	0x0962, r30	; 0x800962 <angle+0xe2>
     914:	30 93 65 09 	sts	0x0965, r19	; 0x800965 <angle+0xe5>
     918:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <angle+0xe4>
     91c:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <angle+0xe7>
     920:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <angle+0xe6>
     924:	b0 93 69 09 	sts	0x0969, r27	; 0x800969 <angle+0xe9>
     928:	a0 93 68 09 	sts	0x0968, r26	; 0x800968 <angle+0xe8>
     92c:	30 93 6b 09 	sts	0x096B, r19	; 0x80096b <angle+0xeb>
     930:	20 93 6a 09 	sts	0x096A, r18	; 0x80096a <angle+0xea>
     934:	70 93 6d 09 	sts	0x096D, r23	; 0x80096d <angle+0xed>
     938:	60 93 6c 09 	sts	0x096C, r22	; 0x80096c <angle+0xec>
     93c:	50 93 6f 09 	sts	0x096F, r21	; 0x80096f <angle+0xef>
     940:	40 93 6e 09 	sts	0x096E, r20	; 0x80096e <angle+0xee>
     944:	b0 93 71 09 	sts	0x0971, r27	; 0x800971 <angle+0xf1>
     948:	a0 93 70 09 	sts	0x0970, r26	; 0x800970 <angle+0xf0>
     94c:	30 93 73 09 	sts	0x0973, r19	; 0x800973 <angle+0xf3>
     950:	20 93 72 09 	sts	0x0972, r18	; 0x800972 <angle+0xf2>
     954:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <angle+0xf5>
     958:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <angle+0xf4>
     95c:	f0 93 77 09 	sts	0x0977, r31	; 0x800977 <angle+0xf7>
     960:	e0 93 76 09 	sts	0x0976, r30	; 0x800976 <angle+0xf6>
     964:	30 93 79 09 	sts	0x0979, r19	; 0x800979 <angle+0xf9>
     968:	20 93 78 09 	sts	0x0978, r18	; 0x800978 <angle+0xf8>
     96c:	b0 93 7b 09 	sts	0x097B, r27	; 0x80097b <angle+0xfb>
     970:	a0 93 7a 09 	sts	0x097A, r26	; 0x80097a <angle+0xfa>
     974:	50 93 7d 09 	sts	0x097D, r21	; 0x80097d <angle+0xfd>
     978:	40 93 7c 09 	sts	0x097C, r20	; 0x80097c <angle+0xfc>
     97c:	90 93 7f 09 	sts	0x097F, r25	; 0x80097f <angle+0xff>
     980:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <angle+0xfe>
     984:	70 93 81 09 	sts	0x0981, r23	; 0x800981 <angle+0x101>
     988:	60 93 80 09 	sts	0x0980, r22	; 0x800980 <angle+0x100>
     98c:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <angle+0x103>
     990:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <angle+0x102>
     994:	f0 93 85 09 	sts	0x0985, r31	; 0x800985 <angle+0x105>
     998:	e0 93 84 09 	sts	0x0984, r30	; 0x800984 <angle+0x104>
     99c:	90 93 87 09 	sts	0x0987, r25	; 0x800987 <angle+0x107>
     9a0:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <angle+0x106>
     9a4:	70 93 89 09 	sts	0x0989, r23	; 0x800989 <angle+0x109>
     9a8:	60 93 88 09 	sts	0x0988, r22	; 0x800988 <angle+0x108>
     9ac:	f0 93 8b 09 	sts	0x098B, r31	; 0x80098b <angle+0x10b>
     9b0:	e0 93 8a 09 	sts	0x098A, r30	; 0x80098a <angle+0x10a>
     9b4:	50 93 8d 09 	sts	0x098D, r21	; 0x80098d <angle+0x10d>
     9b8:	40 93 8c 09 	sts	0x098C, r20	; 0x80098c <angle+0x10c>
     9bc:	b0 93 8f 09 	sts	0x098F, r27	; 0x80098f <angle+0x10f>
     9c0:	a0 93 8e 09 	sts	0x098E, r26	; 0x80098e <angle+0x10e>
     9c4:	70 93 91 09 	sts	0x0991, r23	; 0x800991 <angle+0x111>
     9c8:	60 93 90 09 	sts	0x0990, r22	; 0x800990 <angle+0x110>
     9cc:	f0 93 93 09 	sts	0x0993, r31	; 0x800993 <angle+0x113>
     9d0:	e0 93 92 09 	sts	0x0992, r30	; 0x800992 <angle+0x112>
     9d4:	30 93 95 09 	sts	0x0995, r19	; 0x800995 <angle+0x115>
     9d8:	20 93 94 09 	sts	0x0994, r18	; 0x800994 <angle+0x114>
     9dc:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <angle+0x117>
     9e0:	10 92 96 09 	sts	0x0996, r1	; 0x800996 <angle+0x116>
     9e4:	f0 93 99 09 	sts	0x0999, r31	; 0x800999 <angle+0x119>
     9e8:	e0 93 98 09 	sts	0x0998, r30	; 0x800998 <angle+0x118>
     9ec:	b0 93 9b 09 	sts	0x099B, r27	; 0x80099b <angle+0x11b>
     9f0:	a0 93 9a 09 	sts	0x099A, r26	; 0x80099a <angle+0x11a>
     9f4:	70 93 9d 09 	sts	0x099D, r23	; 0x80099d <angle+0x11d>
     9f8:	60 93 9c 09 	sts	0x099C, r22	; 0x80099c <angle+0x11c>
     9fc:	90 93 9f 09 	sts	0x099F, r25	; 0x80099f <angle+0x11f>
     a00:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <angle+0x11e>
     a04:	b0 93 a1 09 	sts	0x09A1, r27	; 0x8009a1 <angle+0x121>
     a08:	a0 93 a0 09 	sts	0x09A0, r26	; 0x8009a0 <angle+0x120>
     a0c:	30 93 a3 09 	sts	0x09A3, r19	; 0x8009a3 <angle+0x123>
     a10:	20 93 a2 09 	sts	0x09A2, r18	; 0x8009a2 <angle+0x122>
     a14:	90 93 a5 09 	sts	0x09A5, r25	; 0x8009a5 <angle+0x125>
     a18:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <angle+0x124>
     a1c:	90 93 a7 09 	sts	0x09A7, r25	; 0x8009a7 <angle+0x127>
     a20:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <angle+0x126>
     a24:	f0 93 a9 09 	sts	0x09A9, r31	; 0x8009a9 <angle+0x129>
     a28:	e0 93 a8 09 	sts	0x09A8, r30	; 0x8009a8 <angle+0x128>
     a2c:	70 93 ab 09 	sts	0x09AB, r23	; 0x8009ab <angle+0x12b>
     a30:	60 93 aa 09 	sts	0x09AA, r22	; 0x8009aa <angle+0x12a>
     a34:	90 93 ad 09 	sts	0x09AD, r25	; 0x8009ad <angle+0x12d>
     a38:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <angle+0x12c>
     a3c:	90 93 af 09 	sts	0x09AF, r25	; 0x8009af <angle+0x12f>
     a40:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <angle+0x12e>
     a44:	70 93 b1 09 	sts	0x09B1, r23	; 0x8009b1 <angle+0x131>
     a48:	60 93 b0 09 	sts	0x09B0, r22	; 0x8009b0 <angle+0x130>
     a4c:	f0 93 b3 09 	sts	0x09B3, r31	; 0x8009b3 <angle+0x133>
     a50:	e0 93 b2 09 	sts	0x09B2, r30	; 0x8009b2 <angle+0x132>
     a54:	90 93 b5 09 	sts	0x09B5, r25	; 0x8009b5 <angle+0x135>
     a58:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <angle+0x134>
     a5c:	90 93 b7 09 	sts	0x09B7, r25	; 0x8009b7 <angle+0x137>
     a60:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <angle+0x136>
     a64:	10 92 b9 09 	sts	0x09B9, r1	; 0x8009b9 <angle+0x139>
     a68:	10 92 b8 09 	sts	0x09B8, r1	; 0x8009b8 <angle+0x138>
     a6c:	50 93 bb 09 	sts	0x09BB, r21	; 0x8009bb <angle+0x13b>
     a70:	40 93 ba 09 	sts	0x09BA, r20	; 0x8009ba <angle+0x13a>
     a74:	90 93 bd 09 	sts	0x09BD, r25	; 0x8009bd <angle+0x13d>
     a78:	80 93 bc 09 	sts	0x09BC, r24	; 0x8009bc <angle+0x13c>
     a7c:	90 93 bf 09 	sts	0x09BF, r25	; 0x8009bf <angle+0x13f>
     a80:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <angle+0x13e>
     a84:	50 93 c1 09 	sts	0x09C1, r21	; 0x8009c1 <angle+0x141>
     a88:	40 93 c0 09 	sts	0x09C0, r20	; 0x8009c0 <angle+0x140>
     a8c:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <angle+0x143>
     a90:	10 92 c2 09 	sts	0x09C2, r1	; 0x8009c2 <angle+0x142>
     a94:	90 93 c5 09 	sts	0x09C5, r25	; 0x8009c5 <angle+0x145>
     a98:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <angle+0x144>
     a9c:	90 93 c7 09 	sts	0x09C7, r25	; 0x8009c7 <angle+0x147>
     aa0:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <angle+0x146>
     aa4:	30 93 c9 09 	sts	0x09C9, r19	; 0x8009c9 <angle+0x149>
     aa8:	20 93 c8 09 	sts	0x09C8, r18	; 0x8009c8 <angle+0x148>
     aac:	b0 93 cb 09 	sts	0x09CB, r27	; 0x8009cb <angle+0x14b>
     ab0:	a0 93 ca 09 	sts	0x09CA, r26	; 0x8009ca <angle+0x14a>
     ab4:	90 93 cd 09 	sts	0x09CD, r25	; 0x8009cd <angle+0x14d>
     ab8:	80 93 cc 09 	sts	0x09CC, r24	; 0x8009cc <angle+0x14c>
     abc:	90 93 cf 09 	sts	0x09CF, r25	; 0x8009cf <angle+0x14f>
     ac0:	80 93 ce 09 	sts	0x09CE, r24	; 0x8009ce <angle+0x14e>
     ac4:	50 93 d1 09 	sts	0x09D1, r21	; 0x8009d1 <angle+0x151>
     ac8:	40 93 d0 09 	sts	0x09D0, r20	; 0x8009d0 <angle+0x150>
     acc:	b0 93 d3 09 	sts	0x09D3, r27	; 0x8009d3 <angle+0x153>
     ad0:	a0 93 d2 09 	sts	0x09D2, r26	; 0x8009d2 <angle+0x152>
     ad4:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <angle+0x155>
     ad8:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <angle+0x154>
     adc:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <angle+0x157>
     ae0:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <angle+0x156>
     ae4:	f0 93 d9 09 	sts	0x09D9, r31	; 0x8009d9 <angle+0x159>
     ae8:	e0 93 d8 09 	sts	0x09D8, r30	; 0x8009d8 <angle+0x158>
     aec:	30 93 db 09 	sts	0x09DB, r19	; 0x8009db <angle+0x15b>
     af0:	20 93 da 09 	sts	0x09DA, r18	; 0x8009da <angle+0x15a>
     af4:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <angle+0x15d>
     af8:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <angle+0x15c>
     afc:	90 93 df 09 	sts	0x09DF, r25	; 0x8009df <angle+0x15f>
     b00:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <angle+0x15e>
     b04:	b0 93 e1 09 	sts	0x09E1, r27	; 0x8009e1 <angle+0x161>
     b08:	a0 93 e0 09 	sts	0x09E0, r26	; 0x8009e0 <angle+0x160>
     b0c:	70 93 e3 09 	sts	0x09E3, r23	; 0x8009e3 <angle+0x163>
     b10:	60 93 e2 09 	sts	0x09E2, r22	; 0x8009e2 <angle+0x162>
     b14:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <angle+0x165>
     b18:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <angle+0x164>
     b1c:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <angle+0x167>
     b20:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <angle+0x166>
     b24:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <angle+0x169>
     b28:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <angle+0x168>
     b2c:	f0 93 eb 09 	sts	0x09EB, r31	; 0x8009eb <angle+0x16b>
     b30:	e0 93 ea 09 	sts	0x09EA, r30	; 0x8009ea <angle+0x16a>
     b34:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <angle+0x16d>
     b38:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <angle+0x16c>
     b3c:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <angle+0x16f>
     b40:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <angle+0x16e>
     b44:	70 93 f1 09 	sts	0x09F1, r23	; 0x8009f1 <angle+0x171>
     b48:	60 93 f0 09 	sts	0x09F0, r22	; 0x8009f0 <angle+0x170>
     b4c:	50 93 f3 09 	sts	0x09F3, r21	; 0x8009f3 <angle+0x173>
     b50:	40 93 f2 09 	sts	0x09F2, r20	; 0x8009f2 <angle+0x172>
     b54:	90 93 f5 09 	sts	0x09F5, r25	; 0x8009f5 <angle+0x175>
     b58:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <angle+0x174>
     b5c:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <angle+0x177>
     b60:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <angle+0x176>
     b64:	30 93 f9 09 	sts	0x09F9, r19	; 0x8009f9 <angle+0x179>
     b68:	20 93 f8 09 	sts	0x09F8, r18	; 0x8009f8 <angle+0x178>
     b6c:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <angle+0x17b>
     b70:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <angle+0x17a>
     b74:	90 93 fd 09 	sts	0x09FD, r25	; 0x8009fd <angle+0x17d>
     b78:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <angle+0x17c>
     b7c:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <angle+0x17f>
     b80:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <angle+0x17e>
     b84:	e7 ee       	ldi	r30, 0xE7	; 231
     b86:	f6 e0       	ldi	r31, 0x06	; 6
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	28 e1       	ldi	r18, 0x18	; 24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	33 83       	std	Z+3, r19	; 0x03
     b96:	22 83       	std	Z+2, r18	; 0x02
     b98:	15 82       	std	Z+5, r1	; 0x05
     b9a:	14 82       	std	Z+4, r1	; 0x04
     b9c:	17 82       	std	Z+7, r1	; 0x07
     b9e:	16 82       	std	Z+6, r1	; 0x06
     ba0:	21 e0       	ldi	r18, 0x01	; 1
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	31 87       	std	Z+9, r19	; 0x09
     ba6:	20 87       	std	Z+8, r18	; 0x08
     ba8:	23 e0       	ldi	r18, 0x03	; 3
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	33 87       	std	Z+11, r19	; 0x0b
     bae:	22 87       	std	Z+10, r18	; 0x0a
     bb0:	15 86       	std	Z+13, r1	; 0x0d
     bb2:	14 86       	std	Z+12, r1	; 0x0c
     bb4:	17 86       	std	Z+15, r1	; 0x0f
     bb6:	16 86       	std	Z+14, r1	; 0x0e
     bb8:	91 8b       	std	Z+17, r25	; 0x11
     bba:	80 8b       	std	Z+16, r24	; 0x10
     bbc:	84 e0       	ldi	r24, 0x04	; 4
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	93 8b       	std	Z+19, r25	; 0x13
     bc2:	82 8b       	std	Z+18, r24	; 0x12
     bc4:	49 e1       	ldi	r20, 0x19	; 25
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	55 8b       	std	Z+21, r21	; 0x15
     bca:	44 8b       	std	Z+20, r20	; 0x14
     bcc:	44 e2       	ldi	r20, 0x24	; 36
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	57 8b       	std	Z+23, r21	; 0x17
     bd2:	46 8b       	std	Z+22, r20	; 0x16
     bd4:	31 8f       	std	Z+25, r19	; 0x19
     bd6:	20 8f       	std	Z+24, r18	; 0x18
     bd8:	25 e0       	ldi	r18, 0x05	; 5
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	33 8f       	std	Z+27, r19	; 0x1b
     bde:	22 8f       	std	Z+26, r18	; 0x1a
     be0:	15 8e       	std	Z+29, r1	; 0x1d
     be2:	14 8e       	std	Z+28, r1	; 0x1c
     be4:	17 8e       	std	Z+31, r1	; 0x1f
     be6:	16 8e       	std	Z+30, r1	; 0x1e
     be8:	91 a3       	std	Z+33, r25	; 0x21
     bea:	80 a3       	std	Z+32, r24	; 0x20
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	93 a3       	std	Z+35, r25	; 0x23
     bf2:	82 a3       	std	Z+34, r24	; 0x22
     bf4:	15 a2       	std	Z+37, r1	; 0x25
     bf6:	14 a2       	std	Z+36, r1	; 0x24
     bf8:	17 a2       	std	Z+39, r1	; 0x27
     bfa:	16 a2       	std	Z+38, r1	; 0x26
     bfc:	31 a7       	std	Z+41, r19	; 0x29
     bfe:	20 a7       	std	Z+40, r18	; 0x28
     c00:	27 e0       	ldi	r18, 0x07	; 7
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	33 a7       	std	Z+43, r19	; 0x2b
     c06:	22 a7       	std	Z+42, r18	; 0x2a
     c08:	15 a6       	std	Z+45, r1	; 0x2d
     c0a:	14 a6       	std	Z+44, r1	; 0x2c
     c0c:	17 a6       	std	Z+47, r1	; 0x2f
     c0e:	16 a6       	std	Z+46, r1	; 0x2e
     c10:	91 ab       	std	Z+49, r25	; 0x31
     c12:	80 ab       	std	Z+48, r24	; 0x30
     c14:	88 e0       	ldi	r24, 0x08	; 8
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	93 ab       	std	Z+51, r25	; 0x33
     c1a:	82 ab       	std	Z+50, r24	; 0x32
     c1c:	45 e2       	ldi	r20, 0x25	; 37
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	55 ab       	std	Z+53, r21	; 0x35
     c22:	44 ab       	std	Z+52, r20	; 0x34
     c24:	46 e2       	ldi	r20, 0x26	; 38
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	57 ab       	std	Z+55, r21	; 0x37
     c2a:	46 ab       	std	Z+54, r20	; 0x36
     c2c:	31 af       	std	Z+57, r19	; 0x39
     c2e:	20 af       	std	Z+56, r18	; 0x38
     c30:	29 e0       	ldi	r18, 0x09	; 9
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	33 af       	std	Z+59, r19	; 0x3b
     c36:	22 af       	std	Z+58, r18	; 0x3a
     c38:	15 ae       	std	Z+61, r1	; 0x3d
     c3a:	14 ae       	std	Z+60, r1	; 0x3c
     c3c:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <node+0x3f>
     c40:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <node+0x3e>
     c44:	90 93 28 07 	sts	0x0728, r25	; 0x800728 <node+0x41>
     c48:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <node+0x40>
     c4c:	8a e0       	ldi	r24, 0x0A	; 10
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <node+0x43>
     c54:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <node+0x42>
     c58:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <node+0x45>
     c5c:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <node+0x44>
     c60:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <node+0x47>
     c64:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <node+0x46>
     c68:	30 93 30 07 	sts	0x0730, r19	; 0x800730 <node+0x49>
     c6c:	20 93 2f 07 	sts	0x072F, r18	; 0x80072f <node+0x48>
     c70:	2b e0       	ldi	r18, 0x0B	; 11
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	30 93 32 07 	sts	0x0732, r19	; 0x800732 <node+0x4b>
     c78:	20 93 31 07 	sts	0x0731, r18	; 0x800731 <node+0x4a>
     c7c:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <node+0x4d>
     c80:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <node+0x4c>
     c84:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <node+0x4f>
     c88:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <node+0x4e>
     c8c:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <node+0x51>
     c90:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <node+0x50>
     c94:	8c e0       	ldi	r24, 0x0C	; 12
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <node+0x53>
     c9c:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <node+0x52>
     ca0:	4c e1       	ldi	r20, 0x1C	; 28
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	50 93 3c 07 	sts	0x073C, r21	; 0x80073c <node+0x55>
     ca8:	40 93 3b 07 	sts	0x073B, r20	; 0x80073b <node+0x54>
     cac:	4d e1       	ldi	r20, 0x1D	; 29
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	50 93 3e 07 	sts	0x073E, r21	; 0x80073e <node+0x57>
     cb4:	40 93 3d 07 	sts	0x073D, r20	; 0x80073d <node+0x56>
     cb8:	30 93 40 07 	sts	0x0740, r19	; 0x800740 <node+0x59>
     cbc:	20 93 3f 07 	sts	0x073F, r18	; 0x80073f <node+0x58>
     cc0:	2d e0       	ldi	r18, 0x0D	; 13
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	30 93 42 07 	sts	0x0742, r19	; 0x800742 <node+0x5b>
     cc8:	20 93 41 07 	sts	0x0741, r18	; 0x800741 <node+0x5a>
     ccc:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <node+0x5d>
     cd0:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <node+0x5c>
     cd4:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <node+0x5f>
     cd8:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <node+0x5e>
     cdc:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <node+0x61>
     ce0:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <node+0x60>
     ce4:	8e e0       	ldi	r24, 0x0E	; 14
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <node+0x63>
     cec:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <node+0x62>
     cf0:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <node+0x65>
     cf4:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <node+0x64>
     cf8:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <node+0x67>
     cfc:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <node+0x66>
     d00:	30 93 50 07 	sts	0x0750, r19	; 0x800750 <node+0x69>
     d04:	20 93 4f 07 	sts	0x074F, r18	; 0x80074f <node+0x68>
     d08:	d0 93 52 07 	sts	0x0752, r29	; 0x800752 <node+0x6b>
     d0c:	c0 93 51 07 	sts	0x0751, r28	; 0x800751 <node+0x6a>
     d10:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <node+0x6d>
     d14:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <node+0x6c>
     d18:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <node+0x6f>
     d1c:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <node+0x6e>
     d20:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <node+0x71>
     d24:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <node+0x70>
     d28:	20 e1       	ldi	r18, 0x10	; 16
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	30 93 5a 07 	sts	0x075A, r19	; 0x80075a <node+0x73>
     d30:	20 93 59 07 	sts	0x0759, r18	; 0x800759 <node+0x72>
     d34:	87 e2       	ldi	r24, 0x27	; 39
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <node+0x75>
     d3c:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <node+0x74>
     d40:	88 e2       	ldi	r24, 0x28	; 40
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <node+0x77>
     d48:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <node+0x76>
     d4c:	d0 93 60 07 	sts	0x0760, r29	; 0x800760 <node+0x79>
     d50:	c0 93 5f 07 	sts	0x075F, r28	; 0x80075f <node+0x78>
     d54:	81 e1       	ldi	r24, 0x11	; 17
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 62 07 	sts	0x0762, r25	; 0x800762 <node+0x7b>
     d5c:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <node+0x7a>
     d60:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <node+0x7d>
     d64:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <node+0x7c>
     d68:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <node+0x7f>
     d6c:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <node+0x7e>
     d70:	30 93 68 07 	sts	0x0768, r19	; 0x800768 <node+0x81>
     d74:	20 93 67 07 	sts	0x0767, r18	; 0x800767 <node+0x80>
     d78:	22 e1       	ldi	r18, 0x12	; 18
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	30 93 6a 07 	sts	0x076A, r19	; 0x80076a <node+0x83>
     d80:	20 93 69 07 	sts	0x0769, r18	; 0x800769 <node+0x82>
     d84:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <node+0x85>
     d88:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <node+0x84>
     d8c:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <node+0x87>
     d90:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <node+0x86>
     d94:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <node+0x89>
     d98:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <node+0x88>
     d9c:	83 e1       	ldi	r24, 0x13	; 19
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <node+0x8b>
     da4:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <node+0x8a>
     da8:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <node+0x8d>
     dac:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <node+0x8c>
     db0:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <node+0x8f>
     db4:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <node+0x8e>
     db8:	30 93 78 07 	sts	0x0778, r19	; 0x800778 <node+0x91>
     dbc:	20 93 77 07 	sts	0x0777, r18	; 0x800777 <node+0x90>
     dc0:	24 e1       	ldi	r18, 0x14	; 20
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	30 93 7a 07 	sts	0x077A, r19	; 0x80077a <node+0x93>
     dc8:	20 93 79 07 	sts	0x0779, r18	; 0x800779 <node+0x92>
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	50 93 7c 07 	sts	0x077C, r21	; 0x80077c <node+0x95>
     dd4:	40 93 7b 07 	sts	0x077B, r20	; 0x80077b <node+0x94>
     dd8:	41 e2       	ldi	r20, 0x21	; 33
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	50 93 7e 07 	sts	0x077E, r21	; 0x80077e <node+0x97>
     de0:	40 93 7d 07 	sts	0x077D, r20	; 0x80077d <node+0x96>
     de4:	90 93 80 07 	sts	0x0780, r25	; 0x800780 <node+0x99>
     de8:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <node+0x98>
     dec:	85 e1       	ldi	r24, 0x15	; 21
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	90 93 82 07 	sts	0x0782, r25	; 0x800782 <node+0x9b>
     df4:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <node+0x9a>
     df8:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <node+0x9d>
     dfc:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <node+0x9c>
     e00:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <node+0x9f>
     e04:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <node+0x9e>
     e08:	30 93 88 07 	sts	0x0788, r19	; 0x800788 <node+0xa1>
     e0c:	20 93 87 07 	sts	0x0787, r18	; 0x800787 <node+0xa0>
     e10:	26 e1       	ldi	r18, 0x16	; 22
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	30 93 8a 07 	sts	0x078A, r19	; 0x80078a <node+0xa3>
     e18:	20 93 89 07 	sts	0x0789, r18	; 0x800789 <node+0xa2>
     e1c:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <node+0xa5>
     e20:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <node+0xa4>
     e24:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <node+0xa7>
     e28:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <node+0xa6>
     e2c:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <node+0xa9>
     e30:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <node+0xa8>
     e34:	87 e1       	ldi	r24, 0x17	; 23
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <node+0xab>
     e3c:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <node+0xaa>
     e40:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <node+0xad>
     e44:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <node+0xac>
     e48:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <node+0xaf>
     e4c:	10 92 95 07 	sts	0x0795, r1	; 0x800795 <node+0xae>
     e50:	86 e1       	ldi	r24, 0x16	; 22
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <node+0xb1>
     e58:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <node+0xb0>
     e5c:	88 e1       	ldi	r24, 0x18	; 24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	90 93 9a 07 	sts	0x079A, r25	; 0x80079a <node+0xb3>
     e64:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <node+0xb2>
     e68:	c9 e2       	ldi	r28, 0x29	; 41
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
     e6c:	d0 93 9c 07 	sts	0x079C, r29	; 0x80079c <node+0xb5>
     e70:	c0 93 9b 07 	sts	0x079B, r28	; 0x80079b <node+0xb4>
     e74:	0f 2e       	mov	r0, r31
     e76:	fa e2       	ldi	r31, 0x2A	; 42
     e78:	af 2e       	mov	r10, r31
     e7a:	b1 2c       	mov	r11, r1
     e7c:	f0 2d       	mov	r31, r0
     e7e:	b0 92 9e 07 	sts	0x079E, r11	; 0x80079e <node+0xb7>
     e82:	a0 92 9d 07 	sts	0x079D, r10	; 0x80079d <node+0xb6>
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 a0 07 	sts	0x07A0, r25	; 0x8007a0 <node+0xb9>
     e8e:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <node+0xb8>
     e92:	e7 e1       	ldi	r30, 0x17	; 23
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	f0 93 a2 07 	sts	0x07A2, r31	; 0x8007a2 <node+0xbb>
     e9a:	e0 93 a1 07 	sts	0x07A1, r30	; 0x8007a1 <node+0xba>
     e9e:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <node+0xbd>
     ea2:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <node+0xbc>
     ea6:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <node+0xbf>
     eaa:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <node+0xbe>
     eae:	0f 2e       	mov	r0, r31
     eb0:	f3 e0       	ldi	r31, 0x03	; 3
     eb2:	8f 2e       	mov	r8, r31
     eb4:	91 2c       	mov	r9, r1
     eb6:	f0 2d       	mov	r31, r0
     eb8:	90 92 a8 07 	sts	0x07A8, r9	; 0x8007a8 <node+0xc1>
     ebc:	80 92 a7 07 	sts	0x07A7, r8	; 0x8007a7 <node+0xc0>
     ec0:	6a e1       	ldi	r22, 0x1A	; 26
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	70 93 aa 07 	sts	0x07AA, r23	; 0x8007aa <node+0xc3>
     ec8:	60 93 a9 07 	sts	0x07A9, r22	; 0x8007a9 <node+0xc2>
     ecc:	a4 e2       	ldi	r26, 0x24	; 36
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	b0 93 ac 07 	sts	0x07AC, r27	; 0x8007ac <node+0xc5>
     ed4:	a0 93 ab 07 	sts	0x07AB, r26	; 0x8007ab <node+0xc4>
     ed8:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <node+0xc7>
     edc:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <node+0xc6>
     ee0:	0f 2e       	mov	r0, r31
     ee2:	f9 e1       	ldi	r31, 0x19	; 25
     ee4:	6f 2e       	mov	r6, r31
     ee6:	71 2c       	mov	r7, r1
     ee8:	f0 2d       	mov	r31, r0
     eea:	70 92 b0 07 	sts	0x07B0, r7	; 0x8007b0 <node+0xc9>
     eee:	60 92 af 07 	sts	0x07AF, r6	; 0x8007af <node+0xc8>
     ef2:	4b e1       	ldi	r20, 0x1B	; 27
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	50 93 b2 07 	sts	0x07B2, r21	; 0x8007b2 <node+0xcb>
     efa:	40 93 b1 07 	sts	0x07B1, r20	; 0x8007b1 <node+0xca>
     efe:	85 e2       	ldi	r24, 0x25	; 37
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 b4 07 	sts	0x07B4, r25	; 0x8007b4 <node+0xcd>
     f06:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <node+0xcc>
     f0a:	0f 2e       	mov	r0, r31
     f0c:	fc e2       	ldi	r31, 0x2C	; 44
     f0e:	4f 2e       	mov	r4, r31
     f10:	51 2c       	mov	r5, r1
     f12:	f0 2d       	mov	r31, r0
     f14:	50 92 b6 07 	sts	0x07B6, r5	; 0x8007b6 <node+0xcf>
     f18:	40 92 b5 07 	sts	0x07B5, r4	; 0x8007b5 <node+0xce>
     f1c:	70 93 b8 07 	sts	0x07B8, r23	; 0x8007b8 <node+0xd1>
     f20:	60 93 b7 07 	sts	0x07B7, r22	; 0x8007b7 <node+0xd0>
     f24:	2c e1       	ldi	r18, 0x1C	; 28
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	30 93 ba 07 	sts	0x07BA, r19	; 0x8007ba <node+0xd3>
     f2c:	20 93 b9 07 	sts	0x07B9, r18	; 0x8007b9 <node+0xd2>
     f30:	86 e2       	ldi	r24, 0x26	; 38
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <node+0xd5>
     f38:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <node+0xd4>
     f3c:	0d e2       	ldi	r16, 0x2D	; 45
     f3e:	10 e0       	ldi	r17, 0x00	; 0
     f40:	10 93 be 07 	sts	0x07BE, r17	; 0x8007be <node+0xd7>
     f44:	00 93 bd 07 	sts	0x07BD, r16	; 0x8007bd <node+0xd6>
     f48:	0b e0       	ldi	r16, 0x0B	; 11
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	10 93 c0 07 	sts	0x07C0, r17	; 0x8007c0 <node+0xd9>
     f50:	00 93 bf 07 	sts	0x07BF, r16	; 0x8007bf <node+0xd8>
     f54:	50 93 c2 07 	sts	0x07C2, r21	; 0x8007c2 <node+0xdb>
     f58:	40 93 c1 07 	sts	0x07C1, r20	; 0x8007c1 <node+0xda>
     f5c:	8d e1       	ldi	r24, 0x1D	; 29
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <node+0xdd>
     f64:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <node+0xdc>
     f68:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <node+0xdf>
     f6c:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <node+0xde>
     f70:	10 93 c8 07 	sts	0x07C8, r17	; 0x8007c8 <node+0xe1>
     f74:	00 93 c7 07 	sts	0x07C7, r16	; 0x8007c7 <node+0xe0>
     f78:	30 93 ca 07 	sts	0x07CA, r19	; 0x8007ca <node+0xe3>
     f7c:	20 93 c9 07 	sts	0x07C9, r18	; 0x8007c9 <node+0xe2>
     f80:	2e e1       	ldi	r18, 0x1E	; 30
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	30 93 cc 07 	sts	0x07CC, r19	; 0x8007cc <node+0xe5>
     f88:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <node+0xe4>
     f8c:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <node+0xe7>
     f90:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <node+0xe6>
     f94:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <node+0xe9>
     f98:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <node+0xe8>
     f9c:	8f e1       	ldi	r24, 0x1F	; 31
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <node+0xeb>
     fa4:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <node+0xea>
     fa8:	07 e2       	ldi	r16, 0x27	; 39
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	10 93 d4 07 	sts	0x07D4, r17	; 0x8007d4 <node+0xed>
     fb0:	00 93 d3 07 	sts	0x07D3, r16	; 0x8007d3 <node+0xec>
     fb4:	0f 2e       	mov	r0, r31
     fb6:	fe e2       	ldi	r31, 0x2E	; 46
     fb8:	2f 2e       	mov	r2, r31
     fba:	31 2c       	mov	r3, r1
     fbc:	f0 2d       	mov	r31, r0
     fbe:	30 92 d6 07 	sts	0x07D6, r3	; 0x8007d6 <node+0xef>
     fc2:	20 92 d5 07 	sts	0x07D5, r2	; 0x8007d5 <node+0xee>
     fc6:	30 93 d8 07 	sts	0x07D8, r19	; 0x8007d8 <node+0xf1>
     fca:	20 93 d7 07 	sts	0x07D7, r18	; 0x8007d7 <node+0xf0>
     fce:	68 94       	set
     fd0:	ee 24       	eor	r14, r14
     fd2:	e5 f8       	bld	r14, 5
     fd4:	f1 2c       	mov	r15, r1
     fd6:	f0 92 da 07 	sts	0x07DA, r15	; 0x8007da <node+0xf3>
     fda:	e0 92 d9 07 	sts	0x07D9, r14	; 0x8007d9 <node+0xf2>
     fde:	08 e2       	ldi	r16, 0x28	; 40
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	10 93 dc 07 	sts	0x07DC, r17	; 0x8007dc <node+0xf5>
     fe6:	00 93 db 07 	sts	0x07DB, r16	; 0x8007db <node+0xf4>
     fea:	0f 2e       	mov	r0, r31
     fec:	ff e2       	ldi	r31, 0x2F	; 47
     fee:	cf 2e       	mov	r12, r31
     ff0:	d1 2c       	mov	r13, r1
     ff2:	f0 2d       	mov	r31, r0
     ff4:	d0 92 de 07 	sts	0x07DE, r13	; 0x8007de <node+0xf7>
     ff8:	c0 92 dd 07 	sts	0x07DD, r12	; 0x8007dd <node+0xf6>
     ffc:	0f 2e       	mov	r0, r31
     ffe:	f3 e1       	ldi	r31, 0x13	; 19
    1000:	cf 2e       	mov	r12, r31
    1002:	d1 2c       	mov	r13, r1
    1004:	f0 2d       	mov	r31, r0
    1006:	d0 92 e0 07 	sts	0x07E0, r13	; 0x8007e0 <node+0xf9>
    100a:	c0 92 df 07 	sts	0x07DF, r12	; 0x8007df <node+0xf8>
    100e:	90 93 e2 07 	sts	0x07E2, r25	; 0x8007e2 <node+0xfb>
    1012:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <node+0xfa>
    1016:	01 e2       	ldi	r16, 0x21	; 33
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	10 93 e4 07 	sts	0x07E4, r17	; 0x8007e4 <node+0xfd>
    101e:	00 93 e3 07 	sts	0x07E3, r16	; 0x8007e3 <node+0xfc>
    1022:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <node+0xff>
    1026:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <node+0xfe>
    102a:	d0 92 e8 07 	sts	0x07E8, r13	; 0x8007e8 <node+0x101>
    102e:	c0 92 e7 07 	sts	0x07E7, r12	; 0x8007e7 <node+0x100>
    1032:	f0 92 ea 07 	sts	0x07EA, r15	; 0x8007ea <node+0x103>
    1036:	e0 92 e9 07 	sts	0x07E9, r14	; 0x8007e9 <node+0x102>
    103a:	0f 2e       	mov	r0, r31
    103c:	f2 e2       	ldi	r31, 0x22	; 34
    103e:	ef 2e       	mov	r14, r31
    1040:	f1 2c       	mov	r15, r1
    1042:	f0 2d       	mov	r31, r0
    1044:	f0 92 ec 07 	sts	0x07EC, r15	; 0x8007ec <node+0x105>
    1048:	e0 92 eb 07 	sts	0x07EB, r14	; 0x8007eb <node+0x104>
    104c:	10 92 ee 07 	sts	0x07EE, r1	; 0x8007ee <node+0x107>
    1050:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <node+0x106>
    1054:	10 93 f0 07 	sts	0x07F0, r17	; 0x8007f0 <node+0x109>
    1058:	00 93 ef 07 	sts	0x07EF, r16	; 0x8007ef <node+0x108>
    105c:	03 e2       	ldi	r16, 0x23	; 35
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	10 93 f2 07 	sts	0x07F2, r17	; 0x8007f2 <node+0x10b>
    1064:	00 93 f1 07 	sts	0x07F1, r16	; 0x8007f1 <node+0x10a>
    1068:	d0 93 f4 07 	sts	0x07F4, r29	; 0x8007f4 <node+0x10d>
    106c:	c0 93 f3 07 	sts	0x07F3, r28	; 0x8007f3 <node+0x10c>
    1070:	c0 e3       	ldi	r28, 0x30	; 48
    1072:	d0 e0       	ldi	r29, 0x00	; 0
    1074:	d0 93 f6 07 	sts	0x07F6, r29	; 0x8007f6 <node+0x10f>
    1078:	c0 93 f5 07 	sts	0x07F5, r28	; 0x8007f5 <node+0x10e>
    107c:	f0 92 f8 07 	sts	0x07F8, r15	; 0x8007f8 <node+0x111>
    1080:	e0 92 f7 07 	sts	0x07F7, r14	; 0x8007f7 <node+0x110>
    1084:	b0 93 fa 07 	sts	0x07FA, r27	; 0x8007fa <node+0x113>
    1088:	a0 93 f9 07 	sts	0x07F9, r26	; 0x8007f9 <node+0x112>
    108c:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <node+0x115>
    1090:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <node+0x114>
    1094:	ab e2       	ldi	r26, 0x2B	; 43
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	b0 93 fe 07 	sts	0x07FE, r27	; 0x8007fe <node+0x117>
    109c:	a0 93 fd 07 	sts	0x07FD, r26	; 0x8007fd <node+0x116>
    10a0:	90 92 00 08 	sts	0x0800, r9	; 0x800800 <node+0x119>
    10a4:	80 92 ff 07 	sts	0x07FF, r8	; 0x8007ff <node+0x118>
    10a8:	70 92 02 08 	sts	0x0802, r7	; 0x800802 <node+0x11b>
    10ac:	60 92 01 08 	sts	0x0801, r6	; 0x800801 <node+0x11a>
    10b0:	10 93 04 08 	sts	0x0804, r17	; 0x800804 <node+0x11d>
    10b4:	00 93 03 08 	sts	0x0803, r16	; 0x800803 <node+0x11c>
    10b8:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <node+0x11f>
    10bc:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <node+0x11e>
    10c0:	0f 2e       	mov	r0, r31
    10c2:	f7 e0       	ldi	r31, 0x07	; 7
    10c4:	cf 2e       	mov	r12, r31
    10c6:	d1 2c       	mov	r13, r1
    10c8:	f0 2d       	mov	r31, r0
    10ca:	d0 92 08 08 	sts	0x0808, r13	; 0x800808 <node+0x121>
    10ce:	c0 92 07 08 	sts	0x0807, r12	; 0x800807 <node+0x120>
    10d2:	70 93 0a 08 	sts	0x080A, r23	; 0x80080a <node+0x123>
    10d6:	60 93 09 08 	sts	0x0809, r22	; 0x800809 <node+0x122>
    10da:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <node+0x125>
    10de:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <node+0x124>
    10e2:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <node+0x127>
    10e6:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <node+0x126>
    10ea:	d0 92 10 08 	sts	0x0810, r13	; 0x800810 <node+0x129>
    10ee:	c0 92 0f 08 	sts	0x080F, r12	; 0x80080f <node+0x128>
    10f2:	50 93 12 08 	sts	0x0812, r21	; 0x800812 <node+0x12b>
    10f6:	40 93 11 08 	sts	0x0811, r20	; 0x800811 <node+0x12a>
    10fa:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <node+0x12d>
    10fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <node+0x12c>
    1102:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <node+0x12f>
    1106:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <node+0x12e>
    110a:	0f 2e       	mov	r0, r31
    110c:	ff e0       	ldi	r31, 0x0F	; 15
    110e:	cf 2e       	mov	r12, r31
    1110:	d1 2c       	mov	r13, r1
    1112:	f0 2d       	mov	r31, r0
    1114:	d0 92 18 08 	sts	0x0818, r13	; 0x800818 <node+0x131>
    1118:	c0 92 17 08 	sts	0x0817, r12	; 0x800817 <node+0x130>
    111c:	30 93 1a 08 	sts	0x081A, r19	; 0x80081a <node+0x133>
    1120:	20 93 19 08 	sts	0x0819, r18	; 0x800819 <node+0x132>
    1124:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <node+0x135>
    1128:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <node+0x134>
    112c:	10 92 1e 08 	sts	0x081E, r1	; 0x80081e <node+0x137>
    1130:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <node+0x136>
    1134:	d0 92 20 08 	sts	0x0820, r13	; 0x800820 <node+0x139>
    1138:	c0 92 1f 08 	sts	0x081F, r12	; 0x80081f <node+0x138>
    113c:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <node+0x13b>
    1140:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <node+0x13a>
    1144:	10 92 24 08 	sts	0x0824, r1	; 0x800824 <node+0x13d>
    1148:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <node+0x13c>
    114c:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <node+0x13f>
    1150:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <node+0x13e>
    1154:	f0 93 28 08 	sts	0x0828, r31	; 0x800828 <node+0x141>
    1158:	e0 93 27 08 	sts	0x0827, r30	; 0x800827 <node+0x140>
    115c:	f0 92 2a 08 	sts	0x082A, r15	; 0x80082a <node+0x143>
    1160:	e0 92 29 08 	sts	0x0829, r14	; 0x800829 <node+0x142>
    1164:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <node+0x145>
    1168:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <node+0x144>
    116c:	10 92 2e 08 	sts	0x082E, r1	; 0x80082e <node+0x147>
    1170:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <node+0x146>
    1174:	f0 93 30 08 	sts	0x0830, r31	; 0x800830 <node+0x149>
    1178:	e0 93 2f 08 	sts	0x082F, r30	; 0x80082f <node+0x148>
    117c:	10 93 32 08 	sts	0x0832, r17	; 0x800832 <node+0x14b>
    1180:	00 93 31 08 	sts	0x0831, r16	; 0x800831 <node+0x14a>
    1184:	10 92 34 08 	sts	0x0834, r1	; 0x800834 <node+0x14d>
    1188:	10 92 33 08 	sts	0x0833, r1	; 0x800833 <node+0x14c>
    118c:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <node+0x14f>
    1190:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <node+0x14e>
    1194:	10 93 38 08 	sts	0x0838, r17	; 0x800838 <node+0x151>
    1198:	00 93 37 08 	sts	0x0837, r16	; 0x800837 <node+0x150>
    119c:	50 92 3a 08 	sts	0x083A, r5	; 0x80083a <node+0x153>
    11a0:	40 92 39 08 	sts	0x0839, r4	; 0x800839 <node+0x152>
    11a4:	10 92 3c 08 	sts	0x083C, r1	; 0x80083c <node+0x155>
    11a8:	10 92 3b 08 	sts	0x083B, r1	; 0x80083b <node+0x154>
    11ac:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <node+0x157>
    11b0:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <node+0x156>
    11b4:	70 93 40 08 	sts	0x0840, r23	; 0x800840 <node+0x159>
    11b8:	60 93 3f 08 	sts	0x083F, r22	; 0x80083f <node+0x158>
    11bc:	b0 93 42 08 	sts	0x0842, r27	; 0x800842 <node+0x15b>
    11c0:	a0 93 41 08 	sts	0x0841, r26	; 0x800841 <node+0x15a>
    11c4:	10 92 44 08 	sts	0x0844, r1	; 0x800844 <node+0x15d>
    11c8:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <node+0x15c>
    11cc:	10 92 46 08 	sts	0x0846, r1	; 0x800846 <node+0x15f>
    11d0:	10 92 45 08 	sts	0x0845, r1	; 0x800845 <node+0x15e>
    11d4:	50 93 48 08 	sts	0x0848, r21	; 0x800848 <node+0x161>
    11d8:	40 93 47 08 	sts	0x0847, r20	; 0x800847 <node+0x160>
    11dc:	30 92 4a 08 	sts	0x084A, r3	; 0x80084a <node+0x163>
    11e0:	20 92 49 08 	sts	0x0849, r2	; 0x800849 <node+0x162>
    11e4:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <node+0x165>
    11e8:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <node+0x164>
    11ec:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <node+0x167>
    11f0:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <node+0x166>
    11f4:	30 93 50 08 	sts	0x0850, r19	; 0x800850 <node+0x169>
    11f8:	20 93 4f 08 	sts	0x084F, r18	; 0x80084f <node+0x168>
    11fc:	0d e2       	ldi	r16, 0x2D	; 45
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	10 93 52 08 	sts	0x0852, r17	; 0x800852 <node+0x16b>
    1204:	00 93 51 08 	sts	0x0851, r16	; 0x800851 <node+0x16a>
    1208:	10 92 54 08 	sts	0x0854, r1	; 0x800854 <node+0x16d>
    120c:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <node+0x16c>
    1210:	10 92 56 08 	sts	0x0856, r1	; 0x800856 <node+0x16f>
    1214:	10 92 55 08 	sts	0x0855, r1	; 0x800855 <node+0x16e>
    1218:	90 93 58 08 	sts	0x0858, r25	; 0x800858 <node+0x171>
    121c:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <node+0x170>
    1220:	d0 93 5a 08 	sts	0x085A, r29	; 0x80085a <node+0x173>
    1224:	c0 93 59 08 	sts	0x0859, r28	; 0x800859 <node+0x172>
    1228:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <node+0x175>
    122c:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <node+0x174>
    1230:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <node+0x177>
    1234:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <node+0x176>
    1238:	f0 92 60 08 	sts	0x0860, r15	; 0x800860 <node+0x179>
    123c:	e0 92 5f 08 	sts	0x085F, r14	; 0x80085f <node+0x178>
    1240:	2f e2       	ldi	r18, 0x2F	; 47
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	30 93 62 08 	sts	0x0862, r19	; 0x800862 <node+0x17b>
    1248:	20 93 61 08 	sts	0x0861, r18	; 0x800861 <node+0x17a>
    124c:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <node+0x17d>
    1250:	10 92 63 08 	sts	0x0863, r1	; 0x800863 <node+0x17c>
    1254:	10 92 66 08 	sts	0x0866, r1	; 0x800866 <node+0x17f>
    1258:	10 92 65 08 	sts	0x0865, r1	; 0x800865 <node+0x17e>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	9f 90       	pop	r9
    1272:	8f 90       	pop	r8
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	5f 90       	pop	r5
    127a:	4f 90       	pop	r4
    127c:	3f 90       	pop	r3
    127e:	2f 90       	pop	r2
    1280:	08 95       	ret

00001282 <__vector_25>:
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	0b b6       	in	r0, 0x3b	; 59
    128e:	0f 92       	push	r0
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	ef 93       	push	r30
    129e:	ff 93       	push	r31
    12a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12a4:	88 23       	and	r24, r24
    12a6:	0c f0       	brlt	.+2      	; 0x12aa <__vector_25+0x28>
    12a8:	82 c0       	rjmp	.+260    	; 0x13ae <__vector_25+0x12c>
    12aa:	98 2f       	mov	r25, r24
    12ac:	9f 77       	andi	r25, 0x7F	; 127
    12ae:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <lastCommand>
    12b2:	4e 2f       	mov	r20, r30
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	fa 01       	movw	r30, r20
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	ed 30       	cpi	r30, 0x0D	; 13
    12bc:	f1 05       	cpc	r31, r1
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <__vector_25+0x40>
    12c0:	84 c0       	rjmp	.+264    	; 0x13ca <__vector_25+0x148>
    12c2:	88 27       	eor	r24, r24
    12c4:	ee 58       	subi	r30, 0x8E	; 142
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ca:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__tablejump2__>
    12ce:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <noteCount>
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	e5 5a       	subi	r30, 0xA5	; 165
    12d6:	f9 4f       	sbci	r31, 0xF9	; 249
    12d8:	90 83       	st	Z, r25
    12da:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <noteCount>
    12e4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    12e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    12ec:	6e c0       	rjmp	.+220    	; 0x13ca <__vector_25+0x148>
    12ee:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <noteCount2>
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	e9 5b       	subi	r30, 0xB9	; 185
    12f6:	f9 4f       	sbci	r31, 0xF9	; 249
    12f8:	90 83       	st	Z, r25
    12fa:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <noteCount2>
    1304:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    1308:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    130c:	5e c0       	rjmp	.+188    	; 0x13ca <__vector_25+0x148>
    130e:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	e1 59       	subi	r30, 0x91	; 145
    1316:	f9 4f       	sbci	r31, 0xF9	; 249
    1318:	90 83       	st	Z, r25
    131a:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	e6 59       	subi	r30, 0x96	; 150
    1322:	f7 4f       	sbci	r31, 0xF7	; 247
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	80 83       	st	Z, r24
    1328:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <taskCount>
    1332:	4b c0       	rjmp	.+150    	; 0x13ca <__vector_25+0x148>
    1334:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	e1 59       	subi	r30, 0x91	; 145
    133c:	f9 4f       	sbci	r31, 0xF9	; 249
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	80 83       	st	Z, r24
    1342:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	e6 59       	subi	r30, 0x96	; 150
    134a:	f7 4f       	sbci	r31, 0xF7	; 247
    134c:	90 83       	st	Z, r25
    134e:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <taskCount>
    1358:	38 c0       	rjmp	.+112    	; 0x13ca <__vector_25+0x148>
    135a:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <otherBotLocation>
    135e:	35 c0       	rjmp	.+106    	; 0x13ca <__vector_25+0x148>
    1360:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <otherBotMovingTo>
    1364:	32 c0       	rjmp	.+100    	; 0x13ca <__vector_25+0x148>
    1366:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    136a:	89 13       	cpse	r24, r25
    136c:	2e c0       	rjmp	.+92     	; 0x13ca <__vector_25+0x148>
    136e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <noteToStrike>
    1378:	28 c0       	rjmp	.+80     	; 0x13ca <__vector_25+0x148>
    137a:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <noteToProcess>
    137e:	89 13       	cpse	r24, r25
    1380:	24 c0       	rjmp	.+72     	; 0x13ca <__vector_25+0x148>
    1382:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <noteToProcess>
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <noteToProcess>
    138c:	1e c0       	rjmp	.+60     	; 0x13ca <__vector_25+0x148>
    138e:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <taskCost>
    1392:	89 0f       	add	r24, r25
    1394:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <taskCost>
    1398:	18 c0       	rjmp	.+48     	; 0x13ca <__vector_25+0x148>
    139a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <otherBotLastTaskIndex>
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <__vector_25+0x148>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <botEnd+0x1>
    13a8:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <botEnd>
    13ac:	0e c0       	rjmp	.+28     	; 0x13ca <__vector_25+0x148>
    13ae:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <lastCommand>
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	19 f0       	breq	.+6      	; 0x13bc <__vector_25+0x13a>
    13b6:	8c 30       	cpi	r24, 0x0C	; 12
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <__vector_25+0x142>
    13ba:	07 c0       	rjmp	.+14     	; 0x13ca <__vector_25+0x148>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <notesReceived>
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <__vector_25+0x148>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <notesReceived2>
    13ca:	ff 91       	pop	r31
    13cc:	ef 91       	pop	r30
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	7f 91       	pop	r23
    13d4:	6f 91       	pop	r22
    13d6:	5f 91       	pop	r21
    13d8:	4f 91       	pop	r20
    13da:	0f 90       	pop	r0
    13dc:	0b be       	out	0x3b, r0	; 59
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <__vector_51>:
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	0b b6       	in	r0, 0x3b	; 59
    13f4:	0f 92       	push	r0
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31
    13fe:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1402:	90 91 3f 06 	lds	r25, 0x063F	; 0x80063f <notesReceived>
    1406:	91 11       	cpse	r25, r1
    1408:	18 c0       	rjmp	.+48     	; 0x143a <__vector_51+0x52>
    140a:	8f 3f       	cpi	r24, 0xFF	; 255
    140c:	81 f0       	breq	.+32     	; 0x142e <__vector_51+0x46>
    140e:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <noteCount>
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	e5 5a       	subi	r30, 0xA5	; 165
    1416:	f9 4f       	sbci	r31, 0xF9	; 249
    1418:	80 83       	st	Z, r24
    141a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    141e:	8f 5f       	subi	r24, 0xFF	; 255
    1420:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <noteCount>
    1424:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    1428:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    142c:	21 c0       	rjmp	.+66     	; 0x1470 <__vector_51+0x88>
    142e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <notesReceived>
    1438:	1b c0       	rjmp	.+54     	; 0x1470 <__vector_51+0x88>
    143a:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <notesReceived2>
    143e:	91 11       	cpse	r25, r1
    1440:	17 c0       	rjmp	.+46     	; 0x1470 <__vector_51+0x88>
    1442:	8f 3f       	cpi	r24, 0xFF	; 255
    1444:	81 f0       	breq	.+32     	; 0x1466 <__vector_51+0x7e>
    1446:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <noteCount2>
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	e9 5b       	subi	r30, 0xB9	; 185
    144e:	f9 4f       	sbci	r31, 0xF9	; 249
    1450:	80 83       	st	Z, r24
    1452:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <noteCount2>
    145c:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    1460:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <__vector_51+0x88>
    1466:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <notesReceived2>
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	0f 90       	pop	r0
    147a:	0b be       	out	0x3b, r0	; 59
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	0f 90       	pop	r0
    1482:	1f 90       	pop	r1
    1484:	18 95       	reti

00001486 <servo1_pin_config>:
    1486:	25 9a       	sbi	0x04, 5	; 4
    1488:	2d 9a       	sbi	0x05, 5	; 5
    148a:	08 95       	ret

0000148c <timer1_init>:
    148c:	e1 e8       	ldi	r30, 0x81	; 129
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	10 82       	st	Z, r1
    1492:	8c ef       	ldi	r24, 0xFC	; 252
    1494:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    149e:	93 e0       	ldi	r25, 0x03	; 3
    14a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    14aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    14ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    14b2:	8b ea       	ldi	r24, 0xAB	; 171
    14b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    14b8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    14bc:	8c e0       	ldi	r24, 0x0C	; 12
    14be:	80 83       	st	Z, r24
    14c0:	08 95       	ret

000014c2 <servo_1>:
    14c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    14c6:	68 2f       	mov	r22, r24
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__floatunsisf>
    14d2:	2b e7       	ldi	r18, 0x7B	; 123
    14d4:	34 e1       	ldi	r19, 0x14	; 20
    14d6:	4e ee       	ldi	r20, 0xEE	; 238
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__divsf3>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4c e0       	ldi	r20, 0x0C	; 12
    14e4:	52 e4       	ldi	r21, 0x42	; 66
    14e6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__addsf3>
    14ea:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fixunssfsi>
    14ee:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    14f2:	08 95       	ret

000014f4 <buzzer_pin_config>:
    14f4:	3b 9a       	sbi	0x07, 3	; 7
    14f6:	43 98       	cbi	0x08, 3	; 8
    14f8:	08 95       	ret

000014fa <buzzer_on>:
    14fa:	86 b1       	in	r24, 0x06	; 6
    14fc:	88 60       	ori	r24, 0x08	; 8
    14fe:	88 b9       	out	0x08, r24	; 8
    1500:	08 95       	ret

00001502 <buzzer_off>:
    1502:	86 b1       	in	r24, 0x06	; 6
    1504:	87 7f       	andi	r24, 0xF7	; 247
    1506:	88 b9       	out	0x08, r24	; 8
    1508:	08 95       	ret

0000150a <adc_pin_config>:
    150a:	10 ba       	out	0x10, r1	; 16
    150c:	11 ba       	out	0x11, r1	; 17
    150e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    1512:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    1516:	08 95       	ret

00001518 <motion_pin_config>:
    1518:	81 b1       	in	r24, 0x01	; 1
    151a:	8f 60       	ori	r24, 0x0F	; 15
    151c:	81 b9       	out	0x01, r24	; 1
    151e:	82 b1       	in	r24, 0x02	; 2
    1520:	80 7f       	andi	r24, 0xF0	; 240
    1522:	82 b9       	out	0x02, r24	; 2
    1524:	ea e0       	ldi	r30, 0x0A	; 10
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	80 81       	ld	r24, Z
    152a:	88 61       	ori	r24, 0x18	; 24
    152c:	80 83       	st	Z, r24
    152e:	eb e0       	ldi	r30, 0x0B	; 11
    1530:	f1 e0       	ldi	r31, 0x01	; 1
    1532:	80 81       	ld	r24, Z
    1534:	88 61       	ori	r24, 0x18	; 24
    1536:	80 83       	st	Z, r24
    1538:	08 95       	ret

0000153a <left_encoder_pin_config>:
    153a:	6c 98       	cbi	0x0d, 4	; 13
    153c:	74 9a       	sbi	0x0e, 4	; 14
    153e:	08 95       	ret

00001540 <right_encoder_pin_config>:
    1540:	6d 98       	cbi	0x0d, 5	; 13
    1542:	75 9a       	sbi	0x0e, 5	; 14
    1544:	08 95       	ret

00001546 <port_init>:
    1546:	e8 df       	rcall	.-48     	; 0x1518 <motion_pin_config>
    1548:	f8 df       	rcall	.-16     	; 0x153a <left_encoder_pin_config>
    154a:	fa df       	rcall	.-12     	; 0x1540 <right_encoder_pin_config>
    154c:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_port_config>
    1550:	dc df       	rcall	.-72     	; 0x150a <adc_pin_config>
    1552:	d0 cf       	rjmp	.-96     	; 0x14f4 <buzzer_pin_config>
    1554:	08 95       	ret

00001556 <timer5_init>:
    1556:	e1 e2       	ldi	r30, 0x21	; 33
    1558:	f1 e0       	ldi	r31, 0x01	; 1
    155a:	10 82       	st	Z, r1
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1568:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    156c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    1570:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1574:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    1578:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    157c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
    1580:	89 ea       	ldi	r24, 0xA9	; 169
    1582:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1586:	8b e0       	ldi	r24, 0x0B	; 11
    1588:	80 83       	st	Z, r24
    158a:	08 95       	ret

0000158c <adc_init>:
    158c:	ea e7       	ldi	r30, 0x7A	; 122
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	10 82       	st	Z, r1
    1592:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    159c:	80 e8       	ldi	r24, 0x80	; 128
    159e:	80 bf       	out	0x30, r24	; 48
    15a0:	86 e8       	ldi	r24, 0x86	; 134
    15a2:	80 83       	st	Z, r24
    15a4:	08 95       	ret

000015a6 <ADC_Conversion>:
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	18 f0       	brcs	.+6      	; 0x15b0 <ADC_Conversion+0xa>
    15aa:	98 e0       	ldi	r25, 0x08	; 8
    15ac:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    15b0:	87 70       	andi	r24, 0x07	; 7
    15b2:	80 62       	ori	r24, 0x20	; 32
    15b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    15b8:	ea e7       	ldi	r30, 0x7A	; 122
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 64       	ori	r24, 0x40	; 64
    15c0:	80 83       	st	Z, r24
    15c2:	80 81       	ld	r24, Z
    15c4:	84 ff       	sbrs	r24, 4
    15c6:	fd cf       	rjmp	.-6      	; 0x15c2 <ADC_Conversion+0x1c>
    15c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    15cc:	ea e7       	ldi	r30, 0x7A	; 122
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	90 81       	ld	r25, Z
    15d2:	90 61       	ori	r25, 0x10	; 16
    15d4:	90 83       	st	Z, r25
    15d6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    15da:	08 95       	ret

000015dc <left_position_encoder_interrupt_init>:
    15dc:	f8 94       	cli
    15de:	ea e6       	ldi	r30, 0x6A	; 106
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	80 83       	st	Z, r24
    15e8:	ec 9a       	sbi	0x1d, 4	; 29
    15ea:	78 94       	sei
    15ec:	08 95       	ret

000015ee <right_position_encoder_interrupt_init>:
    15ee:	f8 94       	cli
    15f0:	ea e6       	ldi	r30, 0x6A	; 106
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	88 60       	ori	r24, 0x08	; 8
    15f8:	80 83       	st	Z, r24
    15fa:	ed 9a       	sbi	0x1d, 5	; 29
    15fc:	78 94       	sei
    15fe:	08 95       	ret

00001600 <__vector_6>:
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	8f 93       	push	r24
    160c:	9f 93       	push	r25
    160e:	af 93       	push	r26
    1610:	bf 93       	push	r27
    1612:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1616:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    161a:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    161e:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	a1 1d       	adc	r26, r1
    1626:	b1 1d       	adc	r27, r1
    1628:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <ShaftCountRight>
    162c:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <ShaftCountRight+0x1>
    1630:	a0 93 08 06 	sts	0x0608, r26	; 0x800608 <ShaftCountRight+0x2>
    1634:	b0 93 09 06 	sts	0x0609, r27	; 0x800609 <ShaftCountRight+0x3>
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <__vector_5>:
    164a:	1f 92       	push	r1
    164c:	0f 92       	push	r0
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	0f 92       	push	r0
    1652:	11 24       	eor	r1, r1
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <ShaftCountLeft>
    1660:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <ShaftCountLeft+0x1>
    1664:	a0 91 0c 06 	lds	r26, 0x060C	; 0x80060c <ShaftCountLeft+0x2>
    1668:	b0 91 0d 06 	lds	r27, 0x060D	; 0x80060d <ShaftCountLeft+0x3>
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	a1 1d       	adc	r26, r1
    1670:	b1 1d       	adc	r27, r1
    1672:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <ShaftCountLeft>
    1676:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <ShaftCountLeft+0x1>
    167a:	a0 93 0c 06 	sts	0x060C, r26	; 0x80060c <ShaftCountLeft+0x2>
    167e:	b0 93 0d 06 	sts	0x060D, r27	; 0x80060d <ShaftCountLeft+0x3>
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <motion_set>:
    1694:	92 b1       	in	r25, 0x02	; 2
    1696:	90 7f       	andi	r25, 0xF0	; 240
    1698:	8f 70       	andi	r24, 0x0F	; 15
    169a:	98 2b       	or	r25, r24
    169c:	92 b9       	out	0x02, r25	; 2
    169e:	08 95       	ret

000016a0 <forward>:
    16a0:	86 e0       	ldi	r24, 0x06	; 6
    16a2:	f8 cf       	rjmp	.-16     	; 0x1694 <motion_set>
    16a4:	08 95       	ret

000016a6 <left>:
    16a6:	85 e0       	ldi	r24, 0x05	; 5
    16a8:	f5 cf       	rjmp	.-22     	; 0x1694 <motion_set>
    16aa:	08 95       	ret

000016ac <right>:
    16ac:	8a e0       	ldi	r24, 0x0A	; 10
    16ae:	f2 cf       	rjmp	.-28     	; 0x1694 <motion_set>
    16b0:	08 95       	ret

000016b2 <stop>:
}

void stop (void)
{
	motion_set(0x00);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	ef cf       	rjmp	.-34     	; 0x1694 <motion_set>
    16b6:	08 95       	ret

000016b8 <angle_rotate>:
}


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    16c4:	bc 01       	movw	r22, r24
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__floatunsisf>
    16ce:	28 e4       	ldi	r18, 0x48	; 72
    16d0:	31 ee       	ldi	r19, 0xE1	; 225
    16d2:	42 e8       	ldi	r20, 0x82	; 130
    16d4:	50 e4       	ldi	r21, 0x40	; 64
    16d6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    16da:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fixunssfsi>
    16de:	ab 01       	movw	r20, r22
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
	ShaftCountRight = 0;
    16e4:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <ShaftCountRight>
    16e8:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ShaftCountRight+0x1>
    16ec:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <ShaftCountRight+0x2>
    16f0:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
    16f4:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <ShaftCountLeft>
    16f8:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <ShaftCountLeft+0x1>
    16fc:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <ShaftCountLeft+0x2>
    1700:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <ShaftCountLeft+0x3>

	while (1)
	{
		//lcd_print(1,5,ShaftCountRight,3);
		//lcd_print(2,10,ShaftCountRight,2);
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	e0 e0       	ldi	r30, 0x00	; 0
    1708:	c0 90 06 06 	lds	r12, 0x0606	; 0x800606 <ShaftCountRight>
    170c:	d0 90 07 06 	lds	r13, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1710:	e0 90 08 06 	lds	r14, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1714:	f0 90 09 06 	lds	r15, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1718:	00 91 0a 06 	lds	r16, 0x060A	; 0x80060a <ShaftCountLeft>
    171c:	10 91 0b 06 	lds	r17, 0x060B	; 0x80060b <ShaftCountLeft+0x1>
    1720:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <ShaftCountLeft+0x2>
    1724:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <ShaftCountLeft+0x3>
    1728:	89 2f       	mov	r24, r25
    172a:	04 17       	cp	r16, r20
    172c:	15 07       	cpc	r17, r21
    172e:	26 07       	cpc	r18, r22
    1730:	37 07       	cpc	r19, r23
    1732:	08 f4       	brcc	.+2      	; 0x1736 <angle_rotate+0x7e>
    1734:	8e 2f       	mov	r24, r30
    1736:	81 11       	cpse	r24, r1
    1738:	09 c0       	rjmp	.+18     	; 0x174c <angle_rotate+0x94>
    173a:	89 2f       	mov	r24, r25
    173c:	c4 16       	cp	r12, r20
    173e:	d5 06       	cpc	r13, r21
    1740:	e6 06       	cpc	r14, r22
    1742:	f7 06       	cpc	r15, r23
    1744:	08 f4       	brcc	.+2      	; 0x1748 <angle_rotate+0x90>
    1746:	8e 2f       	mov	r24, r30
    1748:	88 23       	and	r24, r24
    174a:	f1 f2       	breq	.-68     	; 0x1708 <angle_rotate+0x50>
		break;
	}
	//stop(); //Stop robot
	stop();
    174c:	b2 df       	rcall	.-156    	; 0x16b2 <stop>
}
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	08 95       	ret

0000175c <left_degrees>:



void left_degrees(unsigned int Degrees)
{
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    1762:	a1 df       	rcall	.-190    	; 0x16a6 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    176a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	velocity(255,255);
	angle_rotate(Degrees);
    176e:	ce 01       	movw	r24, r28
    1770:	a3 df       	rcall	.-186    	; 0x16b8 <angle_rotate>
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    177e:	96 df       	rcall	.-212    	; 0x16ac <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1780:	9f ef       	ldi	r25, 0xFF	; 255
    1782:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1786:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	velocity(255,255);
	angle_rotate(Degrees);
    178a:	ce 01       	movw	r24, r28
    178c:	95 df       	rcall	.-214    	; 0x16b8 <angle_rotate>
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <LED_bargraph_config>:

void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	PORTJ = 0x00; //Output is set to 0
    179a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
    179e:	08 95       	ret

000017a0 <init_devices>:
}

void init_devices()
{
	cli(); //Clears the global interrupt
    17a0:	f8 94       	cli
	port_init();  //Initializes all the ports
    17a2:	d1 de       	rcall	.-606    	; 0x1546 <port_init>
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
    17a4:	e1 ec       	ldi	r30, 0xC1	; 193
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    17aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
    17ae:	26 e0       	ldi	r18, 0x06	; 6
    17b0:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
    17b4:	9f e5       	ldi	r25, 0x5F	; 95
    17b6:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
    17ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
    17be:	88 e9       	ldi	r24, 0x98	; 152
    17c0:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
    17c2:	e1 ed       	ldi	r30, 0xD1	; 209
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	10 82       	st	Z, r1
	UCSR2A = 0x00;
    17c8:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
    17cc:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
    17d0:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
    17d4:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
    17d8:	80 83       	st	Z, r24
{
	cli(); //Clears the global interrupt
	port_init();  //Initializes all the ports
	uart0_init();	//init Zigbee comm
	uart2_init();	//init PC - USB comm
	left_position_encoder_interrupt_init();
    17da:	00 df       	rcall	.-512    	; 0x15dc <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    17dc:	08 df       	rcall	.-496    	; 0x15ee <right_position_encoder_interrupt_init>
	adc_init();
    17de:	d6 de       	rcall	.-596    	; 0x158c <adc_init>
	timer5_init();
    17e0:	ba de       	rcall	.-652    	; 0x1556 <timer5_init>
	lcd_set_4bit();
    17e2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_set_4bit>
	lcd_init();
    17e6:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_init>
	servo1_pin_config();
    17ea:	4d de       	rcall	.-870    	; 0x1486 <servo1_pin_config>
	timer1_init();
    17ec:	4f de       	rcall	.-866    	; 0x148c <timer1_init>
	LED_bargraph_config();
    17ee:	d2 df       	rcall	.-92     	; 0x1794 <LED_bargraph_config>
	sei();   // Enables the global interrupt
    17f0:	78 94       	sei
    17f2:	08 95       	ret

000017f4 <linear_distance_mm>:
//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    17f4:	bc 01       	movw	r22, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__floatunsisf>
    17fe:	25 ee       	ldi	r18, 0xE5	; 229
    1800:	30 ed       	ldi	r19, 0xD0	; 208
    1802:	4a ea       	ldi	r20, 0xAA	; 170
    1804:	50 e4       	ldi	r21, 0x40	; 64
    1806:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    180a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fixunssfsi>
    180e:	ab 01       	movw	r20, r22
    1810:	bc 01       	movw	r22, r24
	ShaftCountRight = 0;
    1812:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <ShaftCountRight>
    1816:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ShaftCountRight+0x1>
    181a:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <ShaftCountRight+0x2>
    181e:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <ShaftCountRight+0x3>
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1822:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1826:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    182a:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    182e:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1832:	48 17       	cp	r20, r24
    1834:	59 07       	cpc	r21, r25
    1836:	6a 07       	cpc	r22, r26
    1838:	7b 07       	cpc	r23, r27
    183a:	98 f7       	brcc	.-26     	; 0x1822 <linear_distance_mm+0x2e>
		{
			break;
		}
	}
	stop(); //Stop robot
    183c:	3a cf       	rjmp	.-396    	; 0x16b2 <stop>
    183e:	08 95       	ret

00001840 <forward_mm>:
}


void forward_mm(unsigned int DistanceInMM)
{
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	ec 01       	movw	r28, r24
	forward();
    1846:	2c df       	rcall	.-424    	; 0x16a0 <forward>
	velocity(speed,speed);
    1848:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    184c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1850:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	velocity(speed,speed);
	linear_distance_mm(DistanceInMM);
    1854:	ce 01       	movw	r24, r28
    1856:	ce df       	rcall	.-100    	; 0x17f4 <linear_distance_mm>
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <costplan>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
    185e:	4f 92       	push	r4
    1860:	5f 92       	push	r5
    1862:	6f 92       	push	r6
    1864:	7f 92       	push	r7
    1866:	8f 92       	push	r8
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	c0 5c       	subi	r28, 0xC0	; 192
    1884:	d1 09       	sbc	r29, r1
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
    1890:	de 01       	movw	r26, r28
    1892:	af 59       	subi	r26, 0x9F	; 159
    1894:	bf 4f       	sbci	r27, 0xFF	; 255
    1896:	20 e6       	ldi	r18, 0x60	; 96
    1898:	fd 01       	movw	r30, r26
    189a:	11 92       	st	Z+, r1
    189c:	2a 95       	dec	r18
    189e:	e9 f7       	brne	.-6      	; 0x189a <costplan+0x3c>
    18a0:	e7 e8       	ldi	r30, 0x87	; 135
    18a2:	f6 e0       	ldi	r31, 0x06	; 6
    18a4:	8e 01       	movw	r16, r28
    18a6:	0f 5f       	subi	r16, 0xFF	; 255
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	78 01       	movw	r14, r16
    18ac:	6d 01       	movw	r12, r26
    18ae:	07 ee       	ldi	r16, 0xE7	; 231
    18b0:	16 e0       	ldi	r17, 0x06	; 6
    18b2:	97 01       	movw	r18, r14
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    18b4:	63 e6       	ldi	r22, 0x63	; 99
    18b6:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
    18b8:	4f ef       	ldi	r20, 0xFF	; 255
    18ba:	5f ef       	ldi	r21, 0xFF	; 255
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
	{
		cost[j]=99;
    18bc:	61 93       	st	Z+, r22
    18be:	71 93       	st	Z+, r23
		list[j]=-1;
    18c0:	d9 01       	movw	r26, r18
    18c2:	4d 93       	st	X+, r20
    18c4:	5d 93       	st	X+, r21
    18c6:	9d 01       	movw	r18, r26
		tmploc[j]=0;
    18c8:	d6 01       	movw	r26, r12
    18ca:	1d 92       	st	X+, r1
    18cc:	1d 92       	st	X+, r1
    18ce:	6d 01       	movw	r12, r26
void costplan(int note_loc[])    // Cost planning Function
{								//  Plans cost of moving from the every node in the arena to the destination nodes
	int j=0,k=-1;
	int list[48];
	int tmploc[48]={0};
	for(j=0;j<48;j=j+1)  // Initialization
    18d0:	e0 17       	cp	r30, r16
    18d2:	f1 07       	cpc	r31, r17
    18d4:	99 f7       	brne	.-26     	; 0x18bc <costplan+0x5e>
    18d6:	fc 01       	movw	r30, r24
    18d8:	ac 01       	movw	r20, r24
    18da:	44 5f       	subi	r20, 0xF4	; 244
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
		if(note_loc[j]!=0)
		{
			cost[note_loc[j]-1]=0;
			k=k+1;
			list[k]=note_loc[j];   // It is the list of nodes to explore
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	70 e0       	ldi	r23, 0x00	; 0
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
	{
		if(note_loc[j]!=0)
    18e6:	20 81       	ld	r18, Z
    18e8:	31 81       	ldd	r19, Z+1	; 0x01
    18ea:	21 15       	cp	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f1       	breq	.+66     	; 0x1932 <costplan+0xd4>
		{
			cost[note_loc[j]-1]=0;
    18f0:	22 0f       	add	r18, r18
    18f2:	33 1f       	adc	r19, r19
    18f4:	d9 01       	movw	r26, r18
    18f6:	ab 57       	subi	r26, 0x7B	; 123
    18f8:	b9 4f       	sbci	r27, 0xF9	; 249
    18fa:	1d 92       	st	X+, r1
    18fc:	1c 92       	st	X, r1
			k=k+1;
    18fe:	01 96       	adiw	r24, 0x01	; 1
			list[k]=note_loc[j];   // It is the list of nodes to explore
    1900:	20 81       	ld	r18, Z
    1902:	31 81       	ldd	r19, Z+1	; 0x01
    1904:	dc 01       	movw	r26, r24
    1906:	aa 0f       	add	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	01 e0       	ldi	r16, 0x01	; 1
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	0c 0f       	add	r16, r28
    1910:	1d 1f       	adc	r17, r29
    1912:	a0 0f       	add	r26, r16
    1914:	b1 1f       	adc	r27, r17
    1916:	2d 93       	st	X+, r18
    1918:	3c 93       	st	X, r19
			tmploc[note_loc[j]-1]=1;  // each node added to the list is marked with 1
    191a:	d9 01       	movw	r26, r18
    191c:	11 97       	sbiw	r26, 0x01	; 1
    191e:	aa 0f       	add	r26, r26
    1920:	bb 1f       	adc	r27, r27
    1922:	21 e6       	ldi	r18, 0x61	; 97
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	2c 0f       	add	r18, r28
    1928:	3d 1f       	adc	r19, r29
    192a:	a2 0f       	add	r26, r18
    192c:	b3 1f       	adc	r27, r19
    192e:	6d 93       	st	X+, r22
    1930:	7c 93       	st	X, r23
    1932:	32 96       	adiw	r30, 0x02	; 2
	{
		cost[j]=99;
		list[j]=-1;
		tmploc[j]=0;
	}
	for(j=0;j<6;j=j+1)  // Assigns cost of dest as Zero
    1934:	e4 17       	cp	r30, r20
    1936:	f5 07       	cpc	r31, r21
    1938:	b1 f6       	brne	.-84     	; 0x18e6 <costplan+0x88>
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    193a:	ae 2c       	mov	r10, r14
    193c:	9f 2c       	mov	r9, r15
    193e:	81 2c       	mov	r8, r1
    1940:	71 2c       	mov	r7, r1
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1942:	68 94       	set
    1944:	bb 24       	eor	r11, r11
    1946:	b2 f8       	bld	r11, 2
    1948:	61 2c       	mov	r6, r1
				
				if((cost[s]+1)<=cost[node[s][i]-1])
				cost[node[s][i]-1]=(cost[s]+1);
				if(tmploc[node[s][i]-1]!=1)
				{
					tmploc[node[s][i]-1]=1;
    194a:	cc 24       	eor	r12, r12
    194c:	c3 94       	inc	r12
    194e:	d1 2c       	mov	r13, r1
	
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
    1950:	a9 81       	ldd	r26, Y+1	; 0x01
    1952:	ba 81       	ldd	r27, Y+2	; 0x02
    1954:	11 97       	sbiw	r26, 0x01	; 1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    1956:	99 23       	and	r25, r25
    1958:	6c f0       	brlt	.+26     	; 0x1974 <costplan+0x116>
    195a:	ea 2d       	mov	r30, r10
    195c:	f9 2d       	mov	r31, r9
    195e:	28 2d       	mov	r18, r8
    1960:	37 2d       	mov	r19, r7
		{
			list[i]=list[i+1];
    1962:	2f 5f       	subi	r18, 0xFF	; 255
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	42 81       	ldd	r20, Z+2	; 0x02
    1968:	53 81       	ldd	r21, Z+3	; 0x03
    196a:	41 93       	st	Z+, r20
    196c:	51 93       	st	Z+, r21
	int s;
	//int e=end-1;
	do
	{
		s=list[0]-1;	// extracts a node from the list and starts exploring its adjacent nodes
		for(i=0;i<=k;i=i+1) // left shift the list by 1
    196e:	82 17       	cp	r24, r18
    1970:	93 07       	cpc	r25, r19
    1972:	bc f7       	brge	.-18     	; 0x1962 <costplan+0x104>
		{
			list[i]=list[i+1];
		}
		k=k-1;
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	fd 01       	movw	r30, r26
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	e9 51       	subi	r30, 0x19	; 25
    1986:	f9 4f       	sbci	r31, 0xF9	; 249
    1988:	2b 2d       	mov	r18, r11
    198a:	36 2d       	mov	r19, r6
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    198c:	aa 0f       	add	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	ad 01       	movw	r20, r26
    1992:	49 57       	subi	r20, 0x79	; 121
    1994:	59 4f       	sbci	r21, 0xF9	; 249
    1996:	2a 01       	movw	r4, r20
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
		{
			if(node[s][i]!=0)
    1998:	61 91       	ld	r22, Z+
    199a:	71 91       	ld	r23, Z+
    199c:	61 15       	cp	r22, r1
    199e:	71 05       	cpc	r23, r1
    19a0:	d1 f1       	breq	.+116    	; 0x1a16 <costplan+0x1b8>
			{
				
				if((cost[s]+1)<=cost[node[s][i]-1])
    19a2:	d2 01       	movw	r26, r4
    19a4:	0d 91       	ld	r16, X+
    19a6:	1c 91       	ld	r17, X
    19a8:	0f 5f       	subi	r16, 0xFF	; 255
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	ab 01       	movw	r20, r22
    19ae:	41 50       	subi	r20, 0x01	; 1
    19b0:	51 09       	sbc	r21, r1
    19b2:	7a 01       	movw	r14, r20
    19b4:	ee 0c       	add	r14, r14
    19b6:	ff 1c       	adc	r15, r15
    19b8:	d7 01       	movw	r26, r14
    19ba:	a9 57       	subi	r26, 0x79	; 121
    19bc:	b9 4f       	sbci	r27, 0xF9	; 249
    19be:	ed 90       	ld	r14, X+
    19c0:	fc 90       	ld	r15, X
    19c2:	e0 16       	cp	r14, r16
    19c4:	f1 06       	cpc	r15, r17
    19c6:	44 f0       	brlt	.+16     	; 0x19d8 <costplan+0x17a>
				cost[node[s][i]-1]=(cost[s]+1);
    19c8:	7a 01       	movw	r14, r20
    19ca:	ee 0c       	add	r14, r14
    19cc:	ff 1c       	adc	r15, r15
    19ce:	d7 01       	movw	r26, r14
    19d0:	a9 57       	subi	r26, 0x79	; 121
    19d2:	b9 4f       	sbci	r27, 0xF9	; 249
    19d4:	0d 93       	st	X+, r16
    19d6:	1c 93       	st	X, r17
				if(tmploc[node[s][i]-1]!=1)
    19d8:	8a 01       	movw	r16, r20
    19da:	00 0f       	add	r16, r16
    19dc:	11 1f       	adc	r17, r17
    19de:	a1 e6       	ldi	r26, 0x61	; 97
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ac 0f       	add	r26, r28
    19e4:	bd 1f       	adc	r27, r29
    19e6:	0a 0f       	add	r16, r26
    19e8:	1b 1f       	adc	r17, r27
    19ea:	d8 01       	movw	r26, r16
    19ec:	0d 91       	ld	r16, X+
    19ee:	1c 91       	ld	r17, X
    19f0:	11 97       	sbiw	r26, 0x01	; 1
    19f2:	01 30       	cpi	r16, 0x01	; 1
    19f4:	11 05       	cpc	r17, r1
    19f6:	79 f0       	breq	.+30     	; 0x1a16 <costplan+0x1b8>
				{
					tmploc[node[s][i]-1]=1;
    19f8:	cd 92       	st	X+, r12
    19fa:	dc 92       	st	X, r13
					k=k+1;
    19fc:	01 96       	adiw	r24, 0x01	; 1
					list[k]=node[s][i];
    19fe:	ac 01       	movw	r20, r24
    1a00:	44 0f       	add	r20, r20
    1a02:	55 1f       	adc	r21, r21
    1a04:	01 e0       	ldi	r16, 0x01	; 1
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	0c 0f       	add	r16, r28
    1a0a:	1d 1f       	adc	r17, r29
    1a0c:	40 0f       	add	r20, r16
    1a0e:	51 1f       	adc	r21, r17
    1a10:	da 01       	movw	r26, r20
    1a12:	6d 93       	st	X+, r22
    1a14:	7c 93       	st	X, r23
    1a16:	21 50       	subi	r18, 0x01	; 1
    1a18:	31 09       	sbc	r19, r1
		for(i=0;i<=k;i=i+1) // left shift the list by 1
		{
			list[i]=list[i+1];
		}
		k=k-1;
		for(i=0;i<4;i=i+1)  // Starts exploring the node if the adjacent nodes.
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <costplan+0x1c0>
    1a1c:	bd cf       	rjmp	.-134    	; 0x1998 <costplan+0x13a>
					list[k]=node[s][i];
				}
				
			}
		}
	}while(list[0]!=-1 || k!=-1);
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	2f 3f       	cpi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <costplan+0x1cc>
    1a28:	93 cf       	rjmp	.-218    	; 0x1950 <costplan+0xf2>
    1a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2c:	ef ef       	ldi	r30, 0xFF	; 255
    1a2e:	9e 07       	cpc	r25, r30
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <costplan+0x1d6>
    1a32:	8e cf       	rjmp	.-228    	; 0x1950 <costplan+0xf2>
}
    1a34:	c0 54       	subi	r28, 0x40	; 64
    1a36:	df 4f       	sbci	r29, 0xFF	; 255
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	9f 90       	pop	r9
    1a58:	8f 90       	pop	r8
    1a5a:	7f 90       	pop	r7
    1a5c:	6f 90       	pop	r6
    1a5e:	5f 90       	pop	r5
    1a60:	4f 90       	pop	r4
    1a62:	08 95       	ret

00001a64 <rotate>:

void rotate(int turnang)
{
    1a64:	df 92       	push	r13
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
	int f=0;
	if(turnang<0)
    1a72:	99 23       	and	r25, r25
    1a74:	c4 f4       	brge	.+48     	; 0x1aa6 <rotate+0x42>
	{
		turnang=-turnang;
    1a76:	22 27       	eor	r18, r18
    1a78:	33 27       	eor	r19, r19
    1a7a:	28 1b       	sub	r18, r24
    1a7c:	39 0b       	sbc	r19, r25
		if(turnang>180)
    1a7e:	25 3b       	cpi	r18, 0xB5	; 181
    1a80:	31 05       	cpc	r19, r1
    1a82:	34 f0       	brlt	.+12     	; 0x1a90 <rotate+0x2c>
		{
			turnang=360-turnang;
			left_degrees((turnang-20));
    1a84:	8c 5a       	subi	r24, 0xAC	; 172
    1a86:	9e 4f       	sbci	r25, 0xFE	; 254
    1a88:	69 de       	rcall	.-814    	; 0x175c <left_degrees>
	}while(list[0]!=-1 || k!=-1);
}

void rotate(int turnang)
{
	int f=0;
    1a8a:	e1 2c       	mov	r14, r1
    1a8c:	f1 2c       	mov	r15, r1
    1a8e:	1d c0       	rjmp	.+58     	; 0x1aca <rotate+0x66>
			left_degrees((turnang-20));
		}
		else
		{
			f=1;
			right_degrees((turnang-20));
    1a90:	2c ee       	ldi	r18, 0xEC	; 236
    1a92:	3f ef       	ldi	r19, 0xFF	; 255
    1a94:	a9 01       	movw	r20, r18
    1a96:	48 1b       	sub	r20, r24
    1a98:	59 0b       	sbc	r21, r25
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	6d de       	rcall	.-806    	; 0x1778 <right_degrees>
			turnang=360-turnang;
			left_degrees((turnang-20));
		}
		else
		{
			f=1;
    1a9e:	ee 24       	eor	r14, r14
    1aa0:	e3 94       	inc	r14
    1aa2:	f1 2c       	mov	r15, r1
    1aa4:	12 c0       	rjmp	.+36     	; 0x1aca <rotate+0x66>
			right_degrees((turnang-20));
		}
	}
	else
	{
		if(turnang>180)
    1aa6:	85 3b       	cpi	r24, 0xB5	; 181
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	5c f0       	brlt	.+22     	; 0x1ac2 <rotate+0x5e>
		{
			f=1;
			turnang=360-turnang;
			right_degrees((turnang-20));
    1aac:	24 e5       	ldi	r18, 0x54	; 84
    1aae:	31 e0       	ldi	r19, 0x01	; 1
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	e8 1b       	sub	r30, r24
    1ab4:	f9 0b       	sbc	r31, r25
    1ab6:	cf 01       	movw	r24, r30
    1ab8:	5f de       	rcall	.-834    	; 0x1778 <right_degrees>
	}
	else
	{
		if(turnang>180)
		{
			f=1;
    1aba:	ee 24       	eor	r14, r14
    1abc:	e3 94       	inc	r14
    1abe:	f1 2c       	mov	r15, r1
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <rotate+0x66>
			turnang=360-turnang;
			right_degrees((turnang-20));
		}
		else
		{
			left_degrees((turnang-20));
    1ac2:	44 97       	sbiw	r24, 0x14	; 20
    1ac4:	4b de       	rcall	.-874    	; 0x175c <left_degrees>
	}while(list[0]!=-1 || k!=-1);
}

void rotate(int turnang)
{
	int f=0;
    1ac6:	e1 2c       	mov	r14, r1
    1ac8:	f1 2c       	mov	r15, r1
		else
		{
			left_degrees((turnang-20));
		}
	}
	stop();
    1aca:	f3 dd       	rcall	.-1050   	; 0x16b2 <stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1acc:	ff ef       	ldi	r31, 0xFF	; 255
    1ace:	2f e3       	ldi	r18, 0x3F	; 63
    1ad0:	42 e0       	ldi	r20, 0x02	; 2
    1ad2:	f1 50       	subi	r31, 0x01	; 1
    1ad4:	20 40       	sbci	r18, 0x00	; 0
    1ad6:	40 40       	sbci	r20, 0x00	; 0
    1ad8:	e1 f7       	brne	.-8      	; 0x1ad2 <rotate+0x6e>
    1ada:	00 c0       	rjmp	.+0      	; 0x1adc <rotate+0x78>
    1adc:	00 00       	nop
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ade:	08 e2       	ldi	r16, 0x28	; 40
    1ae0:	11 e0       	ldi	r17, 0x01	; 1
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	f4 e6       	ldi	r31, 0x64	; 100
    1ae6:	df 2e       	mov	r13, r31
    1ae8:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1aea:	ca e2       	ldi	r28, 0x2A	; 42
    1aec:	d1 e0       	ldi	r29, 0x01	; 1
	}
	stop();
	_delay_ms(50);
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	5a dd       	rcall	.-1356   	; 0x15a6 <ADC_Conversion>
    1af2:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	56 dd       	rcall	.-1364   	; 0x15a6 <ADC_Conversion>
    1afa:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	52 dd       	rcall	.-1372   	; 0x15a6 <ADC_Conversion>
    1b02:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <Right_white_line>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1b06:	40 91 05 06 	lds	r20, 0x0605	; 0x800605 <Left_white_line>
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	23 e0       	ldi	r18, 0x03	; 3
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1b18:	40 91 04 06 	lds	r20, 0x0604	; 0x800604 <Center_white_line>
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	23 e0       	ldi	r18, 0x03	; 3
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	65 e0       	ldi	r22, 0x05	; 5
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1b2a:	40 91 03 06 	lds	r20, 0x0603	; 0x800603 <Right_white_line>
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	23 e0       	ldi	r18, 0x03	; 3
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	69 e0       	ldi	r22, 0x09	; 9
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		//forward();
		if(f==0)
    1b3c:	e1 14       	cp	r14, r1
    1b3e:	f1 04       	cpc	r15, r1
    1b40:	29 f4       	brne	.+10     	; 0x1b4c <rotate+0xe8>
		{
			left();
    1b42:	b1 dd       	rcall	.-1182   	; 0x16a6 <left>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b44:	f8 01       	movw	r30, r16
    1b46:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1b48:	d8 82       	st	Y, r13
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <rotate+0xf0>
			left();
			velocity(100,100);
		}
		else
		{
			right();
    1b4c:	af dd       	rcall	.-1186   	; 0x16ac <right>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b4e:	f8 01       	movw	r30, r16
    1b50:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
    1b52:	d8 82       	st	Y, r13
		else
		{
			right();
			velocity(100,100);
		}
		if(Center_white_line>55 || Left_white_line>120 || Right_white_line>120)
    1b54:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <Center_white_line>
    1b58:	88 33       	cpi	r24, 0x38	; 56
    1b5a:	48 f4       	brcc	.+18     	; 0x1b6e <rotate+0x10a>
    1b5c:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <Left_white_line>
    1b60:	89 37       	cpi	r24, 0x79	; 121
    1b62:	28 f4       	brcc	.+10     	; 0x1b6e <rotate+0x10a>
    1b64:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <Right_white_line>
    1b68:	89 37       	cpi	r24, 0x79	; 121
    1b6a:	08 f4       	brcc	.+2      	; 0x1b6e <rotate+0x10a>
    1b6c:	c0 cf       	rjmp	.-128    	; 0x1aee <rotate+0x8a>
		{	
			stop();
    1b6e:	a1 dd       	rcall	.-1214   	; 0x16b2 <stop>
		}
		
		
	}
	//velocity(0,0);
}
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	08 95       	ret

00001b80 <servoStrike>:

void servoStrike(int side)
{
    1b80:	cf 93       	push	r28
	if(!side)
    1b82:	89 2b       	or	r24, r25
    1b84:	29 f5       	brne	.+74     	; 0x1bd0 <servoStrike+0x50>
    1b86:	ca e5       	ldi	r28, 0x5A	; 90
	{
		for(int i=90;i>=0;i--)
		{
			servo_1(i);
    1b88:	8c 2f       	mov	r24, r28
    1b8a:	9b dc       	rcall	.-1738   	; 0x14c2 <servo_1>
    1b8c:	29 e9       	ldi	r18, 0x99	; 153
    1b8e:	89 e5       	ldi	r24, 0x59	; 89
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	21 50       	subi	r18, 0x01	; 1
    1b94:	80 40       	sbci	r24, 0x00	; 0
    1b96:	90 40       	sbci	r25, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <servoStrike+0x12>
    1b9a:	00 00       	nop
    1b9c:	c1 50       	subi	r28, 0x01	; 1
    1b9e:	a0 f7       	brcc	.-24     	; 0x1b88 <servoStrike+0x8>
    1ba0:	2f ef       	ldi	r18, 0xFF	; 255
    1ba2:	8f e7       	ldi	r24, 0x7F	; 127
    1ba4:	94 e0       	ldi	r25, 0x04	; 4
    1ba6:	21 50       	subi	r18, 0x01	; 1
    1ba8:	80 40       	sbci	r24, 0x00	; 0
    1baa:	90 40       	sbci	r25, 0x00	; 0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <servoStrike+0x26>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <servoStrike+0x30>
    1bb0:	00 00       	nop
    1bb2:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=0;i<=90;i++)
		{
			servo_1(i);
    1bb4:	8c 2f       	mov	r24, r28
    1bb6:	85 dc       	rcall	.-1782   	; 0x14c2 <servo_1>
    1bb8:	29 e9       	ldi	r18, 0x99	; 153
    1bba:	89 e5       	ldi	r24, 0x59	; 89
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	21 50       	subi	r18, 0x01	; 1
    1bc0:	80 40       	sbci	r24, 0x00	; 0
    1bc2:	90 40       	sbci	r25, 0x00	; 0
    1bc4:	e1 f7       	brne	.-8      	; 0x1bbe <servoStrike+0x3e>
    1bc6:	00 00       	nop
    1bc8:	cf 5f       	subi	r28, 0xFF	; 255
		{
			servo_1(i);
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=0;i<=90;i++)
    1bca:	cb 35       	cpi	r28, 0x5B	; 91
    1bcc:	99 f7       	brne	.-26     	; 0x1bb4 <servoStrike+0x34>
    1bce:	25 c0       	rjmp	.+74     	; 0x1c1a <servoStrike+0x9a>
    1bd0:	ca e5       	ldi	r28, 0x5A	; 90
	}
	else
	{
		for(int i=90; i<=180; i++)
		{
			servo_1(i);
    1bd2:	8c 2f       	mov	r24, r28
    1bd4:	76 dc       	rcall	.-1812   	; 0x14c2 <servo_1>
    1bd6:	29 e9       	ldi	r18, 0x99	; 153
    1bd8:	89 e5       	ldi	r24, 0x59	; 89
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	21 50       	subi	r18, 0x01	; 1
    1bde:	80 40       	sbci	r24, 0x00	; 0
    1be0:	90 40       	sbci	r25, 0x00	; 0
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <servoStrike+0x5c>
    1be4:	00 00       	nop
    1be6:	cf 5f       	subi	r28, 0xFF	; 255
			_delay_ms(30);
		}
	}
	else
	{
		for(int i=90; i<=180; i++)
    1be8:	c5 3b       	cpi	r28, 0xB5	; 181
    1bea:	99 f7       	brne	.-26     	; 0x1bd2 <servoStrike+0x52>
    1bec:	2f ef       	ldi	r18, 0xFF	; 255
    1bee:	8f e7       	ldi	r24, 0x7F	; 127
    1bf0:	94 e0       	ldi	r25, 0x04	; 4
    1bf2:	21 50       	subi	r18, 0x01	; 1
    1bf4:	80 40       	sbci	r24, 0x00	; 0
    1bf6:	90 40       	sbci	r25, 0x00	; 0
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <servoStrike+0x72>
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <servoStrike+0x7c>
    1bfc:	00 00       	nop
    1bfe:	c4 eb       	ldi	r28, 0xB4	; 180
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=180;i>=90;i--)
		{
			servo_1(i);
    1c00:	8c 2f       	mov	r24, r28
    1c02:	5f dc       	rcall	.-1858   	; 0x14c2 <servo_1>
    1c04:	29 e9       	ldi	r18, 0x99	; 153
    1c06:	89 e5       	ldi	r24, 0x59	; 89
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	21 50       	subi	r18, 0x01	; 1
    1c0c:	80 40       	sbci	r24, 0x00	; 0
    1c0e:	90 40       	sbci	r25, 0x00	; 0
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <servoStrike+0x8a>
    1c12:	00 00       	nop
    1c14:	c1 50       	subi	r28, 0x01	; 1
		{
			servo_1(i);
			_delay_ms(30);
		}
		_delay_ms(100);
		for(int i=180;i>=90;i--)
    1c16:	c9 35       	cpi	r28, 0x59	; 89
    1c18:	99 f7       	brne	.-26     	; 0x1c00 <servoStrike+0x80>
		{
			servo_1(i);
			_delay_ms(30);
		}
	}
}
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <move>:

int move(int n)
{
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1c2c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1c30:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>

int move(int n)
{
	velocity(0,0);
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
    1c34:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    1c38:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    1c3c:	31 97       	sbiw	r30, 0x01	; 1
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	e8 0f       	add	r30, r24
    1c48:	f9 1f       	adc	r31, r25
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	e0 58       	subi	r30, 0x80	; 128
    1c50:	f7 4f       	sbci	r31, 0xF7	; 247
    1c52:	00 81       	ld	r16, Z
    1c54:	11 81       	ldd	r17, Z+1	; 0x01
    1c56:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <botang>
    1c5a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <botang+0x1>
    1c5e:	08 1b       	sub	r16, r24
    1c60:	19 0b       	sbc	r17, r25
	int turns=0;
	if(fabs(turnang)>45)
    1c62:	b8 01       	movw	r22, r16
    1c64:	01 2e       	mov	r0, r17
    1c66:	00 0c       	add	r0, r0
    1c68:	88 0b       	sbc	r24, r24
    1c6a:	99 0b       	sbc	r25, r25
    1c6c:	c7 d7       	rcall	.+3982   	; 0x2bfc <__floatsisf>
    1c6e:	9f 77       	andi	r25, 0x7F	; 127
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	44 e3       	ldi	r20, 0x34	; 52
    1c76:	52 e4       	ldi	r21, 0x42	; 66
    1c78:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__gesf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	44 f4       	brge	.+16     	; 0x1c90 <move+0x72>
	{
		turns=1;
		forward_mm(70);
    1c80:	86 e4       	ldi	r24, 0x46	; 70
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	dd dd       	rcall	.-1094   	; 0x1840 <forward_mm>
		rotate(turnang);
    1c86:	c8 01       	movw	r24, r16
    1c88:	ed de       	rcall	.-550    	; 0x1a64 <rotate>
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
	int turns=0;
	if(fabs(turnang)>45)
	{
		turns=1;
    1c8a:	01 e0       	ldi	r16, 0x01	; 1
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <move+0x76>
int move(int n)
{
	velocity(0,0);
	int suc=1,turnang;
	turnang=angle[botloc-1][n]-botang;
	int turns=0;
    1c90:	00 e0       	ldi	r16, 0x00	; 0
    1c92:	10 e0       	ldi	r17, 0x00	; 0
	{
		turns=1;
		forward_mm(70);
		rotate(turnang);
	}
	botang=angle[botloc-1][n];
    1c94:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <botloc>
    1c98:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <botloc+0x1>
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	c8 0f       	add	r28, r24
    1ca8:	d9 1f       	adc	r29, r25
    1caa:	cc 0f       	add	r28, r28
    1cac:	dd 1f       	adc	r29, r29
    1cae:	c0 58       	subi	r28, 0x80	; 128
    1cb0:	d7 4f       	sbci	r29, 0xF7	; 247
    1cb2:	88 81       	ld	r24, Y
    1cb4:	99 81       	ldd	r25, Y+1	; 0x01
    1cb6:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <botang+0x1>
    1cba:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <botang>
	
	if(strike==1)
    1cbe:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <strike>
    1cc2:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <strike+0x1>
    1cc6:	21 30       	cpi	r18, 0x01	; 1
    1cc8:	31 05       	cpc	r19, r1
    1cca:	e9 f4       	brne	.+58     	; 0x1d06 <move+0xe8>
	{
		if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang)
    1ccc:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	e5 5a       	subi	r30, 0xA5	; 165
    1cd4:	f9 4f       	sbci	r31, 0xF9	; 249
    1cd6:	e0 81       	ld	r30, Z
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	ee 0f       	add	r30, r30
    1ce0:	ff 1f       	adc	r31, r31
    1ce2:	e0 5e       	subi	r30, 0xE0	; 224
    1ce4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce6:	20 81       	ld	r18, Z
    1ce8:	31 81       	ldd	r19, Z+1	; 0x01
    1cea:	82 17       	cp	r24, r18
    1cec:	93 07       	cpc	r25, r19
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <move+0xda>
			servoStrike(1);//Strike Left
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	45 df       	rcall	.-374    	; 0x1b80 <servoStrike>
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <move+0xe0>
		else
			servoStrike(0);//Strike Right
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	41 df       	rcall	.-382    	; 0x1b80 <servoStrike>
		
		// Servo Motor Control
		// Strike the Note
		strike=0;
    1cfe:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <strike+0x1>
    1d02:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <strike>
	}
	
	forward();
    1d06:	cc dc       	rcall	.-1640   	; 0x16a0 <forward>
	int flag=0;
	ShaftCountRight=0;
    1d08:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <ShaftCountRight>
    1d0c:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ShaftCountRight+0x1>
    1d10:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <ShaftCountRight+0x2>
    1d14:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <ShaftCountRight+0x3>
	if(!turns)
    1d18:	01 2b       	or	r16, r17
    1d1a:	01 f5       	brne	.+64     	; 0x1d5c <move+0x13e>
		while(ShaftCountRight<10)
    1d1c:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1d20:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1d24:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1d28:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1d2c:	0a 97       	sbiw	r24, 0x0a	; 10
    1d2e:	a1 05       	cpc	r26, r1
    1d30:	b1 05       	cpc	r27, r1
    1d32:	a0 f4       	brcc	.+40     	; 0x1d5c <move+0x13e>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1d34:	a8 e2       	ldi	r26, 0x28	; 40
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	84 e6       	ldi	r24, 0x64	; 100
	OCR5BL = (unsigned char)right_motor;
    1d3a:	ea e2       	ldi	r30, 0x2A	; 42
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1d3e:	8c 93       	st	X, r24
	OCR5BL = (unsigned char)right_motor;
    1d40:	80 83       	st	Z, r24
	
	forward();
	int flag=0;
	ShaftCountRight=0;
	if(!turns)
		while(ShaftCountRight<10)
    1d42:	40 91 06 06 	lds	r20, 0x0606	; 0x800606 <ShaftCountRight>
    1d46:	50 91 07 06 	lds	r21, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1d4a:	60 91 08 06 	lds	r22, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1d4e:	70 91 09 06 	lds	r23, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1d52:	4a 30       	cpi	r20, 0x0A	; 10
    1d54:	51 05       	cpc	r21, r1
    1d56:	61 05       	cpc	r22, r1
    1d58:	71 05       	cpc	r23, r1
    1d5a:	88 f3       	brcs	.-30     	; 0x1d3e <move+0x120>
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
			lcd_print(2,1,2,3);
			velocity(speed,0);
    1d5c:	0f 2e       	mov	r0, r31
    1d5e:	fe e0       	ldi	r31, 0x0E	; 14
    1d60:	ef 2e       	mov	r14, r31
    1d62:	f2 e0       	ldi	r31, 0x02	; 2
    1d64:	ff 2e       	mov	r15, r31
    1d66:	f0 2d       	mov	r31, r0
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1d68:	08 e2       	ldi	r16, 0x28	; 40
    1d6a:	11 e0       	ldi	r17, 0x01	; 1
	OCR5BL = (unsigned char)right_motor;
    1d6c:	ca e2       	ldi	r28, 0x2A	; 42
    1d6e:	d1 e0       	ldi	r29, 0x01	; 1
		while(ShaftCountRight<10)
			velocity(100,100);
	while(1)
	{
		flag=0;
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	19 dc       	rcall	.-1998   	; 0x15a6 <ADC_Conversion>
    1d74:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <Left_white_line>
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	15 dc       	rcall	.-2006   	; 0x15a6 <ADC_Conversion>
    1d7c:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <Center_white_line>
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	11 dc       	rcall	.-2014   	; 0x15a6 <ADC_Conversion>
    1d84:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <Right_white_line>
		Front_IR_Sensor = ADC_Conversion(6);
    1d88:	86 e0       	ldi	r24, 0x06	; 6
    1d8a:	0d dc       	rcall	.-2022   	; 0x15a6 <ADC_Conversion>
    1d8c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__data_end>
		
		lcd_print(1,1,(int)Left_white_line,3);	//Prints value of White Line Sensor1
    1d90:	40 91 05 06 	lds	r20, 0x0605	; 0x800605 <Left_white_line>
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	23 e0       	ldi	r18, 0x03	; 3
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		lcd_print(1,5,(int)Center_white_line,3);	//Prints Value of White Line Sensor2
    1da2:	40 91 04 06 	lds	r20, 0x0604	; 0x800604 <Center_white_line>
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	23 e0       	ldi	r18, 0x03	; 3
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	65 e0       	ldi	r22, 0x05	; 5
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		lcd_print(1,9,(int)Right_white_line,3);	//Prints Value of White Line Sensor3
    1db4:	40 91 03 06 	lds	r20, 0x0603	; 0x800603 <Right_white_line>
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	23 e0       	ldi	r18, 0x03	; 3
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	69 e0       	ldi	r22, 0x09	; 9
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		lcd_print(1,12,(int)Front_IR_Sensor,3);	//Front ir sensor Value
    1dc6:	40 91 02 06 	lds	r20, 0x0602	; 0x800602 <__data_end>
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	23 e0       	ldi	r18, 0x03	; 3
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	6c e0       	ldi	r22, 0x0C	; 12
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
					break;
				}
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    1dd8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <thresh>
    1ddc:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <thresh+0x1>
    1de0:	20 91 04 06 	lds	r18, 0x0604	; 0x800604 <Center_white_line>
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	82 17       	cp	r24, r18
    1de8:	93 07       	cpc	r25, r19
    1dea:	74 f4       	brge	.+28     	; 0x1e08 <move+0x1ea>
    1dec:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <Left_white_line>
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	82 17       	cp	r24, r18
    1df4:	93 07       	cpc	r25, r19
    1df6:	0c f4       	brge	.+2      	; 0x1dfa <move+0x1dc>
    1df8:	48 c0       	rjmp	.+144    	; 0x1e8a <move+0x26c>
    1dfa:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <Right_white_line>
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	82 17       	cp	r24, r18
    1e02:	93 07       	cpc	r25, r19
    1e04:	ac f1       	brlt	.+106    	; 0x1e70 <move+0x252>
    1e06:	4f c0       	rjmp	.+158    	; 0x1ea6 <move+0x288>
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
			break;
		}
		else if(Left_white_line>thresh)
    1e08:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <Left_white_line>
    1e0c:	42 2f       	mov	r20, r18
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	84 17       	cp	r24, r20
    1e12:	95 07       	cpc	r25, r21
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <move+0x1fa>
    1e16:	56 c0       	rjmp	.+172    	; 0x1ec4 <move+0x2a6>
		{
			//flag=1;
			forward();
    1e18:	43 dc       	rcall	.-1914   	; 0x16a0 <forward>
			lcd_print(2,1,1,3);
    1e1a:	23 e0       	ldi	r18, 0x03	; 3
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
			velocity(0,speed);
    1e2a:	f7 01       	movw	r30, r14
    1e2c:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e2e:	f8 01       	movw	r30, r16
    1e30:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1e32:	88 83       	st	Y, r24
    1e34:	9d cf       	rjmp	.-198    	; 0x1d70 <move+0x152>
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
		{
			//flag=1;
			forward();
    1e36:	34 dc       	rcall	.-1944   	; 0x16a0 <forward>
			lcd_print(2,1,2,3);
    1e38:	23 e0       	ldi	r18, 0x03	; 3
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	42 e0       	ldi	r20, 0x02	; 2
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
			velocity(speed,0);
    1e48:	f7 01       	movw	r30, r14
    1e4a:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1e50:	18 82       	st	Y, r1
    1e52:	8e cf       	rjmp	.-228    	; 0x1d70 <move+0x152>
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
			//flag=1;
		}
		else if(Left_white_line>Right_white_line)
    1e54:	32 17       	cp	r19, r18
    1e56:	30 f4       	brcc	.+12     	; 0x1e64 <move+0x246>
		{
			velocity(0,speed);
    1e58:	f7 01       	movw	r30, r14
    1e5a:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1e60:	88 83       	st	Y, r24
    1e62:	86 cf       	rjmp	.-244    	; 0x1d70 <move+0x152>
		{
			velocity(0,speed);
		}
		else
		{
			velocity(speed,0);
    1e64:	f7 01       	movw	r30, r14
    1e66:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1e68:	f8 01       	movw	r30, r16
    1e6a:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1e6c:	18 82       	st	Y, r1
    1e6e:	80 cf       	rjmp	.-256    	; 0x1d70 <move+0x152>
					break;
				}
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
    1e70:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1e74:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1e78:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1e7c:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1e80:	45 97       	sbiw	r24, 0x15	; 21
    1e82:	a1 05       	cpc	r26, r1
    1e84:	b1 05       	cpc	r27, r1
    1e86:	b8 f2       	brcs	.-82     	; 0x1e36 <move+0x218>
    1e88:	26 c0       	rjmp	.+76     	; 0x1ed6 <move+0x2b8>
    1e8a:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <ShaftCountRight>
    1e8e:	90 91 07 06 	lds	r25, 0x0607	; 0x800607 <ShaftCountRight+0x1>
    1e92:	a0 91 08 06 	lds	r26, 0x0608	; 0x800608 <ShaftCountRight+0x2>
    1e96:	b0 91 09 06 	lds	r27, 0x0609	; 0x800609 <ShaftCountRight+0x3>
    1e9a:	45 97       	sbiw	r24, 0x15	; 21
    1e9c:	a1 05       	cpc	r26, r1
    1e9e:	b1 05       	cpc	r27, r1
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <move+0x286>
    1ea2:	ba cf       	rjmp	.-140    	; 0x1e18 <move+0x1fa>
    1ea4:	18 c0       	rjmp	.+48     	; 0x1ed6 <move+0x2b8>
			lcd_print(2,1,2,3);
			velocity(speed,0);
		}
		else if(Center_white_line>thresh)
		{
			forward();
    1ea6:	fc db       	rcall	.-2056   	; 0x16a0 <forward>
			velocity(speed,speed);
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	80 81       	ld	r24, Z
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1eac:	f8 01       	movw	r30, r16
    1eae:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1eb0:	88 83       	st	Y, r24
		}
		else if(Center_white_line>thresh)
		{
			forward();
			velocity(speed,speed);
			lcd_print(2,1,0,3);
    1eb2:	23 e0       	ldi	r18, 0x03	; 3
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    1ec2:	56 cf       	rjmp	.-340    	; 0x1d70 <move+0x152>
			//flag=1;
			forward();
			lcd_print(2,1,1,3);
			velocity(0,speed);
		}
		else if(Right_white_line>thresh)
    1ec4:	30 91 03 06 	lds	r19, 0x0603	; 0x800603 <Right_white_line>
    1ec8:	43 2f       	mov	r20, r19
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	84 17       	cp	r24, r20
    1ece:	95 07       	cpc	r25, r21
    1ed0:	0c f0       	brlt	.+2      	; 0x1ed4 <move+0x2b6>
    1ed2:	c0 cf       	rjmp	.-128    	; 0x1e54 <move+0x236>
    1ed4:	b0 cf       	rjmp	.-160    	; 0x1e36 <move+0x218>
			suc=0;
			flag=1;
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
		{
			forward();
    1ed6:	e4 db       	rcall	.-2104   	; 0x16a0 <forward>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1ed8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1edc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		}
		if(Center_white_line>thresh && (Left_white_line>thresh || Right_white_line>thresh) && ShaftCountRight>20 && flag==0)
		{
			forward();
			velocity(0,0);
			lcd_print(2,1,100,3);
    1ee0:	23 e0       	ldi	r18, 0x03	; 3
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	44 e6       	ldi	r20, 0x64	; 100
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		{
			velocity(speed,0);
		}
	}
	return suc;
}
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret

00001f02 <BotEndLocation>:
int LastLocation;
int BotEndLocation(int loc)
{
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	9c 01       	movw	r18, r24
	int i;
	if (cost[loc - 1] == 0)
    1f08:	bc 01       	movw	r22, r24
    1f0a:	61 50       	subi	r22, 0x01	; 1
    1f0c:	71 09       	sbc	r23, r1
    1f0e:	db 01       	movw	r26, r22
    1f10:	aa 0f       	add	r26, r26
    1f12:	bb 1f       	adc	r27, r27
    1f14:	a9 57       	subi	r26, 0x79	; 121
    1f16:	b9 4f       	sbci	r27, 0xF9	; 249
    1f18:	8d 91       	ld	r24, X+
    1f1a:	9c 91       	ld	r25, X
    1f1c:	89 2b       	or	r24, r25
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <BotEndLocation+0x2c>
	{
		LastLocation = loc;
    1f20:	30 93 07 0a 	sts	0x0A07, r19	; 0x800a07 <LastLocation+0x1>
    1f24:	20 93 06 0a 	sts	0x0A06, r18	; 0x800a06 <LastLocation>
		return LastLocation;
    1f28:	82 2f       	mov	r24, r18
    1f2a:	93 2f       	mov	r25, r19
    1f2c:	3c c0       	rjmp	.+120    	; 0x1fa6 <BotEndLocation+0xa4>
	}
	int mCost = cost[node[loc - 1][0] - 1];
    1f2e:	db 01       	movw	r26, r22
    1f30:	aa 0f       	add	r26, r26
    1f32:	bb 1f       	adc	r27, r27
    1f34:	aa 0f       	add	r26, r26
    1f36:	bb 1f       	adc	r27, r27
    1f38:	aa 0f       	add	r26, r26
    1f3a:	bb 1f       	adc	r27, r27
    1f3c:	fd 01       	movw	r30, r26
    1f3e:	e9 51       	subi	r30, 0x19	; 25
    1f40:	f9 4f       	sbci	r31, 0xF9	; 249
    1f42:	01 90       	ld	r0, Z+
    1f44:	f0 81       	ld	r31, Z
    1f46:	e0 2d       	mov	r30, r0
    1f48:	ee 0f       	add	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	eb 57       	subi	r30, 0x7B	; 123
    1f4e:	f9 4f       	sbci	r31, 0xF9	; 249
    1f50:	c0 81       	ld	r28, Z
    1f52:	d1 81       	ldd	r29, Z+1	; 0x01
    1f54:	a7 51       	subi	r26, 0x17	; 23
    1f56:	b9 4f       	sbci	r27, 0xF9	; 249
	int pos = 0;
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 1; i<4; i++)
    1f5c:	21 e0       	ldi	r18, 0x01	; 1
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (node[loc - 1][i]!=0)
    1f60:	8d 91       	ld	r24, X+
    1f62:	9d 91       	ld	r25, X+
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	61 f0       	breq	.+24     	; 0x1f80 <BotEndLocation+0x7e>
			if (cost[node[loc - 1][i] - 1]<mCost)
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	eb 57       	subi	r30, 0x7B	; 123
    1f70:	f9 4f       	sbci	r31, 0xF9	; 249
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	8c 17       	cp	r24, r28
    1f78:	9d 07       	cpc	r25, r29
    1f7a:	14 f4       	brge	.+4      	; 0x1f80 <BotEndLocation+0x7e>
    1f7c:	a9 01       	movw	r20, r18
			{
				mCost = cost[node[loc - 1][i] - 1];
    1f7e:	ec 01       	movw	r28, r24
		LastLocation = loc;
		return LastLocation;
	}
	int mCost = cost[node[loc - 1][0] - 1];
	int pos = 0;
	for (i = 1; i<4; i++)
    1f80:	2f 5f       	subi	r18, 0xFF	; 255
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	24 30       	cpi	r18, 0x04	; 4
    1f86:	31 05       	cpc	r19, r1
    1f88:	59 f7       	brne	.-42     	; 0x1f60 <BotEndLocation+0x5e>
			{
				mCost = cost[node[loc - 1][i] - 1];
				pos = i;
			}
	}
	return BotEndLocation(node[loc - 1][pos]);
    1f8a:	fb 01       	movw	r30, r22
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	e4 0f       	add	r30, r20
    1f96:	f5 1f       	adc	r31, r21
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	e9 51       	subi	r30, 0x19	; 25
    1f9e:	f9 4f       	sbci	r31, 0xF9	; 249
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	ae df       	rcall	.-164    	; 0x1f02 <BotEndLocation>
}
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	08 95       	ret

00001fac <processNotes>:
FILE uart_debug = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
///////////////////////////////////////////////////////


void processNotes()
{
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    1fb0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <processNotes+0xe>
    1fb8:	75 c0       	rjmp	.+234    	; 0x20a4 <processNotes+0xf8>
    1fba:	c0 e0       	ldi	r28, 0x00	; 0
    1fbc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		costplan(nodesnear[(int)notes[(int)noteToProcess]-1]);
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e5 5a       	subi	r30, 0xA5	; 165
    1fc2:	f9 4f       	sbci	r31, 0xF9	; 249
    1fc4:	80 81       	ld	r24, Z
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9c 01       	movw	r18, r24
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	82 0f       	add	r24, r18
    1fd2:	93 1f       	adc	r25, r19
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 55       	subi	r24, 0x58	; 88
    1fde:	9c 4f       	sbci	r25, 0xFC	; 252
    1fe0:	3e dc       	rcall	.-1924   	; 0x185e <costplan>
		if((taskCost+cost[botLastIndex-1])>((int)otherBotTaskCost+cost[(int)otherBotLastTaskIndex-1]))
    1fe2:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <taskCost>
    1fe6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <botLastIndex>
    1fea:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <botLastIndex+0x1>
    1fee:	fc 01       	movw	r30, r24
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	eb 57       	subi	r30, 0x7B	; 123
    1ff6:	f9 4f       	sbci	r31, 0xF9	; 249
    1ff8:	40 81       	ld	r20, Z
    1ffa:	51 81       	ldd	r21, Z+1	; 0x01
    1ffc:	a0 91 40 06 	lds	r26, 0x0640	; 0x800640 <otherBotTaskCost>
    2000:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    2004:	ba 01       	movw	r22, r20
    2006:	62 0f       	add	r22, r18
    2008:	71 1d       	adc	r23, r1
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	eb 57       	subi	r30, 0x7B	; 123
    2012:	f9 4f       	sbci	r31, 0xF9	; 249
    2014:	20 81       	ld	r18, Z
    2016:	31 81       	ldd	r19, Z+1	; 0x01
    2018:	2a 0f       	add	r18, r26
    201a:	31 1d       	adc	r19, r1
    201c:	26 17       	cp	r18, r22
    201e:	37 07       	cpc	r19, r23
    2020:	24 f5       	brge	.+72     	; 0x206a <processNotes+0xbe>
		{
			otherBotTaskCost+=cost[otherBotLastTaskIndex-1];
    2022:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    2026:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <otherBotTaskCost>
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	eb 57       	subi	r30, 0x7B	; 123
    2032:	f9 4f       	sbci	r31, 0xF9	; 249
    2034:	80 81       	ld	r24, Z
    2036:	89 0f       	add	r24, r25
    2038:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <otherBotTaskCost>
			otherBotLastTaskIndex=BotEndLocation((int)otherBotLastTaskIndex);
    203c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <otherBotLastTaskIndex>
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	5f df       	rcall	.-322    	; 0x1f02 <BotEndLocation>
    2044:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <otherBotLastTaskIndex>
			otherBotTask[otherBotTaskCount]=noteToProcess;
    2048:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCount>
    204c:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <otherBotTaskCount+0x1>
    2050:	fc 01       	movw	r30, r24
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	ea 5e       	subi	r30, 0xEA	; 234
    2058:	f9 4f       	sbci	r31, 0xF9	; 249
    205a:	d1 83       	std	Z+1, r29	; 0x01
    205c:	c0 83       	st	Z, r28
			otherBotTaskCount++;
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <otherBotTaskCount+0x1>
    2064:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <otherBotTaskCount>
    2068:	15 c0       	rjmp	.+42     	; 0x2094 <processNotes+0xe8>
		}
		else
		{
			taskCost+=cost[botLastIndex-1];
    206a:	20 91 41 06 	lds	r18, 0x0641	; 0x800641 <taskCost>
    206e:	42 0f       	add	r20, r18
    2070:	40 93 41 06 	sts	0x0641, r20	; 0x800641 <taskCost>
			botLastIndex=BotEndLocation(botLastIndex);
    2074:	46 df       	rcall	.-372    	; 0x1f02 <BotEndLocation>
    2076:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <botLastIndex+0x1>
    207a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <botLastIndex>
			tasks[(int)taskCount]=noteToProcess;
    207e:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <taskCount>
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	e1 59       	subi	r30, 0x91	; 145
    2086:	f9 4f       	sbci	r31, 0xF9	; 249
    2088:	c0 83       	st	Z, r28
			taskCount++;
    208a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <taskCount>
		}
		noteToProcess++;
    2094:	21 96       	adiw	r28, 0x01	; 1


void processNotes()
{
	int noteToProcess=0;
	while(noteToProcess!=noteCount)
    2096:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	8c 17       	cp	r24, r28
    209e:	9d 07       	cpc	r25, r29
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <processNotes+0xf8>
    20a2:	8d cf       	rjmp	.-230    	; 0x1fbe <processNotes+0x12>
		}
		noteToProcess++;
		
	}
	
}
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <main>:


int main()
{
    20aa:	2f 92       	push	r2
    20ac:	3f 92       	push	r3
    20ae:	4f 92       	push	r4
    20b0:	5f 92       	push	r5
    20b2:	6f 92       	push	r6
    20b4:	7f 92       	push	r7
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <main+0x26>
    20d0:	1f 92       	push	r1
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	declare_constants();
    20d6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <declare_constants>
	init_devices();
    20da:	62 db       	rcall	.-2364   	; 0x17a0 <init_devices>
	servo_1(90);
    20dc:	8a e5       	ldi	r24, 0x5A	; 90
    20de:	f1 d9       	rcall	.-3102   	; 0x14c2 <servo_1>
	PORTJ = 0x00;
    20e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	notesReceived = 0;
    20e4:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <notesReceived>
	lcd_string("Waiting...");
    20e8:	8d e5       	ldi	r24, 0x5D	; 93
    20ea:	95 e0       	ldi	r25, 0x05	; 5
    20ec:	0e 94 40 01 	call	0x280	; 0x280 <lcd_string>
	while(!notesReceived2);
    20f0:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <notesReceived2>
    20f4:	88 23       	and	r24, r24
    20f6:	e1 f3       	breq	.-8      	; 0x20f0 <main+0x46>
	lcd_clear();
    20f8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_clear>
	lcd_string("Received!");
    20fc:	88 e6       	ldi	r24, 0x68	; 104
    20fe:	95 e0       	ldi	r25, 0x05	; 5
    2100:	0e 94 40 01 	call	0x280	; 0x280 <lcd_string>
	PORTJ = 0xFF;
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    210a:	e0 ec       	ldi	r30, 0xC0	; 192
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	85 ff       	sbrs	r24, 5
    2112:	fd cf       	rjmp	.-6      	; 0x210e <main+0x64>
	UDR0 = data;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
//send data to slave through ZigBee
void inline SendNotesToSlave()
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
    211a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    211e:	88 23       	and	r24, r24
    2120:	c1 f0       	breq	.+48     	; 0x2152 <main+0xa8>
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2126:	e0 ec       	ldi	r30, 0xC0	; 192
    2128:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    212a:	46 ec       	ldi	r20, 0xC6	; 198
    212c:	50 e0       	ldi	r21, 0x00	; 0
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
	{
		SendByteToSlave(DATA(notes[i]));
    212e:	d9 01       	movw	r26, r18
    2130:	a5 5a       	subi	r26, 0xA5	; 165
    2132:	b9 4f       	sbci	r27, 0xF9	; 249
    2134:	9c 91       	ld	r25, X
    2136:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2138:	80 81       	ld	r24, Z
    213a:	85 ff       	sbrs	r24, 5
    213c:	fd cf       	rjmp	.-6      	; 0x2138 <main+0x8e>
	UDR0 = data;
    213e:	da 01       	movw	r26, r20
    2140:	9c 93       	st	X, r25
//send data to slave through ZigBee
void inline SendNotesToSlave()
{
	SendByteToSlave(RC_NOT_S);
	int i;
	for(i = 0; i<noteCount; i++)
    2142:	2f 5f       	subi	r18, 0xFF	; 255
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	28 17       	cp	r18, r24
    214e:	39 07       	cpc	r19, r25
    2150:	74 f3       	brlt	.-36     	; 0x212e <main+0x84>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2152:	e0 ec       	ldi	r30, 0xC0	; 192
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	85 ff       	sbrs	r24, 5
    215a:	fd cf       	rjmp	.-6      	; 0x2156 <main+0xac>
	UDR0 = data;
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2162:	e0 ec       	ldi	r30, 0xC0	; 192
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	85 ff       	sbrs	r24, 5
    216a:	fd cf       	rjmp	.-6      	; 0x2166 <main+0xbc>
	UDR0 = data;
    216c:	8b e0       	ldi	r24, 0x0B	; 11
    216e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		SendByteToSlave(DATA(notes[i]));
	}
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
    2172:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    2176:	88 23       	and	r24, r24
    2178:	c1 f0       	breq	.+48     	; 0x21aa <main+0x100>
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    217e:	e0 ec       	ldi	r30, 0xC0	; 192
    2180:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2182:	46 ec       	ldi	r20, 0xC6	; 198
    2184:	50 e0       	ldi	r21, 0x00	; 0
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
	{
		SendByteToSlave(DATA(notes2[i]));
    2186:	d9 01       	movw	r26, r18
    2188:	a9 5b       	subi	r26, 0xB9	; 185
    218a:	b9 4f       	sbci	r27, 0xF9	; 249
    218c:	9c 91       	ld	r25, X
    218e:	90 68       	ori	r25, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2190:	80 81       	ld	r24, Z
    2192:	85 ff       	sbrs	r24, 5
    2194:	fd cf       	rjmp	.-6      	; 0x2190 <main+0xe6>
	UDR0 = data;
    2196:	da 01       	movw	r26, r20
    2198:	9c 93       	st	X, r25
		SendByteToSlave(DATA(notes[i]));
	}
	SendByteToSlave(RC_NOT_E);
	
	SendByteToSlave(RC_NOT_S2);
	for(i = 0; i<noteCount2; i++)
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <noteCount2>
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	28 17       	cp	r18, r24
    21a6:	39 07       	cpc	r19, r25
    21a8:	74 f3       	brlt	.-36     	; 0x2186 <main+0xdc>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    21aa:	e0 ec       	ldi	r30, 0xC0	; 192
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	85 ff       	sbrs	r24, 5
    21b2:	fd cf       	rjmp	.-6      	; 0x21ae <main+0x104>
	UDR0 = data;
    21b4:	8c e0       	ldi	r24, 0x0C	; 12
    21b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	lcd_string("Received!");
	PORTJ = 0xFF;
	
	#ifdef MASTER
	SendNotesToSlave();
	PORTJ = 0x0F;
    21ba:	8f e0       	ldi	r24, 0x0F	; 15
    21bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	lcd_clear();
    21c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_clear>
	lcd_string("Sent!");
    21c4:	82 e7       	ldi	r24, 0x72	; 114
    21c6:	95 e0       	ldi	r25, 0x05	; 5
    21c8:	0e 94 40 01 	call	0x280	; 0x280 <lcd_string>
	lcd_clear();
    21cc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_clear>
	lcd_string("Sending Tasks");
    21d0:	88 e7       	ldi	r24, 0x78	; 120
    21d2:	95 e0       	ldi	r25, 0x05	; 5
    21d4:	0e 94 40 01 	call	0x280	; 0x280 <lcd_string>
	processNotes();
    21d8:	e9 de       	rcall	.-558    	; 0x1fac <processNotes>
	lcd_clear();
    21da:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_clear>
	lcd_string("Processed");
    21de:	86 e8       	ldi	r24, 0x86	; 134
    21e0:	95 e0       	ldi	r25, 0x05	; 5
    21e2:	0e 94 40 01 	call	0x280	; 0x280 <lcd_string>
	SendByteToSlave(RC_NOT_E2);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    21e6:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCount>
    21ea:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <otherBotTaskCount+0x1>
    21ee:	18 16       	cp	r1, r24
    21f0:	19 06       	cpc	r1, r25
    21f2:	2c f5       	brge	.+74     	; 0x223e <__stack+0x3f>
    21f4:	a6 e1       	ldi	r26, 0x16	; 22
    21f6:	b6 e0       	ldi	r27, 0x06	; 6
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    21fc:	e0 ec       	ldi	r30, 0xC0	; 192
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
	UDR0 = data;
    2200:	66 ec       	ldi	r22, 0xC6	; 198
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	53 e0       	ldi	r21, 0x03	; 3
    2206:	8d 01       	movw	r16, r26
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
	{
		SendTaskToSlave(otherBotTask[i]);
    2208:	d8 01       	movw	r26, r16
    220a:	9c 91       	ld	r25, X
    220c:	0e 5f       	subi	r16, 0xFE	; 254
    220e:	1f 4f       	sbci	r17, 0xFF	; 255

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2210:	80 81       	ld	r24, Z
    2212:	85 ff       	sbrs	r24, 5
    2214:	fd cf       	rjmp	.-6      	; 0x2210 <__stack+0x11>
	UDR0 = data;
    2216:	db 01       	movw	r26, r22
    2218:	5c 93       	st	X, r21

//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
    221a:	49 2f       	mov	r20, r25
    221c:	40 68       	ori	r20, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    221e:	80 81       	ld	r24, Z
    2220:	85 ff       	sbrs	r24, 5
    2222:	fd cf       	rjmp	.-6      	; 0x221e <__stack+0x1f>
	UDR0 = data;
    2224:	db 01       	movw	r26, r22
    2226:	4c 93       	st	X, r20
//send this task to slave
void inline SendTaskToSlave(char task)
{
	SendByteToSlave(ADD_TASK);
	SendByteToSlave(DATA(task));
	otherBotLastTaskIndex=task;
    2228:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <otherBotLastTaskIndex>
	SendByteToSlave(RC_NOT_E2);
}
void inline SendTaskArray()
{
	int i;
	for(i = 0; i<otherBotTaskCount; i++)
    222c:	2f 5f       	subi	r18, 0xFF	; 255
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <otherBotTaskCount>
    2234:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <otherBotTaskCount+0x1>
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	2c f3       	brlt	.-54     	; 0x2208 <__stack+0x9>
	lcd_string("Sending Tasks");
	processNotes();
	lcd_clear();
	lcd_string("Processed");
	SendTaskArray();
	lcd_clear();
    223e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_clear>
	lcd_string("Task Sent");
    2242:	80 e9       	ldi	r24, 0x90	; 144
    2244:	95 e0       	ldi	r25, 0x05	; 5
    2246:	0e 94 40 01 	call	0x280	; 0x280 <lcd_string>
	#endif

	while(taskCount==0);
    224a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <taskCount>
    224e:	88 23       	and	r24, r24
    2250:	e1 f3       	breq	.-8      	; 0x224a <__stack+0x4b>
	
	//PC Debug (printf)
	stdout = &uart_debug;
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	92 e0       	ldi	r25, 0x02	; 2
    2256:	90 93 0b 0a 	sts	0x0A0B, r25	; 0x800a0b <__iob+0x3>
    225a:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__iob+0x2>
		
	int i=0;
	for(i=0;i<noteCount;i++)
    225e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    2262:	88 23       	and	r24, r24
    2264:	f1 f0       	breq	.+60     	; 0x22a2 <__stack+0xa3>
    2266:	00 e0       	ldi	r16, 0x00	; 0
    2268:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_print(2,1,(int)notes[i],2);
    226a:	f8 01       	movw	r30, r16
    226c:	e5 5a       	subi	r30, 0xA5	; 165
    226e:	f9 4f       	sbci	r31, 0xF9	; 249
    2270:	40 81       	ld	r20, Z
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	22 e0       	ldi	r18, 0x02	; 2
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    2280:	bf ef       	ldi	r27, 0xFF	; 255
    2282:	ef ef       	ldi	r30, 0xFF	; 255
    2284:	fc e2       	ldi	r31, 0x2C	; 44
    2286:	b1 50       	subi	r27, 0x01	; 1
    2288:	e0 40       	sbci	r30, 0x00	; 0
    228a:	f0 40       	sbci	r31, 0x00	; 0
    228c:	e1 f7       	brne	.-8      	; 0x2286 <__stack+0x87>
    228e:	00 c0       	rjmp	.+0      	; 0x2290 <__stack+0x91>
    2290:	00 00       	nop
	
	//PC Debug (printf)
	stdout = &uart_debug;
		
	int i=0;
	for(i=0;i<noteCount;i++)
    2292:	0f 5f       	subi	r16, 0xFF	; 255
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <noteCount>
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	08 17       	cp	r16, r24
    229e:	19 07       	cpc	r17, r25
    22a0:	24 f3       	brlt	.-56     	; 0x226a <__stack+0x6b>
	{
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
    22a2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_clear>
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    22a6:	a1 2c       	mov	r10, r1
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    22a8:	0f 2e       	mov	r0, r31
    22aa:	f6 ec       	ldi	r31, 0xC6	; 198
    22ac:	cf 2e       	mov	r12, r31
    22ae:	d1 2c       	mov	r13, r1
    22b0:	f0 2d       	mov	r31, r0
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    22b2:	19 82       	std	Y+1, r1	; 0x01
    22b4:	aa 82       	std	Y+2, r10	; 0x02
			for(i=1;i<4;i++)
    22b6:	21 e0       	ldi	r18, 0x01	; 1
    22b8:	2b 83       	std	Y+3, r18	; 0x03
    22ba:	1c 82       	std	Y+4, r1	; 0x04
		while(cost[botloc-1]!=0)
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
    22bc:	31 2c       	mov	r3, r1
    22be:	41 2c       	mov	r4, r1
			for(i=1;i<4;i++)
    22c0:	55 24       	eor	r5, r5
    22c2:	53 94       	inc	r5
    22c4:	b1 2c       	mov	r11, r1
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while(notes[(int)noteToStrike]!=0 && taskitr!=taskCount)
    22c6:	48 c3       	rjmp	.+1680   	; 0x2958 <__stack+0x759>
	{	
		printf("Current Task Node=%d \n",(int)notes[(int)tasks[taskitr]]);
    22c8:	fc 01       	movw	r30, r24
    22ca:	e1 59       	subi	r30, 0x91	; 145
    22cc:	f9 4f       	sbci	r31, 0xF9	; 249
    22ce:	e0 81       	ld	r30, Z
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	e5 5a       	subi	r30, 0xA5	; 165
    22d4:	f9 4f       	sbci	r31, 0xF9	; 249
    22d6:	80 81       	ld	r24, Z
    22d8:	1f 92       	push	r1
    22da:	8f 93       	push	r24
    22dc:	aa e9       	ldi	r26, 0x9A	; 154
    22de:	b5 e0       	ldi	r27, 0x05	; 5
    22e0:	bf 93       	push	r27
    22e2:	af 93       	push	r26
    22e4:	56 d5       	rcall	.+2732   	; 0x2d92 <printf>
		int taskDone=0;
		int i,minCost,nxtNode,pos;
		costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
    22e6:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    22ea:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    22ee:	e1 59       	subi	r30, 0x91	; 145
    22f0:	f9 4f       	sbci	r31, 0xF9	; 249
    22f2:	e0 81       	ld	r30, Z
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	e5 5a       	subi	r30, 0xA5	; 165
    22f8:	f9 4f       	sbci	r31, 0xF9	; 249
    22fa:	80 81       	ld	r24, Z
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9c 01       	movw	r18, r24
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	82 0f       	add	r24, r18
    2308:	93 1f       	adc	r25, r19
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	88 55       	subi	r24, 0x58	; 88
    2314:	9c 4f       	sbci	r25, 0xFC	; 252
    2316:	a3 da       	rcall	.-2746   	; 0x185e <costplan>
		lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
    2318:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    231c:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2320:	e1 59       	subi	r30, 0x91	; 145
    2322:	f9 4f       	sbci	r31, 0xF9	; 249
    2324:	e0 81       	ld	r30, Z
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	e5 5a       	subi	r30, 0xA5	; 165
    232a:	f9 4f       	sbci	r31, 0xF9	; 249
    232c:	40 81       	ld	r20, Z
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	22 e0       	ldi	r18, 0x02	; 2
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	6c e0       	ldi	r22, 0x0C	; 12
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
		printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
    233c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2340:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2344:	a0 91 0e 06 	lds	r26, 0x060E	; 0x80060e <taskitr>
    2348:	b0 91 0f 06 	lds	r27, 0x060F	; 0x80060f <taskitr+0x1>
    234c:	a1 59       	subi	r26, 0x91	; 145
    234e:	b9 4f       	sbci	r27, 0xF9	; 249
    2350:	8c 91       	ld	r24, X
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	eb 57       	subi	r30, 0x7B	; 123
    2358:	f9 4f       	sbci	r31, 0xF9	; 249
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	9f 93       	push	r25
    235e:	90 81       	ld	r25, Z
    2360:	9f 93       	push	r25
    2362:	1f 92       	push	r1
    2364:	8f 93       	push	r24
    2366:	a1 eb       	ldi	r26, 0xB1	; 177
    2368:	b5 e0       	ldi	r27, 0x05	; 5
    236a:	bf 93       	push	r27
    236c:	af 93       	push	r26
    236e:	11 d5       	rcall	.+2594   	; 0x2d92 <printf>
		while(cost[botloc-1]!=0)
    2370:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2374:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	eb 57       	subi	r30, 0x7B	; 123
    237e:	f9 4f       	sbci	r31, 0xF9	; 249
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	80 81       	ld	r24, Z
    238c:	91 81       	ldd	r25, Z+1	; 0x01
    238e:	89 2b       	or	r24, r25
    2390:	09 f4       	brne	.+2      	; 0x2394 <__stack+0x195>
    2392:	49 c1       	rjmp	.+658    	; 0x2626 <__stack+0x427>
		{
			lcd_print(2,5,botloc,2);
    2394:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <botloc>
    2398:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <botloc+0x1>
    239c:	22 e0       	ldi	r18, 0x02	; 2
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	65 e0       	ldi	r22, 0x05	; 5
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
			minCost=cost[node[botloc-1][0]-1];
    23a8:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    23ac:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	ee 0f       	add	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	e1 52       	subi	r30, 0x21	; 33
    23be:	f9 4f       	sbci	r31, 0xF9	; 249
    23c0:	01 90       	ld	r0, Z+
    23c2:	f0 81       	ld	r31, Z
    23c4:	e0 2d       	mov	r30, r0
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	eb 57       	subi	r30, 0x7B	; 123
    23cc:	f9 4f       	sbci	r31, 0xF9	; 249
    23ce:	20 81       	ld	r18, Z
    23d0:	31 81       	ldd	r19, Z+1	; 0x01
			nxtNode=node[botloc-1][0];
    23d2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    23d6:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	e1 52       	subi	r30, 0x21	; 33
    23e8:	f9 4f       	sbci	r31, 0xF9	; 249
    23ea:	60 80       	ld	r6, Z
    23ec:	71 80       	ldd	r7, Z+1	; 0x01
			pos=0;
    23ee:	e3 2c       	mov	r14, r3
    23f0:	f4 2c       	mov	r15, r4
			for(i=1;i<4;i++)
    23f2:	85 2d       	mov	r24, r5
    23f4:	9b 2d       	mov	r25, r11
			{
				if(node[botloc-1][i]!=0)
    23f6:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    23fa:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    23fe:	31 97       	sbiw	r30, 0x01	; 1
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	e8 0f       	add	r30, r24
    240a:	f9 1f       	adc	r31, r25
    240c:	ee 0f       	add	r30, r30
    240e:	ff 1f       	adc	r31, r31
    2410:	e9 51       	subi	r30, 0x19	; 25
    2412:	f9 4f       	sbci	r31, 0xF9	; 249
    2414:	40 81       	ld	r20, Z
    2416:	51 81       	ldd	r21, Z+1	; 0x01
    2418:	45 2b       	or	r20, r21
    241a:	09 f4       	brne	.+2      	; 0x241e <__stack+0x21f>
    241c:	45 c0       	rjmp	.+138    	; 0x24a8 <__stack+0x2a9>
					if(cost[node[botloc-1][i]-1]<minCost)
    241e:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2422:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2426:	31 97       	sbiw	r30, 0x01	; 1
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	e8 0f       	add	r30, r24
    2432:	f9 1f       	adc	r31, r25
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	e9 51       	subi	r30, 0x19	; 25
    243a:	f9 4f       	sbci	r31, 0xF9	; 249
    243c:	01 90       	ld	r0, Z+
    243e:	f0 81       	ld	r31, Z
    2440:	e0 2d       	mov	r30, r0
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	eb 57       	subi	r30, 0x7B	; 123
    2448:	f9 4f       	sbci	r31, 0xF9	; 249
    244a:	40 81       	ld	r20, Z
    244c:	51 81       	ldd	r21, Z+1	; 0x01
    244e:	42 17       	cp	r20, r18
    2450:	53 07       	cpc	r21, r19
    2452:	54 f5       	brge	.+84     	; 0x24a8 <__stack+0x2a9>
					{
						minCost=cost[node[botloc-1][i]-1];
    2454:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2458:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    245c:	31 97       	sbiw	r30, 0x01	; 1
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	e8 0f       	add	r30, r24
    2468:	f9 1f       	adc	r31, r25
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	e9 51       	subi	r30, 0x19	; 25
    2470:	f9 4f       	sbci	r31, 0xF9	; 249
    2472:	01 90       	ld	r0, Z+
    2474:	f0 81       	ld	r31, Z
    2476:	e0 2d       	mov	r30, r0
    2478:	ee 0f       	add	r30, r30
    247a:	ff 1f       	adc	r31, r31
    247c:	eb 57       	subi	r30, 0x7B	; 123
    247e:	f9 4f       	sbci	r31, 0xF9	; 249
    2480:	20 81       	ld	r18, Z
    2482:	31 81       	ldd	r19, Z+1	; 0x01
						nxtNode=node[botloc-1][i];
    2484:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2488:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    248c:	31 97       	sbiw	r30, 0x01	; 1
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	e8 0f       	add	r30, r24
    2498:	f9 1f       	adc	r31, r25
    249a:	ee 0f       	add	r30, r30
    249c:	ff 1f       	adc	r31, r31
    249e:	e9 51       	subi	r30, 0x19	; 25
    24a0:	f9 4f       	sbci	r31, 0xF9	; 249
    24a2:	60 80       	ld	r6, Z
    24a4:	71 80       	ldd	r7, Z+1	; 0x01
    24a6:	7c 01       	movw	r14, r24
		{
			lcd_print(2,5,botloc,2);
			minCost=cost[node[botloc-1][0]-1];
			nxtNode=node[botloc-1][0];
			pos=0;
			for(i=1;i<4;i++)
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	84 30       	cpi	r24, 0x04	; 4
    24ac:	91 05       	cpc	r25, r1
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <__stack+0x2b3>
    24b0:	a2 cf       	rjmp	.-188    	; 0x23f6 <__stack+0x1f7>
    24b2:	47 01       	movw	r8, r14
    24b4:	83 01       	movw	r16, r6
						minCost=cost[node[botloc-1][i]-1];
						nxtNode=node[botloc-1][i];
						pos=i;
					}
			}
			lcd_print(2,8,nxtNode,2);
    24b6:	22 e0       	ldi	r18, 0x02	; 2
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	a3 01       	movw	r20, r6
    24bc:	68 e0       	ldi	r22, 0x08	; 8
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
			while((int)otherBotMovingTo==nxtNode);
    24c4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <otherBotMovingTo>
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	80 17       	cp	r24, r16
    24cc:	91 07       	cpc	r25, r17
    24ce:	d1 f3       	breq	.-12     	; 0x24c4 <__stack+0x2c5>
			while((int)otherBotLocation==nxtNode);
    24d0:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <otherBotLocation>
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	80 17       	cp	r24, r16
    24d8:	91 07       	cpc	r25, r17
    24da:	d1 f3       	breq	.-12     	; 0x24d0 <__stack+0x2d1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    24dc:	a0 ec       	ldi	r26, 0xC0	; 192
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	8c 91       	ld	r24, X
    24e2:	85 ff       	sbrs	r24, 5
    24e4:	fb cf       	rjmp	.-10     	; 0x24dc <__stack+0x2dd>
	UDR0 = data;
    24e6:	85 e0       	ldi	r24, 0x05	; 5
    24e8:	f6 01       	movw	r30, r12
    24ea:	80 83       	st	Z, r24

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    24ec:	00 68       	ori	r16, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    24ee:	a0 ec       	ldi	r26, 0xC0	; 192
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	8c 91       	ld	r24, X
    24f4:	85 ff       	sbrs	r24, 5
    24f6:	fb cf       	rjmp	.-10     	; 0x24ee <__stack+0x2ef>
	UDR0 = data;
    24f8:	f6 01       	movw	r30, r12
    24fa:	00 83       	st	Z, r16
			}
			lcd_print(2,8,nxtNode,2);
			while((int)otherBotMovingTo==nxtNode);
			while((int)otherBotLocation==nxtNode);
			SendNextNode(nxtNode);
			taskDone=move(pos);
    24fc:	c4 01       	movw	r24, r8
    24fe:	8f db       	rcall	.-2274   	; 0x1c1e <move>
			if(taskDone==0)
    2500:	89 2b       	or	r24, r25
    2502:	09 f0       	breq	.+2      	; 0x2506 <__stack+0x307>
    2504:	5b c0       	rjmp	.+182    	; 0x25bc <__stack+0x3bd>
    2506:	93 01       	movw	r18, r6
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
			{
				for(i=0;i<4;i++)
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
    250c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2510:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2514:	31 97       	sbiw	r30, 0x01	; 1
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0d       	add	r30, r14
    2520:	ff 1d       	adc	r31, r15
    2522:	ee 0f       	add	r30, r30
    2524:	ff 1f       	adc	r31, r31
    2526:	e9 51       	subi	r30, 0x19	; 25
    2528:	f9 4f       	sbci	r31, 0xF9	; 249
    252a:	01 90       	ld	r0, Z+
    252c:	f0 81       	ld	r31, Z
    252e:	e0 2d       	mov	r30, r0
    2530:	31 97       	sbiw	r30, 0x01	; 1
    2532:	ee 0f       	add	r30, r30
    2534:	ff 1f       	adc	r31, r31
    2536:	ee 0f       	add	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	e8 0f       	add	r30, r24
    253c:	f9 1f       	adc	r31, r25
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	e9 51       	subi	r30, 0x19	; 25
    2544:	f9 4f       	sbci	r31, 0xF9	; 249
    2546:	40 81       	ld	r20, Z
    2548:	51 81       	ldd	r21, Z+1	; 0x01
    254a:	42 17       	cp	r20, r18
    254c:	53 07       	cpc	r21, r19
    254e:	f9 f4       	brne	.+62     	; 0x258e <__stack+0x38f>
						node[node[botloc-1][pos]-1][i]=0;
    2550:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2554:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2558:	31 97       	sbiw	r30, 0x01	; 1
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0d       	add	r30, r14
    2564:	ff 1d       	adc	r31, r15
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	e9 51       	subi	r30, 0x19	; 25
    256c:	f9 4f       	sbci	r31, 0xF9	; 249
    256e:	01 90       	ld	r0, Z+
    2570:	f0 81       	ld	r31, Z
    2572:	e0 2d       	mov	r30, r0
    2574:	31 97       	sbiw	r30, 0x01	; 1
    2576:	ee 0f       	add	r30, r30
    2578:	ff 1f       	adc	r31, r31
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	e8 0f       	add	r30, r24
    2580:	f9 1f       	adc	r31, r25
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	e9 51       	subi	r30, 0x19	; 25
    2588:	f9 4f       	sbci	r31, 0xF9	; 249
    258a:	11 82       	std	Z+1, r1	; 0x01
    258c:	10 82       	st	Z, r1
			while((int)otherBotLocation==nxtNode);
			SendNextNode(nxtNode);
			taskDone=move(pos);
			if(taskDone==0)
			{
				for(i=0;i<4;i++)
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	84 30       	cpi	r24, 0x04	; 4
    2592:	91 05       	cpc	r25, r1
    2594:	09 f0       	breq	.+2      	; 0x2598 <__stack+0x399>
    2596:	ba cf       	rjmp	.-140    	; 0x250c <__stack+0x30d>
					if(node[node[botloc-1][pos]-1][i]==nxtNode)
						node[node[botloc-1][pos]-1][i]=0;
				node[botloc-1][pos]=0;
    2598:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    259c:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    25a0:	31 97       	sbiw	r30, 0x01	; 1
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	ee 0d       	add	r30, r14
    25ac:	ff 1d       	adc	r31, r15
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	e9 51       	subi	r30, 0x19	; 25
    25b4:	f9 4f       	sbci	r31, 0xF9	; 249
    25b6:	11 82       	std	Z+1, r1	; 0x01
    25b8:	10 82       	st	Z, r1
				break;
    25ba:	35 c0       	rjmp	.+106    	; 0x2626 <__stack+0x427>
			}
			else
			{

				botloc=node[botloc-1][pos];
    25bc:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    25c0:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    25c4:	31 97       	sbiw	r30, 0x01	; 1
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	e8 0d       	add	r30, r8
    25d0:	f9 1d       	adc	r31, r9
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	e9 51       	subi	r30, 0x19	; 25
    25d8:	f9 4f       	sbci	r31, 0xF9	; 249
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <botloc+0x1>
    25e2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <botloc>
				SendNodeReached(botloc);
    25e6:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    25ea:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    25ee:	a0 ec       	ldi	r26, 0xC0	; 192
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	8c 91       	ld	r24, X
    25f4:	85 ff       	sbrs	r24, 5
    25f6:	fb cf       	rjmp	.-10     	; 0x25ee <__stack+0x3ef>
	UDR0 = data;
    25f8:	f6 01       	movw	r30, r12
    25fa:	20 82       	st	Z, r2

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    25fc:	20 68       	ori	r18, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    25fe:	a0 ec       	ldi	r26, 0xC0	; 192
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	8c 91       	ld	r24, X
    2604:	85 ff       	sbrs	r24, 5
    2606:	fb cf       	rjmp	.-10     	; 0x25fe <__stack+0x3ff>
	UDR0 = data;
    2608:	f6 01       	movw	r30, r12
    260a:	20 83       	st	Z, r18
		int taskDone=0;
		int i,minCost,nxtNode,pos;
		costplan(nodesnear[(int)notes[(int)tasks[taskitr]]-1]);
		lcd_print(2,12,(int)notes[(int)tasks[taskitr]],2);
		printf("Cost Planned for task =%d Cost=%d",(int)tasks[taskitr],cost[botloc-1]);
		while(cost[botloc-1]!=0)
    260c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2610:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	eb 57       	subi	r30, 0x7B	; 123
    261a:	f9 4f       	sbci	r31, 0xF9	; 249
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	89 2b       	or	r24, r25
    2622:	09 f0       	breq	.+2      	; 0x2626 <__stack+0x427>
    2624:	b7 ce       	rjmp	.-658    	; 0x2394 <__stack+0x195>
				botloc=node[botloc-1][pos];
				SendNodeReached(botloc);
			}
		}
			
		if(cost[botloc-1]==0)
    2626:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    262a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	eb 57       	subi	r30, 0x7B	; 123
    2634:	f9 4f       	sbci	r31, 0xF9	; 249
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	89 2b       	or	r24, r25
    263c:	09 f0       	breq	.+2      	; 0x2640 <__stack+0x441>
    263e:	8f c1       	rjmp	.+798    	; 0x295e <__stack+0x75f>
		{
			while(noteToStrike!=tasks[taskitr]);
    2640:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    2644:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    2648:	e1 59       	subi	r30, 0x91	; 145
    264a:	f9 4f       	sbci	r31, 0xF9	; 249
    264c:	90 81       	ld	r25, Z
    264e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    2652:	98 13       	cpse	r25, r24
    2654:	fb cf       	rjmp	.-10     	; 0x264c <__stack+0x44d>
			if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang || noteangles[(int)notes[(int)noteToStrike]-1][1]==botang)
    2656:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	e5 5a       	subi	r30, 0xA5	; 165
    265e:	f9 4f       	sbci	r31, 0xF9	; 249
    2660:	e0 81       	ld	r30, Z
    2662:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <botang>
    2666:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <botang+0x1>
    266a:	24 e0       	ldi	r18, 0x04	; 4
    266c:	e2 9f       	mul	r30, r18
    266e:	f0 01       	movw	r30, r0
    2670:	11 24       	eor	r1, r1
    2672:	e0 5e       	subi	r30, 0xE0	; 224
    2674:	fc 4f       	sbci	r31, 0xFC	; 252
    2676:	20 81       	ld	r18, Z
    2678:	31 81       	ldd	r19, Z+1	; 0x01
    267a:	28 17       	cp	r18, r24
    267c:	39 07       	cpc	r19, r25
    267e:	89 f0       	breq	.+34     	; 0x26a2 <__stack+0x4a3>
    2680:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	e5 5a       	subi	r30, 0xA5	; 165
    2688:	f9 4f       	sbci	r31, 0xF9	; 249
    268a:	e0 81       	ld	r30, Z
    268c:	34 e0       	ldi	r19, 0x04	; 4
    268e:	e3 9f       	mul	r30, r19
    2690:	f0 01       	movw	r30, r0
    2692:	11 24       	eor	r1, r1
    2694:	e0 5e       	subi	r30, 0xE0	; 224
    2696:	fc 4f       	sbci	r31, 0xFC	; 252
    2698:	22 81       	ldd	r18, Z+2	; 0x02
    269a:	33 81       	ldd	r19, Z+3	; 0x03
    269c:	82 17       	cp	r24, r18
    269e:	93 07       	cpc	r25, r19
    26a0:	c9 f4       	brne	.+50     	; 0x26d4 <__stack+0x4d5>
			{
				if(noteangles[(int)notes[(int)noteToStrike]-1][0]==botang)
    26a2:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	e5 5a       	subi	r30, 0xA5	; 165
    26aa:	f9 4f       	sbci	r31, 0xF9	; 249
    26ac:	e0 81       	ld	r30, Z
    26ae:	a4 e0       	ldi	r26, 0x04	; 4
    26b0:	ea 9f       	mul	r30, r26
    26b2:	f0 01       	movw	r30, r0
    26b4:	11 24       	eor	r1, r1
    26b6:	e0 5e       	subi	r30, 0xE0	; 224
    26b8:	fc 4f       	sbci	r31, 0xFC	; 252
    26ba:	20 81       	ld	r18, Z
    26bc:	31 81       	ldd	r19, Z+1	; 0x01
    26be:	82 17       	cp	r24, r18
    26c0:	93 07       	cpc	r25, r19
    26c2:	21 f4       	brne	.+8      	; 0x26cc <__stack+0x4cd>
					servoStrike(1); // Strike Left
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	5b da       	rcall	.-2890   	; 0x1b80 <servoStrike>
    26ca:	03 c1       	rjmp	.+518    	; 0x28d2 <__stack+0x6d3>
				else
					servoStrike(0);//Strike Right
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	9a 2d       	mov	r25, r10
    26d0:	57 da       	rcall	.-2898   	; 0x1b80 <servoStrike>
    26d2:	ff c0       	rjmp	.+510    	; 0x28d2 <__stack+0x6d3>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	9a 2d       	mov	r25, r10
			else
			{
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
				{
					if(nodesnear[(int)notes[(int)noteToStrike]-1][j]!=0 && botloc==nodesnear[(int)notes[(int)noteToStrike]-1][j])
    26d8:	a6 e0       	ldi	r26, 0x06	; 6
    26da:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	e5 5a       	subi	r30, 0xA5	; 165
    26e2:	f9 4f       	sbci	r31, 0xF9	; 249
    26e4:	20 81       	ld	r18, Z
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	21 50       	subi	r18, 0x01	; 1
    26ea:	31 09       	sbc	r19, r1
    26ec:	f9 01       	movw	r30, r18
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	e8 0f       	add	r30, r24
    26fc:	f9 1f       	adc	r31, r25
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	e8 55       	subi	r30, 0x58	; 88
    2704:	fc 4f       	sbci	r31, 0xFC	; 252
    2706:	20 81       	ld	r18, Z
    2708:	31 81       	ldd	r19, Z+1	; 0x01
    270a:	23 2b       	or	r18, r19
    270c:	e9 f0       	breq	.+58     	; 0x2748 <__stack+0x549>
    270e:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	e5 5a       	subi	r30, 0xA5	; 165
    2716:	f9 4f       	sbci	r31, 0xF9	; 249
    2718:	40 81       	ld	r20, Z
    271a:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    271e:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	41 50       	subi	r20, 0x01	; 1
    2726:	51 09       	sbc	r21, r1
    2728:	a4 9f       	mul	r26, r20
    272a:	f0 01       	movw	r30, r0
    272c:	a5 9f       	mul	r26, r21
    272e:	f0 0d       	add	r31, r0
    2730:	11 24       	eor	r1, r1
    2732:	e8 0f       	add	r30, r24
    2734:	f9 1f       	adc	r31, r25
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	e8 55       	subi	r30, 0x58	; 88
    273c:	fc 4f       	sbci	r31, 0xFC	; 252
    273e:	40 81       	ld	r20, Z
    2740:	51 81       	ldd	r21, Z+1	; 0x01
    2742:	42 17       	cp	r20, r18
    2744:	53 07       	cpc	r21, r19
    2746:	31 f0       	breq	.+12     	; 0x2754 <__stack+0x555>
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
				for(int j=0;j<4;j++)
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	84 30       	cpi	r24, 0x04	; 4
    274c:	91 05       	cpc	r25, r1
    274e:	29 f6       	brne	.-118    	; 0x26da <__stack+0x4db>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	9a 2d       	mov	r25, r10
						break;
					}
				}
				for(int j=0;j<4;j++)
				{
					if(node[botloc-1][j]==movToDestNote[(int)notes[(int)noteToStrike]-1][tpos])
    2754:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <botloc>
    2758:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <botloc+0x1>
    275c:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	e5 5a       	subi	r30, 0xA5	; 165
    2764:	f9 4f       	sbci	r31, 0xF9	; 249
    2766:	e0 81       	ld	r30, Z
    2768:	22 0f       	add	r18, r18
    276a:	33 1f       	adc	r19, r19
    276c:	22 0f       	add	r18, r18
    276e:	33 1f       	adc	r19, r19
    2770:	22 0f       	add	r18, r18
    2772:	33 1f       	adc	r19, r19
    2774:	d9 01       	movw	r26, r18
    2776:	a1 52       	subi	r26, 0x21	; 33
    2778:	b9 4f       	sbci	r27, 0xF9	; 249
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	31 97       	sbiw	r30, 0x01	; 1
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	ee 0f       	add	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	e8 0f       	add	r30, r24
    2788:	f9 1f       	adc	r31, r25
    278a:	ee 0f       	add	r30, r30
    278c:	ff 1f       	adc	r31, r31
    278e:	e4 5e       	subi	r30, 0xE4	; 228
    2790:	fd 4f       	sbci	r31, 0xFD	; 253
    2792:	2d 91       	ld	r18, X+
    2794:	3c 91       	ld	r19, X
    2796:	40 81       	ld	r20, Z
    2798:	51 81       	ldd	r21, Z+1	; 0x01
    279a:	24 17       	cp	r18, r20
    279c:	35 07       	cpc	r19, r21
    279e:	59 f1       	breq	.+86     	; 0x27f6 <__stack+0x5f7>
    27a0:	01 e0       	ldi	r16, 0x01	; 1
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    27a4:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <botloc>
    27a8:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <botloc+0x1>
    27ac:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	e5 5a       	subi	r30, 0xA5	; 165
    27b4:	f9 4f       	sbci	r31, 0xF9	; 249
    27b6:	e0 81       	ld	r30, Z
    27b8:	11 97       	sbiw	r26, 0x01	; 1
    27ba:	aa 0f       	add	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	aa 0f       	add	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	a0 0f       	add	r26, r16
    27c4:	b1 1f       	adc	r27, r17
    27c6:	aa 0f       	add	r26, r26
    27c8:	bb 1f       	adc	r27, r27
    27ca:	a9 51       	subi	r26, 0x19	; 25
    27cc:	b9 4f       	sbci	r27, 0xF9	; 249
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	31 97       	sbiw	r30, 0x01	; 1
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	e8 0f       	add	r30, r24
    27dc:	f9 1f       	adc	r31, r25
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	e4 5e       	subi	r30, 0xE4	; 228
    27e4:	fd 4f       	sbci	r31, 0xFD	; 253
    27e6:	4d 91       	ld	r20, X+
    27e8:	5c 91       	ld	r21, X
    27ea:	20 81       	ld	r18, Z
    27ec:	31 81       	ldd	r19, Z+1	; 0x01
    27ee:	42 17       	cp	r20, r18
    27f0:	53 07       	cpc	r21, r19
    27f2:	a9 f4       	brne	.+42     	; 0x281e <__stack+0x61f>
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <__stack+0x5fb>
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    27f6:	00 e0       	ldi	r16, 0x00	; 0
    27f8:	1a 2d       	mov	r17, r10
				{
					if(node[botloc-1][j]==movToDestNote[(int)notes[(int)noteToStrike]-1][tpos])
					{
						p=j;
						nxtNode=node[botloc-1][j];
    27fa:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    27fe:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2802:	31 97       	sbiw	r30, 0x01	; 1
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	e0 0f       	add	r30, r16
    280e:	f1 1f       	adc	r31, r17
    2810:	ee 0f       	add	r30, r30
    2812:	ff 1f       	adc	r31, r31
    2814:	e9 51       	subi	r30, 0x19	; 25
    2816:	f9 4f       	sbci	r31, 0xF9	; 249
    2818:	60 80       	ld	r6, Z
    281a:	71 80       	ldd	r7, Z+1	; 0x01
						break;
    281c:	08 c0       	rjmp	.+16     	; 0x282e <__stack+0x62f>
					{
						tpos=j;
						break;
					}
				}
				for(int j=0;j<4;j++)
    281e:	0f 5f       	subi	r16, 0xFF	; 255
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	04 30       	cpi	r16, 0x04	; 4
    2824:	11 05       	cpc	r17, r1
    2826:	09 f0       	breq	.+2      	; 0x282a <__stack+0x62b>
    2828:	bd cf       	rjmp	.-134    	; 0x27a4 <__stack+0x5a5>
				// Servo Motor Control
				// Strike the Note
			}
			else
			{
				int tpos=0,p=0;
    282a:	00 e0       	ldi	r16, 0x00	; 0
    282c:	1a 2d       	mov	r17, r10
						p=j;
						nxtNode=node[botloc-1][j];
						break;
					}
				}
				strike=1;
    282e:	bb 81       	ldd	r27, Y+3	; 0x03
    2830:	b0 93 10 06 	sts	0x0610, r27	; 0x800610 <strike>
    2834:	ec 81       	ldd	r30, Y+4	; 0x04
    2836:	e0 93 11 06 	sts	0x0611, r30	; 0x800611 <strike+0x1>
				while((int)otherBotMovingTo==nxtNode);
    283a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <otherBotMovingTo>
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	86 15       	cp	r24, r6
    2842:	97 05       	cpc	r25, r7
    2844:	d1 f3       	breq	.-12     	; 0x283a <__stack+0x63b>
				while((int)otherBotLocation==nxtNode);
    2846:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <otherBotLocation>
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	86 15       	cp	r24, r6
    284e:	97 05       	cpc	r25, r7
    2850:	d1 f3       	breq	.-12     	; 0x2846 <__stack+0x647>
				SendNextNode(nxtNode);
    2852:	86 2d       	mov	r24, r6

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2854:	a0 ec       	ldi	r26, 0xC0	; 192
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	9c 91       	ld	r25, X
    285a:	95 ff       	sbrs	r25, 5
    285c:	fb cf       	rjmp	.-10     	; 0x2854 <__stack+0x655>
	UDR0 = data;
    285e:	95 e0       	ldi	r25, 0x05	; 5
    2860:	f6 01       	movw	r30, r12
    2862:	90 83       	st	Z, r25

//Inform about the next node
void inline SendNextNode(char node)
{
	SendByteToSlave(NXT_NODE);
	SendByteToSlave(DATA(node));
    2864:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2866:	a0 ec       	ldi	r26, 0xC0	; 192
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	9c 91       	ld	r25, X
    286c:	95 ff       	sbrs	r25, 5
    286e:	fb cf       	rjmp	.-10     	; 0x2866 <__stack+0x667>
	UDR0 = data;
    2870:	f6 01       	movw	r30, r12
    2872:	80 83       	st	Z, r24
				}
				strike=1;
				while((int)otherBotMovingTo==nxtNode);
				while((int)otherBotLocation==nxtNode);
				SendNextNode(nxtNode);
				taskDone=move(p);
    2874:	c8 01       	movw	r24, r16
    2876:	d3 d9       	rcall	.-3162   	; 0x1c1e <move>
				if(taskDone==1)
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	59 f5       	brne	.+86     	; 0x28d2 <__stack+0x6d3>
				{
					botloc=node[botloc-1][p];
    287c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <botloc>
    2880:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <botloc+0x1>
    2884:	31 97       	sbiw	r30, 0x01	; 1
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e0 0f       	add	r30, r16
    2890:	f1 1f       	adc	r31, r17
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	e9 51       	subi	r30, 0x19	; 25
    2898:	f9 4f       	sbci	r31, 0xF9	; 249
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <botloc+0x1>
    28a2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <botloc>
					SendNodeReached(botloc);
    28a6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <botloc>
    28aa:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <botloc+0x1>
    28ae:	9c 01       	movw	r18, r24

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    28b0:	a0 ec       	ldi	r26, 0xC0	; 192
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	9c 91       	ld	r25, X
    28b6:	95 ff       	sbrs	r25, 5
    28b8:	fb cf       	rjmp	.-10     	; 0x28b0 <__stack+0x6b1>
    28ba:	c9 01       	movw	r24, r18
	UDR0 = data;
    28bc:	94 e0       	ldi	r25, 0x04	; 4
    28be:	f6 01       	movw	r30, r12
    28c0:	90 83       	st	Z, r25

//Inform that a node has been reached
void inline SendNodeReached(char node)
{
	SendByteToSlave(NODE_RCH);
	SendByteToSlave(DATA(node));
    28c2:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    28c4:	a0 ec       	ldi	r26, 0xC0	; 192
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	9c 91       	ld	r25, X
    28ca:	95 ff       	sbrs	r25, 5
    28cc:	fb cf       	rjmp	.-10     	; 0x28c4 <__stack+0x6c5>
	UDR0 = data;
    28ce:	f6 01       	movw	r30, r12
    28d0:	80 83       	st	Z, r24
				{
					botloc=node[botloc-1][p];
					SendNodeReached(botloc);
				}
			}
			printf("Reached Destination node=%d \n",(int)notes[(int)tasks[taskitr]]);
    28d2:	e0 91 0e 06 	lds	r30, 0x060E	; 0x80060e <taskitr>
    28d6:	f0 91 0f 06 	lds	r31, 0x060F	; 0x80060f <taskitr+0x1>
    28da:	e1 59       	subi	r30, 0x91	; 145
    28dc:	f9 4f       	sbci	r31, 0xF9	; 249
    28de:	e0 81       	ld	r30, Z
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	e5 5a       	subi	r30, 0xA5	; 165
    28e4:	f9 4f       	sbci	r31, 0xF9	; 249
    28e6:	80 81       	ld	r24, Z
    28e8:	1f 92       	push	r1
    28ea:	8f 93       	push	r24
    28ec:	83 ed       	ldi	r24, 0xD3	; 211
    28ee:	95 e0       	ldi	r25, 0x05	; 5
    28f0:	9f 93       	push	r25
    28f2:	8f 93       	push	r24
    28f4:	4e d2       	rcall	.+1180   	; 0x2d92 <printf>
			buzzer_on();
    28f6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <buzzer_on>
    28fa:	ff ef       	ldi	r31, 0xFF	; 255
    28fc:	2f e7       	ldi	r18, 0x7F	; 127
    28fe:	36 e1       	ldi	r19, 0x16	; 22
    2900:	f1 50       	subi	r31, 0x01	; 1
    2902:	20 40       	sbci	r18, 0x00	; 0
    2904:	30 40       	sbci	r19, 0x00	; 0
    2906:	e1 f7       	brne	.-8      	; 0x2900 <__stack+0x701>
    2908:	00 c0       	rjmp	.+0      	; 0x290a <__stack+0x70b>
    290a:	00 00       	nop
			_delay_ms(500);
			buzzer_off();
    290c:	0e 94 81 0a 	call	0x1502	; 0x1502 <buzzer_off>
			taskitr++;
    2910:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <taskitr>
    2914:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <taskitr+0x1>
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	90 93 0f 06 	sts	0x060F, r25	; 0x80060f <taskitr+0x1>
    291e:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <taskitr>
			SendNoteStruck(noteToStrike);
    2922:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    292e:	a0 ec       	ldi	r26, 0xC0	; 192
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	9c 91       	ld	r25, X
    2934:	95 ff       	sbrs	r25, 5
    2936:	fb cf       	rjmp	.-10     	; 0x292e <__stack+0x72f>
	UDR0 = data;
    2938:	96 e0       	ldi	r25, 0x06	; 6
    293a:	f6 01       	movw	r30, r12
    293c:	90 83       	st	Z, r25

//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
    293e:	80 68       	ori	r24, 0x80	; 128

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    2940:	a0 ec       	ldi	r26, 0xC0	; 192
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	9c 91       	ld	r25, X
    2946:	95 ff       	sbrs	r25, 5
    2948:	fb cf       	rjmp	.-10     	; 0x2940 <__stack+0x741>
	UDR0 = data;
    294a:	f6 01       	movw	r30, r12
    294c:	80 83       	st	Z, r24
//Inform that a note has been struck
void inline SendNoteStruck(char noteIndex)
{
	SendByteToSlave(NOTE_STK);
	SendByteToSlave(DATA(noteIndex));
	noteToStrike++;
    294e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <noteToStrike>
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <noteToStrike>
//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
    2958:	68 94       	set
    295a:	22 24       	eor	r2, r2
    295c:	22 f8       	bld	r2, 2
		lcd_print(2,1,(int)notes[i],2);
		_delay_ms(1000);
	}
	lcd_clear();
	
	while(notes[(int)noteToStrike]!=0 && taskitr!=taskCount)
    295e:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <noteToStrike>
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	e5 5a       	subi	r30, 0xA5	; 165
    2966:	f9 4f       	sbci	r31, 0xF9	; 249
    2968:	80 81       	ld	r24, Z
    296a:	88 23       	and	r24, r24
    296c:	59 f0       	breq	.+22     	; 0x2984 <__stack+0x785>
    296e:	20 91 42 06 	lds	r18, 0x0642	; 0x800642 <taskCount>
    2972:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <taskitr>
    2976:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <taskitr+0x1>
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	28 17       	cp	r18, r24
    297e:	39 07       	cpc	r19, r25
    2980:	09 f0       	breq	.+2      	; 0x2984 <__stack+0x785>
    2982:	a2 cc       	rjmp	.-1724   	; 0x22c8 <__stack+0xc9>
			buzzer_off();
			taskitr++;
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
    2984:	81 ef       	ldi	r24, 0xF1	; 241
    2986:	95 e0       	ldi	r25, 0x05	; 5
    2988:	17 d2       	rcall	.+1070   	; 0x2db8 <puts>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    298a:	e0 ec       	ldi	r30, 0xC0	; 192
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	85 ff       	sbrs	r24, 5
    2992:	fd cf       	rjmp	.-6      	; 0x298e <__stack+0x78f>
	UDR0 = data;
    2994:	8a e0       	ldi	r24, 0x0A	; 10
    2996:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

//Send a single byte through ZigBee
void inline SendByteToSlave(unsigned char data)
{
	//wait till transmitter is ready
	while(!(UCSR0A & (1 << UDRE0)));
    299a:	e0 ec       	ldi	r30, 0xC0	; 192
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	85 ff       	sbrs	r24, 5
    29a2:	fd cf       	rjmp	.-6      	; 0x299e <__stack+0x79f>
	UDR0 = data;
    29a4:	80 e8       	ldi	r24, 0x80	; 128
    29a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			SendNoteStruck(noteToStrike);
		}
	}
	printf("Gonna be Out!!!\n");
	BotEnded();
	while(botEnd!=1);
    29aa:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <botEnd>
    29ae:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <botEnd+0x1>
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	d1 f7       	brne	.-12     	; 0x29aa <__stack+0x7ab>
	buzzer_on();
    29b6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <buzzer_on>
    29ba:	ff ef       	ldi	r31, 0xFF	; 255
    29bc:	2f ef       	ldi	r18, 0xFF	; 255
    29be:	30 ee       	ldi	r19, 0xE0	; 224
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	f1 50       	subi	r31, 0x01	; 1
    29c4:	20 40       	sbci	r18, 0x00	; 0
    29c6:	30 40       	sbci	r19, 0x00	; 0
    29c8:	80 40       	sbci	r24, 0x00	; 0
    29ca:	d9 f7       	brne	.-10     	; 0x29c2 <__stack+0x7c3>
    29cc:	00 c0       	rjmp	.+0      	; 0x29ce <__stack+0x7cf>
    29ce:	00 00       	nop
	_delay_ms(6000);
	buzzer_off();
    29d0:	0e 94 81 0a 	call	0x1502	; 0x1502 <buzzer_off>
	return 0;
}
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	1f 91       	pop	r17
    29e6:	0f 91       	pop	r16
    29e8:	ff 90       	pop	r15
    29ea:	ef 90       	pop	r14
    29ec:	df 90       	pop	r13
    29ee:	cf 90       	pop	r12
    29f0:	bf 90       	pop	r11
    29f2:	af 90       	pop	r10
    29f4:	9f 90       	pop	r9
    29f6:	8f 90       	pop	r8
    29f8:	7f 90       	pop	r7
    29fa:	6f 90       	pop	r6
    29fc:	5f 90       	pop	r5
    29fe:	4f 90       	pop	r4
    2a00:	3f 90       	pop	r3
    2a02:	2f 90       	pop	r2
    2a04:	08 95       	ret

00002a06 <__subsf3>:
    2a06:	50 58       	subi	r21, 0x80	; 128

00002a08 <__addsf3>:
    2a08:	bb 27       	eor	r27, r27
    2a0a:	aa 27       	eor	r26, r26
    2a0c:	0e d0       	rcall	.+28     	; 0x2a2a <__addsf3x>
    2a0e:	48 c1       	rjmp	.+656    	; 0x2ca0 <__fp_round>
    2a10:	39 d1       	rcall	.+626    	; 0x2c84 <__fp_pscA>
    2a12:	30 f0       	brcs	.+12     	; 0x2a20 <__addsf3+0x18>
    2a14:	3e d1       	rcall	.+636    	; 0x2c92 <__fp_pscB>
    2a16:	20 f0       	brcs	.+8      	; 0x2a20 <__addsf3+0x18>
    2a18:	31 f4       	brne	.+12     	; 0x2a26 <__addsf3+0x1e>
    2a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2a1c:	11 f4       	brne	.+4      	; 0x2a22 <__addsf3+0x1a>
    2a1e:	1e f4       	brtc	.+6      	; 0x2a26 <__addsf3+0x1e>
    2a20:	2e c1       	rjmp	.+604    	; 0x2c7e <__fp_nan>
    2a22:	0e f4       	brtc	.+2      	; 0x2a26 <__addsf3+0x1e>
    2a24:	e0 95       	com	r30
    2a26:	e7 fb       	bst	r30, 7
    2a28:	24 c1       	rjmp	.+584    	; 0x2c72 <__fp_inf>

00002a2a <__addsf3x>:
    2a2a:	e9 2f       	mov	r30, r25
    2a2c:	4a d1       	rcall	.+660    	; 0x2cc2 <__fp_split3>
    2a2e:	80 f3       	brcs	.-32     	; 0x2a10 <__addsf3+0x8>
    2a30:	ba 17       	cp	r27, r26
    2a32:	62 07       	cpc	r22, r18
    2a34:	73 07       	cpc	r23, r19
    2a36:	84 07       	cpc	r24, r20
    2a38:	95 07       	cpc	r25, r21
    2a3a:	18 f0       	brcs	.+6      	; 0x2a42 <__addsf3x+0x18>
    2a3c:	71 f4       	brne	.+28     	; 0x2a5a <__addsf3x+0x30>
    2a3e:	9e f5       	brtc	.+102    	; 0x2aa6 <__addsf3x+0x7c>
    2a40:	62 c1       	rjmp	.+708    	; 0x2d06 <__fp_zero>
    2a42:	0e f4       	brtc	.+2      	; 0x2a46 <__addsf3x+0x1c>
    2a44:	e0 95       	com	r30
    2a46:	0b 2e       	mov	r0, r27
    2a48:	ba 2f       	mov	r27, r26
    2a4a:	a0 2d       	mov	r26, r0
    2a4c:	0b 01       	movw	r0, r22
    2a4e:	b9 01       	movw	r22, r18
    2a50:	90 01       	movw	r18, r0
    2a52:	0c 01       	movw	r0, r24
    2a54:	ca 01       	movw	r24, r20
    2a56:	a0 01       	movw	r20, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	ff 27       	eor	r31, r31
    2a5c:	59 1b       	sub	r21, r25
    2a5e:	99 f0       	breq	.+38     	; 0x2a86 <__addsf3x+0x5c>
    2a60:	59 3f       	cpi	r21, 0xF9	; 249
    2a62:	50 f4       	brcc	.+20     	; 0x2a78 <__addsf3x+0x4e>
    2a64:	50 3e       	cpi	r21, 0xE0	; 224
    2a66:	68 f1       	brcs	.+90     	; 0x2ac2 <__addsf3x+0x98>
    2a68:	1a 16       	cp	r1, r26
    2a6a:	f0 40       	sbci	r31, 0x00	; 0
    2a6c:	a2 2f       	mov	r26, r18
    2a6e:	23 2f       	mov	r18, r19
    2a70:	34 2f       	mov	r19, r20
    2a72:	44 27       	eor	r20, r20
    2a74:	58 5f       	subi	r21, 0xF8	; 248
    2a76:	f3 cf       	rjmp	.-26     	; 0x2a5e <__addsf3x+0x34>
    2a78:	46 95       	lsr	r20
    2a7a:	37 95       	ror	r19
    2a7c:	27 95       	ror	r18
    2a7e:	a7 95       	ror	r26
    2a80:	f0 40       	sbci	r31, 0x00	; 0
    2a82:	53 95       	inc	r21
    2a84:	c9 f7       	brne	.-14     	; 0x2a78 <__addsf3x+0x4e>
    2a86:	7e f4       	brtc	.+30     	; 0x2aa6 <__addsf3x+0x7c>
    2a88:	1f 16       	cp	r1, r31
    2a8a:	ba 0b       	sbc	r27, r26
    2a8c:	62 0b       	sbc	r22, r18
    2a8e:	73 0b       	sbc	r23, r19
    2a90:	84 0b       	sbc	r24, r20
    2a92:	ba f0       	brmi	.+46     	; 0x2ac2 <__addsf3x+0x98>
    2a94:	91 50       	subi	r25, 0x01	; 1
    2a96:	a1 f0       	breq	.+40     	; 0x2ac0 <__addsf3x+0x96>
    2a98:	ff 0f       	add	r31, r31
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	66 1f       	adc	r22, r22
    2a9e:	77 1f       	adc	r23, r23
    2aa0:	88 1f       	adc	r24, r24
    2aa2:	c2 f7       	brpl	.-16     	; 0x2a94 <__addsf3x+0x6a>
    2aa4:	0e c0       	rjmp	.+28     	; 0x2ac2 <__addsf3x+0x98>
    2aa6:	ba 0f       	add	r27, r26
    2aa8:	62 1f       	adc	r22, r18
    2aaa:	73 1f       	adc	r23, r19
    2aac:	84 1f       	adc	r24, r20
    2aae:	48 f4       	brcc	.+18     	; 0x2ac2 <__addsf3x+0x98>
    2ab0:	87 95       	ror	r24
    2ab2:	77 95       	ror	r23
    2ab4:	67 95       	ror	r22
    2ab6:	b7 95       	ror	r27
    2ab8:	f7 95       	ror	r31
    2aba:	9e 3f       	cpi	r25, 0xFE	; 254
    2abc:	08 f0       	brcs	.+2      	; 0x2ac0 <__addsf3x+0x96>
    2abe:	b3 cf       	rjmp	.-154    	; 0x2a26 <__addsf3+0x1e>
    2ac0:	93 95       	inc	r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	08 f0       	brcs	.+2      	; 0x2ac8 <__addsf3x+0x9e>
    2ac6:	99 27       	eor	r25, r25
    2ac8:	ee 0f       	add	r30, r30
    2aca:	97 95       	ror	r25
    2acc:	87 95       	ror	r24
    2ace:	08 95       	ret

00002ad0 <__divsf3>:
    2ad0:	0c d0       	rcall	.+24     	; 0x2aea <__divsf3x>
    2ad2:	e6 c0       	rjmp	.+460    	; 0x2ca0 <__fp_round>
    2ad4:	de d0       	rcall	.+444    	; 0x2c92 <__fp_pscB>
    2ad6:	40 f0       	brcs	.+16     	; 0x2ae8 <__divsf3+0x18>
    2ad8:	d5 d0       	rcall	.+426    	; 0x2c84 <__fp_pscA>
    2ada:	30 f0       	brcs	.+12     	; 0x2ae8 <__divsf3+0x18>
    2adc:	21 f4       	brne	.+8      	; 0x2ae6 <__divsf3+0x16>
    2ade:	5f 3f       	cpi	r21, 0xFF	; 255
    2ae0:	19 f0       	breq	.+6      	; 0x2ae8 <__divsf3+0x18>
    2ae2:	c7 c0       	rjmp	.+398    	; 0x2c72 <__fp_inf>
    2ae4:	51 11       	cpse	r21, r1
    2ae6:	10 c1       	rjmp	.+544    	; 0x2d08 <__fp_szero>
    2ae8:	ca c0       	rjmp	.+404    	; 0x2c7e <__fp_nan>

00002aea <__divsf3x>:
    2aea:	eb d0       	rcall	.+470    	; 0x2cc2 <__fp_split3>
    2aec:	98 f3       	brcs	.-26     	; 0x2ad4 <__divsf3+0x4>

00002aee <__divsf3_pse>:
    2aee:	99 23       	and	r25, r25
    2af0:	c9 f3       	breq	.-14     	; 0x2ae4 <__divsf3+0x14>
    2af2:	55 23       	and	r21, r21
    2af4:	b1 f3       	breq	.-20     	; 0x2ae2 <__divsf3+0x12>
    2af6:	95 1b       	sub	r25, r21
    2af8:	55 0b       	sbc	r21, r21
    2afa:	bb 27       	eor	r27, r27
    2afc:	aa 27       	eor	r26, r26
    2afe:	62 17       	cp	r22, r18
    2b00:	73 07       	cpc	r23, r19
    2b02:	84 07       	cpc	r24, r20
    2b04:	38 f0       	brcs	.+14     	; 0x2b14 <__divsf3_pse+0x26>
    2b06:	9f 5f       	subi	r25, 0xFF	; 255
    2b08:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0a:	22 0f       	add	r18, r18
    2b0c:	33 1f       	adc	r19, r19
    2b0e:	44 1f       	adc	r20, r20
    2b10:	aa 1f       	adc	r26, r26
    2b12:	a9 f3       	breq	.-22     	; 0x2afe <__divsf3_pse+0x10>
    2b14:	33 d0       	rcall	.+102    	; 0x2b7c <__divsf3_pse+0x8e>
    2b16:	0e 2e       	mov	r0, r30
    2b18:	3a f0       	brmi	.+14     	; 0x2b28 <__divsf3_pse+0x3a>
    2b1a:	e0 e8       	ldi	r30, 0x80	; 128
    2b1c:	30 d0       	rcall	.+96     	; 0x2b7e <__divsf3_pse+0x90>
    2b1e:	91 50       	subi	r25, 0x01	; 1
    2b20:	50 40       	sbci	r21, 0x00	; 0
    2b22:	e6 95       	lsr	r30
    2b24:	00 1c       	adc	r0, r0
    2b26:	ca f7       	brpl	.-14     	; 0x2b1a <__divsf3_pse+0x2c>
    2b28:	29 d0       	rcall	.+82     	; 0x2b7c <__divsf3_pse+0x8e>
    2b2a:	fe 2f       	mov	r31, r30
    2b2c:	27 d0       	rcall	.+78     	; 0x2b7c <__divsf3_pse+0x8e>
    2b2e:	66 0f       	add	r22, r22
    2b30:	77 1f       	adc	r23, r23
    2b32:	88 1f       	adc	r24, r24
    2b34:	bb 1f       	adc	r27, r27
    2b36:	26 17       	cp	r18, r22
    2b38:	37 07       	cpc	r19, r23
    2b3a:	48 07       	cpc	r20, r24
    2b3c:	ab 07       	cpc	r26, r27
    2b3e:	b0 e8       	ldi	r27, 0x80	; 128
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <__divsf3_pse+0x56>
    2b42:	bb 0b       	sbc	r27, r27
    2b44:	80 2d       	mov	r24, r0
    2b46:	bf 01       	movw	r22, r30
    2b48:	ff 27       	eor	r31, r31
    2b4a:	93 58       	subi	r25, 0x83	; 131
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	2a f0       	brmi	.+10     	; 0x2b5a <__divsf3_pse+0x6c>
    2b50:	9e 3f       	cpi	r25, 0xFE	; 254
    2b52:	51 05       	cpc	r21, r1
    2b54:	68 f0       	brcs	.+26     	; 0x2b70 <__divsf3_pse+0x82>
    2b56:	8d c0       	rjmp	.+282    	; 0x2c72 <__fp_inf>
    2b58:	d7 c0       	rjmp	.+430    	; 0x2d08 <__fp_szero>
    2b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b5c:	ec f3       	brlt	.-6      	; 0x2b58 <__divsf3_pse+0x6a>
    2b5e:	98 3e       	cpi	r25, 0xE8	; 232
    2b60:	dc f3       	brlt	.-10     	; 0x2b58 <__divsf3_pse+0x6a>
    2b62:	86 95       	lsr	r24
    2b64:	77 95       	ror	r23
    2b66:	67 95       	ror	r22
    2b68:	b7 95       	ror	r27
    2b6a:	f7 95       	ror	r31
    2b6c:	9f 5f       	subi	r25, 0xFF	; 255
    2b6e:	c9 f7       	brne	.-14     	; 0x2b62 <__divsf3_pse+0x74>
    2b70:	88 0f       	add	r24, r24
    2b72:	91 1d       	adc	r25, r1
    2b74:	96 95       	lsr	r25
    2b76:	87 95       	ror	r24
    2b78:	97 f9       	bld	r25, 7
    2b7a:	08 95       	ret
    2b7c:	e1 e0       	ldi	r30, 0x01	; 1
    2b7e:	66 0f       	add	r22, r22
    2b80:	77 1f       	adc	r23, r23
    2b82:	88 1f       	adc	r24, r24
    2b84:	bb 1f       	adc	r27, r27
    2b86:	62 17       	cp	r22, r18
    2b88:	73 07       	cpc	r23, r19
    2b8a:	84 07       	cpc	r24, r20
    2b8c:	ba 07       	cpc	r27, r26
    2b8e:	20 f0       	brcs	.+8      	; 0x2b98 <__divsf3_pse+0xaa>
    2b90:	62 1b       	sub	r22, r18
    2b92:	73 0b       	sbc	r23, r19
    2b94:	84 0b       	sbc	r24, r20
    2b96:	ba 0b       	sbc	r27, r26
    2b98:	ee 1f       	adc	r30, r30
    2b9a:	88 f7       	brcc	.-30     	; 0x2b7e <__divsf3_pse+0x90>
    2b9c:	e0 95       	com	r30
    2b9e:	08 95       	ret

00002ba0 <__fixunssfsi>:
    2ba0:	98 d0       	rcall	.+304    	; 0x2cd2 <__fp_splitA>
    2ba2:	88 f0       	brcs	.+34     	; 0x2bc6 <__fixunssfsi+0x26>
    2ba4:	9f 57       	subi	r25, 0x7F	; 127
    2ba6:	90 f0       	brcs	.+36     	; 0x2bcc <__fixunssfsi+0x2c>
    2ba8:	b9 2f       	mov	r27, r25
    2baa:	99 27       	eor	r25, r25
    2bac:	b7 51       	subi	r27, 0x17	; 23
    2bae:	a0 f0       	brcs	.+40     	; 0x2bd8 <__fixunssfsi+0x38>
    2bb0:	d1 f0       	breq	.+52     	; 0x2be6 <__fixunssfsi+0x46>
    2bb2:	66 0f       	add	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	1a f0       	brmi	.+6      	; 0x2bc2 <__fixunssfsi+0x22>
    2bbc:	ba 95       	dec	r27
    2bbe:	c9 f7       	brne	.-14     	; 0x2bb2 <__fixunssfsi+0x12>
    2bc0:	12 c0       	rjmp	.+36     	; 0x2be6 <__fixunssfsi+0x46>
    2bc2:	b1 30       	cpi	r27, 0x01	; 1
    2bc4:	81 f0       	breq	.+32     	; 0x2be6 <__fixunssfsi+0x46>
    2bc6:	9f d0       	rcall	.+318    	; 0x2d06 <__fp_zero>
    2bc8:	b1 e0       	ldi	r27, 0x01	; 1
    2bca:	08 95       	ret
    2bcc:	9c c0       	rjmp	.+312    	; 0x2d06 <__fp_zero>
    2bce:	67 2f       	mov	r22, r23
    2bd0:	78 2f       	mov	r23, r24
    2bd2:	88 27       	eor	r24, r24
    2bd4:	b8 5f       	subi	r27, 0xF8	; 248
    2bd6:	39 f0       	breq	.+14     	; 0x2be6 <__fixunssfsi+0x46>
    2bd8:	b9 3f       	cpi	r27, 0xF9	; 249
    2bda:	cc f3       	brlt	.-14     	; 0x2bce <__fixunssfsi+0x2e>
    2bdc:	86 95       	lsr	r24
    2bde:	77 95       	ror	r23
    2be0:	67 95       	ror	r22
    2be2:	b3 95       	inc	r27
    2be4:	d9 f7       	brne	.-10     	; 0x2bdc <__fixunssfsi+0x3c>
    2be6:	3e f4       	brtc	.+14     	; 0x2bf6 <__fixunssfsi+0x56>
    2be8:	90 95       	com	r25
    2bea:	80 95       	com	r24
    2bec:	70 95       	com	r23
    2bee:	61 95       	neg	r22
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	08 95       	ret

00002bf8 <__floatunsisf>:
    2bf8:	e8 94       	clt
    2bfa:	09 c0       	rjmp	.+18     	; 0x2c0e <__floatsisf+0x12>

00002bfc <__floatsisf>:
    2bfc:	97 fb       	bst	r25, 7
    2bfe:	3e f4       	brtc	.+14     	; 0x2c0e <__floatsisf+0x12>
    2c00:	90 95       	com	r25
    2c02:	80 95       	com	r24
    2c04:	70 95       	com	r23
    2c06:	61 95       	neg	r22
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0e:	99 23       	and	r25, r25
    2c10:	a9 f0       	breq	.+42     	; 0x2c3c <__floatsisf+0x40>
    2c12:	f9 2f       	mov	r31, r25
    2c14:	96 e9       	ldi	r25, 0x96	; 150
    2c16:	bb 27       	eor	r27, r27
    2c18:	93 95       	inc	r25
    2c1a:	f6 95       	lsr	r31
    2c1c:	87 95       	ror	r24
    2c1e:	77 95       	ror	r23
    2c20:	67 95       	ror	r22
    2c22:	b7 95       	ror	r27
    2c24:	f1 11       	cpse	r31, r1
    2c26:	f8 cf       	rjmp	.-16     	; 0x2c18 <__floatsisf+0x1c>
    2c28:	fa f4       	brpl	.+62     	; 0x2c68 <__floatsisf+0x6c>
    2c2a:	bb 0f       	add	r27, r27
    2c2c:	11 f4       	brne	.+4      	; 0x2c32 <__floatsisf+0x36>
    2c2e:	60 ff       	sbrs	r22, 0
    2c30:	1b c0       	rjmp	.+54     	; 0x2c68 <__floatsisf+0x6c>
    2c32:	6f 5f       	subi	r22, 0xFF	; 255
    2c34:	7f 4f       	sbci	r23, 0xFF	; 255
    2c36:	8f 4f       	sbci	r24, 0xFF	; 255
    2c38:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3a:	16 c0       	rjmp	.+44     	; 0x2c68 <__floatsisf+0x6c>
    2c3c:	88 23       	and	r24, r24
    2c3e:	11 f0       	breq	.+4      	; 0x2c44 <__floatsisf+0x48>
    2c40:	96 e9       	ldi	r25, 0x96	; 150
    2c42:	11 c0       	rjmp	.+34     	; 0x2c66 <__floatsisf+0x6a>
    2c44:	77 23       	and	r23, r23
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <__floatsisf+0x54>
    2c48:	9e e8       	ldi	r25, 0x8E	; 142
    2c4a:	87 2f       	mov	r24, r23
    2c4c:	76 2f       	mov	r23, r22
    2c4e:	05 c0       	rjmp	.+10     	; 0x2c5a <__floatsisf+0x5e>
    2c50:	66 23       	and	r22, r22
    2c52:	71 f0       	breq	.+28     	; 0x2c70 <__floatsisf+0x74>
    2c54:	96 e8       	ldi	r25, 0x86	; 134
    2c56:	86 2f       	mov	r24, r22
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	2a f0       	brmi	.+10     	; 0x2c68 <__floatsisf+0x6c>
    2c5e:	9a 95       	dec	r25
    2c60:	66 0f       	add	r22, r22
    2c62:	77 1f       	adc	r23, r23
    2c64:	88 1f       	adc	r24, r24
    2c66:	da f7       	brpl	.-10     	; 0x2c5e <__floatsisf+0x62>
    2c68:	88 0f       	add	r24, r24
    2c6a:	96 95       	lsr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	97 f9       	bld	r25, 7
    2c70:	08 95       	ret

00002c72 <__fp_inf>:
    2c72:	97 f9       	bld	r25, 7
    2c74:	9f 67       	ori	r25, 0x7F	; 127
    2c76:	80 e8       	ldi	r24, 0x80	; 128
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	08 95       	ret

00002c7e <__fp_nan>:
    2c7e:	9f ef       	ldi	r25, 0xFF	; 255
    2c80:	80 ec       	ldi	r24, 0xC0	; 192
    2c82:	08 95       	ret

00002c84 <__fp_pscA>:
    2c84:	00 24       	eor	r0, r0
    2c86:	0a 94       	dec	r0
    2c88:	16 16       	cp	r1, r22
    2c8a:	17 06       	cpc	r1, r23
    2c8c:	18 06       	cpc	r1, r24
    2c8e:	09 06       	cpc	r0, r25
    2c90:	08 95       	ret

00002c92 <__fp_pscB>:
    2c92:	00 24       	eor	r0, r0
    2c94:	0a 94       	dec	r0
    2c96:	12 16       	cp	r1, r18
    2c98:	13 06       	cpc	r1, r19
    2c9a:	14 06       	cpc	r1, r20
    2c9c:	05 06       	cpc	r0, r21
    2c9e:	08 95       	ret

00002ca0 <__fp_round>:
    2ca0:	09 2e       	mov	r0, r25
    2ca2:	03 94       	inc	r0
    2ca4:	00 0c       	add	r0, r0
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <__fp_round+0xc>
    2ca8:	88 23       	and	r24, r24
    2caa:	52 f0       	brmi	.+20     	; 0x2cc0 <__fp_round+0x20>
    2cac:	bb 0f       	add	r27, r27
    2cae:	40 f4       	brcc	.+16     	; 0x2cc0 <__fp_round+0x20>
    2cb0:	bf 2b       	or	r27, r31
    2cb2:	11 f4       	brne	.+4      	; 0x2cb8 <__fp_round+0x18>
    2cb4:	60 ff       	sbrs	r22, 0
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <__fp_round+0x20>
    2cb8:	6f 5f       	subi	r22, 0xFF	; 255
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	08 95       	ret

00002cc2 <__fp_split3>:
    2cc2:	57 fd       	sbrc	r21, 7
    2cc4:	90 58       	subi	r25, 0x80	; 128
    2cc6:	44 0f       	add	r20, r20
    2cc8:	55 1f       	adc	r21, r21
    2cca:	59 f0       	breq	.+22     	; 0x2ce2 <__fp_splitA+0x10>
    2ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    2cce:	71 f0       	breq	.+28     	; 0x2cec <__fp_splitA+0x1a>
    2cd0:	47 95       	ror	r20

00002cd2 <__fp_splitA>:
    2cd2:	88 0f       	add	r24, r24
    2cd4:	97 fb       	bst	r25, 7
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	61 f0       	breq	.+24     	; 0x2cf2 <__fp_splitA+0x20>
    2cda:	9f 3f       	cpi	r25, 0xFF	; 255
    2cdc:	79 f0       	breq	.+30     	; 0x2cfc <__fp_splitA+0x2a>
    2cde:	87 95       	ror	r24
    2ce0:	08 95       	ret
    2ce2:	12 16       	cp	r1, r18
    2ce4:	13 06       	cpc	r1, r19
    2ce6:	14 06       	cpc	r1, r20
    2ce8:	55 1f       	adc	r21, r21
    2cea:	f2 cf       	rjmp	.-28     	; 0x2cd0 <__fp_split3+0xe>
    2cec:	46 95       	lsr	r20
    2cee:	f1 df       	rcall	.-30     	; 0x2cd2 <__fp_splitA>
    2cf0:	08 c0       	rjmp	.+16     	; 0x2d02 <__fp_splitA+0x30>
    2cf2:	16 16       	cp	r1, r22
    2cf4:	17 06       	cpc	r1, r23
    2cf6:	18 06       	cpc	r1, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	f1 cf       	rjmp	.-30     	; 0x2cde <__fp_splitA+0xc>
    2cfc:	86 95       	lsr	r24
    2cfe:	71 05       	cpc	r23, r1
    2d00:	61 05       	cpc	r22, r1
    2d02:	08 94       	sec
    2d04:	08 95       	ret

00002d06 <__fp_zero>:
    2d06:	e8 94       	clt

00002d08 <__fp_szero>:
    2d08:	bb 27       	eor	r27, r27
    2d0a:	66 27       	eor	r22, r22
    2d0c:	77 27       	eor	r23, r23
    2d0e:	cb 01       	movw	r24, r22
    2d10:	97 f9       	bld	r25, 7
    2d12:	08 95       	ret

00002d14 <__gesf2>:
    2d14:	03 d0       	rcall	.+6      	; 0x2d1c <__fp_cmp>
    2d16:	08 f4       	brcc	.+2      	; 0x2d1a <__gesf2+0x6>
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
    2d1a:	08 95       	ret

00002d1c <__fp_cmp>:
    2d1c:	99 0f       	add	r25, r25
    2d1e:	00 08       	sbc	r0, r0
    2d20:	55 0f       	add	r21, r21
    2d22:	aa 0b       	sbc	r26, r26
    2d24:	e0 e8       	ldi	r30, 0x80	; 128
    2d26:	fe ef       	ldi	r31, 0xFE	; 254
    2d28:	16 16       	cp	r1, r22
    2d2a:	17 06       	cpc	r1, r23
    2d2c:	e8 07       	cpc	r30, r24
    2d2e:	f9 07       	cpc	r31, r25
    2d30:	c0 f0       	brcs	.+48     	; 0x2d62 <__fp_cmp+0x46>
    2d32:	12 16       	cp	r1, r18
    2d34:	13 06       	cpc	r1, r19
    2d36:	e4 07       	cpc	r30, r20
    2d38:	f5 07       	cpc	r31, r21
    2d3a:	98 f0       	brcs	.+38     	; 0x2d62 <__fp_cmp+0x46>
    2d3c:	62 1b       	sub	r22, r18
    2d3e:	73 0b       	sbc	r23, r19
    2d40:	84 0b       	sbc	r24, r20
    2d42:	95 0b       	sbc	r25, r21
    2d44:	39 f4       	brne	.+14     	; 0x2d54 <__fp_cmp+0x38>
    2d46:	0a 26       	eor	r0, r26
    2d48:	61 f0       	breq	.+24     	; 0x2d62 <__fp_cmp+0x46>
    2d4a:	23 2b       	or	r18, r19
    2d4c:	24 2b       	or	r18, r20
    2d4e:	25 2b       	or	r18, r21
    2d50:	21 f4       	brne	.+8      	; 0x2d5a <__fp_cmp+0x3e>
    2d52:	08 95       	ret
    2d54:	0a 26       	eor	r0, r26
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <__fp_cmp+0x3e>
    2d58:	a1 40       	sbci	r26, 0x01	; 1
    2d5a:	a6 95       	lsr	r26
    2d5c:	8f ef       	ldi	r24, 0xFF	; 255
    2d5e:	81 1d       	adc	r24, r1
    2d60:	81 1d       	adc	r24, r1
    2d62:	08 95       	ret

00002d64 <__tablejump2__>:
    2d64:	ee 0f       	add	r30, r30
    2d66:	ff 1f       	adc	r31, r31
    2d68:	88 1f       	adc	r24, r24
    2d6a:	8b bf       	out	0x3b, r24	; 59
    2d6c:	07 90       	elpm	r0, Z+
    2d6e:	f6 91       	elpm	r31, Z
    2d70:	e0 2d       	mov	r30, r0
    2d72:	19 94       	eijmp

00002d74 <__umulhisi3>:
    2d74:	a2 9f       	mul	r26, r18
    2d76:	b0 01       	movw	r22, r0
    2d78:	b3 9f       	mul	r27, r19
    2d7a:	c0 01       	movw	r24, r0
    2d7c:	a3 9f       	mul	r26, r19
    2d7e:	70 0d       	add	r23, r0
    2d80:	81 1d       	adc	r24, r1
    2d82:	11 24       	eor	r1, r1
    2d84:	91 1d       	adc	r25, r1
    2d86:	b2 9f       	mul	r27, r18
    2d88:	70 0d       	add	r23, r0
    2d8a:	81 1d       	adc	r24, r1
    2d8c:	11 24       	eor	r1, r1
    2d8e:	91 1d       	adc	r25, r1
    2d90:	08 95       	ret

00002d92 <printf>:
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	ae 01       	movw	r20, r28
    2d9c:	4a 5f       	subi	r20, 0xFA	; 250
    2d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2da0:	fa 01       	movw	r30, r20
    2da2:	61 91       	ld	r22, Z+
    2da4:	71 91       	ld	r23, Z+
    2da6:	af 01       	movw	r20, r30
    2da8:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <__iob+0x2>
    2dac:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <__iob+0x3>
    2db0:	33 d0       	rcall	.+102    	; 0x2e18 <vfprintf>
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	08 95       	ret

00002db8 <puts>:
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	e0 91 0a 0a 	lds	r30, 0x0A0A	; 0x800a0a <__iob+0x2>
    2dc4:	f0 91 0b 0a 	lds	r31, 0x0A0B	; 0x800a0b <__iob+0x3>
    2dc8:	23 81       	ldd	r18, Z+3	; 0x03
    2dca:	21 ff       	sbrs	r18, 1
    2dcc:	1b c0       	rjmp	.+54     	; 0x2e04 <puts+0x4c>
    2dce:	8c 01       	movw	r16, r24
    2dd0:	d0 e0       	ldi	r29, 0x00	; 0
    2dd2:	c0 e0       	ldi	r28, 0x00	; 0
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	81 91       	ld	r24, Z+
    2dd8:	8f 01       	movw	r16, r30
    2dda:	60 91 0a 0a 	lds	r22, 0x0A0A	; 0x800a0a <__iob+0x2>
    2dde:	70 91 0b 0a 	lds	r23, 0x0A0B	; 0x800a0b <__iob+0x3>
    2de2:	db 01       	movw	r26, r22
    2de4:	18 96       	adiw	r26, 0x08	; 8
    2de6:	ed 91       	ld	r30, X+
    2de8:	fc 91       	ld	r31, X
    2dea:	19 97       	sbiw	r26, 0x09	; 9
    2dec:	88 23       	and	r24, r24
    2dee:	31 f0       	breq	.+12     	; 0x2dfc <puts+0x44>
    2df0:	19 95       	eicall
    2df2:	89 2b       	or	r24, r25
    2df4:	79 f3       	breq	.-34     	; 0x2dd4 <puts+0x1c>
    2df6:	df ef       	ldi	r29, 0xFF	; 255
    2df8:	cf ef       	ldi	r28, 0xFF	; 255
    2dfa:	ec cf       	rjmp	.-40     	; 0x2dd4 <puts+0x1c>
    2dfc:	8a e0       	ldi	r24, 0x0A	; 10
    2dfe:	19 95       	eicall
    2e00:	89 2b       	or	r24, r25
    2e02:	19 f0       	breq	.+6      	; 0x2e0a <puts+0x52>
    2e04:	8f ef       	ldi	r24, 0xFF	; 255
    2e06:	9f ef       	ldi	r25, 0xFF	; 255
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <puts+0x56>
    2e0a:	8d 2f       	mov	r24, r29
    2e0c:	9c 2f       	mov	r25, r28
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <vfprintf>:
    2e18:	2f 92       	push	r2
    2e1a:	3f 92       	push	r3
    2e1c:	4f 92       	push	r4
    2e1e:	5f 92       	push	r5
    2e20:	6f 92       	push	r6
    2e22:	7f 92       	push	r7
    2e24:	8f 92       	push	r8
    2e26:	9f 92       	push	r9
    2e28:	af 92       	push	r10
    2e2a:	bf 92       	push	r11
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	2c 97       	sbiw	r28, 0x0c	; 12
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	7c 01       	movw	r14, r24
    2e4e:	6b 01       	movw	r12, r22
    2e50:	8a 01       	movw	r16, r20
    2e52:	fc 01       	movw	r30, r24
    2e54:	17 82       	std	Z+7, r1	; 0x07
    2e56:	16 82       	std	Z+6, r1	; 0x06
    2e58:	83 81       	ldd	r24, Z+3	; 0x03
    2e5a:	81 ff       	sbrs	r24, 1
    2e5c:	b0 c1       	rjmp	.+864    	; 0x31be <vfprintf+0x3a6>
    2e5e:	ce 01       	movw	r24, r28
    2e60:	01 96       	adiw	r24, 0x01	; 1
    2e62:	4c 01       	movw	r8, r24
    2e64:	f7 01       	movw	r30, r14
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	f6 01       	movw	r30, r12
    2e6a:	93 fd       	sbrc	r25, 3
    2e6c:	85 91       	lpm	r24, Z+
    2e6e:	93 ff       	sbrs	r25, 3
    2e70:	81 91       	ld	r24, Z+
    2e72:	6f 01       	movw	r12, r30
    2e74:	88 23       	and	r24, r24
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <vfprintf+0x62>
    2e78:	9e c1       	rjmp	.+828    	; 0x31b6 <vfprintf+0x39e>
    2e7a:	85 32       	cpi	r24, 0x25	; 37
    2e7c:	39 f4       	brne	.+14     	; 0x2e8c <vfprintf+0x74>
    2e7e:	93 fd       	sbrc	r25, 3
    2e80:	85 91       	lpm	r24, Z+
    2e82:	93 ff       	sbrs	r25, 3
    2e84:	81 91       	ld	r24, Z+
    2e86:	6f 01       	movw	r12, r30
    2e88:	85 32       	cpi	r24, 0x25	; 37
    2e8a:	21 f4       	brne	.+8      	; 0x2e94 <vfprintf+0x7c>
    2e8c:	b7 01       	movw	r22, r14
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	c7 d1       	rcall	.+910    	; 0x3220 <fputc>
    2e92:	e8 cf       	rjmp	.-48     	; 0x2e64 <vfprintf+0x4c>
    2e94:	51 2c       	mov	r5, r1
    2e96:	31 2c       	mov	r3, r1
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	20 32       	cpi	r18, 0x20	; 32
    2e9c:	a0 f4       	brcc	.+40     	; 0x2ec6 <vfprintf+0xae>
    2e9e:	8b 32       	cpi	r24, 0x2B	; 43
    2ea0:	69 f0       	breq	.+26     	; 0x2ebc <vfprintf+0xa4>
    2ea2:	30 f4       	brcc	.+12     	; 0x2eb0 <vfprintf+0x98>
    2ea4:	80 32       	cpi	r24, 0x20	; 32
    2ea6:	59 f0       	breq	.+22     	; 0x2ebe <vfprintf+0xa6>
    2ea8:	83 32       	cpi	r24, 0x23	; 35
    2eaa:	69 f4       	brne	.+26     	; 0x2ec6 <vfprintf+0xae>
    2eac:	20 61       	ori	r18, 0x10	; 16
    2eae:	2c c0       	rjmp	.+88     	; 0x2f08 <vfprintf+0xf0>
    2eb0:	8d 32       	cpi	r24, 0x2D	; 45
    2eb2:	39 f0       	breq	.+14     	; 0x2ec2 <vfprintf+0xaa>
    2eb4:	80 33       	cpi	r24, 0x30	; 48
    2eb6:	39 f4       	brne	.+14     	; 0x2ec6 <vfprintf+0xae>
    2eb8:	21 60       	ori	r18, 0x01	; 1
    2eba:	26 c0       	rjmp	.+76     	; 0x2f08 <vfprintf+0xf0>
    2ebc:	22 60       	ori	r18, 0x02	; 2
    2ebe:	24 60       	ori	r18, 0x04	; 4
    2ec0:	23 c0       	rjmp	.+70     	; 0x2f08 <vfprintf+0xf0>
    2ec2:	28 60       	ori	r18, 0x08	; 8
    2ec4:	21 c0       	rjmp	.+66     	; 0x2f08 <vfprintf+0xf0>
    2ec6:	27 fd       	sbrc	r18, 7
    2ec8:	27 c0       	rjmp	.+78     	; 0x2f18 <vfprintf+0x100>
    2eca:	30 ed       	ldi	r19, 0xD0	; 208
    2ecc:	38 0f       	add	r19, r24
    2ece:	3a 30       	cpi	r19, 0x0A	; 10
    2ed0:	78 f4       	brcc	.+30     	; 0x2ef0 <vfprintf+0xd8>
    2ed2:	26 ff       	sbrs	r18, 6
    2ed4:	06 c0       	rjmp	.+12     	; 0x2ee2 <vfprintf+0xca>
    2ed6:	fa e0       	ldi	r31, 0x0A	; 10
    2ed8:	5f 9e       	mul	r5, r31
    2eda:	30 0d       	add	r19, r0
    2edc:	11 24       	eor	r1, r1
    2ede:	53 2e       	mov	r5, r19
    2ee0:	13 c0       	rjmp	.+38     	; 0x2f08 <vfprintf+0xf0>
    2ee2:	8a e0       	ldi	r24, 0x0A	; 10
    2ee4:	38 9e       	mul	r3, r24
    2ee6:	30 0d       	add	r19, r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	33 2e       	mov	r3, r19
    2eec:	20 62       	ori	r18, 0x20	; 32
    2eee:	0c c0       	rjmp	.+24     	; 0x2f08 <vfprintf+0xf0>
    2ef0:	8e 32       	cpi	r24, 0x2E	; 46
    2ef2:	21 f4       	brne	.+8      	; 0x2efc <vfprintf+0xe4>
    2ef4:	26 fd       	sbrc	r18, 6
    2ef6:	5f c1       	rjmp	.+702    	; 0x31b6 <vfprintf+0x39e>
    2ef8:	20 64       	ori	r18, 0x40	; 64
    2efa:	06 c0       	rjmp	.+12     	; 0x2f08 <vfprintf+0xf0>
    2efc:	8c 36       	cpi	r24, 0x6C	; 108
    2efe:	11 f4       	brne	.+4      	; 0x2f04 <vfprintf+0xec>
    2f00:	20 68       	ori	r18, 0x80	; 128
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <vfprintf+0xf0>
    2f04:	88 36       	cpi	r24, 0x68	; 104
    2f06:	41 f4       	brne	.+16     	; 0x2f18 <vfprintf+0x100>
    2f08:	f6 01       	movw	r30, r12
    2f0a:	93 fd       	sbrc	r25, 3
    2f0c:	85 91       	lpm	r24, Z+
    2f0e:	93 ff       	sbrs	r25, 3
    2f10:	81 91       	ld	r24, Z+
    2f12:	6f 01       	movw	r12, r30
    2f14:	81 11       	cpse	r24, r1
    2f16:	c1 cf       	rjmp	.-126    	; 0x2e9a <vfprintf+0x82>
    2f18:	98 2f       	mov	r25, r24
    2f1a:	9f 7d       	andi	r25, 0xDF	; 223
    2f1c:	95 54       	subi	r25, 0x45	; 69
    2f1e:	93 30       	cpi	r25, 0x03	; 3
    2f20:	28 f4       	brcc	.+10     	; 0x2f2c <vfprintf+0x114>
    2f22:	0c 5f       	subi	r16, 0xFC	; 252
    2f24:	1f 4f       	sbci	r17, 0xFF	; 255
    2f26:	ff e3       	ldi	r31, 0x3F	; 63
    2f28:	f9 83       	std	Y+1, r31	; 0x01
    2f2a:	0d c0       	rjmp	.+26     	; 0x2f46 <vfprintf+0x12e>
    2f2c:	83 36       	cpi	r24, 0x63	; 99
    2f2e:	31 f0       	breq	.+12     	; 0x2f3c <vfprintf+0x124>
    2f30:	83 37       	cpi	r24, 0x73	; 115
    2f32:	71 f0       	breq	.+28     	; 0x2f50 <vfprintf+0x138>
    2f34:	83 35       	cpi	r24, 0x53	; 83
    2f36:	09 f0       	breq	.+2      	; 0x2f3a <vfprintf+0x122>
    2f38:	57 c0       	rjmp	.+174    	; 0x2fe8 <vfprintf+0x1d0>
    2f3a:	21 c0       	rjmp	.+66     	; 0x2f7e <vfprintf+0x166>
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	80 81       	ld	r24, Z
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	0e 5f       	subi	r16, 0xFE	; 254
    2f44:	1f 4f       	sbci	r17, 0xFF	; 255
    2f46:	44 24       	eor	r4, r4
    2f48:	43 94       	inc	r4
    2f4a:	51 2c       	mov	r5, r1
    2f4c:	54 01       	movw	r10, r8
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <vfprintf+0x160>
    2f50:	38 01       	movw	r6, r16
    2f52:	f2 e0       	ldi	r31, 0x02	; 2
    2f54:	6f 0e       	add	r6, r31
    2f56:	71 1c       	adc	r7, r1
    2f58:	f8 01       	movw	r30, r16
    2f5a:	a0 80       	ld	r10, Z
    2f5c:	b1 80       	ldd	r11, Z+1	; 0x01
    2f5e:	26 ff       	sbrs	r18, 6
    2f60:	03 c0       	rjmp	.+6      	; 0x2f68 <vfprintf+0x150>
    2f62:	65 2d       	mov	r22, r5
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <vfprintf+0x154>
    2f68:	6f ef       	ldi	r22, 0xFF	; 255
    2f6a:	7f ef       	ldi	r23, 0xFF	; 255
    2f6c:	c5 01       	movw	r24, r10
    2f6e:	2c 87       	std	Y+12, r18	; 0x0c
    2f70:	4c d1       	rcall	.+664    	; 0x320a <strnlen>
    2f72:	2c 01       	movw	r4, r24
    2f74:	83 01       	movw	r16, r6
    2f76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f78:	2f 77       	andi	r18, 0x7F	; 127
    2f7a:	22 2e       	mov	r2, r18
    2f7c:	16 c0       	rjmp	.+44     	; 0x2faa <vfprintf+0x192>
    2f7e:	38 01       	movw	r6, r16
    2f80:	f2 e0       	ldi	r31, 0x02	; 2
    2f82:	6f 0e       	add	r6, r31
    2f84:	71 1c       	adc	r7, r1
    2f86:	f8 01       	movw	r30, r16
    2f88:	a0 80       	ld	r10, Z
    2f8a:	b1 80       	ldd	r11, Z+1	; 0x01
    2f8c:	26 ff       	sbrs	r18, 6
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <vfprintf+0x17e>
    2f90:	65 2d       	mov	r22, r5
    2f92:	70 e0       	ldi	r23, 0x00	; 0
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <vfprintf+0x182>
    2f96:	6f ef       	ldi	r22, 0xFF	; 255
    2f98:	7f ef       	ldi	r23, 0xFF	; 255
    2f9a:	c5 01       	movw	r24, r10
    2f9c:	2c 87       	std	Y+12, r18	; 0x0c
    2f9e:	2a d1       	rcall	.+596    	; 0x31f4 <strnlen_P>
    2fa0:	2c 01       	movw	r4, r24
    2fa2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fa4:	20 68       	ori	r18, 0x80	; 128
    2fa6:	22 2e       	mov	r2, r18
    2fa8:	83 01       	movw	r16, r6
    2faa:	23 fc       	sbrc	r2, 3
    2fac:	19 c0       	rjmp	.+50     	; 0x2fe0 <vfprintf+0x1c8>
    2fae:	83 2d       	mov	r24, r3
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	48 16       	cp	r4, r24
    2fb4:	59 06       	cpc	r5, r25
    2fb6:	a0 f4       	brcc	.+40     	; 0x2fe0 <vfprintf+0x1c8>
    2fb8:	b7 01       	movw	r22, r14
    2fba:	80 e2       	ldi	r24, 0x20	; 32
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	30 d1       	rcall	.+608    	; 0x3220 <fputc>
    2fc0:	3a 94       	dec	r3
    2fc2:	f5 cf       	rjmp	.-22     	; 0x2fae <vfprintf+0x196>
    2fc4:	f5 01       	movw	r30, r10
    2fc6:	27 fc       	sbrc	r2, 7
    2fc8:	85 91       	lpm	r24, Z+
    2fca:	27 fe       	sbrs	r2, 7
    2fcc:	81 91       	ld	r24, Z+
    2fce:	5f 01       	movw	r10, r30
    2fd0:	b7 01       	movw	r22, r14
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	25 d1       	rcall	.+586    	; 0x3220 <fputc>
    2fd6:	31 10       	cpse	r3, r1
    2fd8:	3a 94       	dec	r3
    2fda:	f1 e0       	ldi	r31, 0x01	; 1
    2fdc:	4f 1a       	sub	r4, r31
    2fde:	51 08       	sbc	r5, r1
    2fe0:	41 14       	cp	r4, r1
    2fe2:	51 04       	cpc	r5, r1
    2fe4:	79 f7       	brne	.-34     	; 0x2fc4 <vfprintf+0x1ac>
    2fe6:	de c0       	rjmp	.+444    	; 0x31a4 <vfprintf+0x38c>
    2fe8:	84 36       	cpi	r24, 0x64	; 100
    2fea:	11 f0       	breq	.+4      	; 0x2ff0 <vfprintf+0x1d8>
    2fec:	89 36       	cpi	r24, 0x69	; 105
    2fee:	31 f5       	brne	.+76     	; 0x303c <vfprintf+0x224>
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	27 ff       	sbrs	r18, 7
    2ff4:	07 c0       	rjmp	.+14     	; 0x3004 <vfprintf+0x1ec>
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	0c 5f       	subi	r16, 0xFC	; 252
    3000:	1f 4f       	sbci	r17, 0xFF	; 255
    3002:	08 c0       	rjmp	.+16     	; 0x3014 <vfprintf+0x1fc>
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	07 2e       	mov	r0, r23
    300a:	00 0c       	add	r0, r0
    300c:	88 0b       	sbc	r24, r24
    300e:	99 0b       	sbc	r25, r25
    3010:	0e 5f       	subi	r16, 0xFE	; 254
    3012:	1f 4f       	sbci	r17, 0xFF	; 255
    3014:	2f 76       	andi	r18, 0x6F	; 111
    3016:	72 2e       	mov	r7, r18
    3018:	97 ff       	sbrs	r25, 7
    301a:	09 c0       	rjmp	.+18     	; 0x302e <vfprintf+0x216>
    301c:	90 95       	com	r25
    301e:	80 95       	com	r24
    3020:	70 95       	com	r23
    3022:	61 95       	neg	r22
    3024:	7f 4f       	sbci	r23, 0xFF	; 255
    3026:	8f 4f       	sbci	r24, 0xFF	; 255
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	20 68       	ori	r18, 0x80	; 128
    302c:	72 2e       	mov	r7, r18
    302e:	2a e0       	ldi	r18, 0x0A	; 10
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	a4 01       	movw	r20, r8
    3034:	2d d1       	rcall	.+602    	; 0x3290 <__ultoa_invert>
    3036:	a8 2e       	mov	r10, r24
    3038:	a8 18       	sub	r10, r8
    303a:	43 c0       	rjmp	.+134    	; 0x30c2 <vfprintf+0x2aa>
    303c:	85 37       	cpi	r24, 0x75	; 117
    303e:	29 f4       	brne	.+10     	; 0x304a <vfprintf+0x232>
    3040:	2f 7e       	andi	r18, 0xEF	; 239
    3042:	b2 2e       	mov	r11, r18
    3044:	2a e0       	ldi	r18, 0x0A	; 10
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	25 c0       	rjmp	.+74     	; 0x3094 <vfprintf+0x27c>
    304a:	f2 2f       	mov	r31, r18
    304c:	f9 7f       	andi	r31, 0xF9	; 249
    304e:	bf 2e       	mov	r11, r31
    3050:	8f 36       	cpi	r24, 0x6F	; 111
    3052:	c1 f0       	breq	.+48     	; 0x3084 <vfprintf+0x26c>
    3054:	18 f4       	brcc	.+6      	; 0x305c <vfprintf+0x244>
    3056:	88 35       	cpi	r24, 0x58	; 88
    3058:	79 f0       	breq	.+30     	; 0x3078 <vfprintf+0x260>
    305a:	ad c0       	rjmp	.+346    	; 0x31b6 <vfprintf+0x39e>
    305c:	80 37       	cpi	r24, 0x70	; 112
    305e:	19 f0       	breq	.+6      	; 0x3066 <vfprintf+0x24e>
    3060:	88 37       	cpi	r24, 0x78	; 120
    3062:	21 f0       	breq	.+8      	; 0x306c <vfprintf+0x254>
    3064:	a8 c0       	rjmp	.+336    	; 0x31b6 <vfprintf+0x39e>
    3066:	2f 2f       	mov	r18, r31
    3068:	20 61       	ori	r18, 0x10	; 16
    306a:	b2 2e       	mov	r11, r18
    306c:	b4 fe       	sbrs	r11, 4
    306e:	0d c0       	rjmp	.+26     	; 0x308a <vfprintf+0x272>
    3070:	8b 2d       	mov	r24, r11
    3072:	84 60       	ori	r24, 0x04	; 4
    3074:	b8 2e       	mov	r11, r24
    3076:	09 c0       	rjmp	.+18     	; 0x308a <vfprintf+0x272>
    3078:	24 ff       	sbrs	r18, 4
    307a:	0a c0       	rjmp	.+20     	; 0x3090 <vfprintf+0x278>
    307c:	9f 2f       	mov	r25, r31
    307e:	96 60       	ori	r25, 0x06	; 6
    3080:	b9 2e       	mov	r11, r25
    3082:	06 c0       	rjmp	.+12     	; 0x3090 <vfprintf+0x278>
    3084:	28 e0       	ldi	r18, 0x08	; 8
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	05 c0       	rjmp	.+10     	; 0x3094 <vfprintf+0x27c>
    308a:	20 e1       	ldi	r18, 0x10	; 16
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <vfprintf+0x27c>
    3090:	20 e1       	ldi	r18, 0x10	; 16
    3092:	32 e0       	ldi	r19, 0x02	; 2
    3094:	f8 01       	movw	r30, r16
    3096:	b7 fe       	sbrs	r11, 7
    3098:	07 c0       	rjmp	.+14     	; 0x30a8 <vfprintf+0x290>
    309a:	60 81       	ld	r22, Z
    309c:	71 81       	ldd	r23, Z+1	; 0x01
    309e:	82 81       	ldd	r24, Z+2	; 0x02
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	0c 5f       	subi	r16, 0xFC	; 252
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	06 c0       	rjmp	.+12     	; 0x30b4 <vfprintf+0x29c>
    30a8:	60 81       	ld	r22, Z
    30aa:	71 81       	ldd	r23, Z+1	; 0x01
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 5f       	subi	r16, 0xFE	; 254
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	a4 01       	movw	r20, r8
    30b6:	ec d0       	rcall	.+472    	; 0x3290 <__ultoa_invert>
    30b8:	a8 2e       	mov	r10, r24
    30ba:	a8 18       	sub	r10, r8
    30bc:	fb 2d       	mov	r31, r11
    30be:	ff 77       	andi	r31, 0x7F	; 127
    30c0:	7f 2e       	mov	r7, r31
    30c2:	76 fe       	sbrs	r7, 6
    30c4:	0b c0       	rjmp	.+22     	; 0x30dc <vfprintf+0x2c4>
    30c6:	37 2d       	mov	r19, r7
    30c8:	3e 7f       	andi	r19, 0xFE	; 254
    30ca:	a5 14       	cp	r10, r5
    30cc:	50 f4       	brcc	.+20     	; 0x30e2 <vfprintf+0x2ca>
    30ce:	74 fe       	sbrs	r7, 4
    30d0:	0a c0       	rjmp	.+20     	; 0x30e6 <vfprintf+0x2ce>
    30d2:	72 fc       	sbrc	r7, 2
    30d4:	08 c0       	rjmp	.+16     	; 0x30e6 <vfprintf+0x2ce>
    30d6:	37 2d       	mov	r19, r7
    30d8:	3e 7e       	andi	r19, 0xEE	; 238
    30da:	05 c0       	rjmp	.+10     	; 0x30e6 <vfprintf+0x2ce>
    30dc:	ba 2c       	mov	r11, r10
    30de:	37 2d       	mov	r19, r7
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <vfprintf+0x2d0>
    30e2:	ba 2c       	mov	r11, r10
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <vfprintf+0x2d0>
    30e6:	b5 2c       	mov	r11, r5
    30e8:	34 ff       	sbrs	r19, 4
    30ea:	0d c0       	rjmp	.+26     	; 0x3106 <vfprintf+0x2ee>
    30ec:	fe 01       	movw	r30, r28
    30ee:	ea 0d       	add	r30, r10
    30f0:	f1 1d       	adc	r31, r1
    30f2:	80 81       	ld	r24, Z
    30f4:	80 33       	cpi	r24, 0x30	; 48
    30f6:	11 f4       	brne	.+4      	; 0x30fc <vfprintf+0x2e4>
    30f8:	39 7e       	andi	r19, 0xE9	; 233
    30fa:	09 c0       	rjmp	.+18     	; 0x310e <vfprintf+0x2f6>
    30fc:	32 ff       	sbrs	r19, 2
    30fe:	06 c0       	rjmp	.+12     	; 0x310c <vfprintf+0x2f4>
    3100:	b3 94       	inc	r11
    3102:	b3 94       	inc	r11
    3104:	04 c0       	rjmp	.+8      	; 0x310e <vfprintf+0x2f6>
    3106:	83 2f       	mov	r24, r19
    3108:	86 78       	andi	r24, 0x86	; 134
    310a:	09 f0       	breq	.+2      	; 0x310e <vfprintf+0x2f6>
    310c:	b3 94       	inc	r11
    310e:	33 fd       	sbrc	r19, 3
    3110:	12 c0       	rjmp	.+36     	; 0x3136 <vfprintf+0x31e>
    3112:	30 ff       	sbrs	r19, 0
    3114:	06 c0       	rjmp	.+12     	; 0x3122 <vfprintf+0x30a>
    3116:	5a 2c       	mov	r5, r10
    3118:	b3 14       	cp	r11, r3
    311a:	18 f4       	brcc	.+6      	; 0x3122 <vfprintf+0x30a>
    311c:	53 0c       	add	r5, r3
    311e:	5b 18       	sub	r5, r11
    3120:	b3 2c       	mov	r11, r3
    3122:	b3 14       	cp	r11, r3
    3124:	60 f4       	brcc	.+24     	; 0x313e <vfprintf+0x326>
    3126:	b7 01       	movw	r22, r14
    3128:	80 e2       	ldi	r24, 0x20	; 32
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	3c 87       	std	Y+12, r19	; 0x0c
    312e:	78 d0       	rcall	.+240    	; 0x3220 <fputc>
    3130:	b3 94       	inc	r11
    3132:	3c 85       	ldd	r19, Y+12	; 0x0c
    3134:	f6 cf       	rjmp	.-20     	; 0x3122 <vfprintf+0x30a>
    3136:	b3 14       	cp	r11, r3
    3138:	10 f4       	brcc	.+4      	; 0x313e <vfprintf+0x326>
    313a:	3b 18       	sub	r3, r11
    313c:	01 c0       	rjmp	.+2      	; 0x3140 <vfprintf+0x328>
    313e:	31 2c       	mov	r3, r1
    3140:	34 ff       	sbrs	r19, 4
    3142:	11 c0       	rjmp	.+34     	; 0x3166 <vfprintf+0x34e>
    3144:	b7 01       	movw	r22, r14
    3146:	80 e3       	ldi	r24, 0x30	; 48
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	3c 87       	std	Y+12, r19	; 0x0c
    314c:	69 d0       	rcall	.+210    	; 0x3220 <fputc>
    314e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3150:	32 ff       	sbrs	r19, 2
    3152:	16 c0       	rjmp	.+44     	; 0x3180 <vfprintf+0x368>
    3154:	31 fd       	sbrc	r19, 1
    3156:	03 c0       	rjmp	.+6      	; 0x315e <vfprintf+0x346>
    3158:	88 e7       	ldi	r24, 0x78	; 120
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <vfprintf+0x34a>
    315e:	88 e5       	ldi	r24, 0x58	; 88
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	b7 01       	movw	r22, r14
    3164:	0c c0       	rjmp	.+24     	; 0x317e <vfprintf+0x366>
    3166:	83 2f       	mov	r24, r19
    3168:	86 78       	andi	r24, 0x86	; 134
    316a:	51 f0       	breq	.+20     	; 0x3180 <vfprintf+0x368>
    316c:	31 ff       	sbrs	r19, 1
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <vfprintf+0x35c>
    3170:	8b e2       	ldi	r24, 0x2B	; 43
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <vfprintf+0x35e>
    3174:	80 e2       	ldi	r24, 0x20	; 32
    3176:	37 fd       	sbrc	r19, 7
    3178:	8d e2       	ldi	r24, 0x2D	; 45
    317a:	b7 01       	movw	r22, r14
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	50 d0       	rcall	.+160    	; 0x3220 <fputc>
    3180:	a5 14       	cp	r10, r5
    3182:	30 f4       	brcc	.+12     	; 0x3190 <vfprintf+0x378>
    3184:	b7 01       	movw	r22, r14
    3186:	80 e3       	ldi	r24, 0x30	; 48
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	4a d0       	rcall	.+148    	; 0x3220 <fputc>
    318c:	5a 94       	dec	r5
    318e:	f8 cf       	rjmp	.-16     	; 0x3180 <vfprintf+0x368>
    3190:	aa 94       	dec	r10
    3192:	f4 01       	movw	r30, r8
    3194:	ea 0d       	add	r30, r10
    3196:	f1 1d       	adc	r31, r1
    3198:	80 81       	ld	r24, Z
    319a:	b7 01       	movw	r22, r14
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	40 d0       	rcall	.+128    	; 0x3220 <fputc>
    31a0:	a1 10       	cpse	r10, r1
    31a2:	f6 cf       	rjmp	.-20     	; 0x3190 <vfprintf+0x378>
    31a4:	33 20       	and	r3, r3
    31a6:	09 f4       	brne	.+2      	; 0x31aa <vfprintf+0x392>
    31a8:	5d ce       	rjmp	.-838    	; 0x2e64 <vfprintf+0x4c>
    31aa:	b7 01       	movw	r22, r14
    31ac:	80 e2       	ldi	r24, 0x20	; 32
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	37 d0       	rcall	.+110    	; 0x3220 <fputc>
    31b2:	3a 94       	dec	r3
    31b4:	f7 cf       	rjmp	.-18     	; 0x31a4 <vfprintf+0x38c>
    31b6:	f7 01       	movw	r30, r14
    31b8:	86 81       	ldd	r24, Z+6	; 0x06
    31ba:	97 81       	ldd	r25, Z+7	; 0x07
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <vfprintf+0x3aa>
    31be:	8f ef       	ldi	r24, 0xFF	; 255
    31c0:	9f ef       	ldi	r25, 0xFF	; 255
    31c2:	2c 96       	adiw	r28, 0x0c	; 12
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	ff 90       	pop	r15
    31d8:	ef 90       	pop	r14
    31da:	df 90       	pop	r13
    31dc:	cf 90       	pop	r12
    31de:	bf 90       	pop	r11
    31e0:	af 90       	pop	r10
    31e2:	9f 90       	pop	r9
    31e4:	8f 90       	pop	r8
    31e6:	7f 90       	pop	r7
    31e8:	6f 90       	pop	r6
    31ea:	5f 90       	pop	r5
    31ec:	4f 90       	pop	r4
    31ee:	3f 90       	pop	r3
    31f0:	2f 90       	pop	r2
    31f2:	08 95       	ret

000031f4 <strnlen_P>:
    31f4:	fc 01       	movw	r30, r24
    31f6:	05 90       	lpm	r0, Z+
    31f8:	61 50       	subi	r22, 0x01	; 1
    31fa:	70 40       	sbci	r23, 0x00	; 0
    31fc:	01 10       	cpse	r0, r1
    31fe:	d8 f7       	brcc	.-10     	; 0x31f6 <strnlen_P+0x2>
    3200:	80 95       	com	r24
    3202:	90 95       	com	r25
    3204:	8e 0f       	add	r24, r30
    3206:	9f 1f       	adc	r25, r31
    3208:	08 95       	ret

0000320a <strnlen>:
    320a:	fc 01       	movw	r30, r24
    320c:	61 50       	subi	r22, 0x01	; 1
    320e:	70 40       	sbci	r23, 0x00	; 0
    3210:	01 90       	ld	r0, Z+
    3212:	01 10       	cpse	r0, r1
    3214:	d8 f7       	brcc	.-10     	; 0x320c <strnlen+0x2>
    3216:	80 95       	com	r24
    3218:	90 95       	com	r25
    321a:	8e 0f       	add	r24, r30
    321c:	9f 1f       	adc	r25, r31
    321e:	08 95       	ret

00003220 <fputc>:
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	fb 01       	movw	r30, r22
    322a:	23 81       	ldd	r18, Z+3	; 0x03
    322c:	21 fd       	sbrc	r18, 1
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <fputc+0x16>
    3230:	8f ef       	ldi	r24, 0xFF	; 255
    3232:	9f ef       	ldi	r25, 0xFF	; 255
    3234:	28 c0       	rjmp	.+80     	; 0x3286 <fputc+0x66>
    3236:	22 ff       	sbrs	r18, 2
    3238:	16 c0       	rjmp	.+44     	; 0x3266 <fputc+0x46>
    323a:	46 81       	ldd	r20, Z+6	; 0x06
    323c:	57 81       	ldd	r21, Z+7	; 0x07
    323e:	24 81       	ldd	r18, Z+4	; 0x04
    3240:	35 81       	ldd	r19, Z+5	; 0x05
    3242:	42 17       	cp	r20, r18
    3244:	53 07       	cpc	r21, r19
    3246:	44 f4       	brge	.+16     	; 0x3258 <fputc+0x38>
    3248:	a0 81       	ld	r26, Z
    324a:	b1 81       	ldd	r27, Z+1	; 0x01
    324c:	9d 01       	movw	r18, r26
    324e:	2f 5f       	subi	r18, 0xFF	; 255
    3250:	3f 4f       	sbci	r19, 0xFF	; 255
    3252:	31 83       	std	Z+1, r19	; 0x01
    3254:	20 83       	st	Z, r18
    3256:	8c 93       	st	X, r24
    3258:	26 81       	ldd	r18, Z+6	; 0x06
    325a:	37 81       	ldd	r19, Z+7	; 0x07
    325c:	2f 5f       	subi	r18, 0xFF	; 255
    325e:	3f 4f       	sbci	r19, 0xFF	; 255
    3260:	37 83       	std	Z+7, r19	; 0x07
    3262:	26 83       	std	Z+6, r18	; 0x06
    3264:	10 c0       	rjmp	.+32     	; 0x3286 <fputc+0x66>
    3266:	eb 01       	movw	r28, r22
    3268:	09 2f       	mov	r16, r25
    326a:	18 2f       	mov	r17, r24
    326c:	00 84       	ldd	r0, Z+8	; 0x08
    326e:	f1 85       	ldd	r31, Z+9	; 0x09
    3270:	e0 2d       	mov	r30, r0
    3272:	19 95       	eicall
    3274:	89 2b       	or	r24, r25
    3276:	e1 f6       	brne	.-72     	; 0x3230 <fputc+0x10>
    3278:	8e 81       	ldd	r24, Y+6	; 0x06
    327a:	9f 81       	ldd	r25, Y+7	; 0x07
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	9f 83       	std	Y+7, r25	; 0x07
    3280:	8e 83       	std	Y+6, r24	; 0x06
    3282:	81 2f       	mov	r24, r17
    3284:	90 2f       	mov	r25, r16
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	08 95       	ret

00003290 <__ultoa_invert>:
    3290:	fa 01       	movw	r30, r20
    3292:	aa 27       	eor	r26, r26
    3294:	28 30       	cpi	r18, 0x08	; 8
    3296:	51 f1       	breq	.+84     	; 0x32ec <__ultoa_invert+0x5c>
    3298:	20 31       	cpi	r18, 0x10	; 16
    329a:	81 f1       	breq	.+96     	; 0x32fc <__ultoa_invert+0x6c>
    329c:	e8 94       	clt
    329e:	6f 93       	push	r22
    32a0:	6e 7f       	andi	r22, 0xFE	; 254
    32a2:	6e 5f       	subi	r22, 0xFE	; 254
    32a4:	7f 4f       	sbci	r23, 0xFF	; 255
    32a6:	8f 4f       	sbci	r24, 0xFF	; 255
    32a8:	9f 4f       	sbci	r25, 0xFF	; 255
    32aa:	af 4f       	sbci	r26, 0xFF	; 255
    32ac:	b1 e0       	ldi	r27, 0x01	; 1
    32ae:	3e d0       	rcall	.+124    	; 0x332c <__ultoa_invert+0x9c>
    32b0:	b4 e0       	ldi	r27, 0x04	; 4
    32b2:	3c d0       	rcall	.+120    	; 0x332c <__ultoa_invert+0x9c>
    32b4:	67 0f       	add	r22, r23
    32b6:	78 1f       	adc	r23, r24
    32b8:	89 1f       	adc	r24, r25
    32ba:	9a 1f       	adc	r25, r26
    32bc:	a1 1d       	adc	r26, r1
    32be:	68 0f       	add	r22, r24
    32c0:	79 1f       	adc	r23, r25
    32c2:	8a 1f       	adc	r24, r26
    32c4:	91 1d       	adc	r25, r1
    32c6:	a1 1d       	adc	r26, r1
    32c8:	6a 0f       	add	r22, r26
    32ca:	71 1d       	adc	r23, r1
    32cc:	81 1d       	adc	r24, r1
    32ce:	91 1d       	adc	r25, r1
    32d0:	a1 1d       	adc	r26, r1
    32d2:	20 d0       	rcall	.+64     	; 0x3314 <__ultoa_invert+0x84>
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <__ultoa_invert+0x48>
    32d6:	68 94       	set
    32d8:	3f 91       	pop	r19
    32da:	2a e0       	ldi	r18, 0x0A	; 10
    32dc:	26 9f       	mul	r18, r22
    32de:	11 24       	eor	r1, r1
    32e0:	30 19       	sub	r19, r0
    32e2:	30 5d       	subi	r19, 0xD0	; 208
    32e4:	31 93       	st	Z+, r19
    32e6:	de f6       	brtc	.-74     	; 0x329e <__ultoa_invert+0xe>
    32e8:	cf 01       	movw	r24, r30
    32ea:	08 95       	ret
    32ec:	46 2f       	mov	r20, r22
    32ee:	47 70       	andi	r20, 0x07	; 7
    32f0:	40 5d       	subi	r20, 0xD0	; 208
    32f2:	41 93       	st	Z+, r20
    32f4:	b3 e0       	ldi	r27, 0x03	; 3
    32f6:	0f d0       	rcall	.+30     	; 0x3316 <__ultoa_invert+0x86>
    32f8:	c9 f7       	brne	.-14     	; 0x32ec <__ultoa_invert+0x5c>
    32fa:	f6 cf       	rjmp	.-20     	; 0x32e8 <__ultoa_invert+0x58>
    32fc:	46 2f       	mov	r20, r22
    32fe:	4f 70       	andi	r20, 0x0F	; 15
    3300:	40 5d       	subi	r20, 0xD0	; 208
    3302:	4a 33       	cpi	r20, 0x3A	; 58
    3304:	18 f0       	brcs	.+6      	; 0x330c <__ultoa_invert+0x7c>
    3306:	49 5d       	subi	r20, 0xD9	; 217
    3308:	31 fd       	sbrc	r19, 1
    330a:	40 52       	subi	r20, 0x20	; 32
    330c:	41 93       	st	Z+, r20
    330e:	02 d0       	rcall	.+4      	; 0x3314 <__ultoa_invert+0x84>
    3310:	a9 f7       	brne	.-22     	; 0x32fc <__ultoa_invert+0x6c>
    3312:	ea cf       	rjmp	.-44     	; 0x32e8 <__ultoa_invert+0x58>
    3314:	b4 e0       	ldi	r27, 0x04	; 4
    3316:	a6 95       	lsr	r26
    3318:	97 95       	ror	r25
    331a:	87 95       	ror	r24
    331c:	77 95       	ror	r23
    331e:	67 95       	ror	r22
    3320:	ba 95       	dec	r27
    3322:	c9 f7       	brne	.-14     	; 0x3316 <__ultoa_invert+0x86>
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	61 05       	cpc	r22, r1
    3328:	71 05       	cpc	r23, r1
    332a:	08 95       	ret
    332c:	9b 01       	movw	r18, r22
    332e:	ac 01       	movw	r20, r24
    3330:	0a 2e       	mov	r0, r26
    3332:	06 94       	lsr	r0
    3334:	57 95       	ror	r21
    3336:	47 95       	ror	r20
    3338:	37 95       	ror	r19
    333a:	27 95       	ror	r18
    333c:	ba 95       	dec	r27
    333e:	c9 f7       	brne	.-14     	; 0x3332 <__ultoa_invert+0xa2>
    3340:	62 0f       	add	r22, r18
    3342:	73 1f       	adc	r23, r19
    3344:	84 1f       	adc	r24, r20
    3346:	95 1f       	adc	r25, r21
    3348:	a0 1d       	adc	r26, r0
    334a:	08 95       	ret

0000334c <_exit>:
    334c:	f8 94       	cli

0000334e <__stop_program>:
    334e:	ff cf       	rjmp	.-2      	; 0x334e <__stop_program>
