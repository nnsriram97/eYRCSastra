
Task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800206  00800206  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dcd  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c20  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d4  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c9  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000027c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e3       	ldi	r30, 0x38	; 56
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 33       	cpi	r26, 0x31	; 49
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	68 d0       	rcall	.+208    	; 0x1f0 <main>
 120:	89 c0       	rjmp	.+274    	; 0x234 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
	
}status;

//ZigBee
ISR(USART0_RX_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	char data = UDR0;
 13a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	//check if data or command
	if(data & 0x80)
 13e:	88 23       	and	r24, r24
 140:	0c f0       	brlt	.+2      	; 0x144 <__vector_25+0x20>
 142:	42 c0       	rjmp	.+132    	; 0x1c8 <__vector_25+0xa4>
	{
		//data
		switch(lastCommand)
 144:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
 148:	94 30       	cpi	r25, 0x04	; 4
 14a:	21 f1       	breq	.+72     	; 0x194 <__vector_25+0x70>
 14c:	28 f4       	brcc	.+10     	; 0x158 <__vector_25+0x34>
 14e:	91 30       	cpi	r25, 0x01	; 1
 150:	49 f0       	breq	.+18     	; 0x164 <__vector_25+0x40>
 152:	93 30       	cpi	r25, 0x03	; 3
 154:	99 f0       	breq	.+38     	; 0x17c <__vector_25+0x58>
 156:	41 c0       	rjmp	.+130    	; 0x1da <__vector_25+0xb6>
 158:	96 30       	cpi	r25, 0x06	; 6
 15a:	11 f1       	breq	.+68     	; 0x1a0 <__vector_25+0x7c>
 15c:	f0 f0       	brcs	.+60     	; 0x19a <__vector_25+0x76>
 15e:	97 30       	cpi	r25, 0x07	; 7
 160:	49 f1       	breq	.+82     	; 0x1b4 <__vector_25+0x90>
 162:	3b c0       	rjmp	.+118    	; 0x1da <__vector_25+0xb6>
		{
			case RC_NOT_S:
			notes[(int)noteCount] = data;
 164:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <noteCount>
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e4 5e       	subi	r30, 0xE4	; 228
 16c:	fd 4f       	sbci	r31, 0xFD	; 253
 16e:	80 83       	st	Z, r24
			noteCount++;
 170:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <noteCount>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <noteCount>
			break;
 17a:	2f c0       	rjmp	.+94     	; 0x1da <__vector_25+0xb6>
			
			case ADD_TASK:
			tasks[(int)taskCount] = data;
 17c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e8 5f       	subi	r30, 0xF8	; 248
 184:	fd 4f       	sbci	r31, 0xFD	; 253
 186:	80 83       	st	Z, r24
			taskCount++;
 188:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
			break;
 192:	23 c0       	rjmp	.+70     	; 0x1da <__vector_25+0xb6>
			
			case NODE_RCH:
			otherBotLocation = data;
 194:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <otherBotLocation>
			break;
 198:	20 c0       	rjmp	.+64     	; 0x1da <__vector_25+0xb6>
			
			case NXT_NODE:
			otherBotMovingTo = data;
 19a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <otherBotMovingTo>
			break;
 19e:	1d c0       	rjmp	.+58     	; 0x1da <__vector_25+0xb6>
			
			case NOTE_STK:
			if(noteToStrike == data)
 1a0:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <noteToStrike>
 1a4:	98 13       	cpse	r25, r24
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <__vector_25+0xb6>
			noteToStrike++;
 1a8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <noteToStrike>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <noteToStrike>
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <__vector_25+0xb6>
			break;
			
			case PRC_NOTE:
			if(noteToProcess == data)
 1b4:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <noteToProcess>
 1b8:	98 13       	cpse	r25, r24
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <__vector_25+0xb6>
			noteToProcess++;
 1bc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <noteToProcess>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <noteToProcess>
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <__vector_25+0xb6>
			
		}
	}
	else
	{	//command
		lastCommand = data;
 1c8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		switch(data)
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	29 f4       	brne	.+10     	; 0x1da <__vector_25+0xb6>
		{
			case RC_NOT_E:
			status.notesReceived = 1;
 1d0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <status>
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <status>
			break;
		}
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <main>:
 actual baud rate:9600 (error 0.0%)
 char size: 8 bit
 parity: Disabled */
void inline uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 1f0:	e1 ec       	ldi	r30, 0xC1	; 193
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 1f6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
 1fa:	26 e0       	ldi	r18, 0x06	; 6
 1fc:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
 200:	9f e5       	ldi	r25, 0x5F	; 95
 202:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
 206:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
 20a:	88 e9       	ldi	r24, 0x98	; 152
 20c:	80 83       	st	Z, r24
actual baud rate:9600 (error 0.0%)
char size: 8 bit
parity: Disabled*/
void inline uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
 20e:	e1 ed       	ldi	r30, 0xD1	; 209
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	10 82       	st	Z, r1
	UCSR2A = 0x00;
 214:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	UCSR2C = 0x06;
 218:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
	UBRR2L = 0x5F; //set baud rate lo
 21c:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UBRR2H = 0x00; //set baud rate hi
 220:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UCSR2B = 0x98;
 224:	80 83       	st	Z, r24

int main()
{
	init();
	
	while(status.notesReceived);
 226:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <status>
 22a:	80 fd       	sbrc	r24, 0
 22c:	fc cf       	rjmp	.-8      	; 0x226 <main+0x36>
	#ifdef MASTER
	SendNotesToSlave();
	#endif

	return 0;
}
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
